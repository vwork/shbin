#!/bin/bash

# Do not modify this file.
# Add your services to ./services


# TODO: ask user for reboot when update is here

url=controller.sh.neroelectronics.by/binary

led 0 yellow
cd /smarthome

if [ ! -x server/services ] ; then
	echo cannot find executable /smarthome/server/services
	touch .updating_flag
fi
if [ ! -f .binary_hash ] ; then
	echo cannot find previous update flag
	touch .updating_flag
fi

pid=
restart="exec $0 $1 $2 $3 $4 $5 $6 $7 $8 $9"

function update {

	# if [ -n "$pid" ] ; then
	# 	echo rebooting for update
	# 	exec reboot
	# fi

	echo downloading update archive
	hash=$(wget -qS -O- $url 3>&1 1>/tmp/server_binary 2>&3 | grep ETag | grep -Eo '\w{20}\w*')
	if [ -z "$hash" ] ; then
		echo error getting update archive
	else
		echo testing update archive
		if gzip -t /tmp/server_binary ; then
			echo update archive is valid. fire.
			led 0 red
			touch .updating_flag
			if [ -n "$pid" ] ; then
				echo killing services
				kill -TERM -$pid
				echo waiting 1 sec
				sleep 1
			else
				echo no services to kill
			fi
			echo removing old programs
			rm -rf server
			sleep 1
			if [ -d server ] ; then
				echo cannot delete 'server' folder
			else
				mkdir -p "server/!!This folder will be deleted while updating!!"
				sleep 1
				if [ ! -d server ] ; then
					echo cannot create 'server' folder
				else
					echo uncompressing update archive
					pushd server
					tar -xzf /tmp/server_binary
					popd
					echo $hash>.binary_hash
					rm .updating_flag
					echo updating successfull
					echo restarting
					cp /smarthome/server/www/start_server /smarthome/start_server
					sync
					# do not return from updating. restart.
					sleep 2
					$restart
					echo ERROR RESTARTING !!!!!
				fi
			fi
		else
			echo error getting update
		fi
	fi
}

if [ -f .updating_flag ] ; then
	echo broken update found
	led 0 red
	update
	echo sleeping
	sleep 3
	echo restarting
	$restart
fi

echo starting services
pushd server
setsid ./services &
pid=$!
popd
echo services pid is $pid
echo $pid > /tmp/smarthome

while true ; do
	echo checking for updates
	hash=$(wget -qS --spider $url 2>&1 | grep ETag | grep -Eo '\w{20}\w*')
	if [ -z "$hash" ] ; then
		echo error getting update version
	else
		echo $hash>/tmp/.binary_hash
		if diff /tmp/.binary_hash .binary_hash ; then
			echo software is up to date
		else
			update
		fi
	fi
	echo sleeping: $0
	sleep 60
done
