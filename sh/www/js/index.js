(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/vadzim/v/work/nerojs/node_modules/babel-core/lib/babel/polyfill.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

require("core-js/shim");

require("regenerator/runtime");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel/polyfill is allowed");
}
global._babelPolyfill = true;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/lib/babel/polyfill.js","/node_modules/babel-core/lib/babel")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","core-js/shim":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/shim.js","regenerator/runtime":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/regenerator/runtime.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// false -> Array#indexOf
// true  -> Array#includes
var $ = require('./$');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = $.toObject($this)
      , length = $.toLength(O.length)
      , index  = $.toIndex(fromIndex, length)
      , value;
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index;
    } return !IS_INCLUDES && -1;
  };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var $   = require('./$')
  , ctx = require('./$.ctx');
module.exports = function(TYPE){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that){
    var O      = Object($.assertDefined($this))
      , self   = $.ES5Object(O)
      , f      = ctx(callbackfn, that, 3)
      , length = $.toLength(self.length)
      , index  = 0
      , result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $ = require('./$');
function assert(condition, msg1, msg2){
  if(!condition)throw TypeError(msg2 ? msg1 + msg2 : msg1);
}
assert.def = $.assertDefined;
assert.fn = function(it){
  if(!$.isFunction(it))throw TypeError(it + ' is not a function!');
  return it;
};
assert.obj = function(it){
  if(!$.isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
assert.inst = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
module.exports = assert;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assign.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $        = require('./$')
  , enumKeys = require('./$.enum-keys');
// 19.1.2.1 Object.assign(target, source, ...)
/* eslint-disable no-unused-vars */
module.exports = Object.assign || function assign(target, source){
/* eslint-enable no-unused-vars */
  var T = Object($.assertDefined(target))
    , l = arguments.length
    , i = 1;
  while(l > i){
    var S      = $.ES5Object(arguments[i++])
      , keys   = enumKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)T[key = keys[j++]] = S[key];
  }
  return T;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.assign.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.enum-keys":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $        = require('./$')
  , TAG      = require('./$.wks')('toStringTag')
  , toString = {}.toString;
function cof(it){
  return toString.call(it).slice(8, -1);
}
cof.classof = function(it){
  var O, T;
  return it == undefined ? it === undefined ? 'Undefined' : 'Null'
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
};
cof.set = function(it, tag, stat){
  if(it && !$.has(it = stat ? it : it.prototype, TAG))$.hide(it, TAG, tag);
};
module.exports = cof;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $        = require('./$')
  , ctx      = require('./$.ctx')
  , safe     = require('./$.uid').safe
  , assert   = require('./$.assert')
  , forOf    = require('./$.for-of')
  , step     = require('./$.iter').step
  , has      = $.has
  , set      = $.set
  , isObject = $.isObject
  , hide     = $.hide
  , isFrozen = Object.isFrozen || $.core.Object.isFrozen
  , ID       = safe('id')
  , O1       = safe('O1')
  , LAST     = safe('last')
  , FIRST    = safe('first')
  , ITER     = safe('iter')
  , SIZE     = $.DESC ? safe('size') : 'size'
  , id       = 0;

function fastKey(it, create){
  // return primitive with prefix
  if(!isObject(it))return (typeof it == 'string' ? 'S' : 'P') + it;
  // can't set id to frozen object
  if(isFrozen(it))return 'F';
  if(!has(it, ID)){
    // not necessary to add id
    if(!create)return 'E';
    // add missing object id
    hide(it, ID, ++id);
  // return object id with prefix
  } return 'O' + it[ID];
}

function getEntry(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index != 'F')return that[O1][index];
  // frozen object case
  for(entry = that[FIRST]; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
}

module.exports = {
  getConstructor: function(NAME, IS_MAP, ADDER){
    function C(){
      var that     = assert.inst(this, C, NAME)
        , iterable = arguments[0];
      set(that, O1, $.create(null));
      set(that, SIZE, 0);
      set(that, LAST, undefined);
      set(that, FIRST, undefined);
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    }
    require('./$.mix')(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that[FIRST] = that[LAST] = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that[O1][entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that[FIRST] == entry)that[FIRST] = next;
          if(that[LAST] == entry)that[LAST] = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        var f = ctx(callbackfn, arguments[1], 3)
          , entry;
        while(entry = entry ? entry.n : this[FIRST]){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if($.DESC)$.setDesc(C.prototype, 'size', {
      get: function(){
        return assert.def(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that[LAST] = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that[LAST],          // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that[FIRST])that[FIRST] = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index != 'F')that[O1][index] = entry;
    } return that;
  },
  getEntry: getEntry,
  // add .keys, .values, .entries, [@@iterator]
  // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
  setIter: function(C, NAME, IS_MAP){
    require('./$.iter-define')(C, NAME, function(iterated, kind){
      set(this, ITER, {o: iterated, k: kind});
    }, function(){
      var iter  = this[ITER]
        , kind  = iter.k
        , entry = iter.l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])){
        // or finish the iteration
        iter.o = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
  }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.for-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-define":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.mix":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $def  = require('./$.def')
  , forOf = require('./$.for-of');
module.exports = function(NAME){
  $def($def.P, NAME, {
    toJSON: function toJSON(){
      var arr = [];
      forOf(this, false, arr.push, arr);
      return arr;
    }
  });
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.for-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $         = require('./$')
  , safe      = require('./$.uid').safe
  , assert    = require('./$.assert')
  , forOf     = require('./$.for-of')
  , _has      = $.has
  , isObject  = $.isObject
  , hide      = $.hide
  , isFrozen  = Object.isFrozen || $.core.Object.isFrozen
  , id        = 0
  , ID        = safe('id')
  , WEAK      = safe('weak')
  , LEAK      = safe('leak')
  , method    = require('./$.array-methods')
  , find      = method(5)
  , findIndex = method(6);
function findFrozen(store, key){
  return find(store.array, function(it){
    return it[0] === key;
  });
}
// fallback for frozen keys
function leakStore(that){
  return that[LEAK] || hide(that, LEAK, {
    array: [],
    get: function(key){
      var entry = findFrozen(this, key);
      if(entry)return entry[1];
    },
    has: function(key){
      return !!findFrozen(this, key);
    },
    set: function(key, value){
      var entry = findFrozen(this, key);
      if(entry)entry[1] = value;
      else this.array.push([key, value]);
    },
    'delete': function(key){
      var index = findIndex(this.array, function(it){
        return it[0] === key;
      });
      if(~index)this.array.splice(index, 1);
      return !!~index;
    }
  })[LEAK];
}

module.exports = {
  getConstructor: function(NAME, IS_MAP, ADDER){
    function C(){
      $.set(assert.inst(this, C, NAME), ID, id++);
      var iterable = arguments[0];
      if(iterable != undefined)forOf(iterable, IS_MAP, this[ADDER], this);
    }
    require('./$.mix')(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        if(isFrozen(key))return leakStore(this)['delete'](key);
        return _has(key, WEAK) && _has(key[WEAK], this[ID]) && delete key[WEAK][this[ID]];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        if(isFrozen(key))return leakStore(this).has(key);
        return _has(key, WEAK) && _has(key[WEAK], this[ID]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    if(isFrozen(assert.obj(key))){
      leakStore(that).set(key, value);
    } else {
      _has(key, WEAK) || hide(key, WEAK, {});
      key[WEAK][that[ID]] = value;
    } return that;
  },
  leakStore: leakStore,
  WEAK: WEAK,
  ID: ID
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.array-methods":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.for-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.mix":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $     = require('./$')
  , $def  = require('./$.def')
  , BUGGY = require('./$.iter').BUGGY
  , forOf = require('./$.for-of')
  , species = require('./$.species')
  , assertInstance = require('./$.assert').inst;

module.exports = function(NAME, methods, common, IS_MAP, IS_WEAK){
  var Base  = $.g[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  function fixMethod(KEY, CHAIN){
    if($.FW){
      var method = proto[KEY];
      require('./$.redef')(proto, KEY, function(a, b){
        var result = method.call(this, a === 0 ? 0 : a, b);
        return CHAIN ? this : result;
      });
    }
  }
  if(!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)){
    // create collection constructor
    C = common.getConstructor(NAME, IS_MAP, ADDER);
    require('./$.mix')(C.prototype, methods);
  } else {
    var inst  = new C
      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
      , buggyZero;
    // wrap for init collections from iterable
    if(!require('./$.iter-detect')(function(iter){ new C(iter); })){ // eslint-disable-line no-new
      C = function(){
        assertInstance(this, C, NAME);
        var that     = new Base
          , iterable = arguments[0];
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      };
      C.prototype = proto;
      if($.FW)proto.constructor = C;
    }
    IS_WEAK || inst.forEach(function(val, key){
      buggyZero = 1 / key === -Infinity;
    });
    // fix converting -0 key to +0
    if(buggyZero){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    // + fix .add & .set for chaining
    if(buggyZero || chain !== inst)fixMethod(ADDER, true);
  }

  require('./$.cof').set(C, NAME);

  O[NAME] = C;
  $def($def.G + $def.W + $def.F * (C != Base), O);
  species(C);
  species($.core[NAME]); // for wrapper

  if(!IS_WEAK)common.setIter(C, NAME, IS_MAP);

  return C;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.for-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-detect":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.mix":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.species":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.species.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Optional / simple context binding
var assertFunction = require('./$.assert').fn;
module.exports = function(fn, that, length){
  assertFunction(fn);
  if(~length && that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  } return function(/* ...args */){
      return fn.apply(that, arguments);
    };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $          = require('./$')
  , global     = $.g
  , core       = $.core
  , isFunction = $.isFunction
  , $redef     = require('./$.redef');
function ctx(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
}
global.core = core;
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
function $def(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] : (global[name] || {}).prototype
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    if(type & $def.B && own)exp = ctx(out, global);
    else exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
    // extend global
    if(target && !own)$redef(target, key, out);
    // export
    if(exports[key] != out)$.hide(exports, key, exp);
    if(isProto)(exports.prototype || (exports.prototype = {}))[key] = out;
  }
}
module.exports = $def;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.def.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $        = require('./$')
  , document = $.g.document
  , isObject = $.isObject
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , getDesc    = $.getDesc
    , getSymbols = $.getSymbols;
  if(getSymbols)$.each.call(getSymbols(it), function(key){
    if(getDesc(it, key).enumerable)keys.push(key);
  });
  return keys;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var ctx  = require('./$.ctx')
  , get  = require('./$.iter').get
  , call = require('./$.iter-call');
module.exports = function(iterable, entries, fn, that){
  var iterator = get(iterable)
    , f        = ctx(fn, that, entries ? 2 : 1)
    , step;
  while(!(step = iterator.next()).done){
    if(call(iterator, f, step.value, entries) === false){
      return call.close(iterator);
    }
  }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-call":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.fw.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = function($){
  $.FW   = true;
  $.path = $.g;
  return $;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.fw.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Fast apply
// http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])
                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
  } return              fn.apply(that, args);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var assertObject = require('./$.assert').obj;
function close(iterator){
  var ret = iterator['return'];
  if(ret !== undefined)assertObject(ret.call(iterator));
}
function call(iterator, fn, value, entries){
  try {
    return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
  } catch(e){
    close(iterator);
    throw e;
  }
}
call.close = close;
module.exports = call;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $def            = require('./$.def')
  , $redef          = require('./$.redef')
  , $               = require('./$')
  , cof             = require('./$.cof')
  , $iter           = require('./$.iter')
  , SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , FF_ITERATOR     = '@@iterator'
  , KEYS            = 'keys'
  , VALUES          = 'values'
  , Iterators       = $iter.Iterators;
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
  $iter.create(Constructor, NAME, next);
  function createMethod(kind){
    function $$(that){
      return new Constructor(that, kind);
    }
    switch(kind){
      case KEYS: return function keys(){ return $$(this); };
      case VALUES: return function values(){ return $$(this); };
    } return function entries(){ return $$(this); };
  }
  var TAG      = NAME + ' Iterator'
    , proto    = Base.prototype
    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , _default = _native || createMethod(DEFAULT)
    , methods, key;
  // Fix native
  if(_native){
    var IteratorPrototype = $.getProto(_default.call(new Base));
    // Set @@toStringTag to native iterators
    cof.set(IteratorPrototype, TAG, true);
    // FF fix
    if($.FW && $.has(proto, FF_ITERATOR))$iter.set(IteratorPrototype, $.that);
  }
  // Define iterator
  if($.FW)$iter.set(proto, _default);
  // Plug for library
  Iterators[NAME] = _default;
  Iterators[TAG]  = $.that;
  if(DEFAULT){
    methods = {
      keys:    IS_SET            ? _default : createMethod(KEYS),
      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
      entries: DEFAULT != VALUES ? _default : createMethod('entries')
    };
    if(FORCE)for(key in methods){
      if(!(key in proto))$redef(proto, key, methods[key]);
    } else $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
  }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , SAFE_CLOSING    = false;
try {
  var riter = [7][SYMBOL_ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }
module.exports = function(exec){
  if(!SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[SYMBOL_ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[SYMBOL_ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $                 = require('./$')
  , cof               = require('./$.cof')
  , assertObject      = require('./$.assert').obj
  , SYMBOL_ITERATOR   = require('./$.wks')('iterator')
  , FF_ITERATOR       = '@@iterator'
  , Iterators         = {}
  , IteratorPrototype = {};
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
setIterator(IteratorPrototype, $.that);
function setIterator(O, value){
  $.hide(O, SYMBOL_ITERATOR, value);
  // Add iterator for FF iterator protocol
  if(FF_ITERATOR in [])$.hide(O, FF_ITERATOR, value);
}

module.exports = {
  // Safari has buggy iterators w/o `next`
  BUGGY: 'keys' in [] && !('next' in [].keys()),
  Iterators: Iterators,
  step: function(done, value){
    return {value: value, done: !!done};
  },
  is: function(it){
    var O      = Object(it)
      , Symbol = $.g.Symbol
      , SYM    = Symbol && Symbol.iterator || FF_ITERATOR;
    return SYM in O || SYMBOL_ITERATOR in O || $.has(Iterators, cof.classof(O));
  },
  get: function(it){
    var Symbol  = $.g.Symbol
      , ext     = it[Symbol && Symbol.iterator || FF_ITERATOR]
      , getIter = ext || it[SYMBOL_ITERATOR] || Iterators[cof.classof(it)];
    return assertObject(getIter.call(it));
  },
  set: setIterator,
  create: function(Constructor, NAME, next, proto){
    Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
    cof.set(Constructor, NAME + ' Iterator');
  }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var global = typeof self != 'undefined' ? self : Function('return this')()
  , core   = {}
  , defineProperty = Object.defineProperty
  , hasOwnProperty = {}.hasOwnProperty
  , ceil  = Math.ceil
  , floor = Math.floor
  , max   = Math.max
  , min   = Math.min;
// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.
var DESC = !!function(){
  try {
    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;
  } catch(e){ /* empty */ }
}();
var hide = createDefiner(1);
// 7.1.4 ToInteger
function toInteger(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
}
function desc(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
}
function simpleSet(object, key, value){
  object[key] = value;
  return object;
}
function createDefiner(bitmap){
  return DESC ? function(object, key, value){
    return $.setDesc(object, key, desc(bitmap, value));
  } : simpleSet;
}

function isObject(it){
  return it !== null && (typeof it == 'object' || typeof it == 'function');
}
function isFunction(it){
  return typeof it == 'function';
}
function assertDefined(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
}

var $ = module.exports = require('./$.fw')({
  g: global,
  core: core,
  html: global.document && document.documentElement,
  // http://jsperf.com/core-js-isobject
  isObject:   isObject,
  isFunction: isFunction,
  it: function(it){
    return it;
  },
  that: function(){
    return this;
  },
  // 7.1.4 ToInteger
  toInteger: toInteger,
  // 7.1.15 ToLength
  toLength: function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  },
  toIndex: function(index, length){
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  },
  has: function(it, key){
    return hasOwnProperty.call(it, key);
  },
  create:     Object.create,
  getProto:   Object.getPrototypeOf,
  DESC:       DESC,
  desc:       desc,
  getDesc:    Object.getOwnPropertyDescriptor,
  setDesc:    defineProperty,
  setDescs:   Object.defineProperties,
  getKeys:    Object.keys,
  getNames:   Object.getOwnPropertyNames,
  getSymbols: Object.getOwnPropertySymbols,
  assertDefined: assertDefined,
  // Dummy, fix for not array-like ES3 string in es5 module
  ES5Object: Object,
  toObject: function(it){
    return $.ES5Object(assertDefined(it));
  },
  hide: hide,
  def: createDefiner(0),
  set: global.Symbol ? simpleSet : hide,
  each: [].forEach
});
/* eslint-disable no-undef */
if(typeof __e != 'undefined')__e = core;
if(typeof __g != 'undefined')__g = global;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.fw":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.fw.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $ = require('./$');
module.exports = function(object, el){
  var O      = $.toObject(object)
    , keys   = $.getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.mix.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $redef = require('./$.redef');
module.exports = function(target, src){
  for(var key in src)$redef(target, key, src[key]);
  return target;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $            = require('./$')
  , assertObject = require('./$.assert').obj;
module.exports = function ownKeys(it){
  assertObject(it);
  var keys       = $.getNames(it)
    , getSymbols = $.getSymbols;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.partial.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $      = require('./$')
  , invoke = require('./$.invoke')
  , assertFunction = require('./$.assert').fn;
module.exports = function(/* ...pargs */){
  var fn     = assertFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = $.path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that    = this
      , _length = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !_length)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(_length > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.partial.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.invoke":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $   = require('./$')
  , tpl = String({}.hasOwnProperty)
  , SRC = require('./$.uid').safe('src')
  , _toString = Function.toString;

function $redef(O, key, val, safe){
  if($.isFunction(val)){
    var base = O[key];
    $.hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
  }
  if(O === $.g){
    O[key] = val;
  } else {
    if(!safe)delete O[key];
    $.hide(O, key, val);
  }
}

// add fake Function#toString for correct work wrapped methods / constructors
// with methods similar to LoDash isNative
$redef(Function.prototype, 'toString', function toString(){
  return $.has(this, SRC) ? this[SRC] : _toString.call(this);
});

$.core.inspectSource = function(it){
  return _toString.call(it);
};

module.exports = $redef;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
module.exports = function(regExp, replace, isStatic){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(isStatic ? it : this).replace(regExp, replacer);
  };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var $      = require('./$')
  , assert = require('./$.assert');
function check(O, proto){
  assert.obj(O);
  assert(proto === null || $.isObject(proto), proto, ": can't set as prototype!");
}
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
    ? function(buggy, set){
        try {
          set = require('./$.ctx')(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
          set({}, []);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }()
    : undefined),
  check: check
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.species.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $       = require('./$')
  , SPECIES = require('./$.wks')('species');
module.exports = function(C){
  if($.DESC && !(SPECIES in C))$.setDesc(C, SPECIES, {
    configurable: true,
    get: $.that
  });
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.species.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// true  -> String#at
// false -> String#codePointAt
var $ = require('./$');
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String($.assertDefined(that))
      , i = $.toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l
      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
var $      = require('./$')
  , repeat = require('./$.string-repeat');

module.exports = function(that, minLength, fillChar, left){
  // 1. Let O be CheckObjectCoercible(this value).
  // 2. Let S be ToString(O).
  var S = String($.assertDefined(that));
  // 4. If intMinLength is undefined, return S.
  if(minLength === undefined)return S;
  // 4. Let intMinLength be ToInteger(minLength).
  var intMinLength = $.toInteger(minLength);
  // 5. Let fillLen be the number of characters in S minus intMinLength.
  var fillLen = intMinLength - S.length;
  // 6. If fillLen < 0, then throw a RangeError exception.
  // 7. If fillLen is +∞, then throw a RangeError exception.
  if(fillLen < 0 || fillLen === Infinity){
    throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
  }
  // 8. Let sFillStr be the string represented by fillStr.
  // 9. If sFillStr is undefined, let sFillStr be a space character.
  var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
  // 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
  var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
  // truncate if we overflowed
  if(sFillVal.length > fillLen)sFillVal = left
    ? sFillVal.slice(sFillVal.length - fillLen)
    : sFillVal.slice(0, fillLen);
  // 11. Return a string made from sFillVal, followed by S.
  // 11. Return a String made from S, followed by sFillVal.
  return left ? sFillVal.concat(S) : S.concat(sFillVal);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.string-repeat":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $ = require('./$');

module.exports = function repeat(count){
  var str = String($.assertDefined(this))
    , res = ''
    , n   = $.toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.task.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $      = require('./$')
  , ctx    = require('./$.ctx')
  , cof    = require('./$.cof')
  , invoke = require('./$.invoke')
  , cel    = require('./$.dom-create')
  , global             = $.g
  , isFunction         = $.isFunction
  , html               = $.html
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , postMessage        = global.postMessage
  , addEventListener   = global.addEventListener
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
function run(){
  var id = +this;
  if($.has(queue, id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
}
function listner(event){
  run.call(event.data);
}
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!isFunction(setTask) || !isFunction(clearTask)){
  setTask = function(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(isFunction(fn) ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(cof(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Modern browsers, skip implementation for WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is object
  } else if(addEventListener && isFunction(postMessage) && !global.importScripts){
    defer = function(id){
      postMessage(id, '*');
    };
    addEventListener('message', listner, false);
  // WebWorkers
  } else if(isFunction(MessageChannel)){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listner;
    defer = ctx(port.postMessage, port, 1);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.task.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.dom-create":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.invoke":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.throws.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = function(exec){
  try {
    exec();
    return false;
  } catch(e){
    return true;
  }
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.throws.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var sid = 0;
function uid(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
}
uid.safe = require('./$').g.Symbol || uid;
module.exports = uid;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// 22.1.3.31 Array.prototype[@@unscopables]
var $           = require('./$')
  , UNSCOPABLES = require('./$.wks')('unscopables');
if($.FW && !(UNSCOPABLES in []))$.hide(Array.prototype, UNSCOPABLES, {});
module.exports = function(key){
  if($.FW)[][UNSCOPABLES][key] = true;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var global = require('./$').g
  , store  = {};
module.exports = function(name){
  return store[name] || (store[name] =
    global.Symbol && global.Symbol[name] || require('./$.uid').safe('Symbol.' + name));
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es5.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $                = require('./$')
  , cel              = require('./$.dom-create')
  , cof              = require('./$.cof')
  , $def             = require('./$.def')
  , invoke           = require('./$.invoke')
  , arrayMethod      = require('./$.array-methods')
  , IE_PROTO         = require('./$.uid').safe('__proto__')
  , assert           = require('./$.assert')
  , assertObject     = assert.obj
  , ObjectProto      = Object.prototype
  , html             = $.html
  , A                = []
  , _slice           = A.slice
  , _join            = A.join
  , classof          = cof.classof
  , has              = $.has
  , defineProperty   = $.setDesc
  , getOwnDescriptor = $.getDesc
  , defineProperties = $.setDescs
  , isFunction       = $.isFunction
  , toObject         = $.toObject
  , toLength         = $.toLength
  , toIndex          = $.toIndex
  , IE8_DOM_DEFINE   = false
  , $indexOf         = require('./$.array-includes')(false)
  , $forEach         = arrayMethod(0)
  , $map             = arrayMethod(1)
  , $filter          = arrayMethod(2)
  , $some            = arrayMethod(3)
  , $every           = arrayMethod(4);

if(!$.DESC){
  try {
    IE8_DOM_DEFINE = defineProperty(cel('div'), 'x',
      {get: function(){ return 8; }}
    ).x == 8;
  } catch(e){ /* empty */ }
  $.setDesc = function(O, P, Attributes){
    if(IE8_DOM_DEFINE)try {
      return defineProperty(O, P, Attributes);
    } catch(e){ /* empty */ }
    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
    if('value' in Attributes)assertObject(O)[P] = Attributes.value;
    return O;
  };
  $.getDesc = function(O, P){
    if(IE8_DOM_DEFINE)try {
      return getOwnDescriptor(O, P);
    } catch(e){ /* empty */ }
    if(has(O, P))return $.desc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
  };
  $.setDescs = defineProperties = function(O, Properties){
    assertObject(O);
    var keys   = $.getKeys(Properties)
      , length = keys.length
      , i = 0
      , P;
    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
    return O;
  };
}
$def($def.S + $def.F * !$.DESC, 'Object', {
  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $.getDesc,
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  defineProperty: $.setDesc,
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  defineProperties: defineProperties
});

  // IE 8- don't enum bug keys
var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
            'toLocaleString,toString,valueOf').split(',')
  // Additional keys for getOwnPropertyNames
  , keys2 = keys1.concat('length', 'prototype')
  , keysLen1 = keys1.length;

// Create object with `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = cel('iframe')
    , i      = keysLen1
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write('<script>document.F=Object</script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict.prototype[keys1[i]];
  return createDict();
};
function createGetKeys(names, length){
  return function(object){
    var O      = toObject(object)
      , i      = 0
      , result = []
      , key;
    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(length > i)if(has(O, key = names[i++])){
      ~$indexOf(result, key) || result.push(key);
    }
    return result;
  };
}
function isPrimitive(it){ return !$.isObject(it); }
function Empty(){}
$def($def.S, 'Object', {
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  getPrototypeOf: $.getProto = $.getProto || function(O){
    O = Object(assert.def(O));
    if(has(O, IE_PROTO))return O[IE_PROTO];
    if(isFunction(O.constructor) && O instanceof O.constructor){
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  },
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  create: $.create = $.create || function(O, /*?*/Properties){
    var result;
    if(O !== null){
      Empty.prototype = assertObject(O);
      result = new Empty();
      Empty.prototype = null;
      // add "__proto__" for Object.getPrototypeOf shim
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : defineProperties(result, Properties);
  },
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
  // 19.1.2.17 / 15.2.3.8 Object.seal(O)
  seal: $.it, // <- cap
  // 19.1.2.5 / 15.2.3.9 Object.freeze(O)
  freeze: $.it, // <- cap
  // 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
  preventExtensions: $.it, // <- cap
  // 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
  isSealed: isPrimitive, // <- cap
  // 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
  isFrozen: isPrimitive, // <- cap
  // 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
  isExtensible: $.isObject // <- cap
});

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
$def($def.P, 'Function', {
  bind: function(that /*, args... */){
    var fn       = assert.fn(this)
      , partArgs = _slice.call(arguments, 1);
    function bound(/* args... */){
      var args = partArgs.concat(_slice.call(arguments));
      return invoke(fn, args, this instanceof bound ? $.create(fn.prototype) : that);
    }
    if(fn.prototype)bound.prototype = fn.prototype;
    return bound;
  }
});

// Fix for not array-like ES3 string and DOM objects
if(!(0 in Object('z') && 'z'[0] == 'z')){
  $.ES5Object = function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
}

var buggySlice = true;
try {
  if(html)_slice.call(html);
  buggySlice = false;
} catch(e){ /* empty */ }

$def($def.P + $def.F * buggySlice, 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return _slice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

$def($def.P + $def.F * ($.ES5Object != Object), 'Array', {
  join: function join(){
    return _join.apply($.ES5Object(this), arguments);
  }
});

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
$def($def.S, 'Array', {
  isArray: function(arg){
    return cof(arg) == 'Array';
  }
});
function createArrayReduce(isRight){
  return function(callbackfn, memo){
    assert.fn(callbackfn);
    var O      = toObject(this)
      , length = toLength(O.length)
      , index  = isRight ? length - 1 : 0
      , i      = isRight ? -1 : 1;
    if(arguments.length < 2)for(;;){
      if(index in O){
        memo = O[index];
        index += i;
        break;
      }
      index += i;
      assert(isRight ? index >= 0 : length > index, 'Reduce of empty array with no initial value');
    }
    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
      memo = callbackfn(memo, O[index], index, this);
    }
    return memo;
  };
}
$def($def.P, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: $.each = $.each || function forEach(callbackfn/*, that = undefined */){
    return $forEach(this, callbackfn, arguments[1]);
  },
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn/*, that = undefined */){
    return $map(this, callbackfn, arguments[1]);
  },
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn/*, that = undefined */){
    return $filter(this, callbackfn, arguments[1]);
  },
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn/*, that = undefined */){
    return $some(this, callbackfn, arguments[1]);
  },
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn/*, that = undefined */){
    return $every(this, callbackfn, arguments[1]);
  },
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: createArrayReduce(false),
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: createArrayReduce(true),
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(el /*, fromIndex = 0 */){
    return $indexOf(this, el, arguments[1]);
  },
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
    var O      = toObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, $.toInteger(fromIndex));
    if(index < 0)index = toLength(length + index);
    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
    return -1;
  }
});

// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
$def($def.P, 'String', {trim: require('./$.replacer')(/^\s*([\s\S]*\S)?\s*$/, '$1')});

// 20.3.3.1 / 15.9.4.4 Date.now()
$def($def.S, 'Date', {now: function(){
  return +new Date;
}});

function lz(num){
  return num > 9 ? num : '0' + num;
}

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
// PhantomJS and old webkit had a broken Date implementation.
var date       = new Date(-5e13 - 1)
  , brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
      && require('./$.throws')(function(){ new Date(NaN).toISOString(); }));
$def($def.P + $def.F * brokenDate, 'Date', {toISOString: function(){
  if(!isFinite(this))throw RangeError('Invalid time value');
  var d = this
    , y = d.getUTCFullYear()
    , m = d.getUTCMilliseconds()
    , s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
}});

if(classof(function(){ return arguments; }()) == 'Object')cof.classof = function(it){
  var tag = classof(it);
  return tag == 'Object' && isFunction(it.callee) ? 'Arguments' : tag;
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es5.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.array-includes":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.array-methods":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.dom-create":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.dom-create.js","./$.invoke":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.replacer":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js","./$.throws":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.throws.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $       = require('./$')
  , $def    = require('./$.def')
  , toIndex = $.toIndex;
$def($def.P, 'Array', {
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */){
    var O     = Object($.assertDefined(this))
      , len   = $.toLength(O.length)
      , to    = toIndex(target, len)
      , from  = toIndex(start, len)
      , end   = arguments[2]
      , fin   = end === undefined ? len : toIndex(end, len)
      , count = Math.min(fin - from, len - to)
      , inc   = 1;
    if(from < to && to < from + count){
      inc  = -1;
      from = from + count - 1;
      to   = to   + count - 1;
    }
    while(count-- > 0){
      if(from in O)O[to] = O[from];
      else delete O[to];
      to   += inc;
      from += inc;
    } return O;
  }
});
require('./$.unscope')('copyWithin');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $       = require('./$')
  , $def    = require('./$.def')
  , toIndex = $.toIndex;
$def($def.P, 'Array', {
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  fill: function fill(value /*, start = 0, end = @length */){
    var O      = Object($.assertDefined(this))
      , length = $.toLength(O.length)
      , index  = toIndex(arguments[1], length)
      , end    = arguments[2]
      , endPos = end === undefined ? length : toIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
  }
});
require('./$.unscope')('fill');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var KEY    = 'findIndex'
  , $def   = require('./$.def')
  , forced = true
  , $find  = require('./$.array-methods')(6);
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$def($def.P + $def.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments[1]);
  }
});
require('./$.unscope')(KEY);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.array-methods":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var KEY    = 'find'
  , $def   = require('./$.def')
  , forced = true
  , $find  = require('./$.array-methods')(5);
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$def($def.P + $def.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments[1]);
  }
});
require('./$.unscope')(KEY);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.array-methods":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-methods.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $     = require('./$')
  , ctx   = require('./$.ctx')
  , $def  = require('./$.def')
  , $iter = require('./$.iter')
  , call  = require('./$.iter-call');
$def($def.S + $def.F * !require('./$.iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = Object($.assertDefined(arrayLike))
      , mapfn   = arguments[1]
      , mapping = mapfn !== undefined
      , f       = mapping ? ctx(mapfn, arguments[2], 2) : undefined
      , index   = 0
      , length, result, step, iterator;
    if($iter.is(O)){
      iterator = $iter.get(O);
      // strange IE quirks mode bug -> use typeof instead of isFunction
      result   = new (typeof this == 'function' ? this : Array);
      for(; !(step = iterator.next()).done; index++){
        result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
      }
    } else {
      // strange IE quirks mode bug -> use typeof instead of isFunction
      result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
      for(; length > index; index++){
        result[index] = mapping ? f(O[index], index) : O[index];
      }
    }
    result.length = index;
    return result;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-call":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-call.js","./$.iter-detect":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $          = require('./$')
  , setUnscope = require('./$.unscope')
  , ITER       = require('./$.uid').safe('iter')
  , $iter      = require('./$.iter')
  , step       = $iter.step
  , Iterators  = $iter.Iterators;

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  $.set(this, ITER, {o: $.toObject(iterated), i: 0, k: kind});
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var iter  = this[ITER]
    , O     = iter.o
    , kind  = iter.k
    , index = iter.i++;
  if(!O || index >= O.length){
    iter.o = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

setUnscope('keys');
setUnscope('values');
setUnscope('entries');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-define":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $def = require('./$.def');
$def($def.S, 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , length = arguments.length
      // strange IE quirks mode bug -> use typeof instead of isFunction
      , result = new (typeof this == 'function' ? this : Array)(length);
    while(length > index)result[index] = arguments[index++];
    result.length = length;
    return result;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
require('./$.species')(Array);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.species":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.species.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $             = require('./$')
  , HAS_INSTANCE  = require('./$.wks')('hasInstance')
  , FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(!$.isFunction(this) || !$.isObject(O))return false;
  if(!$.isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = $.getProto(O))if(this.prototype === O)return true;
  return false;
}});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $    = require('./$')
  , NAME = 'name'
  , setDesc = $.setDesc
  , FunctionProto = Function.prototype;
// 19.2.4.2 name
NAME in FunctionProto || $.FW && $.DESC && setDesc(FunctionProto, NAME, {
  configurable: true,
  get: function(){
    var match = String(this).match(/^\s*function ([^ (]*)/)
      , name  = match ? match[1] : '';
    $.has(this, NAME) || setDesc(this, NAME, $.desc(5, name));
    return name;
  },
  set: function(value){
    $.has(this, NAME) || setDesc(this, NAME, $.desc(0, value));
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.map.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var strong = require('./$.collection-strong');

// 23.1 Map Objects
require('./$.collection')('Map', {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.map.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.collection":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.math.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var Infinity = 1 / 0
  , $def  = require('./$.def')
  , E     = Math.E
  , pow   = Math.pow
  , abs   = Math.abs
  , exp   = Math.exp
  , log   = Math.log
  , sqrt  = Math.sqrt
  , ceil  = Math.ceil
  , floor = Math.floor
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);
function roundTiesToEven(n){
  return n + 1 / EPSILON - 1 / EPSILON;
}

// 20.2.2.28 Math.sign(x)
function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
}
// 20.2.2.5 Math.asinh(x)
function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}
// 20.2.2.14 Math.expm1(x)
function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
}

$def($def.S, 'Math', {
  // 20.2.2.3 Math.acosh(x)
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
  },
  // 20.2.2.5 Math.asinh(x)
  asinh: asinh,
  // 20.2.2.7 Math.atanh(x)
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  },
  // 20.2.2.9 Math.cbrt(x)
  cbrt: function cbrt(x){
    return sign(x = +x) * pow(abs(x), 1 / 3);
  },
  // 20.2.2.11 Math.clz32(x)
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * Math.LOG2E) : 32;
  },
  // 20.2.2.12 Math.cosh(x)
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  },
  // 20.2.2.14 Math.expm1(x)
  expm1: expm1,
  // 20.2.2.16 Math.fround(x)
  fround: function fround(x){
    var $abs  = abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  },
  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , len1 = arguments.length
      , len2 = len1
      , args = Array(len1)
      , larg = 0
      , arg;
    while(len1--){
      arg = args[len1] = abs(arguments[len1]);
      if(arg == Infinity)return Infinity;
      if(arg > larg)larg = arg;
    }
    larg = larg || 1;
    while(len2--)sum += pow(args[len2] / larg, 2);
    return larg * sqrt(sum);
  },
  // 20.2.2.18 Math.imul(x, y)
  imul: function imul(x, y){
    var UInt16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UInt16 & xn
      , yl = UInt16 & yn;
    return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);
  },
  // 20.2.2.20 Math.log1p(x)
  log1p: function log1p(x){
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
  },
  // 20.2.2.21 Math.log10(x)
  log10: function log10(x){
    return log(x) / Math.LN10;
  },
  // 20.2.2.22 Math.log2(x)
  log2: function log2(x){
    return log(x) / Math.LN2;
  },
  // 20.2.2.28 Math.sign(x)
  sign: sign,
  // 20.2.2.30 Math.sinh(x)
  sinh: function sinh(x){
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  },
  // 20.2.2.33 Math.tanh(x)
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  },
  // 20.2.2.34 Math.trunc(x)
  trunc: function trunc(it){
    return (it > 0 ? floor : ceil)(it);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.math.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $          = require('./$')
  , isObject   = $.isObject
  , isFunction = $.isFunction
  , NUMBER     = 'Number'
  , $Number    = $.g[NUMBER]
  , Base       = $Number
  , proto      = $Number.prototype;
function toPrimitive(it){
  var fn, val;
  if(isFunction(fn = it.valueOf) && !isObject(val = fn.call(it)))return val;
  if(isFunction(fn = it.toString) && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to number");
}
function toNumber(it){
  if(isObject(it))it = toPrimitive(it);
  if(typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48){
    var binary = false;
    switch(it.charCodeAt(1)){
      case 66 : case 98  : binary = true;
      case 79 : case 111 : return parseInt(it.slice(2), binary ? 2 : 8);
    }
  } return +it;
}
if($.FW && !($Number('0o1') && $Number('0b1'))){
  $Number = function Number(it){
    return this instanceof $Number ? new Base(toNumber(it)) : toNumber(it);
  };
  $.each.call($.DESC ? $.getNames(Base) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES6 (in case, if modules with ES6 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), function(key){
      if($.has(Base, key) && !$.has($Number, key)){
        $.setDesc($Number, key, $.getDesc(Base, key));
      }
    }
  );
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./$.redef')($.g, NUMBER, $Number);
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.number.statics.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $     = require('./$')
  , $def  = require('./$.def')
  , abs   = Math.abs
  , floor = Math.floor
  , _isFinite = $.g.isFinite
  , MAX_SAFE_INTEGER = 0x1fffffffffffff; // pow(2, 53) - 1 == 9007199254740991;
function isInteger(it){
  return !$.isObject(it) && _isFinite(it) && floor(it) === it;
}
$def($def.S, 'Number', {
  // 20.1.2.1 Number.EPSILON
  EPSILON: Math.pow(2, -52),
  // 20.1.2.2 Number.isFinite(number)
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  },
  // 20.1.2.3 Number.isInteger(number)
  isInteger: isInteger,
  // 20.1.2.4 Number.isNaN(number)
  isNaN: function isNaN(number){
    return number != number;
  },
  // 20.1.2.5 Number.isSafeInteger(number)
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;
  },
  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,
  // 20.1.2.12 Number.parseFloat(string)
  parseFloat: parseFloat,
  // 20.1.2.13 Number.parseInt(string, radix)
  parseInt: parseInt
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.number.statics.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');
$def($def.S, 'Object', {assign: require('./$.assign')});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.assign":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assign.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// 19.1.3.10 Object.is(value1, value2)
var $def = require('./$.def');
$def($def.S, 'Object', {
  is: function is(x, y){
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $def = require('./$.def');
$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.set-proto":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.statics-accept-primitives.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $        = require('./$')
  , $def     = require('./$.def')
  , isObject = $.isObject
  , toObject = $.toObject;
$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
, function(KEY, ID){
  var fn     = ($.core.Object || {})[KEY] || Object[KEY]
    , forced = 0
    , method = {};
  method[KEY] = ID == 0 ? function freeze(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 1 ? function seal(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 2 ? function preventExtensions(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 3 ? function isFrozen(it){
    return isObject(it) ? fn(it) : true;
  } : ID == 4 ? function isSealed(it){
    return isObject(it) ? fn(it) : true;
  } : ID == 5 ? function isExtensible(it){
    return isObject(it) ? fn(it) : false;
  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
    return fn(toObject(it), key);
  } : ID == 7 ? function getPrototypeOf(it){
    return fn(Object($.assertDefined(it)));
  } : ID == 8 ? function keys(it){
    return fn(toObject(it));
  } : function getOwnPropertyNames(it){
    return fn(toObject(it));
  };
  try {
    fn('z');
  } catch(e){
    forced = 1;
  }
  $def($def.S + $def.F * forced, 'Object', method);
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.object.statics-accept-primitives.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , tmp = {};
tmp[require('./$.wks')('toStringTag')] = 'z';
if(require('./$').FW && cof(tmp) != 'z'){
  require('./$.redef')(Object.prototype, 'toString', function toString(){
    return '[object ' + cof.classof(this) + ']';
  }, true);
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $        = require('./$')
  , ctx      = require('./$.ctx')
  , cof      = require('./$.cof')
  , $def     = require('./$.def')
  , assert   = require('./$.assert')
  , forOf    = require('./$.for-of')
  , setProto = require('./$.set-proto').set
  , species  = require('./$.species')
  , SPECIES  = require('./$.wks')('species')
  , RECORD   = require('./$.uid').safe('record')
  , PROMISE  = 'Promise'
  , global   = $.g
  , process  = global.process
  , asap     = process && process.nextTick || require('./$.task').set
  , P        = global[PROMISE]
  , isFunction     = $.isFunction
  , isObject       = $.isObject
  , assertFunction = assert.fn
  , assertObject   = assert.obj;

var useNative = function(){
  var test, works = false;
  function P2(x){
    var self = new P(x);
    setProto(self, P2.prototype);
    return self;
  }
  try {
    works = isFunction(P) && isFunction(P.resolve) && P.resolve(test = new P(function(){})) == test;
    setProto(P2, P);
    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
    // actual Firefox has broken subclass support, test that
    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
      works = false;
    }
  } catch(e){ works = false; }
  return works;
}();

// helpers
function getConstructor(C){
  var S = assertObject(C)[SPECIES];
  return S != undefined ? S : C;
}
function isThenable(it){
  var then;
  if(isObject(it))then = it.then;
  return isFunction(then) ? then : false;
}
function notify(record){
  var chain = record.c;
  if(chain.length)asap(function(){
    var value = record.v
      , ok    = record.s == 1
      , i     = 0;
    function run(react){
      var cb = ok ? react.ok : react.fail
        , ret, then;
      try {
        if(cb){
          if(!ok)record.h = true;
          ret = cb === true ? value : cb(value);
          if(ret === react.P){
            react.rej(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(ret)){
            then.call(ret, react.res, react.rej);
          } else react.res(ret);
        } else react.rej(value);
      } catch(err){
        react.rej(err);
      }
    }
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    chain.length = 0;
  });
}
function isUnhandled(promise){
  var record = promise[RECORD]
    , chain  = record.a || record.c
    , i      = 0
    , react;
  if(record.h)return false;
  while(chain.length > i){
    react = chain[i++];
    if(react.fail || !isUnhandled(react.P))return false;
  } return true;
}
function $reject(value){
  var record = this
    , promise;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  record.v = value;
  record.s = 2;
  record.a = record.c.slice();
  setTimeout(function(){
    asap(function(){
      if(isUnhandled(promise = record.p)){
        if(cof(process) == 'process'){
          process.emit('unhandledRejection', value, promise);
        } else if(global.console && isFunction(console.error)){
          console.error('Unhandled promise rejection', value);
        }
      }
      record.a = undefined;
    });
  }, 1);
  notify(record);
}
function $resolve(value){
  var record = this
    , then, wrapper;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  try {
    if(then = isThenable(value)){
      wrapper = {r: record, d: false}; // wrap
      then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
    } else {
      record.v = value;
      record.s = 1;
      notify(record);
    }
  } catch(err){
    $reject.call(wrapper || {r: record, d: false}, err); // wrap
  }
}

// constructor polyfill
if(!useNative){
  // 25.4.3.1 Promise(executor)
  P = function Promise(executor){
    assertFunction(executor);
    var record = {
      p: assert.inst(this, P, PROMISE),       // <- promise
      c: [],                                  // <- awaiting reactions
      a: undefined,                           // <- checked in isUnhandled reactions
      s: 0,                                   // <- state
      d: false,                               // <- done
      v: undefined,                           // <- value
      h: false                                // <- handled rejection
    };
    $.hide(this, RECORD, record);
    try {
      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
    } catch(err){
      $reject.call(record, err);
    }
  };
  require('./$.mix')(P.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var S = assertObject(assertObject(this).constructor)[SPECIES];
      var react = {
        ok:   isFunction(onFulfilled) ? onFulfilled : true,
        fail: isFunction(onRejected)  ? onRejected  : false
      };
      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
        react.res = assertFunction(res);
        react.rej = assertFunction(rej);
      });
      var record = this[RECORD];
      record.c.push(react);
      if(record.a)record.a.push(react);
      record.s && notify(record);
      return promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
}

// export
$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
cof.set(P, PROMISE);
species(P);
species($.core[PROMISE]); // for wrapper

// statics
$def($def.S + $def.F * !useNative, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    return new (getConstructor(this))(function(res, rej){
      rej(r);
    });
  },
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    return isObject(x) && RECORD in x && $.getProto(x) === this.prototype
      ? x : new (getConstructor(this))(function(res){
        res(x);
      });
  }
});
$def($def.S + $def.F * !(useNative && require('./$.iter-detect')(function(iter){
  P.all(iter)['catch'](function(){});
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C      = getConstructor(this)
      , values = [];
    return new C(function(res, rej){
      forOf(iterable, false, values.push, values);
      var remaining = values.length
        , results   = Array(remaining);
      if(remaining)$.each.call(values, function(promise, index){
        C.resolve(promise).then(function(value){
          results[index] = value;
          --remaining || res(results);
        }, rej);
      });
      else res(results);
    });
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C = getConstructor(this);
    return new C(function(res, rej){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(res, rej);
      });
    });
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.for-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.for-of.js","./$.iter-detect":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-detect.js","./$.mix":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.mix.js","./$.set-proto":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","./$.species":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.species.js","./$.task":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.task.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $         = require('./$')
  , $def      = require('./$.def')
  , setProto  = require('./$.set-proto')
  , $iter     = require('./$.iter')
  , ITERATOR  = require('./$.wks')('iterator')
  , ITER      = require('./$.uid').safe('iter')
  , step      = $iter.step
  , assert    = require('./$.assert')
  , isObject  = $.isObject
  , getProto  = $.getProto
  , $Reflect  = $.g.Reflect
  , _apply    = Function.apply
  , assertObject = assert.obj
  , _isExtensible = Object.isExtensible || $.isObject
  , _preventExtensions = Object.preventExtensions || $.it
  // IE TP has broken Reflect.enumerate
  , buggyEnumerate = !($Reflect && $Reflect.enumerate && ITERATOR in $Reflect.enumerate({}));

function Enumerate(iterated){
  $.set(this, ITER, {o: iterated, k: undefined, i: 0});
}
$iter.create(Enumerate, 'Object', function(){
  var iter = this[ITER]
    , keys = iter.k
    , key;
  if(keys == undefined){
    iter.k = keys = [];
    for(key in iter.o)keys.push(key);
  }
  do {
    if(iter.i >= keys.length)return step(1);
  } while(!((key = keys[iter.i++]) in iter.o));
  return step(0, key);
});

var reflect = {
  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  apply: function apply(target, thisArgument, argumentsList){
    return _apply.call(target, thisArgument, argumentsList);
  },
  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  construct: function construct(target, argumentsList /*, newTarget*/){
    var proto    = assert.fn(arguments.length < 3 ? target : arguments[2]).prototype
      , instance = $.create(isObject(proto) ? proto : Object.prototype)
      , result   = _apply.call(target, instance, argumentsList);
    return isObject(result) ? result : instance;
  },
  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  defineProperty: function defineProperty(target, propertyKey, attributes){
    assertObject(target);
    try {
      $.setDesc(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  },
  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = $.getDesc(assertObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  },
  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  get: function get(target, propertyKey/*, receiver*/){
    var receiver = arguments.length < 3 ? target : arguments[2]
      , desc = $.getDesc(assertObject(target), propertyKey), proto;
    if(desc)return $.has(desc, 'value')
      ? desc.value
      : desc.get === undefined
        ? undefined
        : desc.get.call(receiver);
    return isObject(proto = getProto(target))
      ? get(proto, propertyKey, receiver)
      : undefined;
  },
  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return $.getDesc(assertObject(target), propertyKey);
  },
  // 26.1.8 Reflect.getPrototypeOf(target)
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(assertObject(target));
  },
  // 26.1.9 Reflect.has(target, propertyKey)
  has: function has(target, propertyKey){
    return propertyKey in target;
  },
  // 26.1.10 Reflect.isExtensible(target)
  isExtensible: function isExtensible(target){
    return _isExtensible(assertObject(target));
  },
  // 26.1.11 Reflect.ownKeys(target)
  ownKeys: require('./$.own-keys'),
  // 26.1.12 Reflect.preventExtensions(target)
  preventExtensions: function preventExtensions(target){
    assertObject(target);
    try {
      _preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  },
  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  set: function set(target, propertyKey, V/*, receiver*/){
    var receiver = arguments.length < 4 ? target : arguments[3]
      , ownDesc  = $.getDesc(assertObject(target), propertyKey)
      , existingDescriptor, proto;
    if(!ownDesc){
      if(isObject(proto = getProto(target))){
        return set(proto, propertyKey, V, receiver);
      }
      ownDesc = $.desc(0);
    }
    if($.has(ownDesc, 'value')){
      if(ownDesc.writable === false || !isObject(receiver))return false;
      existingDescriptor = $.getDesc(receiver, propertyKey) || $.desc(0);
      existingDescriptor.value = V;
      $.setDesc(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }
};
// 26.1.14 Reflect.setPrototypeOf(target, proto)
if(setProto)reflect.setPrototypeOf = function setPrototypeOf(target, proto){
  setProto.check(target, proto);
  try {
    setProto.set(target, proto);
    return true;
  } catch(e){
    return false;
  }
};

$def($def.G, {Reflect: {}});

$def($def.S + $def.F * buggyEnumerate, 'Reflect', {
  // 26.1.5 Reflect.enumerate(target)
  enumerate: function enumerate(target){
    return new Enumerate(assertObject(target));
  }
});

$def($def.S, 'Reflect', reflect);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.own-keys":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js","./$.set-proto":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.set-proto.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $       = require('./$')
  , cof     = require('./$.cof')
  , $RegExp = $.g.RegExp
  , Base    = $RegExp
  , proto   = $RegExp.prototype
  , re      = /a/g
  // "new" creates a new object
  , CORRECT_NEW = new $RegExp(re) !== re
  // RegExp allows a regex with flags as the pattern
  , ALLOWS_RE_WITH_FLAGS = function(){
    try {
      return $RegExp(re, 'i') == '/a/i';
    } catch(e){ /* empty */ }
  }();
if($.FW && $.DESC){
  if(!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS){
    $RegExp = function RegExp(pattern, flags){
      var patternIsRegExp  = cof(pattern) == 'RegExp'
        , flagsIsUndefined = flags === undefined;
      if(!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
      return CORRECT_NEW
        ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
        : new Base(patternIsRegExp ? pattern.source : pattern
          , patternIsRegExp && flagsIsUndefined ? pattern.flags : flags);
    };
    $.each.call($.getNames(Base), function(key){
      key in $RegExp || $.setDesc($RegExp, key, {
        configurable: true,
        get: function(){ return Base[key]; },
        set: function(it){ Base[key] = it; }
      });
    });
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    require('./$.redef')($.g, 'RegExp', $RegExp);
  }
  // 21.2.5.3 get RegExp.prototype.flags()
  if(/./g.flags != 'g')$.setDesc(proto, 'flags', {
    configurable: true,
    get: require('./$.replacer')(/^.*\/(\w*)$/, '$1')
  });
}
require('./$.species')($RegExp);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.replacer":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js","./$.species":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.species.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.set.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var strong = require('./$.collection-strong');

// 23.2 Set Objects
require('./$.collection')('Set', {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.set.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.collection":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-strong":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-strong.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $def = require('./$.def')
  , $at  = require('./$.string-at')(false);
$def($def.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-at":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $    = require('./$')
  , cof  = require('./$.cof')
  , $def = require('./$.def')
  , toLength = $.toLength;

// should throw error on regex
$def($def.P + $def.F * !require('./$.throws')(function(){ 'q'.endsWith(/./); }), 'String', {
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    if(cof(searchString) == 'RegExp')throw TypeError();
    var that = String($.assertDefined(this))
      , endPosition = arguments[1]
      , len = toLength(that.length)
      , end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    searchString += '';
    return that.slice(end - searchString.length, end) === searchString;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.throws":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.throws.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $def    = require('./$.def')
  , toIndex = require('./$').toIndex
  , fromCharCode = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res = []
      , len = arguments.length
      , i   = 0
      , code;
    while(len > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $    = require('./$')
  , cof  = require('./$.cof')
  , $def = require('./$.def');

$def($def.P, 'String', {
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  includes: function includes(searchString /*, position = 0 */){
    if(cof(searchString) == 'RegExp')throw TypeError();
    return !!~String($.assertDefined(this)).indexOf(searchString, arguments[1]);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var set   = require('./$').set
  , $at   = require('./$.string-at')(true)
  , ITER  = require('./$.uid').safe('iter')
  , $iter = require('./$.iter')
  , step  = $iter.step;

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  set(this, ITER, {o: String(iterated), i: 0});
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var iter  = this[ITER]
    , O     = iter.o
    , index = iter.i
    , point;
  if(index >= O.length)return step(1);
  point = $at(O, index);
  iter.i += point.length;
  return step(0, point);
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.iter-define":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter-define.js","./$.string-at":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $    = require('./$')
  , $def = require('./$.def');

$def($def.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl = $.toObject(callSite.raw)
      , len = $.toLength(tpl.length)
      , sln = arguments.length
      , res = []
      , i   = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < sln)res.push(String(arguments[i]));
    } return res.join('');
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $def = require('./$.def');

$def($def.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./$.string-repeat')
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-repeat":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-repeat.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $    = require('./$')
  , cof  = require('./$.cof')
  , $def = require('./$.def');

// should throw error on regex
$def($def.P + $def.F * !require('./$.throws')(function(){ 'q'.startsWith(/./); }), 'String', {
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  startsWith: function startsWith(searchString /*, position = 0 */){
    if(cof(searchString) == 'RegExp')throw TypeError();
    var that  = String($.assertDefined(this))
      , index = $.toLength(Math.min(arguments[1], that.length));
    searchString += '';
    return that.slice(index, index + searchString.length) === searchString;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.throws":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.throws.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
// ECMAScript 6 symbols shim
var $        = require('./$')
  , setTag   = require('./$.cof').set
  , uid      = require('./$.uid')
  , $def     = require('./$.def')
  , $redef   = require('./$.redef')
  , keyOf    = require('./$.keyof')
  , enumKeys = require('./$.enum-keys')
  , assertObject = require('./$.assert').obj
  , has      = $.has
  , $create  = $.create
  , getDesc  = $.getDesc
  , setDesc  = $.setDesc
  , desc     = $.desc
  , getNames = $.getNames
  , toObject = $.toObject
  , $Symbol  = $.g.Symbol
  , setter   = false
  , TAG      = uid('tag')
  , HIDDEN   = uid('hidden')
  , _propertyIsEnumerable = {}.propertyIsEnumerable
  , SymbolRegistry = {}
  , AllSymbols = {}
  , useNative = $.isFunction($Symbol);

function wrap(tag){
  var sym = AllSymbols[tag] = $.set($create($Symbol.prototype), TAG, tag);
  $.DESC && setter && setDesc(Object.prototype, tag, {
    configurable: true,
    set: function(value){
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setDesc(this, tag, desc(1, value));
    }
  });
  return sym;
}

function defineProperty(it, key, D){
  if(D && has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))setDesc(it, HIDDEN, desc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = $create(D, {enumerable: desc(0, false)});
    }
  } return setDesc(it, key, D);
}
function defineProperties(it, P){
  assertObject(it);
  var keys = enumKeys(P = toObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)defineProperty(it, key = keys[i++], P[key]);
  return it;
}
function create(it, P){
  return P === undefined ? $create(it) : defineProperties($create(it), P);
}
function propertyIsEnumerable(key){
  var E = _propertyIsEnumerable.call(this, key);
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
    ? E : true;
}
function getOwnPropertyDescriptor(it, key){
  var D = getDesc(it = toObject(it), key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
}
function getOwnPropertyNames(it){
  var names  = getNames(toObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
  return result;
}
function getOwnPropertySymbols(it){
  var names  = getNames(toObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
  return result;
}

// 19.4.1.1 Symbol([description])
if(!useNative){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
    return wrap(uid(arguments[0]));
  };
  $redef($Symbol.prototype, 'toString', function(){
    return this[TAG];
  });

  $.create     = create;
  $.setDesc    = defineProperty;
  $.getDesc    = getOwnPropertyDescriptor;
  $.setDescs   = defineProperties;
  $.getNames   = getOwnPropertyNames;
  $.getSymbols = getOwnPropertySymbols;

  if($.DESC && $.FW)$redef(Object.prototype, 'propertyIsEnumerable', propertyIsEnumerable, true);
}

var symbolStatics = {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    return keyOf(SymbolRegistry, key);
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
};
// 19.4.2.2 Symbol.hasInstance
// 19.4.2.3 Symbol.isConcatSpreadable
// 19.4.2.4 Symbol.iterator
// 19.4.2.6 Symbol.match
// 19.4.2.8 Symbol.replace
// 19.4.2.9 Symbol.search
// 19.4.2.10 Symbol.species
// 19.4.2.11 Symbol.split
// 19.4.2.12 Symbol.toPrimitive
// 19.4.2.13 Symbol.toStringTag
// 19.4.2.14 Symbol.unscopables
$.each.call((
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
    'species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), function(it){
    var sym = require('./$.wks')(it);
    symbolStatics[it] = useNative ? sym : wrap(sym);
  }
);

setter = true;

$def($def.G + $def.W, {Symbol: $Symbol});

$def($def.S, 'Symbol', symbolStatics);

$def($def.S + $def.F * !useNative, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: getOwnPropertySymbols
});

// 19.4.3.5 Symbol.prototype[@@toStringTag]
setTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setTag($.g.JSON, 'JSON', true);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.assert":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.assert.js","./$.cof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.cof.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.enum-keys":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.enum-keys.js","./$.keyof":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.keyof.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","./$.uid":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.uid.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $         = require('./$')
  , weak      = require('./$.collection-weak')
  , leakStore = weak.leakStore
  , ID        = weak.ID
  , WEAK      = weak.WEAK
  , has       = $.has
  , isObject  = $.isObject
  , isFrozen  = Object.isFrozen || $.core.Object.isFrozen
  , tmp       = {};

// 23.3 WeakMap Objects
var WeakMap = require('./$.collection')('WeakMap', {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      if(isFrozen(key))return leakStore(this).get(key);
      if(has(key, WEAK))return key[WEAK][this[ID]];
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
}, weak, true, true);

// IE11 WeakMap frozen keys fix
if($.FW && new WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  $.each.call(['delete', 'has', 'get', 'set'], function(key){
    var method = WeakMap.prototype[key];
    require('./$.redef')(WeakMap.prototype, key, function(a, b){
      // store frozen objects on leaky map
      if(isObject(a) && isFrozen(a)){
        var result = leakStore(this)[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.collection":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js","./$.redef":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.redef.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var weak = require('./$.collection-weak');

// 23.4 WeakSet Objects
require('./$.collection')('WeakSet', {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.collection":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection.js","./$.collection-weak":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-weak.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://github.com/domenic/Array.prototype.includes
var $def      = require('./$.def')
  , $includes = require('./$.array-includes')(true);
$def($def.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments[1]);
  }
});
require('./$.unscope')('includes');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.array-includes":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.array-includes.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.unscope":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.unscope.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
require('./$.collection-to-json')('Map');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.collection-to-json":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://gist.github.com/WebReflection/9353781
var $       = require('./$')
  , $def    = require('./$.def')
  , ownKeys = require('./$.own-keys');

$def($def.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O      = $.toObject(object)
      , result = {};
    $.each.call(ownKeys(O), function(key){
      $.setDesc(result, key, $.desc(0, $.getDesc(O, key)));
    });
    return result;
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.own-keys":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.own-keys.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.object.to-array.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// http://goo.gl/XkBrjD
var $    = require('./$')
  , $def = require('./$.def');
function createObjectToArray(isEntries){
  return function(object){
    var O      = $.toObject(object)
      , keys   = $.getKeys(O)
      , length = keys.length
      , i      = 0
      , result = Array(length)
      , key;
    if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];
    else while(length > i)result[i] = O[keys[i++]];
    return result;
  };
}
$def($def.S, 'Object', {
  values:  createObjectToArray(false),
  entries: createObjectToArray(true)
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.object.to-array.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://gist.github.com/kangax/9698100
var $def = require('./$.def');
$def($def.S, 'RegExp', {
  escape: require('./$.replacer')(/([\\\-[\]{}()*+?.,^$|])/g, '\\$1', true)
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.replacer":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.replacer.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
require('./$.collection-to-json')('Set');
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.collection-to-json":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.collection-to-json.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// https://github.com/mathiasbynens/String.prototype.at
'use strict';
var $def = require('./$.def')
  , $at  = require('./$.string-at')(true);
$def($def.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-at":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-at.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.lpad.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $def = require('./$.def')
  , $pad = require('./$.string-pad');
$def($def.P, 'String', {
  lpad: function lpad(n){
    return $pad(this, n, arguments[1], true);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.string.lpad.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-pad":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.rpad.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var $def = require('./$.def')
  , $pad = require('./$.string-pad');
$def($def.P, 'String', {
  rpad: function rpad(n){
    return $pad(this, n, arguments[1], false);
  }
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/es7.string.rpad.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.string-pad":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.string-pad.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// JavaScript 1.6 / Strawman array statics shim
var $       = require('./$')
  , $def    = require('./$.def')
  , $Array  = $.core.Array || Array
  , statics = {};
function setStatics(keys, length){
  $.each.call(keys.split(','), function(key){
    if(length == undefined && key in $Array)statics[key] = $Array[key];
    else if(key in [])statics[key] = require('./$.ctx')(Function.call, [][key], length);
  });
}
setStatics('pop,reverse,shift,keys,values,entries', 1);
setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
           'reduce,reduceRight,copyWithin,fill,turn');
$def($def.S, 'Array', statics);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.ctx":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.ctx.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
require('./es6.array.iterator');
var $           = require('./$')
  , Iterators   = require('./$.iter').Iterators
  , ITERATOR    = require('./$.wks')('iterator')
  , ArrayValues = Iterators.Array
  , NodeList    = $.g.NodeList;
if($.FW && NodeList && !(ITERATOR in NodeList.prototype)){
  $.hide(NodeList.prototype, ITERATOR, ArrayValues);
}
Iterators.NodeList = ArrayValues;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.iter":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.iter.js","./$.wks":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.wks.js","./es6.array.iterator":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $def  = require('./$.def')
  , $task = require('./$.task');
$def($def.G + $def.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.task":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.task.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.timers.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// ie9- setTimeout & setInterval additional parameters fix
var $         = require('./$')
  , $def      = require('./$.def')
  , invoke    = require('./$.invoke')
  , partial   = require('./$.partial')
  , navigator = $.g.navigator
  , MSIE      = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
function wrap(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      $.isFunction(fn) ? fn : Function(fn)
    ), time);
  } : set;
}
$def($def.G + $def.B + $def.F * MSIE, {
  setTimeout:  wrap($.g.setTimeout),
  setInterval: wrap($.g.setInterval)
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/modules/web.timers.js","/node_modules/babel-core/node_modules/core-js/modules")

},{"./$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./$.def":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.def.js","./$.invoke":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.invoke.js","./$.partial":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.partial.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/shim.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
require('./modules/es5');
require('./modules/es6.symbol');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.object.statics-accept-primitives');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.number.constructor');
require('./modules/es6.number.statics');
require('./modules/es6.math');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.iterator');
require('./modules/es6.array.species');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.regexp');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.reflect');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.lpad');
require('./modules/es7.string.rpad');
require('./modules/es7.regexp.escape');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.to-array');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/js.array.statics');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/$').core;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/core-js/shim.js","/node_modules/babel-core/node_modules/core-js")

},{"./modules/$":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/$.js","./modules/es5":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es5.js","./modules/es6.array.copy-within":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.copy-within.js","./modules/es6.array.fill":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.fill.js","./modules/es6.array.find":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.find.js","./modules/es6.array.find-index":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.find-index.js","./modules/es6.array.from":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.from.js","./modules/es6.array.iterator":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.iterator.js","./modules/es6.array.of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.of.js","./modules/es6.array.species":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.array.species.js","./modules/es6.function.has-instance":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.function.has-instance.js","./modules/es6.function.name":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.function.name.js","./modules/es6.map":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.map.js","./modules/es6.math":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.math.js","./modules/es6.number.constructor":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.number.constructor.js","./modules/es6.number.statics":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.number.statics.js","./modules/es6.object.assign":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.assign.js","./modules/es6.object.is":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.is.js","./modules/es6.object.set-prototype-of":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.set-prototype-of.js","./modules/es6.object.statics-accept-primitives":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.statics-accept-primitives.js","./modules/es6.object.to-string":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.object.to-string.js","./modules/es6.promise":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.promise.js","./modules/es6.reflect":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.reflect.js","./modules/es6.regexp":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.regexp.js","./modules/es6.set":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.set.js","./modules/es6.string.code-point-at":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.code-point-at.js","./modules/es6.string.ends-with":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.ends-with.js","./modules/es6.string.from-code-point":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.from-code-point.js","./modules/es6.string.includes":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.includes.js","./modules/es6.string.iterator":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.iterator.js","./modules/es6.string.raw":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.raw.js","./modules/es6.string.repeat":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.repeat.js","./modules/es6.string.starts-with":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.string.starts-with.js","./modules/es6.symbol":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.symbol.js","./modules/es6.weak-map":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.weak-map.js","./modules/es6.weak-set":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es6.weak-set.js","./modules/es7.array.includes":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.array.includes.js","./modules/es7.map.to-json":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.map.to-json.js","./modules/es7.object.get-own-property-descriptors":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","./modules/es7.object.to-array":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.object.to-array.js","./modules/es7.regexp.escape":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.regexp.escape.js","./modules/es7.set.to-json":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.set.to-json.js","./modules/es7.string.at":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.at.js","./modules/es7.string.lpad":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.lpad.js","./modules/es7.string.rpad":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/es7.string.rpad.js","./modules/js.array.statics":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/js.array.statics.js","./modules/web.dom.iterable":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.dom.iterable.js","./modules/web.immediate":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.immediate.js","./modules/web.timers":"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/core-js/modules/web.timers.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/node_modules/regenerator/runtime.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);

    generator._invoke = makeInvokeMethod(
      innerFn, self || null,
      new Context(tryLocsList || [])
    );

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    genFun.__proto__ = GeneratorFunctionPrototype;
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    return new Promise(function(resolve, reject) {
      var generator = wrap(innerFn, outerFn, self, tryLocsList);
      var callNext = step.bind(generator, "next");
      var callThrow = step.bind(generator, "throw");

      function step(method, arg) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
          return;
        }

        var info = record.arg;
        if (info.done) {
          resolve(info.value);
        } else {
          Promise.resolve(info.value).then(callNext, callThrow);
        }
      }

      callNext();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            delete context.sent;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  function defineGeneratorMethod(method) {
    Gp[method] = function(arg) {
      return this._invoke(method, arg);
    };
  }
  defineGeneratorMethod("next");
  defineGeneratorMethod("throw");
  defineGeneratorMethod("return");

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset();
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function() {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      // Pre-initialize at least 20 temporary variables to enable hidden
      // class optimizations for simple generators.
      for (var tempIndex = 0, tempName;
           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
           ++tempIndex) {
        this[tempName] = null;
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/node_modules/regenerator/runtime.js","/node_modules/babel-core/node_modules/regenerator")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babel-core/polyfill.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = require("./lib/babel/polyfill");

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babel-core/polyfill.js","/node_modules/babel-core")

},{"./lib/babel/polyfill":"/home/vadzim/v/work/nerojs/node_modules/babel-core/lib/babel/polyfill.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/babelify/polyfill.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = require("babel-core/polyfill");

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/babelify/polyfill.js","/node_modules/babelify")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","babel-core/polyfill":"/home/vadzim/v/work/nerojs/node_modules/babel-core/polyfill.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
    return fromTypedArray(that, object)
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = String(string)

  if (string.length === 0) return 0

  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      return string.length
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return string.length * 2
    case 'hex':
      return string.length >>> 1
    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(string).length
    case 'base64':
      return base64ToBytes(string).length
    default:
      return string.length
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/buffer/index.js","/node_modules/browserify/node_modules/buffer")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","base64-js":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ieee754":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","is-array":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/node_modules/browserify/node_modules/buffer/node_modules/ieee754")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js","/node_modules/browserify/node_modules/buffer/node_modules/is-array")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/events/events.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/events/events.js","/node_modules/browserify/node_modules/events")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/process/browser.js","/node_modules/browserify/node_modules/process")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/punycode/punycode.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/punycode/punycode.js","/node_modules/browserify/node_modules/punycode")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/decode.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/querystring-es3/decode.js","/node_modules/browserify/node_modules/querystring-es3")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/encode.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/querystring-es3/encode.js","/node_modules/browserify/node_modules/querystring-es3")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/querystring-es3/index.js","/node_modules/browserify/node_modules/querystring-es3")

},{"./decode":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/decode.js","./encode":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/encode.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/url/url.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/browserify/node_modules/url/url.js","/node_modules/browserify/node_modules/url")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","punycode":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/punycode/punycode.js","querystring":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/querystring-es3/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*

The MIT License (MIT)

Original Library 
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var colors = {};
module['exports'] = colors;

colors.themes = {};

var ansiStyles = colors.styles = require('./styles');
var defineProps = Object.defineProperties;

colors.supportsColor = require('./system/supports-colors');

if (typeof colors.enabled === "undefined") {
  colors.enabled = colors.supportsColor;
}

colors.stripColors = colors.strip = function(str){
  return ("" + str).replace(/\x1B\[\d+m/g, '');
};


var stylize = colors.stylize = function stylize (str, style) {
  return ansiStyles[style].open + str + ansiStyles[style].close;
}

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }
  return str.replace(matchOperatorsRe,  '\\$&');
}

function build(_styles) {
  var builder = function builder() {
    return applyStyle.apply(builder, arguments);
  };
  builder._styles = _styles;
  // __proto__ is used because we must return a function, but there is
  // no way to create a function with a different prototype.
  builder.__proto__ = proto;
  return builder;
}

var styles = (function () {
  var ret = {};
  ansiStyles.grey = ansiStyles.gray;
  Object.keys(ansiStyles).forEach(function (key) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    ret[key] = {
      get: function () {
        return build(this._styles.concat(key));
      }
    };
  });
  return ret;
})();

var proto = defineProps(function colors() {}, styles);

function applyStyle() {
  var args = arguments;
  var argsLen = args.length;
  var str = argsLen !== 0 && String(arguments[0]);
  if (argsLen > 1) {
    for (var a = 1; a < argsLen; a++) {
      str += ' ' + args[a];
    }
  }

  if (!colors.enabled || !str) {
    return str;
  }

  var nestedStyles = this._styles;

  var i = nestedStyles.length;
  while (i--) {
    var code = ansiStyles[nestedStyles[i]];
    str = code.open + str.replace(code.closeRe, code.open) + code.close;
  }

  return str;
}

function applyTheme (theme) {
  for (var style in theme) {
    (function(style){
      colors[style] = function(str){
        return colors[theme[style]](str);
      };
    })(style)
  }
}

colors.setTheme = function (theme) {
  if (typeof theme === 'string') {
    try {
      colors.themes[theme] = require(theme);
      applyTheme(colors.themes[theme]);
      return colors.themes[theme];
    } catch (err) {
      console.log(err);
      return err;
    }
  } else {
    applyTheme(theme);
  }
};

function init() {
  var ret = {};
  Object.keys(styles).forEach(function (name) {
    ret[name] = {
      get: function () {
        return build([name]);
      }
    };
  });
  return ret;
}

var sequencer = function sequencer (map, str) {
  var exploded = str.split(""), i = 0;
  exploded = exploded.map(map);
  return exploded.join("");
};

// custom formatter methods
colors.trap = require('./custom/trap');
colors.zalgo = require('./custom/zalgo');

// maps
colors.maps = {};
colors.maps.america = require('./maps/america');
colors.maps.zebra = require('./maps/zebra');
colors.maps.rainbow = require('./maps/rainbow');
colors.maps.random = require('./maps/random')

for (var map in colors.maps) {
  (function(map){
    colors[map] = function (str) {
      return sequencer(colors.maps[map], str);
    }
  })(map)
}

defineProps(colors, init());
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/colors.js","/node_modules/colors/lib")

},{"./custom/trap":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/custom/trap.js","./custom/zalgo":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/custom/zalgo.js","./maps/america":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/america.js","./maps/rainbow":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/rainbow.js","./maps/random":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/random.js","./maps/zebra":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/zebra.js","./styles":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/styles.js","./system/supports-colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/system/supports-colors.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/custom/trap.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module['exports'] = function runTheTrap (text, options) {
  var result = "";
  text = text || "Run the trap, drop the bass";
  text = text.split('');
  var trap = {
    a: ["\u0040", "\u0104", "\u023a", "\u0245", "\u0394", "\u039b", "\u0414"],
    b: ["\u00df", "\u0181", "\u0243", "\u026e", "\u03b2", "\u0e3f"],
    c: ["\u00a9", "\u023b", "\u03fe"],
    d: ["\u00d0", "\u018a", "\u0500" , "\u0501" ,"\u0502", "\u0503"],
    e: ["\u00cb", "\u0115", "\u018e", "\u0258", "\u03a3", "\u03be", "\u04bc", "\u0a6c"],
    f: ["\u04fa"],
    g: ["\u0262"],
    h: ["\u0126", "\u0195", "\u04a2", "\u04ba", "\u04c7", "\u050a"],
    i: ["\u0f0f"],
    j: ["\u0134"],
    k: ["\u0138", "\u04a0", "\u04c3", "\u051e"],
    l: ["\u0139"],
    m: ["\u028d", "\u04cd", "\u04ce", "\u0520", "\u0521", "\u0d69"],
    n: ["\u00d1", "\u014b", "\u019d", "\u0376", "\u03a0", "\u048a"],
    o: ["\u00d8", "\u00f5", "\u00f8", "\u01fe", "\u0298", "\u047a", "\u05dd", "\u06dd", "\u0e4f"],
    p: ["\u01f7", "\u048e"],
    q: ["\u09cd"],
    r: ["\u00ae", "\u01a6", "\u0210", "\u024c", "\u0280", "\u042f"],
    s: ["\u00a7", "\u03de", "\u03df", "\u03e8"],
    t: ["\u0141", "\u0166", "\u0373"],
    u: ["\u01b1", "\u054d"],
    v: ["\u05d8"],
    w: ["\u0428", "\u0460", "\u047c", "\u0d70"],
    x: ["\u04b2", "\u04fe", "\u04fc", "\u04fd"],
    y: ["\u00a5", "\u04b0", "\u04cb"],
    z: ["\u01b5", "\u0240"]
  }
  text.forEach(function(c){
    c = c.toLowerCase();
    var chars = trap[c] || [" "];
    var rand = Math.floor(Math.random() * chars.length);
    if (typeof trap[c] !== "undefined") {
      result += trap[c][rand];
    } else {
      result += c;
    }
  });
  return result;

}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/custom/trap.js","/node_modules/colors/lib/custom")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/custom/zalgo.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// please no
module['exports'] = function zalgo(text, options) {
  text = text || "   he is here   ";
  var soul = {
    "up" : [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚'
    ],
    "down" : [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣'
    ],
    "mid" : [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉'
    ]
  },
  all = [].concat(soul.up, soul.down, soul.mid),
  zalgo = {};

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function is_char(character) {
    var bool = false;
    all.filter(function (i) {
      bool = (i === character);
    });
    return bool;
  }
  

  function heComes(text, options) {
    var result = '', counts, l;
    options = options || {};
    options["up"] = options["up"] || true;
    options["mid"] = options["mid"] || true;
    options["down"] = options["down"] || true;
    options["size"] = options["size"] || "maxi";
    text = text.split('');
    for (l in text) {
      if (is_char(l)) {
        continue;
      }
      result = result + text[l];
      counts = {"up" : 0, "down" : 0, "mid" : 0};
      switch (options.size) {
      case 'mini':
        counts.up = randomNumber(8);
        counts.min = randomNumber(2);
        counts.down = randomNumber(8);
        break;
      case 'maxi':
        counts.up = randomNumber(16) + 3;
        counts.min = randomNumber(4) + 1;
        counts.down = randomNumber(64) + 3;
        break;
      default:
        counts.up = randomNumber(8) + 1;
        counts.mid = randomNumber(6) / 2;
        counts.down = randomNumber(8) + 1;
        break;
      }

      var arr = ["up", "mid", "down"];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0 ; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  // don't summon him
  return heComes(text);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/custom/zalgo.js","/node_modules/colors/lib/custom")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/extendStringPrototype.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('./colors'),
    styles = require('./styles');

module['exports'] = function () {

  //
  // Extends prototype of native string object to allow for "foo".red syntax
  //
  var addProperty = function (color, func) {
    String.prototype.__defineGetter__(color, func);
  };

  var sequencer = function sequencer (map, str) {
      return function () {
        var exploded = this.split(""), i = 0;
        exploded = exploded.map(map);
        return exploded.join("");
      }
  };

  var stylize = function stylize (str, style) {
    return styles[style].open + str + styles[style].close;
  }

  addProperty('strip', function () {
    return colors.strip(this);
  });

  addProperty('stripColors', function () {
    return colors.strip(this);
  });

  addProperty("trap", function(){
    return colors.trap(this);
  });

  addProperty("zalgo", function(){
    return colors.zalgo(this);
  });

  addProperty("zebra", function(){
    return colors.zebra(this);
  });

  addProperty("rainbow", function(){
    return colors.rainbow(this);
  });

  addProperty("random", function(){
    return colors.random(this);
  });

  addProperty("america", function(){
    return colors.america(this);
  });

  //
  // Iterate through all default styles and colors
  //
  var x = Object.keys(colors.styles);
  x.forEach(function (style) {
    addProperty(style, function () {
      return stylize(this, style);
    });
  });

  function applyTheme(theme) {
    //
    // Remark: This is a list of methods that exist
    // on String that you should not overwrite.
    //
    var stringPrototypeBlacklist = [
      '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor',
      'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt',
      'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring',
      'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'
    ];

    Object.keys(theme).forEach(function (prop) {
      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\'t want to override. Ignoring style name');
      }
      else {
        if (typeof(theme[prop]) === 'string') {
          colors[prop] = colors[theme[prop]];
          addProperty(prop, function () {
            return colors[theme[prop]](this);
          });
        }
        else {
          addProperty(prop, function () {
            var ret = this;
            for (var t = 0; t < theme[prop].length; t++) {
              ret = exports[theme[prop][t]](ret);
            }
            return ret;
          });
        }
      }
    });
  }

  colors.setTheme = function (theme) {
    if (typeof theme === 'string') {
      try {
        colors.themes[theme] = require(theme);
        applyTheme(colors.themes[theme]);
        return colors.themes[theme];
      } catch (err) {
        console.log(err);
        return err;
      }
    } else {
      applyTheme(theme);
    }
  };

};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/extendStringPrototype.js","/node_modules/colors/lib")

},{"./colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","./styles":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/styles.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('./colors');
module['exports'] = colors;

// Remark: By default, colors will add style properties to String.prototype
//
// If you don't wish to extend String.prototype you can do this instead and native String will not be touched
//
//   var colors = require('colors/safe);
//   colors.red("foo")
//
//
var extendStringPrototype = require('./extendStringPrototype')();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/index.js","/node_modules/colors/lib")

},{"./colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","./extendStringPrototype":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/extendStringPrototype.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/america.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('../colors');

module['exports'] = (function() {
  return function (letter, i, exploded) {
    if(letter === " ") return letter;
    switch(i%3) {
      case 0: return colors.red(letter);
      case 1: return colors.white(letter)
      case 2: return colors.blue(letter)
    }
  }
})();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/maps/america.js","/node_modules/colors/lib/maps")

},{"../colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/rainbow.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('../colors');

module['exports'] = (function () {
  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV
  return function (letter, i, exploded) {
    if (letter === " ") {
      return letter;
    } else {
      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
    }
  };
})();


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/maps/rainbow.js","/node_modules/colors/lib/maps")

},{"../colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/random.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('../colors');

module['exports'] = (function () {
  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];
  return function(letter, i, exploded) {
    return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 1))]](letter);
  };
})();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/maps/random.js","/node_modules/colors/lib/maps")

},{"../colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/maps/zebra.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var colors = require('../colors');

module['exports'] = function (letter, i, exploded) {
  return i % 2 === 0 ? letter : colors.inverse(letter);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/maps/zebra.js","/node_modules/colors/lib/maps")

},{"../colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/colors.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/styles.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var styles = {};
module['exports'] = styles;

var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],

  // legacy styles for colors pre v1.0.0
  blackBG: [40, 49],
  redBG: [41, 49],
  greenBG: [42, 49],
  yellowBG: [43, 49],
  blueBG: [44, 49],
  magentaBG: [45, 49],
  cyanBG: [46, 49],
  whiteBG: [47, 49]

};

Object.keys(codes).forEach(function (key) {
  var val = codes[key];
  var style = styles[key] = [];
  style.open = '\u001b[' + val[0] + 'm';
  style.close = '\u001b[' + val[1] + 'm';
});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/styles.js","/node_modules/colors/lib")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/colors/lib/system/supports-colors.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var argv = process.argv;

module.exports = (function () {
  if (argv.indexOf('--no-color') !== -1 ||
    argv.indexOf('--color=false') !== -1) {
    return false;
  }

  if (argv.indexOf('--color') !== -1 ||
    argv.indexOf('--color=true') !== -1 ||
    argv.indexOf('--color=always') !== -1) {
    return true;
  }

  if (process.stdout && !process.stdout.isTTY) {
    return false;
  }

  if (process.platform === 'win32') {
    return true;
  }

  if ('COLORTERM' in process.env) {
    return true;
  }

  if (process.env.TERM === 'dumb') {
    return false;
  }

  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
    return true;
  }

  return false;
})();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/colors/lib/system/supports-colors.js","/node_modules/colors/lib/system")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/hammerjs/hammer.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*! Hammer.JS - v2.0.4 - 2014-09-28
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2014 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge]
 * @returns {Object} dest
 */
function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
function merge(dest, src) {
    return extend(dest, src, true);
}

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        extend(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument;
    return (doc.defaultView || doc.parentWindow);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = last.deltaX - input.deltaX;
        var deltaY = last.deltaY - input.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.allow = true; // used by Input.TouchMouse to disable mouse events
    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
        if (!this.pressed || !this.allow) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */
function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        // when we're in a touch event, so  block all upcoming mouse events
        // most mobile browser also emit mouseevents, right after touchstart
        if (isTouch) {
            this.mouse.allow = false;
        } else if (isMouse && !this.mouse.allow) {
            return;
        }

        // reset the allowMouse when we're done
        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
            this.mouse.allow = true;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        // not needed with native support for the touchAction property
        if (NATIVE_TOUCH_ACTION) {
            return;
        }

        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // pan-x and pan-y can be combined
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.id = uniqueId();

    this.manager = null;
    this.options = merge(options || {}, this.defaults);

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        extend(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(withState) {
            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(true);
        }

        emit(); // simple 'eventName' events

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(true);
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = extend({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {
        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        this._super.emit.call(this, input);
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            this.manager.emit(this.options.event + inOut, input);
        }
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 500, // minimal time of the pointer to be pressed
        threshold: 5 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.65,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.velocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.velocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.velocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.direction &&
            input.distance > this.options.threshold &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.direction);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 2, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED ) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create an manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.4';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, { enable: false }],
        [PinchRecognizer, { enable: false }, ['rotate']],
        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],
        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    options = options || {};

    this.options = merge(options, Hammer.defaults);
    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        extend(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        var recognizers = this.recognizers;
        recognizer = this.get(recognizer);
        recognizers.splice(inArray(recognizers, recognizer), 1);

        this.touchAction.update();
        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    each(manager.options.cssProps, function(value, name) {
        element.style[prefixed(element.style, name)] = add ? value : '';
    });
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

extend(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

if (typeof define == TYPE_FUNCTION && define.amd) {
    define(function() {
        return Hammer;
    });
} else if (typeof module != 'undefined' && module.exports) {
    module.exports = Hammer;
} else {
    window[exportName] = Hammer;
}

})(window, document, 'Hammer');

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/hammerjs/hammer.js","/node_modules/hammerjs")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/http-status/lib/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Generated by CoffeeScript 1.7.1
module.exports = {
  100: 'Continue',
  101: 'Switching Protocols',
  200: 'OK',
  201: 'Created',
  202: 'Accepted',
  203: 'Non-Authoritative Information',
  204: 'No Content',
  205: 'Reset Content',
  206: 'Partial Content',
  300: 'Multiple Choices',
  301: 'Moved Permanently',
  302: 'Found',
  303: 'See Other',
  304: 'Not Modified',
  305: 'Use Proxy',
  307: 'Temporary Redirect',
  400: 'Bad Request',
  401: 'Unauthorized',
  402: 'Payment Required',
  403: 'Forbidden',
  404: 'Not Found',
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Time-out',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Request Entity Too Large',
  414: 'Request-URI Too Large',
  415: 'Unsupported Media Type',
  416: 'Requested Range not Satisfiable',
  417: 'Expectation Failed',
  422: 'Unprocessable Entity',
  429: 'Too Many Requests',
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Time-out',
  505: 'HTTP Version not Supported',
  CONTINUE: 100,
  SWITCHING_PROTOCOLS: 101,
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NON_AUTHORITATIVE_INFORMATION: 203,
  NO_CONTENT: 204,
  RESET_CONTENT: 205,
  PARTIAL_CONTENT: 206,
  MULTIPLE_CHOICES: 300,
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  SEE_OTHER: 303,
  NOT_MODIFIED: 304,
  USE_PROXY: 305,
  TEMPORARY_REDIRECT: 307,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  PROXY_AUTHENTICATION_REQUIRED: 407,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION_FAILED: 412,
  REQUEST_ENTITY_TOO_LARGE: 413,
  REQUEST_URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIA_TYPE: 415,
  REQUESTED_RANGE_NOT_SATISFIABLE: 416,
  EXPECTATION_FAILED: 417,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  HTTP_VERSION_NOT_SUPPORTED: 505
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/http-status/lib/index.js","/node_modules/http-status/lib")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/lodash/dist/lodash.js","/node_modules/lodash/dist")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/DamerauLevenshtein.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
	costs: {
		delete: number | function ( char )
		insert: number | function ( char )
		replace: number | function ( what, by )
		transpose: number | function ( left, right )
	}
*/

"use strict";

function getCost(costs, op, a, b) {
	var cost = typeof costs == "object" ? costs[op] : costs;
	return typeof cost == "function" ? cost.call(costs, a, b) : cost;
}

module.exports = function (s1, s2) {
	var costs = arguments[2] === undefined ? 1 : arguments[2];

	var d = [];
	for (var i = 0; i <= s1.length; ++i) {
		d[i] = i < 3 ? [] : d[i - 3]; // some optimization
		for (var j = 0; j <= s2.length; ++j) {
			d[i][j] = i == 0 && j == 0 ? 0 : i == 0 ? d[i][j - 1] + getCost(costs, "insert", s2[j - 1]) : j == 0 ? d[i - 1][j] + getCost(costs, "delete", s1[i - 1]) : Math.min(d[i - 1][j] + getCost(costs, "delete", s1[i - 1]), d[i][j - 1] + getCost(costs, "insert", s2[j - 1]), d[i - 1][j - 1] + (s1[i - 1] == s2[j - 1] ? 0 : getCost(costs, "replace", s1[i - 1], s2[j - 1])), i > 1 && j > 1 && s1[i - 1] == s2[j - 2] && s1[i - 2] == s2[j - 1] ? d[i - 2][j - 2] + getCost(costs, "transpose", s1[i - 2], s1[i - 1]) : Infinity);
		}
	}
	return d[s1.length][s2.length];
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/DamerauLevenshtein.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/JSONlocal.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var ra = require("ra");

module.exports = function (key) {
	var defaults = arguments[1] === undefined ? null : arguments[1];

	var ret = ra.clean(defaults).setConst("reset", function () {
		localStorage.removeItem(key);
		ret.assign(defaults);
	}).setName("localStorage." + key);
	var stored = localStorage.getItem(key);
	if (stored != null) ret.assign(JSON.parse(stored));
	ra.clean(function () {
		if (ret.valueOf() != defaults) localStorage.setItem(key, JSON.stringify(ret));
	});
	return ret;
};
// ret.loaded = true

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/JSONlocal.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js"}],"/home/vadzim/v/work/nerojs/src/LOG.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

require("colors");

var LOG = function LOG(msg) {
  for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    data[_key - 1] = arguments[_key];
  }

  return console.log.apply(console, ["" + new Date().toISOString().replace("T", "=").replace("Z", "") + " " + msg].concat(data));
};
LOG.LOG = LOG;
LOG.INFO = LOG;
LOG.TRACE = LOG;
LOG.ERROR = LOG;
LOG.WARNING = LOG;

module.exports = LOG;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/LOG.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/index.js"}],"/home/vadzim/v/work/nerojs/src/PingPongJSON.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var lodash = require("lodash");

var PongJSON = (function (_require) {
	function PongJSON(q) {
		var _this = this;

		_classCallCheck(this, PongJSON);

		_get(Object.getPrototypeOf(PongJSON.prototype), "constructor", this).call(this);
		this._q = q;
		this.pipeFrom(q);
		q.onmessage = function (message) {
			return _this._message(message);
		};
	}

	_inherits(PongJSON, _require);

	_createClass(PongJSON, [{
		key: "unwise",
		value: function unwise() {
			var q = this._q;
			this._q = null;
			q.onopen = null;
			q.onclose = null;
			q.onerror = null;
			q.onmessage = null;
			return q.unwise ? q.unwise() : q;
		}
	}, {
		key: "_message",
		value: function _message(message) {
			if (message.what == "ping") this._q.send({ what: "pong", pong: message.ping });else this.domessage(message);
		}
	}, {
		key: "_send",
		value: function _send(message) {
			this._q.send(message);
		}
	}, {
		key: "_close",
		value: function _close() {
			this._q.onclose = null;
			this._q.close();
		}
	}]);

	return PongJSON;
})(require("WebQueue"));

var PingPongJSON = (function (_PongJSON) {
	function PingPongJSON(q) {
		var _this2 = this;

		var _ref = arguments[1] === undefined ? {} : arguments[1];

		var _ref$interval = _ref.interval;
		var interval = _ref$interval === undefined ? 60000 : _ref$interval;
		var _ref$timeout = _ref.timeout;
		var timeout = _ref$timeout === undefined ? 15000 : _ref$timeout;
		var _ref$maxpings = _ref.maxpings;
		var maxpings = _ref$maxpings === undefined ? 1000 : _ref$maxpings;

		_classCallCheck(this, PingPongJSON);

		_get(Object.getPrototypeOf(PingPongJSON.prototype), "constructor", this).call(this, q);
		this._pings = {};
		this._count = 0;
		this._pinterval = interval == Infinity ? null : setInterval(function () {
			return _this2.ping();
		}, interval);
		this._timeout = timeout;
		this._maxpings = maxpings;
	}

	_inherits(PingPongJSON, _PongJSON);

	_createClass(PingPongJSON, [{
		key: "_message",
		value: function _message(message) {
			if (message.what == "pong") {
				if (Object.prototype.hasOwnProperty.call(this._pings, message.pong)) {
					clearTimeout(this._pings[message.pong]);
					delete this._pings[message.pong];
					--this._count;
				}
			} else _get(Object.getPrototypeOf(PingPongJSON.prototype), "_message", this).call(this, message);
		}
	}, {
		key: "_send",
		value: function _send(message) {
			_get(Object.getPrototypeOf(PingPongJSON.prototype), "_send", this).call(this, message);
			this.ping();
		}
	}, {
		key: "_close",
		value: function _close() {
			clearInterval(this._pinterval);
			this._pinterval = null;
			lodash.forEach(this._pings, function (t) {
				return clearTimeout(t);
			});
			this._pings = null;
			_get(Object.getPrototypeOf(PingPongJSON.prototype), "_close", this).call(this);
		}
	}, {
		key: "ping",
		value: function ping() {
			var _this3 = this;

			if (!this._q) return;
			if (this._count > this._maxpings) return this._ontimeout();
			var id = "" + Math.random();
			this._q.send({ what: "ping", ping: id });
			this._pings[id] = setTimeout(function () {
				console.log(id.red);
				_this3._ontimeout();
			}, this._timeout);
			++this._count;
		}
	}, {
		key: "_ontimeout",
		value: function _ontimeout() {
			try {
				this.doerror(new Error("timeout"));
			} finally {
				this.close();
			}
		}
	}]);

	return PingPongJSON;
})(PongJSON);

module.exports = function (q, options) {
	return new PingPongJSON(q, options);
};
module.exports.silent = function (q) {
	return new PongJSON(q);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/PingPongJSON.js","/src")

},{"WebQueue":"/home/vadzim/v/work/nerojs/src/WebQueue.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js"}],"/home/vadzim/v/work/nerojs/src/WebQueue.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebQueue = (function () {
	function WebQueue() {
		_classCallCheck(this, WebQueue);

		this.onopen = null;
		this.onclose = null;
		this.onmessage = null;
		this.onerror = null;
		this._closed = false;
		this._opened = false;
	}

	_createClass(WebQueue, [{
		key: "doopen",
		value: function doopen() {
			if (!this._closed && this.onopen && !this._opened) {
				this._opened = true;
				this.onopen();
			}
		}
	}, {
		key: "doclose",
		value: function doclose() {
			if (this.onclose) this.onclose();
		}
	}, {
		key: "domessage",
		value: function domessage(message) {
			if (!this._closed && this.onmessage) {
				if (!this._opened) this.doopen();
				this.onmessage(message);
			}
		}
	}, {
		key: "doerror",
		value: function doerror(error) {
			if (this.onerror) this.onerror(error);else process.nextTick(function () {
				throw error;
			});
		}
	}, {
		key: "_send",
		value: function _send() {}
	}, {
		key: "send",
		value: function send(message) {
			if (!this._closed) this._send(message);
		}
	}, {
		key: "_close",
		value: function _close() {}
	}, {
		key: "close",
		value: function close() {
			if (this._closed) return;
			try {
				this._close();
			} finally {
				this._closed = true;
				this.doclose();
			}
		}
	}, {
		key: "pipeFrom",
		value: function pipeFrom(q) {
			var _this = this;

			q.onopen = function () {
				return _this.doopen();
			};
			q.onclose = function () {
				return _this.close();
			};
			q.onerror = function (error) {
				return _this.doerror(error);
			};
			q.onmessage = function (message) {
				return _this.domessage(message);
			};
		}
	}]);

	return WebQueue;
})();

module.exports = WebQueue;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/WebQueue.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/WebSocketToJSON.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var WebSocketToJSON = (function (_require) {
	function WebSocketToJSON(ws) {
		var _this = this;

		_classCallCheck(this, WebSocketToJSON);

		_get(Object.getPrototypeOf(WebSocketToJSON.prototype), "constructor", this).call(this);
		this._ws = ws;
		this.pipeFrom(ws);
		ws.onmessage = function (event) {
			var message = undefined;
			try {
				message = JSON.parse(String(event.data));
			} catch (error) {
				return _this.doerror(error);
			}
			_this.domessage(message);
		};
	}

	_inherits(WebSocketToJSON, _require);

	_createClass(WebSocketToJSON, [{
		key: "unwise",
		value: function unwise() {
			var ws = this._ws;
			this._ws = null;
			ws.onopen = null;
			ws.onclose = null;
			ws.onerror = null;
			ws.onmessage = null;
			return ws;
		}
	}, {
		key: "_send",
		value: function _send(message) {
			this._ws.send(JSON.stringify(message));
		}
	}, {
		key: "_close",
		value: function _close() {
			this._ws.onclose = null;
			this._ws.close();
		}
	}]);

	return WebSocketToJSON;
})(require("WebQueue"));

module.exports = function (ws) {
	return new WebSocketToJSON(ws);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/WebSocketToJSON.js","/src")

},{"WebQueue":"/home/vadzim/v/work/nerojs/src/WebQueue.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/app.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*

TODO 2015.03.25 У ТЗ не было: Рэдагаваньне месцаў магчыма патрэбнае толькі лакальна з асобнымі камандамі меню "захаваць для змоўчанага" і "загрузіць на ўсе прылады".

*/
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var JSONlocal = require("JSONlocal");
var lu = require("localUtils");
var ra = require("ra");
var lodash = require("lodash");
var UID = require("uid");
var httpClient = require("httpClient");
var EventEmitter = require("events").EventEmitter || require("events");
var deviceActions = require("deviceActions");
var HTTPStatus = require("http-status");
var WebSocketToJSON = require("WebSocketToJSON");
var PingPongJSON = require("PingPongJSON");

var WebSocketRetry = 1000;
var savePlacesTimeout = 3000;

var PersistentWebSocket = (function (_EventEmitter) {
	function PersistentWebSocket(url) {
		_classCallCheck(this, PersistentWebSocket);

		_get(Object.getPrototypeOf(PersistentWebSocket.prototype), "constructor", this).call(this);
		this.connected = false;
		this.closed = false;
		this._ws = null;
		this._sheduledCreating = null;
		this._first = true;
		this._lastClose = -Infinity;
		this.url = url;
		this.user = undefined;
		this.key = undefined
		// window.addEventListener( `_application_resumed` )
		;
	}

	_inherits(PersistentWebSocket, _EventEmitter);

	_createClass(PersistentWebSocket, [{
		key: "url",
		get: function () {
			return this._url;
		},
		set: function (url) {
			this._url = url;
			this._createHandle();
		}
	}, {
		key: "_setConnected",
		value: function _setConnected(value) {
			value = !!value;
			if (this.connected != value) {
				this.connected = value;
				this.emit("changed", value);
			}
		}
	}, {
		key: "_clearHandle",
		value: function _clearHandle() {
			if (this._ws) {
				this._ws.onclose = null;
				this._ws.close();
				this._ws = null;
				this._setConnected(false);
			}
			if (this._sheduledCreating) {
				clearTimeout(this._sheduledCreating);
				this._sheduledCreating = null;
			}
		}
	}, {
		key: "_ensureHandle",
		value: function _ensureHandle() {
			if (!this._ws) this._createHandle();
		}
	}, {
		key: "_createHandle",
		value: function _createHandle() {
			var _this = this;

			this._clearHandle();
			if (!this._url) return;
			this._ws = PingPongJSON(WebSocketToJSON(new WebSocket(this._url)));
			this._ws.onclose = function () {
				_this._ws = null;
				_this._setConnected(false);
				_this.emit("pause");
				if (!_this.closed) {
					var t = _this._lastClose;
					_this._lastClose = Date.now();
					_this._sheduledCreating = setTimeout(function () {
						_this._createHandle();
					}, Math.max(0, WebSocketRetry - (_this._lastClose - t)));
				}
			};
			this._ws.onerror = function (error) {
				_this.emit("error", error);
			};
			this._ws.onopen = function () {
				_this._setConnected(true);
				if (_this._first) {
					_this._first = false;
					_this.emit("open");
				}
				_this.emit("resume");
			};
			this._ws.onmessage = function (message) {
				_this.emit("message", message);
			};
		}
	}, {
		key: "reinit",
		value: function reinit() {
			this._ws && this._ws.close();
		}
	}, {
		key: "send",
		value: function send(data) {
			this._ensureHandle();
			if (!(this._ws && this.connected && !this.closed)) throw new Error("socket is not open");
			this._ws.send(data);
		}
	}, {
		key: "delete",
		value: function _delete() {
			this.close();
		}
	}, {
		key: "close",
		value: function close() {
			this.closed = true;
			this._clearHandle();
			this.emit("close");
		}
	}, {
		key: "ask",
		value: function ask(question) {
			return co.gocall(regeneratorRuntime.mark(function callee$2$0() {
				var id, message;
				return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
					while (1) switch (context$3$0.prev = context$3$0.next) {
						case 0:
							id = UID();

							this.send({ id: id, question: question });
							context$3$0.next = 4;
							return this.get(id);

						case 4:
							message = context$3$0.sent;

							if (!message.error) {
								context$3$0.next = 7;
								break;
							}

							throw new Error(message.error);

						case 7:
							return context$3$0.abrupt("return", message.answer);

						case 8:
						case "end":
							return context$3$0.stop();
					}
				}, callee$2$0, this);
			}), this);
		}
	}, {
		key: "get",
		value: function get(predicate, timeout) {
			return co.gocall(regeneratorRuntime.mark(function callee$2$0() {
				var _ref, event, data;

				return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
					while (1) switch (context$3$0.prev = context$3$0.next) {
						case 0:
							if (typeof predicate == "string" || typeof predicate == "number") {
								(function () {
									var id = predicate;
									predicate = function (msg) {
										return msg.id == id;
									};
								})();
							} else if (!(typeof predicate == "function")) {
								(function () {
									var p = predicate;
									predicate = function (msg) {
										return lodash.every(p, function (value, key) {
											return msg[key] == value;
										});
									};
								})();
							}
							context$3$0.next = 3;
							return co.receive(this, { close: true, message: predicate, timeout: timeout });

						case 3:
							_ref = context$3$0.sent;
							event = _ref.event;
							data = _ref.data;

							if (!(event == "message")) {
								context$3$0.next = 8;
								break;
							}

							return context$3$0.abrupt("return", data);

						case 8:
							throw new Error("timeout");

						case 9:
						case "end":
							return context$3$0.stop();
					}
				}, callee$2$0, this);
			}), this);
		}
	}]);

	return PersistentWebSocket;
})(EventEmitter);

function wsClient(app, url) {
	var ws = new PersistentWebSocket();
	ra(function () {
		return ws.url = app.localModem && app.localModem + url;
	});
	ws.active = ra.on(ws, ["pause", "resume"], function () {
		return ws.connected;
	});
	return ws;
}

function wsJSONclient(app, url) {

	var json = JSONlocal(url, { uid: null });
	var ws = wsClient(app, url);
	var init = function init() {
		return ws.send({ what: "init", id: json.uid });
	};
	var resolvers = {};

	var doError = function doError(message, data) {
		throw new Error("wsJSONclient: " + message + ": " + JSON.stringify(data));
	};

	lu.on(ws, {
		resume: init,
		message: function message(_message) {
			switch (_message.what) {
				case "error":
					doError("error from server", _message);
				case "saved":
					{
						var resolve = resolvers[_message.messageId];
						delete resolvers[_message.messageId];
						resolve && resolve();
						return;
					}
				case "data":
					{
						if (_message.partial && _message.previous != json.uid) init();else if (Object.prototype.hasOwnProperty.call(_message, "data")) json.assign((_message.partial ? lu.applyDiff : lu.assignDiff)(json.valueOf(), _message.data));
						return;
					}
				default:
					doError("unknown message from server", _message);
			}
		},
		error: function error() {
			app.onCredentials();
		} });

	function doReject(messageId, reject) {
		delete resolvers[messageId];
		reject();
	}

	var save = function save(partial, data) {
		return new Promise(function (resolve, reject) {
			var messageId = UID();
			resolvers[messageId] = resolve;
			ws.send({ what: "save", partial: partial, data: data, messageId: messageId });
			setTimeout(doReject, savePlacesTimeout, messageId, reject);
		});
	};

	return {
		data: json.getReadOnly(),
		active: ws.active,
		send: function send(data) {
			return save(false, data);
		},
		update: function update(data) {
			return save(true, data);
		},
		"delete": function _delete() {
			ws.close();
		} };
}

module.exports = function (appid) {

	var localDefaults = {
		activeDeviceId: "",
		language: "ru",
		iconSize: 40, // millimeters
		labels: true,
		placesPages: {} };

	var local = JSONlocal(appid, localDefaults);

	var app = ra.clean(Object.defineProperties({

		getMessage: function getMessage(data) {
			var language = local.language || "ru";
			return [language, "ru", "en", "by"].filter(function (l) {
				return Object.prototype.hasOwnProperty.call(data, l);
			}).map(function (l) {
				return data[l];
			})[0];
		},

		pageWidth: 2,
		pageHeight: 3,
		pageStarting: false,
		dialog: "",
		editing: false,
		moving: 0,
		dimmering: 0,
		history: [],
		menuElement: null, // div

		loggedin: false,
		// credentials: 1,
		onCredentials: function onCredentials() {
			this.loggedin = false;
		},

		go: function go(to, path) {
			var _this2 = this;

			if (!to) return;
			var h = this.history;
			var a = local.activeDeviceId;
			var l = undefined;
			while (h.length && (l = h[h.length - 1], l == to || l == a || path && path.indexOf(l) >= 0)) h.pop();
			if (a != to) h.push(a);
			path && h.push.apply(h, _toConsumableArray(path.filter(function (id) {
				return id != _this2.main;
			}).reverse()));
			local.activeDeviceId = to;
			this.dialog = "";
		},

		back: function back() {
			while (this.history.length) {
				var device = this.history.pop();
				if (this.getDevice(device)) return local.activeDeviceId = device;
			}
			local.activeDeviceId = this.main;
		},

		windowSize: require("windowSize").getReadOnly(),

		placesShifts: {},

		login: function login(name, pwd) {},

		getDevice: function getDevice(deviceId) {
			return this.devices && this.devices[lu.valueOf(deviceId)];
		},

		linkingPlaceId: null,

		getFreeGroup: function getFreeGroup() {
			var groups = lodash.reduce(lu.valueOf(this.devices), function (ret, d) {
				if (d.group) ret[d.group] = true;
				return ret;
			}, []);
			for (var i = 2; i <= 1022; ++i) {
				if (!groups[i]) return i;
			}return null;
		},

		setDatabase: function setDatabase(devices) {
			this.serverDevices.send(devices);
		},

		reset: function reset() {
			local.reset();
			this.setDatabase({ uid: UID() }, { uid: UID() });
			this.dialog = "";
			this.editing = false;
			this.history.length = 0;
		},

		setTemplate: function setTemplate(template) {
			console.log(template);
			var devices = {
				uid: UID() };
			function copy(template, device) {
				Object.keys(template).forEach(function (key) {
					return key != "image" && // TODO: !!!!!!!!
					key != "content" && key != "type" && (device[key] = template[key]);
				});
				return device;
			}
			function walk(template, id) {
				if (template.content || template.type == "place") {
					(function () {
						var content = {};
						devices[id] = copy(template, { type: "place", content: content });
						var index = 0;
						template.content && template.content.forEach(function (p) {
							return content[walk(p, UID())] = { index: index++ };
						});
					})();
				} else {
					devices[id] = copy(template, { type: "single" });
				}
				return id;
			}
			devices.main = walk(template, UID());
			this.setDatabase(devices);
		},

		message: function message(id) {
			var ret = this.messages && this.messages[id];
			if (ret == null) ret = id;
			return ret;
		},

		notification: function notification(message) {},

		saveDevice: function saveDevice(deviceId, device) {
			return this.serverDevices.update(_defineProperty({}, deviceId, lu.makeDiff(this.getDevice(deviceId), device)));
		},

		newIndex: function newIndex(iconId) {
			return Object.keys(this.getDevice(iconId).content || []).length + 1;
		},

		linkItem: function linkItem(iconId, itemId) {
			if (iconId == itemId) throw new Error("cannot link place to itself");
			return this.serverDevices.update(_defineProperty({}, iconId, {
				content: _defineProperty({}, itemId, {
					index: this.newIndex(iconId) }) }));
		},

		linkToFavourites: function linkToFavourites(itemId) {
			return this.linkItem(this.main, itemId);
		},

		linkActiveToFavourites: function linkActiveToFavourites(itemId) {
			return this.linkToFavourites(this.activeDeviceId);
		},

		addItem: function addItem(iconId, item) {
			var _serverDevices$update3;

			var id = UID();
			return this.serverDevices.update((_serverDevices$update3 = {}, _defineProperty(_serverDevices$update3, iconId, {
				content: _defineProperty({}, id, {
					index: this.newIndex(iconId) }) }), _defineProperty(_serverDevices$update3, id, item), _serverDevices$update3));
		},

		addPlace: function addPlace(iconId) {
			return this.addItem(iconId, {
				type: "place",
				ru: "Помещение",
				en: "Room" });
		},

		addDevice: function addDevice(iconId) {
			return this.addItem(iconId, {
				type: "device",
				ru: "Устройство",
				en: "Device" });
		},

		addGroup: function addGroup(iconId) {
			return this.addItem(iconId, {
				type: "group",
				ru: "Группа",
				en: "Group" });
		},

		deleteItem: function deleteItem(placeId, iconId) {
			return this.serverDevices.update(_defineProperty({}, placeId, { content: _defineProperty({}, iconId, null) }));
		},

		purgeItem: function purgeItem(iconId) {
			return Promise.all([this.serverDevices.update(lodash.reduce(this.devices, function (ret, q, index) {
				if (q && q.content && q.content[iconId]) ret[index] = { content: _defineProperty({}, iconId, null) };
				return ret;
			}, _defineProperty({}, iconId, null)))]);
		},

		renameItem: function renameItem(iconId, name) {
			var ret = lodash.reduce(this.getDevice(iconId), function (ret, _, key) {
				if (key.length == 2) ret[key] = null;
				return ret;
			}, {});
			ret[localDefaults.language || "ru"] = name;
			return this.serverDevices.update(_defineProperty({}, iconId, ret));
		},

		command: function command(deviceId, cmd, data) {

			var newstate = deviceActions.getNewState(this.getDevice(deviceId), cmd);
			if (newstate != null) {}

			return this.commands.ask({ device: deviceId, command: cmd, data: data });
		},

		iconCommand: function iconCommand(icon, iconId, cmd, data) {
			// console.log( icon, iconId, cmd )
			icon = lu.valueOf(icon);
			if (icon.type == "place" ? cmd == "Short" : cmd == "Long") return this.go(iconId);
			if (icon.type != "place" && !icon.group) {
				this.dialog = "AskToLinkDevice";
				this.linkingPlaceId = iconId;
				// return Promise.reject( new Error( `device not configured` ) )
				return Promise.resolve();
			}
			if (cmd == "Short" || cmd == "Long") {
				if (icon && icon.state) cmd = "Down";else cmd = "Up"
				// cmd = `Comfort_1`
				;
			}
			return this.command(iconId, cmd, data);
		},

		pan: function pan(data) {
			var rect = this.menuElement.getBoundingClientRect();
			var deviceid = this.activeDeviceId;
			this.placesShifts.defineProperty(deviceid);
			local.placesPages.defineProperty(deviceid);
			var device = this.getDevice(deviceid);
			if (!device || !device.content) return;
			var size = Math.ceil(Object.keys(device.content).length / (this.pageWidth * this.pageHeight));
			if (size == 0) return;
			var page = local.placesPages[deviceid] || 0;
			var initialShift = -page * rect.width;
			if (data.isFinal) {
				if (data.deltaX > 0 && page > 0) local.placesPages[deviceid] = page - 1;else if (data.deltaX < 0 && page < size - 1) local.placesPages[deviceid] = page + 1;
				this.placesShifts[deviceid] = 0;
			} else {
				var shift = data.deltaX;
				if (shift > 0 && page == 0 || shift < 0 && page == size - 1) shift /= 3;
				this.placesShifts[deviceid] = shift;
			}
		},

		focus: function focus(node) {
			// magic actions to force allow to show keyboard by input.focus() on iOS ( so far checked iOS 8 )
			setTimeout(function () {
				return node.focus();
			}, 400);
		},

		searchAction: null,
		searchFilter: null,

		icons: null,

		modules: new WeakMap(),
		load: function load(module) {
			var ret = this.modules.get(module);
			if (ret == null) {
				ret = module(app, local);
				this.modules.set(module, ret);
			}
			return ret;
		} }, {
		modemLocations: {

			// TODO абнаўляць!! інтэрфейсы як толькі яны ў мадэма абнаўляюцца!!

			get: function () {
				return httpClient.get("/modem_locations");
			},
			configurable: true,
			enumerable: true
		},
		localModem: {
			get: function () {
				return this.modemLocations ? this.modemLocations[0].url.replace(/^http(?=s?\:\/\/)/, "ws") : "";
			},
			configurable: true,
			enumerable: true
		},
		doLogin: {
			get: function () {
				return regeneratorRuntime.mark(function callee$2$0() {
					var script;
					return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
						var _this3 = this;

						while (1) switch (context$3$0.prev = context$3$0.next) {
							case 0:
								if (!(!this.loggedin && this.modemLocations)) {
									context$3$0.next = 23;
									break;
								}

								script = document.createElement("script");

								script.src = "" + this.modemLocations[0].url + "/login?" + UID();
								document.body.appendChild(script);
								context$3$0.prev = 4;
								context$3$0.next = 7;
								return script
								// yield Promise.race( [ co.promise( script ), co.timeout( 15000 ), ] )
								;

							case 7:
								context$3$0.next = 16;
								break;

							case 9:
								context$3$0.prev = 9;
								context$3$0.t0 = context$3$0["catch"](4);

								LOG("error while trying to login: " + (context$3$0.t0 && context$3$0.t0.message && context$3$0.t0));
								console.error(context$3$0.t0);
								context$3$0.next = 15;
								return co.sleep(300);

							case 15:
								return context$3$0.abrupt("continue", 0);

							case 16:
								context$3$0.prev = 16;

								document.body.removeChild(script);
								return context$3$0.finish(16);

							case 19:
								LOG("logged in");
								ra.detach(function () {
									return _this3.loggedin = true;
								});
								context$3$0.next = 0;
								break;

							case 23:
							case "end":
								return context$3$0.stop();
						}
					}, callee$2$0, this, [[4, 9, 16, 19]]);
				}).call(this);
			},
			configurable: true,
			enumerable: true
		},
		serverDevices: {
			get: function () {
				return wsJSONclient(this, "/database");
			},
			configurable: true,
			enumerable: true
		},
		localDevices: {
			get: function () {
				var _this4 = this;

				return ra.db(this.serverDevices.data, function (data) {
					return _this4.serverDevices.update(data);
				});
			},
			configurable: true,
			enumerable: true
		},
		devices: {
			get: function () {
				return this.localDevices.valueOf();
			},
			configurable: true,
			enumerable: true
		},
		commands: {
			get: function () {
				return wsClient(this, "/commands");
			},
			configurable: true,
			enumerable: true
		},
		connectedToServer: {
			get: function () {
				return true && this.serverDevices.active.valueOf() && this.commands.active.valueOf();
			},
			configurable: true,
			enumerable: true
		},
		main: {
			get: function () {
				var p = this.devices;
				return p && lu.valueOf(p.main);
			},
			configurable: true,
			enumerable: true
		},
		activeDeviceId: {
			get: function () {
				return local.activeDeviceId || this.main;
			},
			configurable: true,
			enumerable: true
		},
		activeDevice: {
			get: function () {
				return this.getDevice(this.activeDeviceId);
			},
			configurable: true,
			enumerable: true
		},
		activeContentIds: {
			get: function () {
				var device = this.activeDevice;
				return ra.Array(lodash.keys(device && device.content).sort(function (a, b) {
					return device.content[a].index - device.content[b].index;
				}));
			},
			configurable: true,
			enumerable: true
		},
		activeContent: {
			get: function () {
				return ra.Array(this.activeContentIds.map(this.getDevice));
			},
			configurable: true,
			enumerable: true
		},
		clearLinkingPlaceId: {
			get: function () {
				if (this.dialog != "AskToLinkDevice" && this.dialog != "AskIfDeviceHasBeenLinked") this.linkingPlaceId = null;
			},
			configurable: true,
			enumerable: true
		},
		checkIfTimeToGoBack: {
			get: function () {
				// lu.valueOf( this.places )
				if (!this.getDevice(this.activeDeviceId)) this.back();
			},
			configurable: true,
			enumerable: true
		},
		caption: {
			get: function () {
				return this.getMessage(this.getDevice(this.activeDeviceId)) || this.message("favorites");
			},
			configurable: true,
			enumerable: true
		},
		deviceType: {
			get: function () {
				var ret = this.getDevice(this.activeDeviceId);
				if (!ret) ret = this.getDevice(this.main);
				return ret.type;
			},
			configurable: true,
			enumerable: true
		},
		deviceIds: {
			get: function () {
				var devices = lu.valueOf(this.devices);
				return ra.Array(lodash.keys(devices).filter(function (i) {
					var p = devices[i];
					return p && p.type;
				}).sort());
			},
			configurable: true,
			enumerable: true
		},
		initialLoading: {
			get: function () {
				return !this.devices || !this.devices.uid;
			},
			configurable: true,
			enumerable: true
		},
		initialized: {
			get: function () {
				return !this.initialLoading && !!this.devices && !!this.devices.main;
			},
			configurable: true,
			enumerable: true
		},
		templates: {
			get: function () {
				return regeneratorRuntime.mark(function callee$2$0() {
					return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
						while (1) switch (context$3$0.prev = context$3$0.next) {
							case 0:
								context$3$0.prev = 0;
								context$3$0.next = 3;
								return httpClient.get("/templates");

							case 3:
								return context$3$0.abrupt("return", context$3$0.sent);

							case 6:
								context$3$0.prev = 6;
								context$3$0.t0 = context$3$0["catch"](0);
								return context$3$0.abrupt("return", context$3$0.t0);

							case 9:
							case "end":
								return context$3$0.stop();
						}
					}, callee$2$0, this, [[0, 6]]);
				}).call(this);
			},
			configurable: true,
			enumerable: true
		},
		allMessages: {
			get: function () {
				return regeneratorRuntime.mark(function callee$2$0() {
					return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
						while (1) switch (context$3$0.prev = context$3$0.next) {
							case 0:
								context$3$0.next = 2;
								return httpClient.get("/messages");

							case 2:
								return context$3$0.abrupt("return", context$3$0.sent);

							case 3:
							case "end":
								return context$3$0.stop();
						}
					}, callee$2$0, this);
				}).call(this);
			},
			configurable: true,
			enumerable: true
		},
		messages: {
			get: function () {
				var allMessages = this.allMessages;
				if (allMessages == null) return;
				var ret = {};
				var language = local.language || "ru";
				lodash.forOwn(allMessages, function (value, key) {
					return ret[key] = Object.prototype.hasOwnProperty.call(value, language) ? value[language] : key;
				});
				return ret;
			},
			configurable: true,
			enumerable: true
		},
		imgProps: {
			get: function () {
				return { // TODO: move to right module
					onerror: function onerror() {
						this.classList.add("error");
					},
					onload: function onload() {
						this.classList.remove("error");
					} };
			},
			configurable: true,
			enumerable: true
		},
		checkSearchDialog: {
			get: function () {
				if (this.dialog != "SearchItems") {
					this.searchAction = null;
					this.searchFilter = null;
				}
			},
			configurable: true,
			enumerable: true
		}
	})).setName("app");

	return { app: app, local: local };
};
// TODO: this code with an XMLHttpRequest does not work on iPhone :(((
// let xhr = new XMLHttpRequest
// xhr.open( `POST`, this.modemLocations[ 0 ].url + `/login`, true, `nero`, `123` )
// xhr.withCredentials = true
// try {
// 	xhr.send()
// 	yield xhr
// 	// alert( xhr.status )
// 	LOG( ( `` + xhr.status ).blue )
// 	if ( xhr.status >= 200 && xhr.status <= 299 )
// 		return ra.detach( () => this.loggedin = true )
// }
// catch ( error ) {
// 	// alert( `ERR` )
// 	console.log( `error while trying to login`, error )
// }
// yield co.sleep( 300 )

// alert( message )

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/app.js","/src")

},{"JSONlocal":"/home/vadzim/v/work/nerojs/src/JSONlocal.js","PingPongJSON":"/home/vadzim/v/work/nerojs/src/PingPongJSON.js","WebSocketToJSON":"/home/vadzim/v/work/nerojs/src/WebSocketToJSON.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","deviceActions":"/home/vadzim/v/work/nerojs/src/deviceActions.js","events":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/events/events.js","http-status":"/home/vadzim/v/work/nerojs/node_modules/http-status/lib/index.js","httpClient":"/home/vadzim/v/work/nerojs/src/httpClient.js","localUtils":"/home/vadzim/v/work/nerojs/src/localUtils.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js","uid":"/home/vadzim/v/work/nerojs/src/uid.js","windowSize":"/home/vadzim/v/work/nerojs/src/windowSize.js"}],"/home/vadzim/v/work/nerojs/src/browser-nexttick.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var MAX_TICKS = 1000;

var setTimeout = window.setTimeout;
var setInterval = window.setInterval;

process.nextTick = nextTick;

var queue = [];
var timer = null;
var processing = false;
var secret = "process-tick-" + Math.random();

var installTimer = function installTimer() {
	timer = setTimeout(onTimer, 1);
};

if (window.postMessage && window.addEventListener) {
	(function () {
		window.addEventListener("message", function (ev) {
			var source = ev.source;
			if ((source == window || source == null) && ev.data == secret) {
				ev.stopPropagation();
				onTimer();
			}
		});
		var postMessage = window.postMessage;
		installTimer = function () {
			postMessage(secret, "*");
			timer = true;
		};
	})();
}

!["setTimeout", "setInterval", "requestAnimationFrame"].forEach(function (name) {
	var proc = hookMethod(window, name, function (handler, time) {
		if (typeof arguments[0] == "function") arguments[0] = getProxy(arguments[0]);
		return proc.apply(this, arguments);
	});
});

![window, document].forEach(hookEventListener);

function onTimer() {
	timer = null;
	processQueue();
}

function ensureTimer() {
	if (!timer && !processing) installTimer();
}

function nextTick(fun) {
	queue.push(fun);
	ensureTimer();
}

function processQueue() {
	if (processing || !queue.length) return;
	var index = 0;
	processing = true;
	try {
		while (index < MAX_TICKS && index < queue.length) queue[index++]();
	} finally {
		// console.log( "ticks: " + index )
		processing = false;
		queue.splice(0, index);
		if (queue.length) ensureTimer();
	}
}

function getProxy(handler) {
	function proxy() {
		var ret = handler.handleEvent ? handler.handleEvent.apply(handler, arguments) : handler.apply(this, arguments);
		processQueue();
		return ret;
	}
	var ret = undefined;
	if ((ret = handler[secret]) != null) return ret;else {
		assignProperty(proxy, secret, proxy);
		return assignProperty(handler, secret, proxy);
	}
}

function hookEventListener(obj) {
	if (obj.addEventListener) {
		(function () {
			var addEventListener = hookMethod(obj, "addEventListener", function (event, handler) {
				arguments[1] = getProxy(arguments[1]);
				return addEventListener.apply(this, arguments);
			});
			var removeEventListener = hookMethod(obj, "removeEventListener", function (event, handler) {
				if (arguments[1][secret]) arguments[1] = arguments[1][secret];
				return removeEventListener.apply(this, arguments);
			});
		})();
	}
}

function hookMethod(obj, name, proxy) {
	var ret = obj[name];
	if (ret) {
		assignProperty(proxy, "toString", function () {
			return ret.toString();
		});
		obj[name] = proxy;
	}
	return ret;
}

function assignProperty(obj, name, value) {
	if (Object.defineProperty) Object.defineProperty(obj, name, { value: value });else obj[name] = value;
	return value;
}

/*
Does not work. window[ secret ] is executed before, not after, current script will finish.
*/

//
// window[ secret ] = () => {
// 	delete window[ secret ]
// 	let script = document.getElementById( secret )
// 	script.parentNode.removeChild( script )
// 	console.log( 98765, queue.length )
// 	processQueue()
// 	console.log( 98765, queue.length )
// }

// let code = `window[ "${ secret }" ]()`

// if ( document.body ) {
// 	let script = document.createElement( "script" )
// 	script.id = secret
// 	script.innerHTML = code
// 	document.body.appendChild( script )
// }
// else
// 	document.write( `<script id = "${ secret }1" >${ code }</script>` )

// console.log( 54321, queue.length )

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/browser-nexttick.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/co.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var marked0$0 = [_IteratorProxy].map(regeneratorRuntime.mark);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var later = require("later");
var EventEmitter = require("events").EventEmitter;

// let currentThread

// Object.defineProperty( exports, `currentThread`, { enumerable: true, get: exports.getCurrentThread = () => currentThread } )

// Object.defineProperty( exports, `global`, { enumerable: true, get: exports.getGlobal = () => currentThread._global } )

var co = module.exports = exports = new EventEmitter();

var threadCatcher = null;

exports.currentThread = null;
exports.global = null;

var id = function id(value) {
	return value;
};

exports.go = function (fun) {
	for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		args[_key - 1] = arguments[_key];
	}

	if (typeof fun == "function") fun = fun.apply(null, args);
	if (!fun.next) {
		(function () {
			var value = fun;
			fun = {
				next: function next() {
					var ret = { value: value, done: !value };
					value = null;
					return ret;
				} };
		})();
	}
	return new Thread(fun);
};

exports.gocall = function (fun, context) {
	for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		args[_key2 - 2] = arguments[_key2];
	}

	return new Thread(fun.apply(context, args));
};

exports.func = function (fun) {
	if (arguments.length >= 2) fun = Array.prototype.reduceRight.call(arguments, function (g, f) {
		return f(g);
	});
	return function proc() {
		return new Thread(fun.apply(this, arguments));
	};
};

// the first argument is an error, the second one is a result
exports.cb = function (funWithCB) {
	return function () {
		var _this = this;

		for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			args[_key3] = arguments[_key3];
		}

		return new Promise(function (resolve, reject) {
			return funWithCB.call.apply(funWithCB, [_this].concat(args, [function (error, value) {
				if (error != null) reject(error);else resolve(value);
			}]));
		});
	};
};

exports.catchThreads = function (cb, onThread) {
	var oldCatcher = threadCatcher;
	threadCatcher = onThread;
	try {
		return cb();
	} finally {
		threadCatcher = oldCatcher;
	}
};

exports.receive = function (emitter, events) {
	return new Promise(function (resolve, reject) {
		var handlers = Object.create(null);
		var timer = undefined;
		var rejecter = co.defer(function () {
			clear();
			reject();
		});

		var _loop = function (_event) {
			if (Object.prototype.hasOwnProperty.call(events, _event)) {
				var _ret3 = (function () {
					var predicate = events[_event];
					if (predicate == null)
						//
						// allow simpler events defining like
						//
						// yield co.receive( obj, { data: true, timeout: getTimeout( ... ), } )
						//
						// instead of
						//
						// let events = { data: true, }
						// if ( getTimeout( ... ) != null ) events.timeout = getTimeout( ... )
						// yield co.receive( obj, events )
						//
						return {
							v: "continue"
						};
					if (_event == "timeout") timer = setTimeout(function () {
						return done("timeout", null);
					}, predicate);else emitter.addListener(_event, handlers[_event] = function (data) {
						if (typeof predicate != "function" || predicate(data)) done(_event, data);
					});
				})();

				if (typeof _ret3 === "object") return _ret3.v;
			}
		};

		for (var _event in events) {
			var _ret2 = _loop(_event);

			if (_ret2 === "continue") continue;
		}function clear() {
			if (!handlers) return;
			clearTimeout(timer);
			for (var _event2 in handlers) {
				emitter.removeListener(_event2, handlers[_event2]);
			}rejecter.close();
			handlers = null;
		}
		function done(event, data) {
			clear();
			resolve({ event: event, data: data });
		}
	});
};

// the first argument is a result, no error is passed in arguments
exports.wait = function (funWithCB) {
	return { then: funWithCB };
};

exports.sleep = function (milliseconds) {
	return { then: function then(resolve) {
			var timer = setTimeout(resolve, milliseconds);
			return { kill: function kill() {
					clearTimout(timer);
				} };
		} };
};

exports.timeout = function (milliseconds) {
	return { then: function then(_, reject) {
			var timer = setTimeout(reject, milliseconds);
			return { kill: function kill() {
					clearTimout(timer);
				} };
		} };
};

exports.promise = function (value) {
	return Promise.all([co.go(regeneratorRuntime.mark(function callee$1$0() {
		return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
			while (1) switch (context$2$0.prev = context$2$0.next) {
				case 0:
					context$2$0.next = 2;
					return value;

				case 2:
				case "end":
					return context$2$0.stop();
			}
		}, callee$1$0, this);
	}))]);
};

exports["yield"] = exports.sleep(1);

exports.requestAnimationFrame = { then: function then(resolve) {
		if (typeof cancelAnimationFrame == "function") {
			var frame = requestAnimationFrame(resolve);
			return { kill: function kill() {
					cancelAnimationFrame(timer);
				} };
		} else return exports.sleep(1).then(resolve);
	} };

var rethrow = function rethrow(e) {
	return setTimeout(function () {
		throw e;
	}, 1);
};

function iteratorFailed(error) {
	return { done: true, iteratorFailed: true, value: error };
}

function iteratorNext(iterator, result) {
	try {
		return iterator.next(result);
	} catch (error) {
		return iteratorFailed(error);
	}
}

function iteratorThrow(iterator, result) {
	if (!iterator["throw"]) return iteratorFailed(result);
	try {
		return iterator["throw"](result);
	} catch (error) {
		return iteratorFailed(error);
	}
}

var DONE = { done: true };

var EKill = (function (_Error) {
	function EKill() {
		var message = arguments[0] === undefined ? "kill" : arguments[0];

		_classCallCheck(this, EKill);

		_get(Object.getPrototypeOf(EKill.prototype), "constructor", this).call(this, message);
	}

	_inherits(EKill, _Error);

	return EKill;
})(Error);

exports.EKill = EKill;

function iteratorReturn(iterator) {
	if (iterator["return"]) {
		try {
			iterator["return"]();
		} catch (error) {
			return iteratorFailed(error);
		}
	} else if (iterator["throw"]) {
		var e = new EKill();
		var v = iteratorThrow(iterator, e);
		if (!v.done || !v.iteratorFailed) rethrow(new Error("thread has eaten EKill"));else if (v.value != e) return v;
	}
	return DONE;
}

function iteratorCheck(ret) {
	if (ret && ret.done && ret.iteratorFailed) throw ret.value;else return ret;
}

function killIterator(iterator) {
	if (iterator) {
		var res = iteratorReturn(iterator);
		if (res.done && res.iteratorFailed) rethrow(res.value);
	}
}

// Thread

var _private = { writable: true };
var notEnumerable = { enumerable: false };

var catchDefer = function catchDefer(func) {
	// optimization -- using try/catch in a separate function.
	try {
		return func();
	} catch (error) {
		return { next: function next() {
				return iteratorFailed(error);
			} };
	}
};

var IteratorProxy = (function () {
	function IteratorProxy(iterator) {
		_classCallCheck(this, IteratorProxy);

		if (iterator instanceof IteratorProxy) return iterator;
		this._iterator = iterator;
		this._deferred = null;
		this._result = null;
	}

	_createClass(IteratorProxy, [{
		key: "defer",
		value: function defer(proc) {
			var _this2 = this;

			if (typeof proc != "function") throw new Error("type error: only functions can be deferred");
			if (!this._deferred) this._deferred = [];
			this._deferred.push(proc);
			return { close: function close() {
					if (_this2._deferred) for (var i = _this2._deferred.length - 1; i >= 0; --i) {
						if (_this2._deferred[i] == proc) {
							_this2._deferred.splice(i, 1);
							return;
						}
					}
				} };
		}
	}, {
		key: "save",
		value: function save(result) {
			if (!this._result) this._result = result;else if (result.iteratorFailed) {
				if (this._result.iteratorFailed) rethrow(this._result.value);
				this._result = result;
			}
		}
	}, {
		key: "call",
		value: function call(proc, value) {
			var old = IteratorProxy._iterator;
			IteratorProxy._iterator = this;
			try {
				start: for (;;) {
					var ret = proc(this._iterator, value);
					if (!ret.done) return ret;
					this._iterator = null;
					if (!this._deferred) return ret;
					this.save(ret);
					while (this._deferred.length) {
						var def = catchDefer(this._deferred.pop());
						if (def == null || typeof def.next != "function") continue;
						this._iterator = def;
						value = undefined;
						proc = iteratorNext;
						continue start;
					}
					ret = this._result;
					this._result = null;
					return ret;
				}
			} finally {
				IteratorProxy._iterator = old;
			}
		}
	}, {
		key: "next",
		value: function next(value) {
			return iteratorCheck(this.call(iteratorNext, value));
		}
	}, {
		key: "throw",
		value: function _throw(value) {
			return iteratorCheck(this.call(iteratorThrow, value));
		}
	}, {
		key: "return",
		value: function _return(value) {
			if (!this._iterator) return;
			this.save({ done: true, value: value });
			var old = IteratorProxy._iterator;
			IteratorProxy._iterator = this;
			try {
				var ret = iteratorReturn(this._iterator);
				this._iterator = null;
				if (!this.deferred) {
					iteratorCheck(ret);
					return;
				}
				this.save(ret);
				while (this._deferred.length) {
					var def = catchDefer(this._deferred.pop());
					if (def != null && typeof def.next == "function") {
						var _ret4 = iteratorNext(def);
						if (!_ret4.done) _ret4 = iteratorReturn(def);
						this.save(_ret4);
					}
				}
				ret = this._result;
				this._result = null;
				iteratorCheck(ret);
			} finally {
				IteratorProxy._iterator = old;
			}
		}
	}]);

	return IteratorProxy;
})();

IteratorProxy._iterator = null;

function _IteratorProxy(iterator) {
	var deffered, ret, save, step, it, yieldResult;
	return regeneratorRuntime.wrap(function _IteratorProxy$(context$1$0) {
		while (1) switch (context$1$0.prev = context$1$0.next) {
			case 0:
				save = function save(it) {
					if (ret == null || it.iteratorFailed) {
						if (ret && ret.iteratorFailed) rethrow(ret.value);
						ret = it;
					}
				};

				deffered = [];
				ret = null;
				step = iteratorNext;
				it = null;
				context$1$0.prev = 5;

			case 6:
				if (!true) {
					context$1$0.next = 40;
					break;
				}

				yieldResult = undefined;

				step = iteratorNext;

				if (!(it != null)) {
					context$1$0.next = 22;
					break;
				}

				context$1$0.prev = 10;
				context$1$0.next = 13;
				return it.value;

			case 13:
				yieldResult = context$1$0.sent;
				context$1$0.next = 20;
				break;

			case 16:
				context$1$0.prev = 16;
				context$1$0.t0 = context$1$0["catch"](10);

				yieldResult = context$1$0.t0;
				step = iteratorThrow;

			case 20:
				context$1$0.next = 23;
				break;

			case 22:
				yieldResult = undefined;

			case 23:
				_IteratorProxy.deferred = deferred;
				it = step(iterator, yieldResult);
				_IteratorProxy.deferred = null;

				if (it.done) {
					context$1$0.next = 28;
					break;
				}

				return context$1$0.abrupt("continue", 6);

			case 28:
				save(it);
				it = undefined;

			case 30:
				if (!deffered.length) {
					context$1$0.next = 36;
					break;
				}

				iterator = catchDefer(deffered.shift());

				if (!(iterator != null && typeof iterator.next == "function")) {
					context$1$0.next = 34;
					break;
				}

				return context$1$0.abrupt("continue", 6);

			case 34:
				context$1$0.next = 30;
				break;

			case 36:
				iterator = null;
				return context$1$0.abrupt("break", 40);

			case 40:
				context$1$0.prev = 40;

				if (iterator) save(iteratorReturn(iterator));
				while (deffered.length) {
					iterator = catchDefer(deffered.shift());
					if (iterator != null && typeof iterator.next == "function") {
						it = iteratorNext(iterator, undefined);
						if (!it.done) it = iteratorReturn(iterator);
						save(it);
					}
				}

				if (!ret) {
					context$1$0.next = 49;
					break;
				}

				if (!ret.iteratorFailed) {
					context$1$0.next = 48;
					break;
				}

				throw ret.value;

			case 48:
				return context$1$0.abrupt("return", ret.value);

			case 49:
				return context$1$0.finish(40);

			case 50:
			case "end":
				return context$1$0.stop();
		}
	}, marked0$0[0], this, [[5,, 40, 50], [10, 16]]);
}

exports.defer = function (proc) {
	if (!IteratorProxy._iterator) throw new Error("defer: not in a co-thread");
	return IteratorProxy._iterator.defer(proc);
};

exports._defer = function (proc) {
	if (typeof proc != "function") throw new Error("type error: only functions can be deferred");
	var deferred = _IteratorProxy.deferred;
	if (deferred) throw new Error("defer: not in a co-thread");
	deferred.push(proc);
	return { close: function close() {
			if (deferred) for (var i = deferred.length - 1; i >= 0; --i) {
				if (deferred[i] == proc) {
					deferred.splice(i, 1);
					return;
				}
			}
		} };
};

var Thread = (function () {
	function Thread(iterator) {
		var _this3 = this;

		_classCallCheck(this, Thread);

		this._attachedToStack = true;
		this._iterator = new IteratorProxy(iterator);
		this._stopCount = 0;
		this._stack = [];
		this._global = {};
		this._currentPromise = null;
		this._running = false;
		this._killing = null;
		this.$name = { toString: function toString() {
				return "<Thread>";
			} };

		this._newStep();
		this._start = function () {
			if (_this3._start && _this3._step && _this3._step.next) {
				if (_this3._stopCount > 0) _this3._step.resume = _this3._start;else {
					_this3._start = null;
					_this3._step.next();
				}
			}
		};

		this._promise = new Promise(function (resolve, reject) {
			_this3._resolve = resolve;
			_this3._reject = reject;
		});
		if (!this._resolve) throw new Error("assertion failure: wrong implementation of Promise");

		later.then(this._start);
		if (threadCatcher) threadCatcher(this);

		exports.emit("start", this);
	}

	_createClass(Thread, [{
		key: "linkName",
		value: function linkName(value) {
			var suffix = arguments[1] === undefined ? ":thread" : arguments[1];

			if (value.$name) value = value.$name;
			this.$name.toString = function () {
				return "" + value + suffix;
			};
			return this;
		}
	}, {
		key: "waitForInput",
		value: function waitForInput() {
			this._checkFinished();
			if (this._stopCount > 0) throw new Error("thread is paused");
			if (this._start) this._start();
			return this;
		}
	}, {
		key: "_attachPromise",
		value: function _attachPromise(promise) {
			promise.kill = this.kill.bind(this);
			return promise;
		}
	}, {
		key: "then",
		value: function then(onFulfilled, onRejected) {
			this._attachedToStack = false;
			return this._attachPromise(this._promise.then(onFulfilled, onRejected));
		}
	}, {
		key: "catch",
		value: function _catch(onRejected) {
			this._attachedToStack = false;
			return this._attachPromise(this._promise["catch"](onRejected));
		}
	}, {
		key: "isFinished",
		value: function isFinished() {
			return !this._step || this._killing;
		}
	}, {
		key: "isPaused",
		value: function isPaused() {
			return this._stopCount > 0;
		}
	}, {
		key: "throw",
		value: function _throw(exception) {
			if (this == exports.currentThread) throw exception;
			this._checkFinished();
			this._newStep();
			if (this._stopCount > 0) this._step.resume = this._step.fail.bind(this._step, exception);else this._step.fail(exception);
		}
	}, {
		key: "attachToStack",
		value: function attachToStack() {
			this._attachedToStack = true;
		}
	}, {
		key: "kill",
		value: function kill(reason) {
			if (this.isFinished()) return;
			this._reject(reason);
			if (this._running) {
				this._killing = { reason: reason };
				throw new EKill();
			}
			killIterator(this._iterator);
			for (var a = this._stack, i = a.length - 1; i >= 0; --i) {
				killIterator(a[i]);
			}if (this._currentPromise) {
				try {
					this._currentPromise.kill(reason);
				} catch (e) {
					rethrow(e);
				}
			}
			this._done();
		}
	}, {
		key: "pause",
		value: function pause() {
			this._checkFinished();
			++this._stopCount;
		}
	}, {
		key: "resume",
		value: function resume() {
			if (this._stopCount == 0) throw new Error("thread not paused");
			if (0 == --this._stopCount && this._step && this._step.resume) {
				later.then(this._step.resume);
				this._step.resume = null;
			}
		}
	}, {
		key: "_tick",
		value: function _tick(step, imethod, result) {
			if (this["debugger"] || step["debugger"]) debugger;
			if (this._running) throw new Error("FATAL: reentering thread tick");
			if (step !== this._step) return;
			if (this._stopCount > 0) {
				step.resume = this._tick.bind(this, step, imethod, result);
				return;
			}
			for (;;) {
				this._currentPromise = null;
				this._running = true;
				var previosThread = exports.currentThread;
				exports.currentThread = this;
				global.currentThreadData = exports.global = this._global;
				var v = this._iterator.call(imethod, result);
				exports.currentThread = previosThread;
				global.currentThreadData = exports.global = previosThread && previosThread._global;
				this._running = false;
				if (this["debugger"] || step["debugger"]) debugger;
				if (this._killing) {
					var reason = this._killing.reason;
					this._killing = null;
					this.kill(reason);
					return;
				}
				if (v.done) {
					if (this.isFinished()) return;
					if (this._iterator = this._stack.pop()) {
						imethod = v.iteratorFailed ? iteratorThrow : iteratorNext;
						result = v.value;
						continue;
					}
					var r = v.iteratorFailed ? this._reject : this._resolve;
					this._done();
					if (v.iteratorFailed && this._attachedToStack) rethrow(v.value);
					r(v.value);
				} else if (!v.value) // any falsy value
					exports["yield"].then(step.next);else if (v.value.then) {
					var p = v.value.then(step.next, step.fail);
					if (p && p.kill) this._currentPromise = p;
				} else if (v.value.next) {
					this._stack.push(this._iterator);
					this._iterator = new IteratorProxy(v.value);
					imethod = iteratorNext;
					result = undefined;
					continue;
				} else if ("onload" in v.value && !v.value.onload && "onerror" in v.value && !v.value.onerror) {
					v.value.onload = step.next;
					v.value.onerror = step.fail;
				} else throw new Error("thread type error");
				break;
			}
		}
	}, {
		key: "_done",
		value: function _done() {
			this._step = null;
			this._iterator = null;
			this._stack = null;
			this._resolve = null;
			this._reject = null;
			this._currentPromise = null;
			this._killing = null;
		}
	}, {
		key: "_newStep",
		value: function _newStep() {
			var step = this._step = { resume: null };
			step.next = this._tick.bind(this, step, iteratorNext);
			step.fail = this._tick.bind(this, step, iteratorThrow);
			var $name = this.$name;
			step.next.$name = { toString: function toString() {
					return $name + ":next";
				} };
			step.fail.$name = { toString: function toString() {
					return $name + ":fail";
				} };
		}
	}, {
		key: "_onPromise",
		value: function _onPromise(resolve, reject) {
			this._resolve = resolve;
			this._reject = reject;
			this.resume();
		}
	}, {
		key: "_checkFinished",
		value: function _checkFinished() {
			if (this.isFinished()) throw new Error("thread is already finished");
		}
	}]);

	return Thread;
})();

exports.Thread = Thread;

Object.keys(Thread.prototype).forEach(function (k) {
	return k.match(/^_/) && Object.defineProperty(Thread.prototype, k, notEnumerable);
});

exports.currentThread = new Thread({ next: function next() {
		return { value: { then: function then() {} } };
	} }).waitForInput();
exports.global = exports.currentThread._global;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/co.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","events":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/events/events.js","later":"/home/vadzim/v/work/nerojs/src/later.js"}],"/home/vadzim/v/work/nerojs/src/components.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

var co = require("co");
var ra = require("ra");
var lodash = require("lodash");

function toNode(child, node) {
	restart: for (;;) {
		child = child && typeof child.valueOf == "function" ? child.valueOf() : child;
		if (Array.isArray(child)) {
			if (child.length == 0) return null;
			if (child.length == 1) {
				child = child[0];
				continue restart;
			}
			if (!node) node = document.createDocumentFragment();
			child.forEach(function (child) {
				return toNode(child, node);
			});
			child = node;
		} else {
			if (typeof child == "string") child = document.createTextNode(child);
			if (node) {
				node.appendChild(child);
				child = node;
			}
		}
		return child;
	}
}

function fcalc(f, cb) {
	if (typeof f != "function") cb(f);else {
		(function () {
			var first = true;
			ra(false, regeneratorRuntime.mark(function callee$2$0() {
				var ret;
				return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
					while (1) switch (context$3$0.prev = context$3$0.next) {
						case 0:
							if (!first) {
								context$3$0.next = 4;
								break;
							}

							first = false;
							context$3$0.next = 6;
							break;

						case 4:
							context$3$0.next = 6;
							return co.requestAnimationFrame;

						case 6:
							ret = f();

							if (!(ret && ret.next && ret["throw"])) {
								context$3$0.next = 11;
								break;
							}

							context$3$0.next = 10;
							return ret;

						case 10:
							ret = context$3$0.sent;

						case 11:
							cb(ret);

						case 12:
						case "end":
							return context$3$0.stop();
					}
				}, callee$2$0, this);
			}));
		})();
	}
}

function fcalcX(f, cb) {
	if (typeof f != "function") cb(f);else {
		(function () {
			var first = true;
			ra(true, regeneratorRuntime.mark(function callee$2$0() {
				var ret;
				return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
					while (1) switch (context$3$0.prev = context$3$0.next) {
						case 0:
							if (!first) {
								context$3$0.next = 4;
								break;
							}

							first = false;
							context$3$0.next = 6;
							break;

						case 4:
							context$3$0.next = 6;
							return co.requestAnimationFrame;

						case 6:
							ret = f();

							if (!(ret && ret.next && ret["throw"])) {
								context$3$0.next = 11;
								break;
							}

							context$3$0.next = 10;
							return ret;

						case 10:
							ret = context$3$0.sent;

						case 11:
							cb(ret);

						case 12:
						case "end":
							return context$3$0.stop();
					}
				}, callee$2$0, this);
			}));
		})();
	}
}

function getControl(node) {
	var ret = node;
	var mx = -Infinity;
	if (node instanceof DocumentFragment) {
		for (var i = 0, l = node.childNodes.length; i < l; ++i) {
			var n = node.childNodes.item(i);
			var m = undefined;
			if (n instanceof HTMLScriptElement) m = 0;else if (n instanceof HTMLTemplateElement) m = 0;else if (n instanceof Text) {
				if (!n.data) m = 10;else if (!n.data.trim()) m = 20;else m = Infinity;
			} else if (n.tagName == "NOSCRIPT") m = 0;else m = Infinity;
			if (m == Infinity) return n;
			if (mx < m) {
				mx = m;
				ret = n;
			}
		}
	}
	return ret;
}

var Hammer = require("hammerjs");

function ShortSwipeRecognizer() {
	Hammer.AttrRecognizer.apply(this, arguments);
}

Hammer.inherit(ShortSwipeRecognizer, Hammer.AttrRecognizer, {

	defaults: {
		event: "shortswipe",
		threshold: 10,
		velocity: 0.1,
		direction: Hammer.DIRECTION_HORIZONTAL | Hammer.DIRECTION_VERTICAL,
		pointers: 1,
		maxtime: 300 },

	getTouchAction: function getTouchAction() {
		return Hammer.Pan.prototype.getTouchAction.call(this);
	},

	attrTest: function attrTest(input) {
		var direction = this.options.direction;
		var velocity = undefined;

		// LOG( `${ direction } ${ JSON.stringify( lodash.assign( lodash.assign( {}, input ), { pointers: undefined, changedPointers: undefined, srcEvent: undefined, } ) ) }` )

		// TODO: загадкавы код. Па-мойму, першая умова заўсёды будзе спрацоўваць. садрана з Hammer.js
		if (direction & (Hammer.DIRECTION_HORIZONTAL | Hammer.DIRECTION_VERTICAL)) {
			velocity = input.maxVelocity;
		} else if (direction & Hammer.DIRECTION_HORIZONTAL) {
			velocity = input.maxVelocityX;
		} else if (direction & Hammer.DIRECTION_VERTICAL) {
			velocity = input.maxVelocityY;
		}

		// global.kfhgwi4uyfgw4ifu = (global.kfhgwi4uyfgw4ifu || 0)+1
		// LOG( `${global.kfhgwi4uyfgw4ifu} t=${ input.deltaTime } d=${ input.distance } v=${ velocity } ${ this._super.attrTest.call( this, input ) } ${
		// 	input.deltaTime <= this.options.maxtime } ${
		// 	direction & input.direction } ${
		// 	input.distance > this.options.threshold } ${
		// 	Math.abs( velocity ) > this.options.velocity } ${
		// 	input.eventType & Hammer.INPUT_END }` )
		// if ( !global.jghdfjweyuge ) {
		// 	global.jghdfjweyuge = true
		// 	LOG( Object.keys( input ) )
		// 	LOG( JSON.stringify( input ) )
		// }

		return this._super.attrTest.call(this, input) && input.deltaTime <= this.options.maxtime && direction & input.direction && input.distance > this.options.threshold && Math.abs(velocity) > this.options.velocity && input.eventType & Hammer.INPUT_END;
	},

	emit: function emit(input) {
		var direction = directionStr(input.direction);
		if (direction) {
			this.manager.emit(this.options.event + direction, input);
		}

		this.manager.emit(this.options.event, input);
	} });

function directionStr(direction) {
	if (direction == Hammer.DIRECTION_DOWN) return "down";else if (direction == Hammer.DIRECTION_UP) return "up";else if (direction == Hammer.DIRECTION_LEFT) return "left";else if (direction == Hammer.DIRECTION_RIGHT) return "right";
	return "";
}

Hammer.defaults.preset = [
// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
// [ RotateRecognizer, { enable: false } ],
// [ PinchRecognizer, { enable: false }, [ `rotate` ] ],
[ShortSwipeRecognizer, { direction: Hammer.DIRECTION_HORIZONTAL }], [Hammer.Pan, { direction: Hammer.DIRECTION_HORIZONTAL }, ["shortswipe"]], [Hammer.Tap], [Hammer.Tap, { event: "doubletap", taps: 2 }, ["tap"]], [Hammer.Press]];

var updateInput = function updateInput(manager, input) {
	var session = manager.session;
	input.maxVelocity = session.maxVelocity = Math.max(Math.abs(session.maxVelocity || 0), Math.abs(input.velocity));
	input.maxVelocityX = session.maxVelocityX = Math.max(Math.abs(session.maxVelocityX || 0), Math.abs(input.velocityX));
	input.maxVelocityY = session.maxVelocityY = Math.max(Math.abs(session.maxVelocityY || 0), Math.abs(input.velocityY));
	session.inputCount = (session.inputCount || 0) + 1;
	if (!session.directions) {
		var _session$directions;

		session.directions = (_session$directions = {}, _defineProperty(_session$directions, Hammer.DIRECTION_LEFT, 0), _defineProperty(_session$directions, Hammer.DIRECTION_RIGHT, 0), _defineProperty(_session$directions, Hammer.DIRECTION_HORIZONTAL, 0), _defineProperty(_session$directions, Hammer.DIRECTION_UP, 0), _defineProperty(_session$directions, Hammer.DIRECTION_DOWN, 0), _defineProperty(_session$directions, Hammer.DIRECTION_VERTICAL, 0), _session$directions);
		session.directionsCount = 0;
	}
	input.directions = {};
	if (input.direction) {
		++session.directionsCount;
		for (var i in session.directions) {
			if (Object.prototype.hasOwnProperty.call(session.directions, i)) if (i & input.direction) ++session.directions[i];
		}
	}
	for (var i in session.directions) {
		if (Object.prototype.hasOwnProperty.call(session.directions, i)) input.directions[i] = session.directions[i] / session.directionsCount;
	}
};

var getHammer = function getHammer(control) {
	var manager = control._hammer;
	if (manager == null) {
		manager = control._hammer = Hammer(control);
		manager.on("hammer.input", function (input) {
			return updateInput(manager, input);
		});
	}
	return manager;
};

function onMoveEvent(kind, direction, control, callback) {
	var h = getHammer(control);
	kind = kind.toLowerCase();
	var d = control["DIRECTION_" + kind] |= Hammer["DIRECTION_" + direction.toUpperCase()];
	h.get("" + kind).set({ direction: d });
	h.on("" + kind + "" + direction.toLowerCase(), callback);
}

var onSwipeEvent = onMoveEvent.bind(null, "shortswipe");
var onPanEvent = onMoveEvent.bind(null, "pan");

function onMouseEvent(kind, control, callback) {
	if (control = getControl(control)) control.addEventListener("mouse" + kind.toLowerCase(), callback);
}

function onTouchEvent(kind, control, callback) {
	if (control = getControl(control)) control.addEventListener("touch" + kind.toLowerCase(), callback);
}

function checkDOMControl(control) {
	var q = [control.ownerDocument && control.ownerDocument.documentElement, document.documentElement, control.ownerDocument && control.ownerDocument.body, document.body].filter(Boolean);
	var p = control;
	while (p) {
		if (q.indexOf(p) >= 0) {
			ra.forceCalculations();
			return;
		}
		p = p.parentNode;
	}
}

var CS = module.exports = {

	onClick: function onClick(control, callback) {
		if (control = getControl(control)) {
			control.addEventListener("click", callback);
		}
	},

	onTouch: function onTouch(control, callback) {
		if (control = getControl(control)) {
			control.addEventListener("touchstart", callback);
			control.addEventListener("mousedown", callback);
		}
	},

	onTap: function onTap(control, callback) {
		getHammer(control).on("tap", callback);
	},

	onPress: function onPress(control, callback) {
		getHammer(control).on("press", callback);
	},

	onSwipeUp: onSwipeEvent.bind(null, "Up"),
	onSwipeDown: onSwipeEvent.bind(null, "Down"),
	onSwipeLeft: onSwipeEvent.bind(null, "Left"),
	onSwipeRight: onSwipeEvent.bind(null, "Right"),

	onPanUp: onPanEvent.bind(null, "Up"),
	onPanDown: onPanEvent.bind(null, "Down"),
	onPanLeft: onPanEvent.bind(null, "Left"),
	onPanRight: onPanEvent.bind(null, "Right"),

	onMouseDown: onMouseEvent.bind(null, "Down"),
	onMouseUp: onMouseEvent.bind(null, "Up"),
	onMouseMove: onMouseEvent.bind(null, "Move"),

	onTouchStart: onTouchEvent.bind(null, "Start"),
	onTouchMove: onTouchEvent.bind(null, "Move"),
	onTouchEnd: onTouchEvent.bind(null, "End"),
	onTouchCancel: onTouchEvent.bind(null, "Cancel"),

	content: function content(control, _content) {
		var cb = arguments[2] === undefined ? null : arguments[2];
		fcalc(_content, function (content) {
			checkDOMControl(control);
			var c = toNode(content);
			if (c) {
				checkDOMControl(control);
				control.innerHTML = "";
				control.appendChild(c);
			} else control.innerHTML = "";
			cb && cb();
		});
	},

	appendChild: function appendChild(control, content) {
		checkDOMControl(control);
		var c = toNode(content);
		if (c) {
			checkDOMControl(control);
			control.appendChild(c);
		}
	},

	contentX: function contentX(control, content) {
		var cb = arguments[2] === undefined ? null : arguments[2];
		fcalcX(content, function (content) {
			checkDOMControl(control);
			var c = toNode(content);
			if (c) {
				checkDOMControl(control);
				control.innerHTML = "";
				control.appendChild(c);
			} else control.innerHTML = "";
			cb && cb();
		});
	},

	display: function display(control, visible) {
		fcalc(visible, function (visible) {
			control.style.display = visible ? "default" : "none";
		});
	},

	displayX: function displayX(control, visible) {
		fcalcX(visible, function (visible) {
			control.style.display = visible ? "default" : "none";
		});
	},

	"class": function _class(control, className, condition) {
		fcalc(condition, function (condition) {
			if (condition) {
				if (!Array.isArray(className)) control.classList.add(className);else {
					control.classList.add(className[0]);
					control.classList.remove(className[1]);
				}
			} else {
				if (!Array.isArray(className)) control.classList.remove(className);else {
					control.classList.remove(className[0]);
					control.classList.add(className[1]);
				}
			}
		});
	},

	classX: function classX(control, className, condition) {
		fcalcX(condition, function (condition) {
			if (condition) {
				if (!Array.isArray(className)) control.classList.add(className);else {
					control.classList.add(className[0]);
					control.classList.remove(className[1]);
				}
			} else {
				if (!Array.isArray(className)) control.classList.remove(className);else {
					control.classList.remove(className[0]);
					control.classList.add(className[1]);
				}
			}
		});
	},

	updateClass: function updateClass(node, fun) {
		var last = "";
		fcalc(fun, function (curr) {
			if (curr == last) return;
			if (last) node.classList.remove(last);
			if (curr) node.classList.add(curr);
			last = curr;
		});
	},

	updateClassX: function updateClassX(node, fun) {
		var last = "";
		fcalcX(fun, function (curr) {
			if (curr == last) return;
			if (last) node.classList.remove(last);
			if (curr) node.classList.add(curr);
			last = curr;
		});
	},

	watch: function watch(f) {
		var first = true;
		ra(false, regeneratorRuntime.mark(function callee$1$0() {
			var ret;
			return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
				while (1) switch (context$2$0.prev = context$2$0.next) {
					case 0:
						if (!first) {
							context$2$0.next = 4;
							break;
						}

						first = false;
						context$2$0.next = 6;
						break;

					case 4:
						context$2$0.next = 6;
						return co.requestAnimationFrame;

					case 6:
						ret = f();

						if (!(ret && ret.next && ret["throw"])) {
							context$2$0.next = 10;
							break;
						}

						context$2$0.next = 10;
						return ret;

					case 10:
					case "end":
						return context$2$0.stop();
				}
			}, callee$1$0, this);
		}));
	},

	watchX: function watchX(f) {
		var first = true;
		ra(true, regeneratorRuntime.mark(function callee$1$0() {
			var ret;
			return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
				while (1) switch (context$2$0.prev = context$2$0.next) {
					case 0:
						if (!first) {
							context$2$0.next = 4;
							break;
						}

						first = false;
						context$2$0.next = 6;
						break;

					case 4:
						context$2$0.next = 6;
						return co.requestAnimationFrame;

					case 6:
						ret = f();

						if (!(ret && ret.next && ret["throw"])) {
							context$2$0.next = 10;
							break;
						}

						context$2$0.next = 10;
						return ret;

					case 10:
					case "end":
						return context$2$0.stop();
				}
			}, callee$1$0, this);
		}));
	},

	jsx: {
		createElement: function createElement(name, attributes) {
			for (var _len = arguments.length, content = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
				content[_key - 2] = arguments[_key];
			}

			if (typeof name == "function") return name(attributes || 0, appendContent(content));
			var onCreate = undefined;
			var ret = document.createElement(name);
			lodash.forEach(attributes, function (value, name) {
				if (name == "class") fcalc(value, function (value) {
					return ret.className = toAttrString(value);
				});else if (name == "style") fcalc(value, function (value) {
					if (typeof value == "string") ret.setAttribute("style", value);else lodash.forEach(value, function (value, name) {
						return fcalc(value, function (value) {
							return ret.style[name] = value;
						});
					});
				});else if (name == "oncreate") onCreate = value;else if (name.match(/^on/)) {
					var k = Object.keys(CS);
					var i = k.map(function (s) {
						return s.toLowerCase();
					}).indexOf(name);
					if (i >= 0) CS[k[i]](ret, value);else ret.addEventListener(name.slice("on".length), value);
				} else fcalc(value, function (value) {
					return ret.setAttribute(name, toAttrString(value));
				});
			});
			switch (content.length) {
				case 0:
					break;
				case 1:
					CS.content(ret, content[0]);
					break;
				default:
					ret.appendChild(appendContent(content));
					break;
			}
			if (typeof onCreate == "function") onCreate.call(ret);
			return ret;
		} } };

function toAttrString(value) {
	if (Array.isArray(value)) return value.map(toAttrString).join(" ");else return "" + value;
}

function appendContent(content, f) {
	if (!f) f = document.createDocumentFragment();
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = content[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var c = _step.value;

			if (typeof c == "function") {
				var p = document.createElement("span");
				CS.content(p, c);
				f.appendChild(p);
			} else if (c instanceof Node) f.appendChild(c);else if (c != null && typeof c != "string" && c[Symbol.iterator]) {
				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					for (var _iterator2 = c[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var cc = _step2.value;

						appendContent(cc, f);
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
							_iterator2["return"]();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}
			} else f.appendChild(document.createTextNode(c));
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator["return"]) {
				_iterator["return"]();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return f;
}

var updateInputValue = function updateInputValue() {
	var _this = this;

	setTimeout(function () {
		return _this._raValue.assign(_this.value);
	});
};
var raValue = {
	get: function get() {
		var _this2 = this;

		if (!this._raValue) ra.detach(function () {
			_this2._raValue = ra();
			_this2._raValue.assign(_this2.value);
			_this2.addEventListener("change", updateInputValue);
			_this2.addEventListener("keypress", updateInputValue);
			_this2.addEventListener("keydown", updateInputValue);
			_this2.addEventListener("keyup", updateInputValue);
		});
		return this._raValue.valueOf();
	},
	set: function set(value) {
		if (this.value != value) {
			this.value = value;
			if (this._raValue) this._raValue.assign(this.value);
		}
	} };

var _arr = [HTMLInputElement, HTMLTextAreaElement];
for (var _i = 0; _i < _arr.length; _i++) {
	var C = _arr[_i];
	Object.defineProperty(C.prototype, "raValue", raValue);
}
// manager.get( `pan` ).set( {
// 	direction: Hammer.DIRECTION_NONE,
// } )
// manager.get( `shortswipe` ).set( {
// 	direction: Hammer.DIRECTION_NONE,
// } )

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/components.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","co":"/home/vadzim/v/work/nerojs/src/co.js","hammerjs":"/home/vadzim/v/work/nerojs/node_modules/hammerjs/hammer.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js"}],"/home/vadzim/v/work/nerojs/src/deviceActions.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var deviceTypes = require("deviceTypes");

var actions = {
	Up: function Up(device) {
		return 1;
	},
	Down: function Down(device) {
		return 0;
	},
	Comfort_1: function Comfort_1(device) {
		return device.comfort_1;
	},
	Comfort_2: function Comfort_2(device) {
		return device.comfort_2;
	},
	Stop: function Stop(device) {
		return null;
	},
	Loop: function Loop(device) {
		return device.state ? 0 : 1;
	},
	Script: function Script(device) {
		return null;
	},
	Link: function Link(device) {
		return null;
	},
	Set: function Set(_, data) {
		return data;
	} };

function getNewState(device, action, data) {
	// let type = deviceTypes[ device.model ]
	return device && Object.prototype.hasOwnProperty.call(actions, action) ? actions[action](device, data) : null;
}

exports.getNewState = getNewState;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/deviceActions.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","deviceTypes":"/home/vadzim/v/work/nerojs/src/deviceTypes.json"}],"/home/vadzim/v/work/nerojs/src/deviceTypes.json":[function(require,module,exports){
module.exports={
	"Nero II 8713-50": {
		"buttons": "RollShutter"
	},
	"Intro II 8513-50": {
		"buttons": "RollShutter"
	},
	"Nero II 8421": {
		"buttons": "Dimeer"
	}
}
},{}],"/home/vadzim/v/work/nerojs/src/htmlpolyfill.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var style = document.createElement("div").style;
if (!("transform" in style) && "webkitTransform" in style) {
	Object.defineProperty(CSSStyleDeclaration.prototype, "transform", {
		get: function get() {
			return this.webkitTransform;
		},
		set: function set(value) {
			this.webkitTransform = value;
		} });
}

// let slice = [].slice

if (!NodeList.prototype[Symbol.iterator]) NodeList.prototype[Symbol.iterator] = regeneratorRuntime.mark(function callee$0$0() {
	var i, l;
	return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
		while (1) switch (context$1$0.prev = context$1$0.next) {
			case 0:
				i = 0, l = this.length;

			case 1:
				if (!(i < l)) {
					context$1$0.next = 7;
					break;
				}

				context$1$0.next = 4;
				return this.item(i);

			case 4:
				++i;
				context$1$0.next = 1;
				break;

			case 7:
			case "end":
				return context$1$0.stop();
		}
	}, callee$0$0, this);
});

// return slice.call( this )[ Symbol.iterator ]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/htmlpolyfill.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/htmlutils.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

exports.Submit = function (event) {
	event && event.preventDefault();
	var c = this;
	while (c && !(c instanceof HTMLFormElement)) c = c.parentNode;
	if (c) c.dispatchEvent(new CustomEvent("submit", null));
	return false;
};

var centered = "\n\twidth: 100%;\n\theight: 100%;\n\tvertical-align: middle;\n\ttext-align: center;\n";

exports.Centered = function (_, content) {
	return React.createElement(
		"table",
		{ style: centered },
		React.createElement(
			"tr",
			{ style: centered },
			React.createElement(
				"td",
				{ style: centered },
				content
			)
		)
	);
};

exports.isEmptyNode = function (node) {
	return node instanceof Comment || node instanceof ProcessingInstruction || node instanceof Text && !node.nodeValue.trim();
};

exports.importTemplate = function (template) {
	return document.importNode(template.content, true);
};

exports.importElement = function (template) {
	var ret = exports.importTemplate(template);
	if (!ret) return null;
	while (ret.lastChild && exports.isEmptyNode(ret.lastChild)) ret.removeChild(ret.lastChild);
	while (ret.firstChild && exports.isEmptyNode(ret.firstChild)) ret.removeChild(ret.firstChild);
	if (!ret.firstChild) return null;
	if (ret.childNodes.length == 1) return ret.childNodes.item(0);
	var root = document.createElement("span");
	root.appendChild(ret);
	return root;
};

exports.importComponent = function (template) {
	var data = exports.importElement(template);
	if (data) {
		var init = data.getElementsByClassName("init")[0];
		if (init && init.type == "init") {
			var methods = ["setDeviceState"];
			var finit = new Function("component", [].slice.call(init.childNodes).map(function (x) {
				return x.data || "";
			}).join(""));
			finit(data);
		}
	}
	return data;
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/htmlutils.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/httpClient.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var lodash = require("lodash");
var lu = require("localUtils");

var httpClient = {
	get: function get(url, encoding) {
		return httpClient.xhr({ method: "GET", url: url, encoding: encoding });
	},

	post: function post(url, data, encoding) {
		return httpClient.xhr({ method: "POST", url: url, data: data, encoding: encoding });
	},

	xhr: function xhr(options) {
		var method = options.method;
		var url = options.url;
		var encoding = options.encoding;
		var data = options.data;

		var xhr = new XMLHttpRequest();
		if (encoding == "binary") xhr.responseType = "arraybuffer";else xhr.responseType = "text";
		var promise = new Promise(function (resolve, reject) {
			var onerror = function onerror(error) {
				if (typeof error == "string") {
					error = new Error(error);
					error.method = method;
					error.url = url;
				}
				global._ALERT && global._ALERT("try " + error + url);
				reject(error);
			};
			xhr.ontimeout = function () {
				return onerror(new Error("TIMEOUT " + url));
			};
			xhr.onerror = function (e) {
				return onerror(e || "ERROR");
			};
			xhr.onreadystatechange = function () {
				if (xhr.readyState == xhr.DONE && xhr.status == 0) xhr.ontimeout();
			};
			xhr.onload = function () {
				// alert( xhr.status )
				if (xhr.status >= 200 && xhr.status <= 299) return resolve(xhr.response == null ? null : xhr.response);
				if (xhr.status == 401) {
					// append some thing to the page to force standalone browser to show login dialog
					var surl = require("url").parse(url);
					if (surl.host) {
						(function () {
							surl = "" + surl.protocol + "//" + surl.host + "/dummy." + Math.random() + ".js";
							var script = document.createElement("script");
							script.src = surl;
							// alert( surl )
							document.body.appendChild(script);
							setTimeout(function () {
								return document.body.removeChild(script);
							}, 1000);
						})();
					}
				}
				onerror("" + xhr.status + " " + xhr.statusText);
			};
		});
		switch (encoding) {
			case "immutable":
				promise = promise.then(function (data) {
					return Immutable.fromJS(JSON.parse(data));
				});
				break;
			case "binary":
				promise = promise.then(function (data) {
					return new Uint8Array(data);
				});
				break;
			case "text":
				break;
			default:
				promise = promise.then(function (data) {
					var actualEncoding = encoding;
					if (!actualEncoding) {
						var ct = xhr.getResponseHeader("content-type") || "";
						if (ct.match(/^application\/json/)) actualEncoding = "json";
					}
					switch (actualEncoding) {
						case "json":
							return JSON.parse(data);
					}
					return data;
				});
		}
		xhr.open(method || "GET", url);
		xhr.withCredentials = true;
		xhr.send(data);
		xhr.then = promise.then.bind(promise);
		xhr["catch"] = promise["catch"].bind(promise);
		return xhr;
	},

	url: function url(_url, params) {
		params && Object.keys(params).forEach(function (k, i) {
			return _url = _url + (i > 0 ? "&" : "?") + encodeURIComponent(k) + "=" + encodeURIComponent(params[k]);
		});
		return _url;
	} };

module.exports = httpClient;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/httpClient.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","localUtils":"/home/vadzim/v/work/nerojs/src/localUtils.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","url":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/url/url.js"}],"/home/vadzim/v/work/nerojs/src/iscroll.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*

vadzim zienka

2015.05.11
added this.stoppedTransition to not to fire tap when scrolling is stopped by that tap.

 */

/*! iScroll v5.1.3 ~ (c) 2008-2014 Matteo Spinelli ~ http://cubiq.org/license */
'use strict';

(function (window, document, Math) {
	var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
		window.setTimeout(callback, 1000 / 60);
	};

	var utils = (function () {
		var me = {};

		var _elementStyle = document.createElement('div').style;
		var _vendor = (function () {
			var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
			    transform,
			    i = 0,
			    l = vendors.length;

			for (; i < l; i++) {
				transform = vendors[i] + 'ransform';
				if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
			}

			return false;
		})();

		function _prefixStyle(style) {
			if (_vendor === false) return false;
			if (_vendor === '') return style;
			return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
		}

		me.getTime = Date.now || function getTime() {
			return new Date().getTime();
		};

		me.extend = function (target, obj) {
			for (var i in obj) {
				target[i] = obj[i];
			}
		};

		me.addEvent = function (el, type, fn, capture) {
			el.addEventListener(type, fn, !!capture);
		};

		me.removeEvent = function (el, type, fn, capture) {
			el.removeEventListener(type, fn, !!capture);
		};

		me.prefixPointerEvent = function (pointerEvent) {
			return window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(9).toUpperCase() + pointerEvent.substr(10) : pointerEvent;
		};

		me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
			var distance = current - start,
			    speed = Math.abs(distance) / time,
			    destination,
			    duration;

			deceleration = deceleration === undefined ? 0.0006 : deceleration;

			destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
			duration = speed / deceleration;

			if (destination < lowerMargin) {
				destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
				distance = Math.abs(destination - current);
				duration = distance / speed;
			} else if (destination > 0) {
				destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;
				distance = Math.abs(current) + destination;
				duration = distance / speed;
			}

			return {
				destination: Math.round(destination),
				duration: duration
			};
		};

		var _transform = _prefixStyle('transform');

		me.extend(me, {
			hasTransform: _transform !== false,
			hasPerspective: _prefixStyle('perspective') in _elementStyle,
			hasTouch: 'ontouchstart' in window,
			hasPointer: window.PointerEvent || window.MSPointerEvent, // IE10 is prefixed
			hasTransition: _prefixStyle('transition') in _elementStyle
		});

		// This should find all Android browsers lower than build 535.19 (both stock browser and webview)
		me.isBadAndroid = /Android /.test(window.navigator.appVersion) && !/Chrome\/\d/.test(window.navigator.appVersion);

		me.extend(me.style = {}, {
			transform: _transform,
			transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
			transitionDuration: _prefixStyle('transitionDuration'),
			transitionDelay: _prefixStyle('transitionDelay'),
			transformOrigin: _prefixStyle('transformOrigin')
		});

		me.hasClass = function (e, c) {
			var re = new RegExp('(^|\\s)' + c + '(\\s|$)');
			return re.test(e.className);
		};

		me.addClass = function (e, c) {
			if (me.hasClass(e, c)) {
				return;
			}

			var newclass = e.className.split(' ');
			newclass.push(c);
			e.className = newclass.join(' ');
		};

		me.removeClass = function (e, c) {
			if (!me.hasClass(e, c)) {
				return;
			}

			var re = new RegExp('(^|\\s)' + c + '(\\s|$)', 'g');
			e.className = e.className.replace(re, ' ');
		};

		me.offset = function (el) {
			var left = -el.offsetLeft,
			    top = -el.offsetTop;

			// jshint -W084
			while (el = el.offsetParent) {
				left -= el.offsetLeft;
				top -= el.offsetTop;
			}
			// jshint +W084

			return {
				left: left,
				top: top
			};
		};

		me.preventDefaultException = function (el, exceptions) {
			for (var i in exceptions) {
				if (exceptions[i].test(el[i])) {
					return true;
				}
			}

			return false;
		};

		me.extend(me.eventType = {}, {
			touchstart: 1,
			touchmove: 1,
			touchend: 1,

			mousedown: 2,
			mousemove: 2,
			mouseup: 2,

			pointerdown: 3,
			pointermove: 3,
			pointerup: 3,

			MSPointerDown: 3,
			MSPointerMove: 3,
			MSPointerUp: 3
		});

		me.extend(me.ease = {}, {
			quadratic: {
				style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
				fn: function fn(k) {
					return k * (2 - k);
				}
			},
			circular: {
				style: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
				fn: function fn(k) {
					return Math.sqrt(1 - --k * k);
				}
			},
			back: {
				style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
				fn: function fn(k) {
					var b = 4;
					return (k = k - 1) * k * ((b + 1) * k + b) + 1;
				}
			},
			bounce: {
				style: '',
				fn: function fn(k) {
					if ((k /= 1) < 1 / 2.75) {
						return 7.5625 * k * k;
					} else if (k < 2 / 2.75) {
						return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
					} else if (k < 2.5 / 2.75) {
						return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
					} else {
						return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
					}
				}
			},
			elastic: {
				style: '',
				fn: function fn(k) {
					var f = 0.22,
					    e = 0.4;

					if (k === 0) {
						return 0;
					}
					if (k == 1) {
						return 1;
					}

					return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
				}
			}
		});

		me.tap = function (e, eventName) {
			var ev = document.createEvent('Event');
			ev.initEvent(eventName, true, true);
			ev.pageX = e.pageX;
			ev.pageY = e.pageY;
			e.target.dispatchEvent(ev);
		};

		me.click = function (e) {
			var target = e.target,
			    ev;

			if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {
				ev = document.createEvent('MouseEvents');
				ev.initMouseEvent('click', true, true, e.view, 1, target.screenX, target.screenY, target.clientX, target.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);

				ev._constructed = true;
				target.dispatchEvent(ev);
			}
		};

		return me;
	})();

	function IScroll(el, options) {
		this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
		this.scroller = this.wrapper.children[0];
		this.scrollerStyle = this.scroller.style; // cache style for better performance

		this.options = {

			resizeScrollbars: true,

			mouseWheelSpeed: 20,

			snapThreshold: 0.334,

			// INSERT POINT: OPTIONS

			startX: 0,
			startY: 0,
			scrollY: true,
			directionLockThreshold: 5,
			momentum: true,

			bounce: true,
			bounceTime: 600,
			bounceEasing: '',

			preventDefault: true,
			preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

			HWCompositing: true,
			useTransition: true,
			useTransform: true
		};

		for (var i in options) {
			this.options[i] = options[i];
		}

		// Normalize options
		this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

		this.options.useTransition = utils.hasTransition && this.options.useTransition;
		this.options.useTransform = utils.hasTransform && this.options.useTransform;

		this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
		this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

		// If you want eventPassthrough I have to lock one of the axes
		this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
		this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

		// With eventPassthrough we also need lockDirection mechanism
		this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
		this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

		this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

		this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

		if (this.options.tap === true) {
			this.options.tap = 'tap';
		}

		if (this.options.shrinkScrollbars == 'scale') {
			this.options.useTransition = false;
		}

		this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

		if (this.options.probeType == 3) {
			this.options.useTransition = false;
		}

		// INSERT POINT: NORMALIZATION

		// Some defaults	
		this.x = 0;
		this.y = 0;
		this.directionX = 0;
		this.directionY = 0;
		this._events = {};

		// INSERT POINT: DEFAULTS

		this._init();
		this.refresh();

		this.scrollTo(this.options.startX, this.options.startY);
		this.enable();
	}

	IScroll.prototype = {
		version: '5.1.3',

		_init: function _init() {
			this._initEvents();

			if (this.options.scrollbars || this.options.indicators) {
				this._initIndicators();
			}

			if (this.options.mouseWheel) {
				this._initWheel();
			}

			if (this.options.snap) {
				this._initSnap();
			}

			if (this.options.keyBindings) {
				this._initKeys();
			}

			// INSERT POINT: _init
		},

		destroy: function destroy() {
			this._initEvents(true);

			this._execEvent('destroy');
		},

		_transitionEnd: function _transitionEnd(e) {
			if (e.target != this.scroller || !this.isInTransition) {
				return;
			}

			this._transitionTime();
			if (!this.resetPosition(this.options.bounceTime)) {
				this.isInTransition = false;
				this._execEvent('scrollEnd');
			}
		},

		_start: function _start(e) {
			// React to left mouse button only
			if (utils.eventType[e.type] != 1) {
				if (e.button !== 0) {
					return;
				}
			}

			if (!this.enabled || this.initiated && utils.eventType[e.type] !== this.initiated) {
				return;
			}

			if (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
				e.preventDefault();
			}

			var point = e.touches ? e.touches[0] : e,
			    pos;

			this.initiated = utils.eventType[e.type];
			this.moved = false;
			this.distX = 0;
			this.distY = 0;
			this.directionX = 0;
			this.directionY = 0;
			this.directionLocked = 0;

			this._transitionTime();

			this.startTime = utils.getTime();

			this.stoppedTransition = false;
			if (this.options.useTransition && this.isInTransition) {
				this.stoppedTransition = true;
				this.isInTransition = false;
				pos = this.getComputedPosition();
				this._translate(Math.round(pos.x), Math.round(pos.y));
				this._execEvent('scrollEnd');
			} else if (!this.options.useTransition && this.isAnimating) {
				this.isAnimating = false;
				this._execEvent('scrollEnd');
			}

			this.startX = this.x;
			this.startY = this.y;
			this.absStartX = this.x;
			this.absStartY = this.y;
			this.pointX = point.pageX;
			this.pointY = point.pageY;

			this._execEvent('beforeScrollStart');
		},

		_move: function _move(e) {
			if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
				return;
			}

			if (this.options.preventDefault) {
				// increases performance on Android? TODO: check!
				e.preventDefault();
			}

			var point = e.touches ? e.touches[0] : e,
			    deltaX = point.pageX - this.pointX,
			    deltaY = point.pageY - this.pointY,
			    timestamp = utils.getTime(),
			    newX,
			    newY,
			    absDistX,
			    absDistY;

			this.pointX = point.pageX;
			this.pointY = point.pageY;

			this.distX += deltaX;
			this.distY += deltaY;
			absDistX = Math.abs(this.distX);
			absDistY = Math.abs(this.distY);

			// We need to move at least 10 pixels for the scrolling to initiate
			if (timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10)) {
				return;
			}

			// If you are scrolling in one direction lock the other
			if (!this.directionLocked && !this.options.freeScroll) {
				if (absDistX > absDistY + this.options.directionLockThreshold) {
					this.directionLocked = 'h'; // lock horizontally
				} else if (absDistY >= absDistX + this.options.directionLockThreshold) {
					this.directionLocked = 'v'; // lock vertically
				} else {
					this.directionLocked = 'n'; // no lock
				}
			}

			if (this.directionLocked == 'h') {
				if (this.options.eventPassthrough == 'vertical') {
					e.preventDefault();
				} else if (this.options.eventPassthrough == 'horizontal') {
					this.initiated = false;
					return;
				}

				deltaY = 0;
			} else if (this.directionLocked == 'v') {
				if (this.options.eventPassthrough == 'horizontal') {
					e.preventDefault();
				} else if (this.options.eventPassthrough == 'vertical') {
					this.initiated = false;
					return;
				}

				deltaX = 0;
			}

			deltaX = this.hasHorizontalScroll ? deltaX : 0;
			deltaY = this.hasVerticalScroll ? deltaY : 0;

			newX = this.x + deltaX;
			newY = this.y + deltaY;

			// Slow down if outside of the boundaries
			if (newX > 0 || newX < this.maxScrollX) {
				newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
			}
			if (newY > 0 || newY < this.maxScrollY) {
				newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
			}

			this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
			this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

			if (!this.moved) {
				this._execEvent('scrollStart');
			}

			this.moved = true;

			this._translate(newX, newY);

			/* REPLACE START: _move */
			if (timestamp - this.startTime > 300) {
				this.startTime = timestamp;
				this.startX = this.x;
				this.startY = this.y;

				if (this.options.probeType == 1) {
					this._execEvent('scroll');
				}
			}

			if (this.options.probeType > 1) {
				this._execEvent('scroll');
			}
			/* REPLACE END: _move */
		},

		_end: function _end(e) {
			if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
				return;
			}

			if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
				e.preventDefault();
			}

			var point = e.changedTouches ? e.changedTouches[0] : e,
			    momentumX,
			    momentumY,
			    duration = utils.getTime() - this.startTime,
			    newX = Math.round(this.x),
			    newY = Math.round(this.y),
			    distanceX = Math.abs(newX - this.startX),
			    distanceY = Math.abs(newY - this.startY),
			    time = 0,
			    easing = '';

			this.isInTransition = 0;
			this.initiated = 0;
			this.endTime = utils.getTime();

			// reset if we are outside of the boundaries
			if (this.resetPosition(this.options.bounceTime)) {
				return;
			}

			this.scrollTo(newX, newY); // ensures that the last position is rounded

			// we scrolled less than 10 pixels
			if (!this.moved) {
				if (!this.stoppedTransition) {
					if (this.options.tap) {
						utils.tap(e, this.options.tap);
					}

					if (this.options.click) {
						utils.click(e);
					}
				}

				this._execEvent('scrollCancel');
				return;
			}

			if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {
				this._execEvent('flick');
				return;
			}

			// start momentum animation if needed
			if (this.options.momentum && duration < 300) {
				momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
				momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
				newX = momentumX.destination;
				newY = momentumY.destination;
				time = Math.max(momentumX.duration, momentumY.duration);
				this.isInTransition = 1;
			}

			if (this.options.snap) {
				var snap = this._nearestSnap(newX, newY);
				this.currentPage = snap;
				time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);
				newX = snap.x;
				newY = snap.y;

				this.directionX = 0;
				this.directionY = 0;
				easing = this.options.bounceEasing;
			}

			// INSERT POINT: _end

			if (newX != this.x || newY != this.y) {
				// change easing function when scroller goes out of the boundaries
				if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
					easing = utils.ease.quadratic;
				}

				this.scrollTo(newX, newY, time, easing);
				return;
			}

			this._execEvent('scrollEnd');
		},

		_resize: function _resize() {
			var that = this;

			clearTimeout(this.resizeTimeout);

			this.resizeTimeout = setTimeout(function () {
				that.refresh();
			}, this.options.resizePolling);
		},

		resetPosition: function resetPosition(time) {
			var x = this.x,
			    y = this.y;

			time = time || 0;

			if (!this.hasHorizontalScroll || this.x > 0) {
				x = 0;
			} else if (this.x < this.maxScrollX) {
				x = this.maxScrollX;
			}

			if (!this.hasVerticalScroll || this.y > 0) {
				y = 0;
			} else if (this.y < this.maxScrollY) {
				y = this.maxScrollY;
			}

			if (x == this.x && y == this.y) {
				return false;
			}

			this.scrollTo(x, y, time, this.options.bounceEasing);

			return true;
		},

		disable: function disable() {
			this.enabled = false;
		},

		enable: function enable() {
			this.enabled = true;
		},

		refresh: function refresh() {
			var rf = this.wrapper.offsetHeight; // Force reflow

			this.wrapperWidth = this.wrapper.clientWidth;
			this.wrapperHeight = this.wrapper.clientHeight;

			/* REPLACE START: refresh */

			this.scrollerWidth = this.scroller.offsetWidth;
			this.scrollerHeight = this.scroller.offsetHeight;

			this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
			this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

			/* REPLACE END: refresh */

			this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
			this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;

			if (!this.hasHorizontalScroll) {
				this.maxScrollX = 0;
				this.scrollerWidth = this.wrapperWidth;
			}

			if (!this.hasVerticalScroll) {
				this.maxScrollY = 0;
				this.scrollerHeight = this.wrapperHeight;
			}

			this.endTime = 0;
			this.directionX = 0;
			this.directionY = 0;

			this.wrapperOffset = utils.offset(this.wrapper);

			this._execEvent('refresh');

			this.resetPosition();

			// INSERT POINT: _refresh
		},

		on: function on(type, fn) {
			if (!this._events[type]) {
				this._events[type] = [];
			}

			this._events[type].push(fn);
		},

		off: function off(type, fn) {
			if (!this._events[type]) {
				return;
			}

			var index = this._events[type].indexOf(fn);

			if (index > -1) {
				this._events[type].splice(index, 1);
			}
		},

		_execEvent: function _execEvent(type) {
			if (!this._events[type]) {
				return;
			}

			var i = 0,
			    l = this._events[type].length;

			if (!l) {
				return;
			}

			for (; i < l; i++) {
				this._events[type][i].apply(this, [].slice.call(arguments, 1));
			}
		},

		scrollBy: function scrollBy(x, y, time, easing) {
			x = this.x + x;
			y = this.y + y;
			time = time || 0;

			this.scrollTo(x, y, time, easing);
		},

		scrollTo: function scrollTo(x, y, time, easing) {
			easing = easing || utils.ease.circular;

			this.isInTransition = this.options.useTransition && time > 0;

			if (!time || this.options.useTransition && easing.style) {
				this._transitionTimingFunction(easing.style);
				this._transitionTime(time);
				this._translate(x, y);
			} else {
				this._animate(x, y, time, easing.fn);
			}
		},

		scrollToElement: function scrollToElement(el, time, offsetX, offsetY, easing) {
			el = el.nodeType ? el : this.scroller.querySelector(el);

			if (!el) {
				return;
			}

			var pos = utils.offset(el);

			pos.left -= this.wrapperOffset.left;
			pos.top -= this.wrapperOffset.top;

			// if offsetX/Y are true we center the element to the screen
			if (offsetX === true) {
				offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
			}
			if (offsetY === true) {
				offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
			}

			pos.left -= offsetX || 0;
			pos.top -= offsetY || 0;

			pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
			pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;

			time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;

			this.scrollTo(pos.left, pos.top, time, easing);
		},

		_transitionTime: function _transitionTime(time) {
			time = time || 0;

			this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';

			if (!time && utils.isBadAndroid) {
				this.scrollerStyle[utils.style.transitionDuration] = '0.001s';
			}

			if (this.indicators) {
				for (var i = this.indicators.length; i--;) {
					this.indicators[i].transitionTime(time);
				}
			}

			// INSERT POINT: _transitionTime
		},

		_transitionTimingFunction: function _transitionTimingFunction(easing) {
			this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

			if (this.indicators) {
				for (var i = this.indicators.length; i--;) {
					this.indicators[i].transitionTimingFunction(easing);
				}
			}

			// INSERT POINT: _transitionTimingFunction
		},

		_translate: function _translate(x, y) {
			if (this.options.useTransform) {

				/* REPLACE START: _translate */

				this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

				/* REPLACE END: _translate */
			} else {
				x = Math.round(x);
				y = Math.round(y);
				this.scrollerStyle.left = x + 'px';
				this.scrollerStyle.top = y + 'px';
			}

			this.x = x;
			this.y = y;

			if (this.indicators) {
				for (var i = this.indicators.length; i--;) {
					this.indicators[i].updatePosition();
				}
			}

			// INSERT POINT: _translate
		},

		_initEvents: function _initEvents(remove) {
			var eventType = remove ? utils.removeEvent : utils.addEvent,
			    target = this.options.bindToWrapper ? this.wrapper : window;

			eventType(window, 'orientationchange', this);
			eventType(window, 'resize', this);

			if (this.options.click) {
				eventType(this.wrapper, 'click', this, true);
			}

			if (!this.options.disableMouse) {
				eventType(this.wrapper, 'mousedown', this);
				eventType(target, 'mousemove', this);
				eventType(target, 'mousecancel', this);
				eventType(target, 'mouseup', this);
			}

			if (utils.hasPointer && !this.options.disablePointer) {
				eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);
				eventType(target, utils.prefixPointerEvent('pointermove'), this);
				eventType(target, utils.prefixPointerEvent('pointercancel'), this);
				eventType(target, utils.prefixPointerEvent('pointerup'), this);
			}

			if (utils.hasTouch && !this.options.disableTouch) {
				eventType(this.wrapper, 'touchstart', this);
				eventType(target, 'touchmove', this);
				eventType(target, 'touchcancel', this);
				eventType(target, 'touchend', this);
			}

			eventType(this.scroller, 'transitionend', this);
			eventType(this.scroller, 'webkitTransitionEnd', this);
			eventType(this.scroller, 'oTransitionEnd', this);
			eventType(this.scroller, 'MSTransitionEnd', this);
		},

		getComputedPosition: function getComputedPosition() {
			var matrix = window.getComputedStyle(this.scroller, null),
			    x,
			    y;

			if (this.options.useTransform) {
				matrix = matrix[utils.style.transform].split(')')[0].split(', ');
				x = +(matrix[12] || matrix[4]);
				y = +(matrix[13] || matrix[5]);
			} else {
				x = +matrix.left.replace(/[^-\d.]/g, '');
				y = +matrix.top.replace(/[^-\d.]/g, '');
			}

			return { x: x, y: y };
		},

		_initIndicators: function _initIndicators() {
			var interactive = this.options.interactiveScrollbars,
			    customStyle = typeof this.options.scrollbars != 'string',
			    indicators = [],
			    indicator;

			var that = this;

			this.indicators = [];

			if (this.options.scrollbars) {
				// Vertical scrollbar
				if (this.options.scrollY) {
					indicator = {
						el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
						interactive: interactive,
						defaultScrollbars: true,
						customStyle: customStyle,
						resize: this.options.resizeScrollbars,
						shrink: this.options.shrinkScrollbars,
						fade: this.options.fadeScrollbars,
						listenX: false
					};

					this.wrapper.appendChild(indicator.el);
					indicators.push(indicator);
				}

				// Horizontal scrollbar
				if (this.options.scrollX) {
					indicator = {
						el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
						interactive: interactive,
						defaultScrollbars: true,
						customStyle: customStyle,
						resize: this.options.resizeScrollbars,
						shrink: this.options.shrinkScrollbars,
						fade: this.options.fadeScrollbars,
						listenY: false
					};

					this.wrapper.appendChild(indicator.el);
					indicators.push(indicator);
				}
			}

			if (this.options.indicators) {
				// TODO: check concat compatibility
				indicators = indicators.concat(this.options.indicators);
			}

			for (var i = indicators.length; i--;) {
				this.indicators.push(new Indicator(this, indicators[i]));
			}

			// TODO: check if we can use array.map (wide compatibility and performance issues)
			function _indicatorsMap(fn) {
				for (var i = that.indicators.length; i--;) {
					fn.call(that.indicators[i]);
				}
			}

			if (this.options.fadeScrollbars) {
				this.on('scrollEnd', function () {
					_indicatorsMap(function () {
						this.fade();
					});
				});

				this.on('scrollCancel', function () {
					_indicatorsMap(function () {
						this.fade();
					});
				});

				this.on('scrollStart', function () {
					_indicatorsMap(function () {
						this.fade(1);
					});
				});

				this.on('beforeScrollStart', function () {
					_indicatorsMap(function () {
						this.fade(1, true);
					});
				});
			}

			this.on('refresh', function () {
				_indicatorsMap(function () {
					this.refresh();
				});
			});

			this.on('destroy', function () {
				_indicatorsMap(function () {
					this.destroy();
				});

				delete this.indicators;
			});
		},

		_initWheel: function _initWheel() {
			utils.addEvent(this.wrapper, 'wheel', this);
			utils.addEvent(this.wrapper, 'mousewheel', this);
			utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

			this.on('destroy', function () {
				utils.removeEvent(this.wrapper, 'wheel', this);
				utils.removeEvent(this.wrapper, 'mousewheel', this);
				utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
			});
		},

		_wheel: function _wheel(e) {
			if (!this.enabled) {
				return;
			}

			e.preventDefault();
			e.stopPropagation();

			var wheelDeltaX,
			    wheelDeltaY,
			    newX,
			    newY,
			    that = this;

			if (this.wheelTimeout === undefined) {
				that._execEvent('scrollStart');
			}

			// Execute the scrollEnd event after 400ms the wheel stopped scrolling
			clearTimeout(this.wheelTimeout);
			this.wheelTimeout = setTimeout(function () {
				that._execEvent('scrollEnd');
				that.wheelTimeout = undefined;
			}, 400);

			if ('deltaX' in e) {
				if (e.deltaMode === 1) {
					wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
					wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
				} else {
					wheelDeltaX = -e.deltaX;
					wheelDeltaY = -e.deltaY;
				}
			} else if ('wheelDeltaX' in e) {
				wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;
				wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
			} else if ('wheelDelta' in e) {
				wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
			} else if ('detail' in e) {
				wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;
			} else {
				return;
			}

			wheelDeltaX *= this.options.invertWheelDirection;
			wheelDeltaY *= this.options.invertWheelDirection;

			if (!this.hasVerticalScroll) {
				wheelDeltaX = wheelDeltaY;
				wheelDeltaY = 0;
			}

			if (this.options.snap) {
				newX = this.currentPage.pageX;
				newY = this.currentPage.pageY;

				if (wheelDeltaX > 0) {
					newX--;
				} else if (wheelDeltaX < 0) {
					newX++;
				}

				if (wheelDeltaY > 0) {
					newY--;
				} else if (wheelDeltaY < 0) {
					newY++;
				}

				this.goToPage(newX, newY);

				return;
			}

			newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
			newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);

			if (newX > 0) {
				newX = 0;
			} else if (newX < this.maxScrollX) {
				newX = this.maxScrollX;
			}

			if (newY > 0) {
				newY = 0;
			} else if (newY < this.maxScrollY) {
				newY = this.maxScrollY;
			}

			this.scrollTo(newX, newY, 0);

			if (this.options.probeType > 1) {
				this._execEvent('scroll');
			}

			// INSERT POINT: _wheel
		},

		_initSnap: function _initSnap() {
			this.currentPage = {};

			if (typeof this.options.snap == 'string') {
				this.options.snap = this.scroller.querySelectorAll(this.options.snap);
			}

			this.on('refresh', function () {
				var i = 0,
				    l,
				    m = 0,
				    n,
				    cx,
				    cy,
				    x = 0,
				    y,
				    stepX = this.options.snapStepX || this.wrapperWidth,
				    stepY = this.options.snapStepY || this.wrapperHeight,
				    el;

				this.pages = [];

				if (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {
					return;
				}

				if (this.options.snap === true) {
					cx = Math.round(stepX / 2);
					cy = Math.round(stepY / 2);

					while (x > -this.scrollerWidth) {
						this.pages[i] = [];
						l = 0;
						y = 0;

						while (y > -this.scrollerHeight) {
							this.pages[i][l] = {
								x: Math.max(x, this.maxScrollX),
								y: Math.max(y, this.maxScrollY),
								width: stepX,
								height: stepY,
								cx: x - cx,
								cy: y - cy
							};

							y -= stepY;
							l++;
						}

						x -= stepX;
						i++;
					}
				} else {
					el = this.options.snap;
					l = el.length;
					n = -1;

					for (; i < l; i++) {
						if (i === 0 || el[i].offsetLeft <= el[i - 1].offsetLeft) {
							m = 0;
							n++;
						}

						if (!this.pages[m]) {
							this.pages[m] = [];
						}

						x = Math.max(-el[i].offsetLeft, this.maxScrollX);
						y = Math.max(-el[i].offsetTop, this.maxScrollY);
						cx = x - Math.round(el[i].offsetWidth / 2);
						cy = y - Math.round(el[i].offsetHeight / 2);

						this.pages[m][n] = {
							x: x,
							y: y,
							width: el[i].offsetWidth,
							height: el[i].offsetHeight,
							cx: cx,
							cy: cy
						};

						if (x > this.maxScrollX) {
							m++;
						}
					}
				}

				this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

				// Update snap threshold if needed
				if (this.options.snapThreshold % 1 === 0) {
					this.snapThresholdX = this.options.snapThreshold;
					this.snapThresholdY = this.options.snapThreshold;
				} else {
					this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
					this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
				}
			});

			this.on('flick', function () {
				var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);

				this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);
			});
		},

		_nearestSnap: function _nearestSnap(x, y) {
			if (!this.pages.length) {
				return { x: 0, y: 0, pageX: 0, pageY: 0 };
			}

			var i = 0,
			    l = this.pages.length,
			    m = 0;

			// Check if we exceeded the snap threshold
			if (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {
				return this.currentPage;
			}

			if (x > 0) {
				x = 0;
			} else if (x < this.maxScrollX) {
				x = this.maxScrollX;
			}

			if (y > 0) {
				y = 0;
			} else if (y < this.maxScrollY) {
				y = this.maxScrollY;
			}

			for (; i < l; i++) {
				if (x >= this.pages[i][0].cx) {
					x = this.pages[i][0].x;
					break;
				}
			}

			l = this.pages[i].length;

			for (; m < l; m++) {
				if (y >= this.pages[0][m].cy) {
					y = this.pages[0][m].y;
					break;
				}
			}

			if (i == this.currentPage.pageX) {
				i += this.directionX;

				if (i < 0) {
					i = 0;
				} else if (i >= this.pages.length) {
					i = this.pages.length - 1;
				}

				x = this.pages[i][0].x;
			}

			if (m == this.currentPage.pageY) {
				m += this.directionY;

				if (m < 0) {
					m = 0;
				} else if (m >= this.pages[0].length) {
					m = this.pages[0].length - 1;
				}

				y = this.pages[0][m].y;
			}

			return {
				x: x,
				y: y,
				pageX: i,
				pageY: m
			};
		},

		goToPage: function goToPage(x, y, time, easing) {
			easing = easing || this.options.bounceEasing;

			if (x >= this.pages.length) {
				x = this.pages.length - 1;
			} else if (x < 0) {
				x = 0;
			}

			if (y >= this.pages[x].length) {
				y = this.pages[x].length - 1;
			} else if (y < 0) {
				y = 0;
			}

			var posX = this.pages[x][y].x,
			    posY = this.pages[x][y].y;

			time = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;

			this.currentPage = {
				x: posX,
				y: posY,
				pageX: x,
				pageY: y
			};

			this.scrollTo(posX, posY, time, easing);
		},

		next: function next(time, easing) {
			var x = this.currentPage.pageX,
			    y = this.currentPage.pageY;

			x++;

			if (x >= this.pages.length && this.hasVerticalScroll) {
				x = 0;
				y++;
			}

			this.goToPage(x, y, time, easing);
		},

		prev: function prev(time, easing) {
			var x = this.currentPage.pageX,
			    y = this.currentPage.pageY;

			x--;

			if (x < 0 && this.hasVerticalScroll) {
				x = 0;
				y--;
			}

			this.goToPage(x, y, time, easing);
		},

		_initKeys: function _initKeys(e) {
			// default key bindings
			var keys = {
				pageUp: 33,
				pageDown: 34,
				end: 35,
				home: 36,
				left: 37,
				up: 38,
				right: 39,
				down: 40
			};
			var i;

			// if you give me characters I give you keycode
			if (typeof this.options.keyBindings == 'object') {
				for (i in this.options.keyBindings) {
					if (typeof this.options.keyBindings[i] == 'string') {
						this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
					}
				}
			} else {
				this.options.keyBindings = {};
			}

			for (i in keys) {
				this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
			}

			utils.addEvent(window, 'keydown', this);

			this.on('destroy', function () {
				utils.removeEvent(window, 'keydown', this);
			});
		},

		_key: function _key(e) {
			if (!this.enabled) {
				return;
			}

			var snap = this.options.snap,
			    // we are using this alot, better to cache it
			newX = snap ? this.currentPage.pageX : this.x,
			    newY = snap ? this.currentPage.pageY : this.y,
			    now = utils.getTime(),
			    prevTime = this.keyTime || 0,
			    acceleration = 0.25,
			    pos;

			if (this.options.useTransition && this.isInTransition) {
				pos = this.getComputedPosition();

				this._translate(Math.round(pos.x), Math.round(pos.y));
				this.isInTransition = false;
			}

			this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

			switch (e.keyCode) {
				case this.options.keyBindings.pageUp:
					if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
						newX += snap ? 1 : this.wrapperWidth;
					} else {
						newY += snap ? 1 : this.wrapperHeight;
					}
					break;
				case this.options.keyBindings.pageDown:
					if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
						newX -= snap ? 1 : this.wrapperWidth;
					} else {
						newY -= snap ? 1 : this.wrapperHeight;
					}
					break;
				case this.options.keyBindings.end:
					newX = snap ? this.pages.length - 1 : this.maxScrollX;
					newY = snap ? this.pages[0].length - 1 : this.maxScrollY;
					break;
				case this.options.keyBindings.home:
					newX = 0;
					newY = 0;
					break;
				case this.options.keyBindings.left:
					newX += snap ? -1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.up:
					newY += snap ? 1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.right:
					newX -= snap ? -1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.down:
					newY -= snap ? 1 : 5 + this.keyAcceleration >> 0;
					break;
				default:
					return;
			}

			if (snap) {
				this.goToPage(newX, newY);
				return;
			}

			if (newX > 0) {
				newX = 0;
				this.keyAcceleration = 0;
			} else if (newX < this.maxScrollX) {
				newX = this.maxScrollX;
				this.keyAcceleration = 0;
			}

			if (newY > 0) {
				newY = 0;
				this.keyAcceleration = 0;
			} else if (newY < this.maxScrollY) {
				newY = this.maxScrollY;
				this.keyAcceleration = 0;
			}

			this.scrollTo(newX, newY, 0);

			this.keyTime = now;
		},

		_animate: function _animate(destX, destY, duration, easingFn) {
			var that = this,
			    startX = this.x,
			    startY = this.y,
			    startTime = utils.getTime(),
			    destTime = startTime + duration;

			function step() {
				var now = utils.getTime(),
				    newX,
				    newY,
				    easing;

				if (now >= destTime) {
					that.isAnimating = false;
					that._translate(destX, destY);

					if (!that.resetPosition(that.options.bounceTime)) {
						that._execEvent('scrollEnd');
					}

					return;
				}

				now = (now - startTime) / duration;
				easing = easingFn(now);
				newX = (destX - startX) * easing + startX;
				newY = (destY - startY) * easing + startY;
				that._translate(newX, newY);

				if (that.isAnimating) {
					rAF(step);
				}

				if (that.options.probeType == 3) {
					that._execEvent('scroll');
				}
			}

			this.isAnimating = true;
			step();
		},

		handleEvent: function handleEvent(e) {
			switch (e.type) {
				case 'touchstart':
				case 'pointerdown':
				case 'MSPointerDown':
				case 'mousedown':
					this._start(e);
					break;
				case 'touchmove':
				case 'pointermove':
				case 'MSPointerMove':
				case 'mousemove':
					this._move(e);
					break;
				case 'touchend':
				case 'pointerup':
				case 'MSPointerUp':
				case 'mouseup':
				case 'touchcancel':
				case 'pointercancel':
				case 'MSPointerCancel':
				case 'mousecancel':
					this._end(e);
					break;
				case 'orientationchange':
				case 'resize':
					this._resize();
					break;
				case 'transitionend':
				case 'webkitTransitionEnd':
				case 'oTransitionEnd':
				case 'MSTransitionEnd':
					this._transitionEnd(e);
					break;
				case 'wheel':
				case 'DOMMouseScroll':
				case 'mousewheel':
					this._wheel(e);
					break;
				case 'keydown':
					this._key(e);
					break;
				case 'click':
					if (!e._constructed) {
						e.preventDefault();
						e.stopPropagation();
					}
					break;
			}
		}
	};
	function createDefaultScrollbar(direction, interactive, type) {
		var scrollbar = document.createElement('div'),
		    indicator = document.createElement('div');

		if (type === true) {
			scrollbar.style.cssText = 'position:absolute;z-index:9999';
			indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
		}

		indicator.className = 'iScrollIndicator';

		if (direction == 'h') {
			if (type === true) {
				scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
				indicator.style.height = '100%';
			}
			scrollbar.className = 'iScrollHorizontalScrollbar';
		} else {
			if (type === true) {
				scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
				indicator.style.width = '100%';
			}
			scrollbar.className = 'iScrollVerticalScrollbar';
		}

		scrollbar.style.cssText += ';overflow:hidden';

		if (!interactive) {
			scrollbar.style.pointerEvents = 'none';
		}

		scrollbar.appendChild(indicator);

		return scrollbar;
	}

	function Indicator(scroller, options) {
		this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
		this.wrapperStyle = this.wrapper.style;
		this.indicator = this.wrapper.children[0];
		this.indicatorStyle = this.indicator.style;
		this.scroller = scroller;

		this.options = {
			listenX: true,
			listenY: true,
			interactive: false,
			resize: true,
			defaultScrollbars: false,
			shrink: false,
			fade: false,
			speedRatioX: 0,
			speedRatioY: 0
		};

		for (var i in options) {
			this.options[i] = options[i];
		}

		this.sizeRatioX = 1;
		this.sizeRatioY = 1;
		this.maxPosX = 0;
		this.maxPosY = 0;

		if (this.options.interactive) {
			if (!this.options.disableTouch) {
				utils.addEvent(this.indicator, 'touchstart', this);
				utils.addEvent(window, 'touchend', this);
			}
			if (!this.options.disablePointer) {
				utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
				utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);
			}
			if (!this.options.disableMouse) {
				utils.addEvent(this.indicator, 'mousedown', this);
				utils.addEvent(window, 'mouseup', this);
			}
		}

		if (this.options.fade) {
			this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
			this.wrapperStyle[utils.style.transitionDuration] = utils.isBadAndroid ? '0.001s' : '0ms';
			this.wrapperStyle.opacity = '0';
		}
	}

	Indicator.prototype = {
		handleEvent: function handleEvent(e) {
			switch (e.type) {
				case 'touchstart':
				case 'pointerdown':
				case 'MSPointerDown':
				case 'mousedown':
					this._start(e);
					break;
				case 'touchmove':
				case 'pointermove':
				case 'MSPointerMove':
				case 'mousemove':
					this._move(e);
					break;
				case 'touchend':
				case 'pointerup':
				case 'MSPointerUp':
				case 'mouseup':
				case 'touchcancel':
				case 'pointercancel':
				case 'MSPointerCancel':
				case 'mousecancel':
					this._end(e);
					break;
			}
		},

		destroy: function destroy() {
			if (this.options.interactive) {
				utils.removeEvent(this.indicator, 'touchstart', this);
				utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
				utils.removeEvent(this.indicator, 'mousedown', this);

				utils.removeEvent(window, 'touchmove', this);
				utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
				utils.removeEvent(window, 'mousemove', this);

				utils.removeEvent(window, 'touchend', this);
				utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);
				utils.removeEvent(window, 'mouseup', this);
			}

			if (this.options.defaultScrollbars) {
				this.wrapper.parentNode.removeChild(this.wrapper);
			}
		},

		_start: function _start(e) {
			var point = e.touches ? e.touches[0] : e;

			e.preventDefault();
			e.stopPropagation();

			this.transitionTime();

			this.initiated = true;
			this.moved = false;
			this.lastPointX = point.pageX;
			this.lastPointY = point.pageY;

			this.startTime = utils.getTime();

			if (!this.options.disableTouch) {
				utils.addEvent(window, 'touchmove', this);
			}
			if (!this.options.disablePointer) {
				utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);
			}
			if (!this.options.disableMouse) {
				utils.addEvent(window, 'mousemove', this);
			}

			this.scroller._execEvent('beforeScrollStart');
		},

		_move: function _move(e) {
			var point = e.touches ? e.touches[0] : e,
			    deltaX,
			    deltaY,
			    newX,
			    newY,
			    timestamp = utils.getTime();

			if (!this.moved) {
				this.scroller._execEvent('scrollStart');
			}

			this.moved = true;

			deltaX = point.pageX - this.lastPointX;
			this.lastPointX = point.pageX;

			deltaY = point.pageY - this.lastPointY;
			this.lastPointY = point.pageY;

			newX = this.x + deltaX;
			newY = this.y + deltaY;

			this._pos(newX, newY);

			if (this.scroller.options.probeType == 1 && timestamp - this.startTime > 300) {
				this.startTime = timestamp;
				this.scroller._execEvent('scroll');
			} else if (this.scroller.options.probeType > 1) {
				this.scroller._execEvent('scroll');
			}

			// INSERT POINT: indicator._move

			e.preventDefault();
			e.stopPropagation();
		},

		_end: function _end(e) {
			if (!this.initiated) {
				return;
			}

			this.initiated = false;

			e.preventDefault();
			e.stopPropagation();

			utils.removeEvent(window, 'touchmove', this);
			utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
			utils.removeEvent(window, 'mousemove', this);

			if (this.scroller.options.snap) {
				var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

				var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);

				if (this.scroller.x != snap.x || this.scroller.y != snap.y) {
					this.scroller.directionX = 0;
					this.scroller.directionY = 0;
					this.scroller.currentPage = snap;
					this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
				}
			}

			if (this.moved) {
				this.scroller._execEvent('scrollEnd');
			}
		},

		transitionTime: function transitionTime(time) {
			time = time || 0;
			this.indicatorStyle[utils.style.transitionDuration] = time + 'ms';

			if (!time && utils.isBadAndroid) {
				this.indicatorStyle[utils.style.transitionDuration] = '0.001s';
			}
		},

		transitionTimingFunction: function transitionTimingFunction(easing) {
			this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
		},

		refresh: function refresh() {
			this.transitionTime();

			if (this.options.listenX && !this.options.listenY) {
				this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
			} else if (this.options.listenY && !this.options.listenX) {
				this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
			} else {
				this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
			}

			if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
				utils.addClass(this.wrapper, 'iScrollBothScrollbars');
				utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

				if (this.options.defaultScrollbars && this.options.customStyle) {
					if (this.options.listenX) {
						this.wrapper.style.right = '8px';
					} else {
						this.wrapper.style.bottom = '8px';
					}
				}
			} else {
				utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
				utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

				if (this.options.defaultScrollbars && this.options.customStyle) {
					if (this.options.listenX) {
						this.wrapper.style.right = '2px';
					} else {
						this.wrapper.style.bottom = '2px';
					}
				}
			}

			var r = this.wrapper.offsetHeight; // force refresh

			if (this.options.listenX) {
				this.wrapperWidth = this.wrapper.clientWidth;
				if (this.options.resize) {
					this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
					this.indicatorStyle.width = this.indicatorWidth + 'px';
				} else {
					this.indicatorWidth = this.indicator.clientWidth;
				}

				this.maxPosX = this.wrapperWidth - this.indicatorWidth;

				if (this.options.shrink == 'clip') {
					this.minBoundaryX = -this.indicatorWidth + 8;
					this.maxBoundaryX = this.wrapperWidth - 8;
				} else {
					this.minBoundaryX = 0;
					this.maxBoundaryX = this.maxPosX;
				}

				this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX;
			}

			if (this.options.listenY) {
				this.wrapperHeight = this.wrapper.clientHeight;
				if (this.options.resize) {
					this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
					this.indicatorStyle.height = this.indicatorHeight + 'px';
				} else {
					this.indicatorHeight = this.indicator.clientHeight;
				}

				this.maxPosY = this.wrapperHeight - this.indicatorHeight;

				if (this.options.shrink == 'clip') {
					this.minBoundaryY = -this.indicatorHeight + 8;
					this.maxBoundaryY = this.wrapperHeight - 8;
				} else {
					this.minBoundaryY = 0;
					this.maxBoundaryY = this.maxPosY;
				}

				this.maxPosY = this.wrapperHeight - this.indicatorHeight;
				this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY;
			}

			this.updatePosition();
		},

		updatePosition: function updatePosition() {
			var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
			    y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;

			if (!this.options.ignoreBoundaries) {
				if (x < this.minBoundaryX) {
					if (this.options.shrink == 'scale') {
						this.width = Math.max(this.indicatorWidth + x, 8);
						this.indicatorStyle.width = this.width + 'px';
					}
					x = this.minBoundaryX;
				} else if (x > this.maxBoundaryX) {
					if (this.options.shrink == 'scale') {
						this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
						this.indicatorStyle.width = this.width + 'px';
						x = this.maxPosX + this.indicatorWidth - this.width;
					} else {
						x = this.maxBoundaryX;
					}
				} else if (this.options.shrink == 'scale' && this.width != this.indicatorWidth) {
					this.width = this.indicatorWidth;
					this.indicatorStyle.width = this.width + 'px';
				}

				if (y < this.minBoundaryY) {
					if (this.options.shrink == 'scale') {
						this.height = Math.max(this.indicatorHeight + y * 3, 8);
						this.indicatorStyle.height = this.height + 'px';
					}
					y = this.minBoundaryY;
				} else if (y > this.maxBoundaryY) {
					if (this.options.shrink == 'scale') {
						this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
						this.indicatorStyle.height = this.height + 'px';
						y = this.maxPosY + this.indicatorHeight - this.height;
					} else {
						y = this.maxBoundaryY;
					}
				} else if (this.options.shrink == 'scale' && this.height != this.indicatorHeight) {
					this.height = this.indicatorHeight;
					this.indicatorStyle.height = this.height + 'px';
				}
			}

			this.x = x;
			this.y = y;

			if (this.scroller.options.useTransform) {
				this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
			} else {
				this.indicatorStyle.left = x + 'px';
				this.indicatorStyle.top = y + 'px';
			}
		},

		_pos: function _pos(x, y) {
			if (x < 0) {
				x = 0;
			} else if (x > this.maxPosX) {
				x = this.maxPosX;
			}

			if (y < 0) {
				y = 0;
			} else if (y > this.maxPosY) {
				y = this.maxPosY;
			}

			x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
			y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

			this.scroller.scrollTo(x, y);
		},

		fade: function fade(val, hold) {
			if (hold && !this.visible) {
				return;
			}

			clearTimeout(this.fadeTimeout);
			this.fadeTimeout = null;

			var time = val ? 250 : 500,
			    delay = val ? 0 : 300;

			val = val ? '1' : '0';

			this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';

			this.fadeTimeout = setTimeout((function (val) {
				this.wrapperStyle.opacity = val;
				this.visible = +val;
			}).bind(this, val), delay);
		}
	};

	IScroll.utils = utils;

	if (typeof module != 'undefined' && module.exports) {
		module.exports = IScroll;
	} else {
		window.IScroll = IScroll;
	}
})(window, document, Math);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/iscroll.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/later.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = new (require("scheduler"))();

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/later.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","scheduler":"/home/vadzim/v/work/nerojs/src/scheduler.js"}],"/home/vadzim/v/work/nerojs/src/localUtils.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lodash = require("lodash");
var ra = require("ra");
var co = require("co");
var EventEmitter = require("events").EventEmitter || require("events");

function assert(value, message) {
	if (!value) throw new Error("" + message);
}

if (!global.WeakMap) {
	(function () {
		var n = 0;
		global.WeakMap = (function () {
			function WeakMap(data) {
				_classCallCheck(this, WeakMap);

				this._index = "__WeakMap" + ++n;
				if (data) {
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var _step$value = _slicedToArray(_step.value, 2);

							var key = _step$value[0];
							var value = _step$value[1];

							this.set(key, value);
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator["return"]) {
								_iterator["return"]();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}
				}
			}

			_createClass(WeakMap, [{
				key: "get",
				value: function get(obj) {
					return this.has(obj) ? obj[this._index] : undefined;
				}
			}, {
				key: "has",
				value: function has(obj) {
					return Object.prototype.hasOwnProperty.call(obj, this._index);
				}
			}, {
				key: "delete",
				value: function _delete(obj) {
					delete obj[this._index];
				}
			}, {
				key: "set",
				value: function set(obj, value) {
					Object.defineProperty(obj, this._index, {
						configurable: true,
						value: value });
					return this;
				}
			}]);

			return WeakMap;
		})();
	})();
}

var lu = module.exports = {

	dumpPromise: function dumpPromise(p) {
		return p.then(function (result) {
			return lu.log("result:", result);
		}, function (error) {
			return lu.error("error:", error);
		});
	},

	dump: function dump(msg, value) {
		console.log(msg, value);
		return value;
	},

	log: console.log.bind(console),
	info: (console.info || console.log).bind(console),
	warn: (console.warn || console.log).bind(console),
	error: (console.error || console.log).bind(console),
	trace: (console.trace || console.log).bind(console),

	rests: function rests(num) {
		for (var _len = arguments.length, _rests = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			_rests[_key - 1] = arguments[_key];
		}

		var ret = [];
		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;

		try {
			for (var _iterator2 = _rests[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var r = _step2.value;

				var n = num % r;
				num = (num - n) / r;
				ret.push(n);
			}
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
					_iterator2["return"]();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}

		return ret;
	},

	pad: function pad(s, n, p) {
		s = String(s);
		var x = "";
		n -= s.length;
		while (n > 0) {
			x += p;
			--n;
		}
		return x + s;
	},

	time: function time() {
		var d = new Date();
		return "" + d.getHours() + ":" + lu.pad(d.getMinutes(), 2, 0) + ":" + lu.pad(d.getSeconds(), 2, 0) + "." + lu.pad(d.getMilliseconds(), 3, 0);
	},

	stack: function stack() {
		return new Error().stack;
	},

	options: function options(_options, def) {
		var ret = {};
		for (var i in def) {
			if (Object.prototype.hasOwnProperty.call(def, i)) if (_options == null) ret[i] = def[i];else {
				var op = _options[i];
				if (op == null) op = def[i];
				ret[i] = op;
			}
		}return ret;
	},

	str: function str(obj, depth) {
		if (depth == null) depth = 1;
		if (!obj || !depth || depth < 1) return "" + obj;
		if (Array.isArray(obj)) return "[ " + obj.map(function (x) {
			return lu.str(x, depth - 1);
		}).join(" ") + " ]";
		if (!obj.constructor || obj.constructor == Object) return "{ " + Object.keys(obj).map(function (x) {
			return x + "=" + lu.str(obj[x], depth - 1);
		}).join(" ") + " }";
		return String(obj);
	},

	toOneLine: function toOneLine(obj) {
		var ret = JSON.stringify(obj);
		ret += "\n";
		return ret;
	},

	byLines: function byLines(callback) {
		var buffer = "";
		return function (chunk) {
			buffer += String(chunk);
			var ret = buffer.split("\n");
			buffer = ret.pop();
			ret.forEach(callback);
		};
	},

	byJSON: function byJSON(callback) {
		return byLines(function (line) {
			return callback(JSON.parse(line.trim()));
		});
	},

	valueOf: function valueOf(val) {
		return val == null ? null : val.valueOf == null ? val : val.valueOf();
	},

	returnThis: function returnThis() {
		return this;
	},
	returnNull: function returnNull() {
		return null;
	},
	returnTrue: function returnTrue() {
		return true;
	},
	returnFalse: function returnFalse() {
		return false;
	},
	returnZero: function returnZero() {
		return 0;
	},
	returnOne: function returnOne() {
		return 1;
	},

	promiseSucceeded: Promise.resolve(),
	promiseNull: Promise.resolve(null),
	promiseTrue: Promise.resolve(true),
	promiseFalse: Promise.resolve(false),
	promiseZero: Promise.resolve(0),
	promiseOne: Promise.resolve(1),

	returnNullPromise: function returnNullPromise() {
		return lu.promiseNull;
	},
	returnTruePromise: function returnTruePromise() {
		return lu.promiseTrue;
	},
	returnFalsePromise: function returnFalsePromise() {
		return lu.promiseFalse;
	},
	returnZeroPromise: function returnZeroPromise() {
		return lu.promiseZero;
	},
	returnOnePromise: function returnOnePromise() {
		return lu.promiseOne;
	},

	when: function when(promise, cb) {
		promise.then(cb, cb);
		return promise;
	},

	waitFor: function waitFor(timeout, interval, callback) {
		if (typeof timeout == "function") {
			interval = timeout;
			timeout = 5000;
		}
		if (typeof interval == "function") {
			callback = interval;
			interval = 200;
		}
		return new Promise(function (resolve, reject) {
			var start = Date.now();
			setTimeout(function check() {
				var ret = undefined;
				if (ret = callback()) resolve(ret);else if (Date.now() - start > timeout) reject(new Error("timeout"));else setTimeout(check, interval);
			}, interval);
		});
	},

	empty: Object.freeze(Object.create(null)),

	JSONEqual: function JSONEqual(a, b) {
		return JSON.stringify(a) == JSON.stringify(b);
	},

	"new": function _new() {
		for (var _len2 = arguments.length, descedents = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			descedents[_key2] = arguments[_key2];
		}

		return descedents.reduce(function (ancestor, descedent) {
			return lodash.assign(ancestor, descedent);
		}, {});
	},

	call: function call(fun) {
		for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
			args[_key3 - 1] = arguments[_key3];
		}

		return fun.apply(undefined, args);
	},

	rethrow: function rethrow(e) {
		setTimeout(function () {
			throw e;
		}, 1);
	},

	// optimization -- using try/catch in a separate function.
	"catch": function _catch(cb, ret) {
		try {
			return cb();
		} catch (e) {
			return ret(e);
		}
	},

	catchMap: function catchMap(cb, mapResult, mapError) {
		var result = undefined;
		try {
			result = cb();
		} catch (error) {
			return mapError(error);
		}
		return mapResult(result);
	},

	catchCall: function catchCall(cb) {
		try {
			return { ok: true, result: cb() };
		} catch (error) {
			return { ok: false, error: error };
		}
	},

	"try": regeneratorRuntime.mark(function _try(fun) {
		var startTimeToWait = arguments[1] === undefined ? 100 : arguments[1];
		var maxTimeToWait = arguments[2] === undefined ? 3000 : arguments[2];
		var multiply = arguments[3] === undefined ? 1.5 : arguments[3];
		var timeToWait;
		return regeneratorRuntime.wrap(function _try$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					timeToWait = startTimeToWait;

				case 1:
					context$1$0.prev = 1;
					context$1$0.next = 4;
					return fun();

				case 4:
					return context$1$0.abrupt("return", context$1$0.sent);

				case 7:
					context$1$0.prev = 7;
					context$1$0.t0 = context$1$0["catch"](1);

					lu.rethrow(context$1$0.t0);
					context$1$0.next = 12;
					return co.sleep(timeToWait);

				case 12:
					timeToWait = Math.min(timeToWait * multiply, maxTimeToWait);

				case 13:
					context$1$0.next = 1;
					break;

				case 15:
				case "end":
					return context$1$0.stop();
			}
		}, _try, this, [[1, 7]]);
	}),

	unique: function unique(value, index, array) {
		return index == 0 || value != array[index - 1];
	},

	joinData: function joinData(array) {
		return array.length == 0 ? "" : typeof array[0] == "string" ? array.join("") : Buffer.isBuffer(array[0]) ? Buffer.concat(array) : array.join("");
	},

	on: function on(emitter, events) {
		lodash.forEach(events, function (handler, event) {
			return emitter.on(event, handler);
		});
	},

	off: function off(emitter, events) {
		lodash.forEach(events, function (handler, event) {
			return emitter.removeListener(event, handler);
		});
	},

	readStream: regeneratorRuntime.mark(function readStream(stream) {
		return regeneratorRuntime.wrap(function readStream$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					context$1$0.next = 2;
					return { then: function then(resolve, reject) {
							var content = [];
							stream.on("data", function (chunk) {
								return content.push(chunk);
							});
							stream.on("end", function () {
								return resolve(lu.joinData(content));
							});
							stream.on("error", reject);
						} };

				case 2:
					return context$1$0.abrupt("return", context$1$0.sent);

				case 3:
				case "end":
					return context$1$0.stop();
			}
		}, readStream, this);
	}),

	readJSON: regeneratorRuntime.mark(function readJSON(stream) {
		return regeneratorRuntime.wrap(function readJSON$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					context$1$0.next = 2;
					return lu.readStream(stream);

				case 2:
					context$1$0.t0 = context$1$0.sent;
					return context$1$0.abrupt("return", JSON.parse(context$1$0.t0));

				case 4:
				case "end":
					return context$1$0.stop();
			}
		}, readJSON, this);
	}),

	readChunk: regeneratorRuntime.mark(function readChunk(stream) {
		return regeneratorRuntime.wrap(function readChunk$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					context$1$0.next = 2;
					return { then: function then(resolve, reject) {
							stream.on("data", onData);
							stream.on("end", onEnd);
							stream.on("error", onError);
							function done() {
								stream.removeListener("data", onData);
								stream.removeListener("end", onEnd);
								stream.removeListener("error", onError);
							}
							function onData(chunk) {
								done();
								resolve(chunk);
							}
							function onEnd() {
								done();
								resolve(null);
							}
							function onError(error) {
								done();
								reject(error);
							}
						} };

				case 2:
					return context$1$0.abrupt("return", context$1$0.sent);

				case 3:
				case "end":
					return context$1$0.stop();
			}
		}, readChunk, this);
	}),

	"static": function _static(fun) {
		return co.func(regeneratorRuntime.mark(function callee$1$0(request, response) {
			var headWritten, responseEnded, body;
			return regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
				while (1) switch (context$2$0.prev = context$2$0.next) {
					case 0:
						headWritten = false, responseEnded = false;
						context$2$0.prev = 1;
						context$2$0.next = 4;
						return fun();

					case 4:
						body = context$2$0.sent;

						response.writeHead(200, _defineProperty({}, "Content-Type", "text/html; charset=UTF-8"));
						headWritten = true;
						if (typeof body != "string") body = React.renderComponentToString(body);
						response.end(body);
						responseEnded = true;

					case 10:
						context$2$0.prev = 10;

						if (!headWritten) response.writeHead(500, _defineProperty({}, "Content-Type", "text/plain"));
						if (!responseEnded) response.end("<<< ERROR >>>");
						return context$2$0.finish(10);

					case 14:
					case "end":
						return context$2$0.stop();
				}
			}, callee$1$0, this, [[1,, 10, 14]]);
		}));
	},

	property: function property(obj, name, defaultValue) {
		var privateName = "_" + name;
		if (arguments.length > 2) obj[privateName] = defaultValue;
		obj[name] = function (value) {
			if (arguments.length == 0) return obj[privateName];else {
				obj[privateName] = value;
				return obj;
			}
		};
		return obj;
	},

	polling: function polling(stream) {
		var ret = {
			stop: function stop() {
				if (!ret) return;
				if (ret._polling != null) {
					clearTimeout(ret._polling);
					ret._polling = null;
				}
				ret = null;
			},
			_polling: null,
			_tryToSendChunk: function _tryToSendChunk() {
				if (!ret) return;
				ret._polling = null;
				if (!stream.write(ret._chunk)) stream.once("drain", ret._tryToSendChunk);else {
					if (typeof stream.flush == "function") stream.flush();
					ret._polling = setTimeout(ret._tryToSendChunk, ret._interval);
				}
			} };

		lu.property(ret, "chunk", "\n");
		lu.property(ret, "interval", 60000);

		// TODO: this event never fires! what's the shit? check it! may be the reason is .use( require( `compression` )( { threshold: 0 } ) )?
		stream.once("end", ret.stop);
		// TODO: this event never fires! what's the shit? check it! may be the reason is .use( require( `compression` )( { threshold: 0 } ) )?
		stream.once("close", ret.stop);
		// TODO: this event never fires! what's the shit? check it! may be the reason is .use( require( `compression` )( { threshold: 0 } ) )?
		stream.once("error", ret.stop);

		process.nextTick(ret._tryToSendChunk);

		return ret;
	},

	testDiffImm: function testDiffImm() {
		var p = { a: 1, x: { u: 9 } };
		var q = { x: { c: 2 } };
		assert(Immutable.is(Immutable.fromJS(q), lu.applyDiffImm(p, lu.makeDiffImm(p, q))));
	},

	testDiff: function testDiff() {
		var p = { a: 1, x: { u: 9 } };
		var q = { x: { c: 2 } };
		assert(Immutable.is(Immutable.fromJS(q), Immutable.fromJS(lu.applyDiff(p, lu.makeDiff(p, q)))));
	},

	applyDiffImm: function applyDiffImm(dest, diff) {
		return Immutable.fromJS(dest || Immutable.Map()).withMutations(function (dest) {
			Immutable.fromJS(diff).forEach(function (value, key) {
				if (value == null) dest["delete"](key);else if (!(value instanceof Immutable.Map)) dest.set(key, value);else dest.set(key, lu.applyDiffImm(dest.get(key), value));
			});
		});
	},

	makeDiffImm: function makeDiffImm(previous, next) {
		return Immutable.Map().withMutations(function (ret) {
			function toArray(obj) {
				var ret = [];
				obj && Immutable.fromJS(obj).forEach(function (value, key) {
					ret.push({ key: key, value: value });
				});
				return ret.sort(function (v1, v2) {
					return v1.key < v2.key ? -1 : v1.key > v2.key ? 1 : 0;
				});
			}
			var pa = toArray(previous);
			var na = toArray(next);
			var p = pa.pop();
			var n = na.pop();
			while (p || n) {
				if (!n || p && p.key > n.key) {
					ret.set(p.key, null); // deleting
					p = pa.pop();
				} else if (!p || p.key < n.key) {
					ret.set(n.key, n.value);
					n = na.pop();
				} else {
					if (p.value instanceof Immutable.Map && n.value instanceof Immutable.Map) ret.set(n.key, lu.makeDiffImm(p.value, n.value));else ret.set(n.key, n.value);
					p = pa.pop();
					n = na.pop();
				}
			}
		});
	},

	assignDiffImm: function assignDiffImm(dest, src) {
		return lu.applyDiffImm(dest, lu.makeDiffImm(dest, src));
	},

	isLiteral: function isLiteral(obj) {
		return obj && typeof obj == "object" && obj.constructor == Object;
	},

	applyDiff: function applyDiff(dest, diff) {
		var ret = dest;
		var cnt = 0;

		function copyDest() {
			ret = {};
			for (var key in dest) {
				if (Object.prototype.hasOwnProperty.call(dest, key)) {
					ret[key] = dest[key];
					++cnt;
				}
			}
		}

		for (var key in diff) {
			if (Object.prototype.hasOwnProperty.call(diff, key)) {
				var value = diff[key];
				if (value != null && typeof value == "object") value = lu.applyDiff(ret && ret[key], value);
				if (value == null) {
					if (ret != null && Object.prototype.hasOwnProperty.call(ret, key)) {
						if (ret === dest) copyDest();
						delete ret[key];
						--cnt;
					}
				} else {
					if (ret == null || ret[key] !== value) {
						if (ret === dest) copyDest();
						ret[key] = value;
					}
					cnt = Infinity;
				}
			}
		}if (ret !== dest && cnt == 0) ret = null;

		return ret;
	},

	makeDiff: function makeDiff(previous, next) {
		var ret = null;
		function toArray(obj) {
			var ret = [];
			lodash.forEach(obj, function (value, key) {
				ret.push({ key: key, value: value });
			});
			return ret.sort(function (v1, v2) {
				return v1.key < v2.key ? -1 : v1.key > v2.key ? 1 : 0;
			});
		}
		var pa = toArray(previous);
		var na = toArray(next);
		var p = pa.pop();
		var n = na.pop();
		while (p || n) {
			if (!n || p && p.key > n.key) {
				if (ret == null) ret = {};
				ret[p.key] = null; // deleting
				p = pa.pop();
			} else if (!p || p.key < n.key) {
				if (ret == null) ret = {};
				ret[n.key] = n.value;
				n = na.pop();
			} else {
				if (p.value !== n.value) {
					if (lu.isLiteral(p.value) && lu.isLiteral(n.value)) {
						var diff = lu.makeDiff(p.value, n.value);
						if (diff != null) {
							if (ret == null) ret = {};
							ret[n.key] = diff;
						}
					} else {
						if (ret == null) ret = {};
						ret[n.key] = n.value;
					}
				}
				p = pa.pop();
				n = na.pop();
			}
		}
		return ret;
	},

	assignDiff: function assignDiff(dest, src) {
		return lu.applyDiff(dest, lu.makeDiff(dest, src));
	},

	cast: function cast(type, obj) {
		if (!obj || typeof obj != "object") return obj;

		var _ref = type || {};

		var constructor = _ref.constructor;
		var elements = _ref.elements;

		if (typeof constructor == "string") constructor = Immutable[constructor];
		return (constructor || Immutable.Map)().withMutations(function (ret) {
			return Object.keys(obj).forEach(function (k) {
				return ret.set(k, lu.cast(elements && elements[k], obj[k]));
			});
		});
	},

	concatString: function concatString(array) {
		var ret = "";
		!(function walk(array) {
			if (typeof array != "object") ret += array;else if (array.length != null) array.forEach(walk);else {
				var _iteratorNormalCompletion3 = true;
				var _didIteratorError3 = false;
				var _iteratorError3 = undefined;

				try {
					for (var _iterator3 = array[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
						var s = _step3.value;

						walk(s);
					}
				} catch (err) {
					_didIteratorError3 = true;
					_iteratorError3 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
							_iterator3["return"]();
						}
					} finally {
						if (_didIteratorError3) {
							throw _iteratorError3;
						}
					}
				}
			}
		})(array);
		return ret;
	},

	sortedDiff: function sortedDiff(first, second) {
		var fi = first[Symbol.iterator]();
		var si = second[Symbol.iterator]();
		var ret = {
			common: [],
			first: [],
			second: [] };
		var fv = fi.next(),
		    sv = si.next();
		while (!fv.done || !sv.done) {
			if (sv.done || fv.value < sv.value) {
				ret.first.push(fv.value);
				fv = fi.next();
			} else if (fv.done || fv.value > sv.value) {
				ret.second.push(sv.value);
				sv = si.next();
			} else {
				ret.common.push(fv.value);
				fv = fi.next();
				sv = si.next();
			}
		}
		return ret;
	},

	measure: function measure(fun) {
		var now = global.performance || global.Date;
		var t = now.now();
		try {
			return fun();
		} finally {
			t = (now.now() - t) / 1000;
			if (t > 0) {
				var i = 1;
				while (t < 1000) {
					i *= 10;
					t *= 10;
				}
				t = Math.round(t) / i;
			}
			console.log(t);
		}
	},

	skip: regeneratorRuntime.mark(function skip(c, buf) {
		var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, b;

		return regeneratorRuntime.wrap(function skip$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					_iteratorNormalCompletion4 = true;
					_didIteratorError4 = false;
					_iteratorError4 = undefined;
					context$1$0.prev = 3;
					_iterator4 = buf[Symbol.iterator]();

				case 5:
					if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
						context$1$0.next = 16;
						break;
					}

					b = _step4.value;

					if (!(c > 0)) {
						context$1$0.next = 11;
						break;
					}

					--c;
					context$1$0.next = 13;
					break;

				case 11:
					context$1$0.next = 13;
					return b;

				case 13:
					_iteratorNormalCompletion4 = true;
					context$1$0.next = 5;
					break;

				case 16:
					context$1$0.next = 22;
					break;

				case 18:
					context$1$0.prev = 18;
					context$1$0.t0 = context$1$0["catch"](3);
					_didIteratorError4 = true;
					_iteratorError4 = context$1$0.t0;

				case 22:
					context$1$0.prev = 22;
					context$1$0.prev = 23;

					if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
						_iterator4["return"]();
					}

				case 25:
					context$1$0.prev = 25;

					if (!_didIteratorError4) {
						context$1$0.next = 28;
						break;
					}

					throw _iteratorError4;

				case 28:
					return context$1$0.finish(25);

				case 29:
					return context$1$0.finish(22);

				case 30:
				case "end":
					return context$1$0.stop();
			}
		}, skip, this, [[3, 18, 22, 30], [23,, 25, 29]]);
	}),

	take: regeneratorRuntime.mark(function take(c, buf) {
		var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, b;

		return regeneratorRuntime.wrap(function take$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					_iteratorNormalCompletion5 = true;
					_didIteratorError5 = false;
					_iteratorError5 = undefined;
					context$1$0.prev = 3;
					_iterator5 = buf[Symbol.iterator]();

				case 5:
					if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
						context$1$0.next = 17;
						break;
					}

					b = _step5.value;

					if (!(c > 0)) {
						context$1$0.next = 13;
						break;
					}

					--c;
					context$1$0.next = 11;
					return b;

				case 11:
					context$1$0.next = 14;
					break;

				case 13:
					return context$1$0.abrupt("break", 17);

				case 14:
					_iteratorNormalCompletion5 = true;
					context$1$0.next = 5;
					break;

				case 17:
					context$1$0.next = 23;
					break;

				case 19:
					context$1$0.prev = 19;
					context$1$0.t0 = context$1$0["catch"](3);
					_didIteratorError5 = true;
					_iteratorError5 = context$1$0.t0;

				case 23:
					context$1$0.prev = 23;
					context$1$0.prev = 24;

					if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
						_iterator5["return"]();
					}

				case 26:
					context$1$0.prev = 26;

					if (!_didIteratorError5) {
						context$1$0.next = 29;
						break;
					}

					throw _iteratorError5;

				case 29:
					return context$1$0.finish(26);

				case 30:
					return context$1$0.finish(23);

				case 31:
				case "end":
					return context$1$0.stop();
			}
		}, take, this, [[3, 19, 23, 31], [24,, 26, 30]]);
	}),

	copy: function copy(buf) {
		var ret = lu.array(buf);
		if (ret == buf) ret = buf.slice();
		return ret;
	},

	array: function array(buf) {
		if (Array.isArray(buf)) return buf;
		var ret = [];
		if (!buf[Symbol.iterator]) for (var i = 0; i < buf.length; ++i) {
			ret.push(buf[i]);
		} else {
			var _iteratorNormalCompletion6 = true;
			var _didIteratorError6 = false;
			var _iteratorError6 = undefined;

			try {
				for (var _iterator6 = buf[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
					var b = _step6.value;

					ret.push(b);
				}
			} catch (err) {
				_didIteratorError6 = true;
				_iteratorError6 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
						_iterator6["return"]();
					}
				} finally {
					if (_didIteratorError6) {
						throw _iteratorError6;
					}
				}
			}
		}return ret;
	},

	buffer: function buffer(buf) {
		if (buf instanceof Buffer) return buf;else return new Buffer(lu.array(buf));
	},

	vector: function vector(buf) {
		return buf instanceof Buffer ? buf : lu.array(buf);
	},

	concat: regeneratorRuntime.mark(function concat(list) {
		var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, l, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, x;

		return regeneratorRuntime.wrap(function concat$(context$1$0) {
			while (1) switch (context$1$0.prev = context$1$0.next) {
				case 0:
					_iteratorNormalCompletion7 = true;
					_didIteratorError7 = false;
					_iteratorError7 = undefined;
					context$1$0.prev = 3;
					_iterator7 = list[Symbol.iterator]();

				case 5:
					if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
						context$1$0.next = 36;
						break;
					}

					l = _step7.value;
					_iteratorNormalCompletion8 = true;
					_didIteratorError8 = false;
					_iteratorError8 = undefined;
					context$1$0.prev = 10;
					_iterator8 = l[Symbol.iterator]();

				case 12:
					if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
						context$1$0.next = 19;
						break;
					}

					x = _step8.value;
					context$1$0.next = 16;
					return x;

				case 16:
					_iteratorNormalCompletion8 = true;
					context$1$0.next = 12;
					break;

				case 19:
					context$1$0.next = 25;
					break;

				case 21:
					context$1$0.prev = 21;
					context$1$0.t0 = context$1$0["catch"](10);
					_didIteratorError8 = true;
					_iteratorError8 = context$1$0.t0;

				case 25:
					context$1$0.prev = 25;
					context$1$0.prev = 26;

					if (!_iteratorNormalCompletion8 && _iterator8["return"]) {
						_iterator8["return"]();
					}

				case 28:
					context$1$0.prev = 28;

					if (!_didIteratorError8) {
						context$1$0.next = 31;
						break;
					}

					throw _iteratorError8;

				case 31:
					return context$1$0.finish(28);

				case 32:
					return context$1$0.finish(25);

				case 33:
					_iteratorNormalCompletion7 = true;
					context$1$0.next = 5;
					break;

				case 36:
					context$1$0.next = 42;
					break;

				case 38:
					context$1$0.prev = 38;
					context$1$0.t1 = context$1$0["catch"](3);
					_didIteratorError7 = true;
					_iteratorError7 = context$1$0.t1;

				case 42:
					context$1$0.prev = 42;
					context$1$0.prev = 43;

					if (!_iteratorNormalCompletion7 && _iterator7["return"]) {
						_iterator7["return"]();
					}

				case 45:
					context$1$0.prev = 45;

					if (!_didIteratorError7) {
						context$1$0.next = 48;
						break;
					}

					throw _iteratorError7;

				case 48:
					return context$1$0.finish(45);

				case 49:
					return context$1$0.finish(42);

				case 50:
				case "end":
					return context$1$0.stop();
			}
		}, concat, this, [[3, 38, 42, 50], [10, 21, 25, 33], [26,, 28, 32], [43,, 45, 49]]);
	}),

	word: function word(w) {
		return [w & 255, w >> 8 & 255];
	},

	dword: function dword(w) {
		return [w & 255, w >> 8 & 255, w >> 16 & 255, w >> 24 & 255];
	},

	makeWord: function makeWord(lo, hi) {
		return (lo & 255) + (hi & 255) << 8;
	},

	arrayEqual: function arrayEqual(a, b) {
		return a && b && a.length == b.length && a.every(function (ai, i) {
			return ai == b[i];
		});
	},

	compare: function compare(a, b) {
		if (a == b) return 0;
		if (a < b) return -1;
		return 1;
	},

	formatms: function formatms(value) {
		var ret = "";
		value = Math.round(value);
		var ms = value % 1000;
		value -= ms;
		value /= 1000;
		var s = value % 60;
		value -= s;
		value /= 60;
		var m = value % 60;
		value -= m;
		value /= 60;
		var h = value;
		ret += h ? h : "";
		ret += ret ? ":" + z(m, 2) : m ? m : "";
		ret += ret ? ":" + z(s, 2) : s;
		ret += "." + z(ms, 3);
		return ret;
		function z(value, len) {
			var str = String(value);
			var ret = "";
			for (var i = str.length; i < len; ++i) {
				ret += "0";
			}ret += str;
			return ret;
		}
	},

	get: function get(obj) {
		for (var _len4 = arguments.length, path = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
			path[_key4 - 1] = arguments[_key4];
		}

		var _iteratorNormalCompletion9 = true;
		var _didIteratorError9 = false;
		var _iteratorError9 = undefined;

		try {
			for (var _iterator9 = path[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
				var p = _step9.value;

				if (obj == null) break;else obj = obj[p];
			}
		} catch (err) {
			_didIteratorError9 = true;
			_iteratorError9 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion9 && _iterator9["return"]) {
					_iterator9["return"]();
				}
			} finally {
				if (_didIteratorError9) {
					throw _iteratorError9;
				}
			}
		}

		return obj;
	},

	limitCalls: function limitCalls(limit, period, message) {
		var calls = 0;
		return function () {
			if (calls >= limit) if (message) throw new Error.create(message);else return false;
			++calls;
			setTimeout(function () {
				return --calls;
			}, period);
			return true;
		};
	} };

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/localUtils.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","co":"/home/vadzim/v/work/nerojs/src/co.js","events":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/events/events.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js"}],"/home/vadzim/v/work/nerojs/src/platform.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

Object.defineProperty(Object.prototype, "_LOG_", { value: function value() {
		console.log(this);
		return this;
	}, configurable: true });

// require( `colors` )

// global.EventEmitter = require( `events` ).EventEmitter

// global.Immutable = require( `immutable` )
// if ( Symbol.iterator && !Immutable.Sequence.prototype[ Symbol.iterator ] )
// 	initImmutableIterators()

if (typeof Symbol == "function" && Symbol.iterator) {
	var x = null;
	try {
		x = eval.call(null, "(function*(){}().constructor.prototype)");
	} catch (_) {}
	if (x && !x[Symbol.iterator]) x[Symbol.iterator] = function () {
		return this;
	};
}

// global.lodash = require( `lodash` )
// global.UID = require( `uid` )
// global.co = require( `co` )
// global.ra = require( `ra` )
// global.lu = require( `localUtils` )
// global.httpClient = require( `httpClient` )

// global.React = require( `myReact` )

// global.Morearty = require( `morearty` )

// global.Router = require( `abyssa` ).Router

function initImmutableIterators() {

	var sequenceIterator = function sequenceIterator() {
		var seq = this;
		return {
			next: function next() {
				var value = seq.first();
				var ret = {
					value: value,
					done: value === void 0 && seq.length === 0
				};
				seq = seq.rest();
				return ret;
			}
		};
	};

	var indexedIterator = function indexedIterator() {
		var _this = this;

		var index = 0;
		return {
			next: function next() {
				return index < _this.length ? { value: _this.get(index++) } : { done: true };
			}
		};
	};

	var valuesIterator = function valuesIterator() {
		return indexedIterator.call(this.values());
	};

	var it = function it(constructor, iterator) {
		return constructor.prototype[Symbol.iterator] = iterator;
	};

	it(Immutable.Sequence, sequenceIterator);
	it(Immutable.Range, indexedIterator);
	it(Immutable.Vector, indexedIterator);
	it(Immutable.Repeat, indexedIterator);
	it(Immutable.Map, valuesIterator);
	it(Immutable.OrderedMap, valuesIterator);
	it(Immutable.Set, valuesIterator);
	var m = Immutable.Map({ x: 1 });
	it(m.values().constructor, indexedIterator);
	it(m.keys().constructor, indexedIterator);
	it(Immutable.Sequence(2, 3, 4).constructor, indexedIterator);
}

// global.window && ( global.Promise = require( `promise` ) )

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/platform.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/ra.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*

TODO:

* Warning if a live property has not been read during the life time of observable value or during some period of time (e.g. 1-30 minutes) since creating that observable value.

* check for changes during execution of (function*) and restart calculus.


TODO BUG:
let app = ra.clean( {
	moving1: {
		a: 1,
		b: 2,
		c: {
			d: 3,
		},
	},
}
_app.moving1.a
1
_app.moving1.c.d
3
_app.moving1={a:4}
Object {a: 4}
_app.moving1.c.d
3                       <----------- !!!  MUST BE NULL !!!!
_app.moving1.c
Cell {_id: "j87yqkoqppuv", _value: null, _error: null, _isValueEqual: function, _initialized: true…}
_app.moving1.c.valueOf()
null


*/

"use strict";

var _get = function get(_x5, _x6, _x7) { var _again = true; _function: while (_again) { var object = _x5, property = _x6, receiver = _x7; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x5 = parent; _x6 = property; _x7 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

var later = require("later").push;
var co = require("co");
var UID = require("uid");
var lodash = require("lodash");

var _require = require("LOG");

var LOG = _require.LOG;

var actionKey = "_RA_ACTION_" + UID();
var raValue = "_RA_VALUE_" + UID();

// let debugLog = false

var updates = {};
updates.scheduled = false;
updates.procs = [];
updates.index = 0;
updates.maxIndex = 32768;
updates.processing = false;
updates.totalTime = 0;
updates.maxTime = 0;
updates.maxTime1 = 0;
updates.minTime = Infinity;
updates.runCount = 0;
updates.runAllCount = 0;

global.updates = updates; // debugger

var performance = global.performance || global.Date;
updates.start = performance.now();

updates.log = function () {
	return console.log(":: " + updates.totalTime / 1000 + " / " + (performance.now() - updates.start) / 1000 + " (" + updates.maxTime / 1000 + ", " + updates.maxTime1 / 1000 + ", " + updates.minTime / 1000 + ", " + Action.maxCount + ", " + updates.runCount + ", " + updates.runAllCount + ")");
};

// co.go( function* () { // debugger
// 	let sleep5000 = co.sleep( 5000 )
// 	for (;;) {
// 		let totalTime = updates.totalTime
// 		yield sleep5000
// 		if ( totalTime != updates.totalTime )
// 			updates.log()
// 	}
// } )

updates.checkSchedule = function () {
	if (!updates.scheduled && updates.procs.length > 0) {
		updates.scheduled = true;
		later(updates.tick);
	}
};

updates.tick = function () {
	updates.scheduled = false;
	for (var _try = 0; _try < 1000; ++_try) {
		try {
			updates.runAll();
			break;
		} catch (error) {
			setTimeout(function () {
				throw error;
			}, 1);
		}
	}
	updates.checkSchedule();
};

updates.runAll = function () {
	// if ( updates.processing )
	// 	return

	var start = performance.now();
	var st1 = start;
	var runCount = updates.runCount;

	var processing = updates.processing;
	updates.processing = true;
	var action = co.global[actionKey];
	if (action != null) co.global[actionKey] = null;
	try {
		while (updates.index < updates.procs.length) {
			if (global.APP_TIMEOUT && global.APP_TIMEOUT < Date.now) {
				alert("Application is running too long");
			}
			var proc = updates.procs[updates.index];
			++updates.index;
			++updates.runCount;
			if (updates.index >= updates.maxIndex && updates.index * 3 > updates.procs.length) {
				updates.procs.splice(0, updates.index);
				updates.index = 0;
			}
			proc();
			var t1 = performance.now();
			if (updates.maxTime1 < t1 - st1) updates.maxTime1 = t1 - st1;
			// if ( t1 - st1 > 10 )
			// 	console.log( t1 - st1, `` + proc.$name ) // debugger
			st1 = t1;
		}
		updates.index = updates.procs.length = 0;
	} finally {
		if (action != null) co.global[actionKey] = action;
		updates.processing = processing;
		if (!processing) {
			var time = performance.now() - start;
			updates.totalTime += time;
			if (updates.maxTime < time) updates.maxTime = time;
			runCount = updates.runCount - runCount;
			if (runCount) {
				++updates.runAllCount;
				if (updates.minTime > time) updates.minTime = time;
			}
			if (time > 300) LOG("updates have been run for " + time.toString().red + " ms");
		}
	}
};

updates.later = function (proc) {
	updates.procs.push(proc);
	updates.checkSchedule();
};

updates.later.then = updates.later;

var emptyMap = typeof Immutable == "undefined" ? null : Immutable.Map();
var checkNull = function checkNull(value) {
	return value == null || value == emptyMap ? null : value;
};
var checkMap = function checkMap(value) {
	return value == null ? emptyMap : value;
};
var returnThis = function returnThis() {
	return this;
};

var isLiteral = function isLiteral(value) {
	return value && typeof value == "object" && value.constructor == Object;
};
var getValue = function getValue(value) {
	return value == null || value.valueOf == null ? value : value.valueOf();
};
var close = function close(value) {
	return value != null && value.close != null && value.close();
};

// let _m = obj => checkMap( obj.valueOf() )

function AbstractGuard() {}

var invalidKeyCall = function invalidKeyCall(key) {
	throw new Error("access to an undeclared property \"" + this.$name + "." + key + "\"");
};

var usedProps = Object.create(null);
var usedPropsProto = Object.create(null);
var guardProp = function guardProp(key) {
	if (!usedProps[key]) {
		usedProps[key] = true;
		Object.defineProperty(usedPropsProto, key, {
			get: function get() {
				invalidKeyCall.call(this, key);
			},
			set: function set() {
				invalidKeyCall.call(this, key);
			} });
	}
};
AbstractGuard.prototype = usedPropsProto;

// Не зразумела толкам, як гэты Proxy працуе ў якасьці прататыпу.
// Пакуль што, здаецца, паводзіны не адпавядаюць сьпецыфікацыі (2014.11.25)

// if ( typeof Proxy == "function" ) {
// 	AbstractGuard.prototype = new Proxy( AbstractGuard.prototype, {
// 		get: function ( _, key ) { invalidKeyCall.call( this, key ) },
// 		set: function ( _, key ) { invalidKeyCall.call( this, key ) },
// 	} )
// }

if (global.APP_DEBUG) {
	//
	// аб'яўленьне аб'екта з ~700-800 уласьцівасьцяў з функцыямі чытаньня/запісу
	// займае ў Google Chrome'е каля траціны секунды.
	// Правераныя спосабы:
	// - дабаўленьне па адным праз Object.defineProperty
	// - дабаўленьне гуртам праз Object.defineProperties
	// - кампіляцыя зыходніка праз лакальны eval
	// - кампіляцыя зыходніка праз глабальны eval
	// - кампіляцыя зыходніка праз дабаўленьне тэгу script з зыходнікам
	// Не правераныя спосабы:
	// - дабаўленьне тэгу script з пазнакай src
	// Паляпшае сітуацыю (напалову):
	// - стварэньне для кожнай уласьцівасьці новага аб'екта са старым аб'ектам
	// у якасьці прататыпу. Пры гэтым доступ да неаб'яўленых уласьцівасьцяў можа
	// стаць адносна доўгім па часе, але ж гэта ня так важна, бо ў выніку ўсё адно
	// кідаецца памылка.
	//
	// Генерацыя тэксту зыходніка адбываецца імгненна.
	//
	// Зыходзячы з гэтага улучаць стражнікаў доступу да неаб'яўленых уласьцівасьцяў
	// трэба толькі пры адладцы.
	//
	AbstractGuard.prototype = (global.__UsedScriptIdentifiers__ + "").split(/[\s,]+/).reduce(function (proto, key) {
		return Object.create(proto, _defineProperty({}, key, {
			get: function get() {
				invalidKeyCall.call(this, key);
			},
			set: function set(_) {
				invalidKeyCall.call(this, key);
			} }));
	}, AbstractGuard.prototype);
}

AbstractGuard.prototype = Object.create(AbstractGuard.prototype, {
	toString: { value: ({}).toString },
	valueOf: { value: ({}).valueOf },
	toLocaleString: { value: ({}).toLocaleString },
	hasOwnProperty: { value: ({}).hasOwnProperty },
	isPrototypeOf: { value: ({}).isPrototypeOf },
	propertyIsEnumerable: { value: ({}).propertyIsEnumerable },
	$name: { value: "<...>", writable: 1 } });

var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);

var ImmutableInterface = (function (_AbstractGuard) {
	function ImmutableInterface() {
		_classCallCheck(this, ImmutableInterface);

		if (_AbstractGuard != null) {
			_AbstractGuard.apply(this, arguments);
		}
	}

	_inherits(ImmutableInterface, _AbstractGuard);

	_createClass(ImmutableInterface, [{
		key: "props",

		// debugger
		get: function () {
			throw new Error("access to deprecated 'props' property detected");
		}
	}, {
		key: "declaredProperties",
		get: function () {
			return this.live;
		}
	}, {
		key: "length",
		get: function () {
			var m = this.valueOf();return m == null ? 0 : Object.keys(m).length;
		}
	}, {
		key: "get",
		value: function get(key) {
			if (key != null) {
				var m = this.valueOf();
				if (m != null && Object.prototype.hasOwnProperty.call(m, key)) return m[key];
			}
			return null;
		}
	}, {
		key: "map",
		value: function map(fun) {
			var m = this.valueOf();
			return m && (Array.isArray(m) ? lodash.map(m, fun) : lodash.mapValues(m, fun));
		}
	}, {
		key: "keys",
		value: function keys() {
			var m = this.valueOf();
			return m == null ? EMPTY_ARRAY : Object.keys(m);
		}

		// clear() { let m = _m( this ); return m.clear.apply( m, arguments ) }
		// entries() { let m = _m( this ); return m.entries.apply( m, arguments ) }
		// get() { let m = _m( this ); return m.get.apply( m, arguments ) }
		// keys() { let m = _m( this ); return m.keys.apply( m, arguments ) }
		// last() { let m = _m( this ); return m.last.apply( m, arguments ) }
		// map() { let m = _m( this ); return m.map.apply( m, arguments ) }
		// merge() { let m = _m( this ); return m.merge.apply( m, arguments ) }
		// mergeDeep() { let m = _m( this ); return m.mergeDeep.apply( m, arguments ) }
		// mergeDeepWith() { let m = _m( this ); return m.mergeDeepWith.apply( m, arguments ) }
		// mergeWith() { let m = _m( this ); return m.mergeWith.apply( m, arguments ) }
		// remove() { let m = _m( this ); return m.remove.apply( m, arguments ) }
		// set() { let m = _m( this ); return m.set.apply( m, arguments ) }
		// update() { let m = _m( this ); return m.update.apply( m, arguments ) }
		// updateIn() { let m = _m( this ); return m.updateIn.apply( m, arguments ) }
		// values() { let m = _m( this ); return m.values.apply( m, arguments ) }
		// withMutations() { let m = _m( this ); return m.withMutations.apply( m, arguments ) }
		// toJS() { let m = _m( this ); return m.toJS() }

	}]);

	return ImmutableInterface;
})(AbstractGuard);

var ReadOnlyCell = (function (_ImmutableInterface) {
	function ReadOnlyCell(parent) {
		_classCallCheck(this, ReadOnlyCell);

		_get(Object.getPrototypeOf(ReadOnlyCell.prototype), "constructor", this).call(this);
		this._parent = parent;
	}

	_inherits(ReadOnlyCell, _ImmutableInterface);

	_createClass(ReadOnlyCell, [{
		key: "getReadOnly",
		value: function getReadOnly() {
			return this;
		}
	}, {
		key: "live",
		get: function () {
			return this._parent.live;
		}
	}, {
		key: "$name",
		get: function () {
			return this._parent.$name;
		}
	}, {
		key: "valueOf",
		value: function valueOf() {
			return this._parent.valueOf.apply(this._parent, arguments);
		}
	}, {
		key: "noTouch",
		value: function noTouch() {
			return this._parent.noTouch.apply(this._parent, arguments);
		}
	}, {
		key: "toString",
		value: function toString() {
			return this._parent.toString.apply(this._parent, arguments);
		}
	}, {
		key: "toJSON",
		value: function toJSON() {
			return this._parent.toJSON.apply(this._parent, arguments);
		}
	}, {
		key: "getName",
		value: function getName() {
			return this._parent.getName.apply(this._parent, arguments);
		}
	}]);

	return ReadOnlyCell;
})(ImmutableInterface);

var Getter = function Getter(fun, isValueEqual) {
	var last = undefined;
	var ret = !isValueEqual ? function () {
		return fun.apply(this, arguments);
	} : function () {
		var ret = fun.apply(this, arguments);
		if (!is(last, ret, isValueEqual)) last = ret;
		return last;
	};
	ret.isGetter = true;
	return ret;
};

var Type = function Type(f) {
	g.typeDescriptor = true;
	return g;
	function g() {
		return f.apply(this, arguments);
	}
};

var runGetter = function runGetter(cell, getter, sticky) {
	return new Action(getter, cell, sticky).linkName(cell, ":getter");
};

var runSetter = function runSetter(cell, setter, sticky) {
	return new Action(function () {
		return setter(cell.valueOf());
	}, null, sticky).linkName(cell, ":setter");
};

function is(a, b, isEqual) {
	return Object.is(a, b) || b && typeof b.isEqualTo == "function" && b.isEqualTo(a) || a && typeof a.isEqualTo == "function" && a.isEqualTo(b) || typeof isEqual == "function" && isEqual(a, b);
}

var This = (function () {
	function This() {
		_classCallCheck(this, This);
	}

	_createClass(This, [{
		key: "_defineThatProperty",
		value: function _defineThatProperty(key, that) {
			Object.defineProperty(this, key, {
				configurable: true,
				enumerable: true,
				get: function get() {
					return that[key];
				},
				set: function set(value) {
					that[key] = value;
				} });
		}
	}], [{
		key: "create",
		value: function create(parent, that) {
			var ret = null;
			if (!parent) ret = new This();else ret = Object.create(parent);
			ret.valueOf = function () {
				return that.valueOf();
			};
			ret.toString = function () {
				return that.toString();
			};
			ret.toJSON = function () {
				return that.toJSON();
			};
			ret.assign = function (value) {
				return that.assign(value);
			};
			ret["throw"] = function (value) {
				return that["throw"](value);
			};
			Object.defineProperty(ret, "live", { get: function get() {
					return that.live;
				} });
			return ret;
		}
	}]);

	return This;
})();

var Cell = (function (_ImmutableInterface2) {
	function Cell(sticky) {
		var _this = this;

		_classCallCheck(this, Cell);

		_get(Object.getPrototypeOf(Cell.prototype), "constructor", this).call(this);
		this._id = UID();
		this._that = null;
		this._value = null;
		this._error = null;
		this._isValueEqual = is;
		this._initialized = false;
		this._frozen = false;
		this._closed = false;
		this._dirty = false;
		this._live = null;
		this._liveArray = null;
		this._actionsArr = [];
		this._parent = null;
		this._onchange = [];
		this.$name = { toString: function toString() {
				return _this.getName();
			} };
		this._notifyWritten();
		this._sticky = !!sticky;
	}

	_inherits(Cell, _ImmutableInterface2);

	_createClass(Cell, [{
		key: "valueOf",
		value: function valueOf() {
			return this._read();
		}
	}, {
		key: "assign",
		value: function assign(value) {
			return this._write(value, false, null);
		}
	}, {
		key: "update",
		value: function update(diff) {
			return this.assign(lu.applyDiff(this.noTouch(), diff));
		}
	}, {
		key: "throw",
		value: function _throw(value) {
			return this._write(null, false, value);
		}
	}, {
		key: "touch",
		value: function touch() {
			this._fire();
		}
	}, {
		key: "noTouch",
		value: function noTouch() {
			if (this._dirty) this._updateSelf();
			if (this._error) throw this._error;
			return this._value;
		}
	}, {
		key: "then",
		value: function then(proc) {
			this._onchange.push(proc);
		}
	}, {
		key: "close",
		value: function close() {
			if (this._closed) return;
			this._closed = true;
			this._fire();
			if (this._parent) this._parent.close();
			if (this._liveArray) {
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = this._liveArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var p = _step.value;

						p.close();
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator["return"]) {
							_iterator["return"]();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				this._liveArray = null;
			}
			this._value = null;
			this._error = null;
			this._actionsArr = null;
			this._parent = null;
		}
	}, {
		key: "freeze",
		value: function freeze() {
			if (this._closed || this._frozen) return;
			this._frozen = true;
			this._fire(); // TODO для выдаленьня спасылак абысьціся без _fire і адпаведна без лішняга прагону
			if (this._parent) this._parent.freeze();
			if (this._liveArray) {
				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					for (var _iterator2 = this._liveArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var p = _step2.value;

						p.freeze();
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
							_iterator2["return"]();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}
			}
		}
	}, {
		key: "live",
		get: function () {
			return this._live;
		}
	}, {
		key: "getReadOnly",
		value: function getReadOnly() {
			return this._readOnly || (this._readOnly = new ReadOnlyCell(this));
		}
	}, {
		key: "toString",
		value: function toString() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			var v = this._read();
			return v == null || !v.toString ? "" + v : v.toString.apply(v, args);
		}
	}, {
		key: "toJSON",
		value: function toJSON() {
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			var v = this._read();
			return v == null || !v.toJSON ? v : v.toJSON.apply(v, args);
		}
	}, {
		key: "with",
		value: function _with(cb) {
			return cb.call(this._getThat());
		}
	}, {
		key: "setName",
		value: function setName(name) {
			this._name = name;
			return this;
		}
	}, {
		key: "getName",
		value: function getName() {
			var ret = this._name || this._key;
			var p = this._parent;
			while (p) {
				ret = (p._name || p._key) + "." + ret;
				p = p._parent;
			}
			return ret;
		}
	}, {
		key: "_getThat",
		value: function _getThat() {
			if (!this._that) {
				this._that = This.create(this._parent && this._parent._getThat(), this);
				if (this._live) for (var i in this._live) {
					this._that._defineThatProperty(i, this);
				}
			}
			return this._that;
		}
	}, {
		key: "defineProperty",
		value: function defineProperty(key) {
			var inheritParent = arguments[1] === undefined ? false : arguments[1];

			// pass key == `` to make Cell object, not value
			if (!this._live) {
				this._live = Object.create(null);
				this._liveArray = [];
			}
			if (!key) return;
			guardProp(key);
			var c = this._live[key];
			if (c) return c;
			c = new Cell(this._sticky);
			this._live[key] = c;
			this._liveArray.push(c);
			c._key = key;
			c._parent = this;
			c._level = (this._level || 0) + 1;
			Object.defineProperty(this, key, {
				enumerable: true,
				configurable: true,
				get: function get() {
					if (c._live) return c;else return c._read();
				},
				set: function set(value) {
					if (c._live) value = getValue(value);
					c._write(value, false);
				} });
			if (this._that) this._that._defineThatProperty(key, this);
			if (this._value != null) c._write(this._value[key], true);
			return c;
		}
	}, {
		key: "init",
		value: function init(value) {
			this._init(value, false, false);
		}
	}, {
		key: "setConst",
		value: function setConst(prop, value) {
			Object.defineProperty(this, prop, { enumerable: true, get: function get() {
					return value;
				} });
			return this;
		}
	}, {
		key: "setVar",
		value: function setVar(prop, value) {
			Object.defineProperty(this, prop, { enumerable: true, writable: true, value: value });
			return this;
		}
	}, {
		key: raValue,
		get: function () {
			return true;
		}
	}, {
		key: "_init",
		value: function _init(value, recursive, isGetter, isValueEqual) {
			var cell = this;
			if (!recursive && cell._initialized) throw new Error("already initialized");
			if (this._parent) this._parent._dirty = true;
			cell._initialized = true;
			if (isValueEqual) this._isValueEqual = isValueEqual;
			value = checkNull(value);
			if (typeof value == "function" && value.typeDescriptor) value = value(cell._key);
			if (value == null) // we are already null at the point of birth
				return;
			if (value[raValue]) // force just a value
				return cell._value = value;
			if (typeof value == "function") {
				if (isGetter || value.isGetter) // getter
					runGetter(cell, function () {
						return value.call(cell._parent && cell._parent._getThat());
					}, this._sticky);else // method
					cell._value = function () {
						return value.apply(cell._parent && cell._parent._getThat(), arguments);
					};
				return;
			}
			if (!isLiteral(value)) // just a value
				return cell._value = value;
			// subrecord description
			if (recursive) throw new Error("wrong parameters");
			cell.defineProperty();
			for (var key in value) {
				var descr = Object.getOwnPropertyDescriptor(value, key);
				if (!descr) continue;
				var get = descr.get;
				var subValue = descr.value;
				if (descr.set) throw new Error("wrong parameters");else if (get) subValue = get;
				if (key == "$") cell._init(subValue, true, !!get);else cell.defineProperty(key, true)._init(subValue, false, !!get);
			}
		}
	}, {
		key: "_read",
		value: function _read() {
			if (this._dirty) this._updateSelf();
			var action = co.global[actionKey];
			if (action) {
				if (this._closed) action.close();else if (!this._frozen) action.onread(this);
			}
			if (this._error) throw this._error;
			return this._value;
		}
	}, {
		key: "_write",
		value: function _write(newValue, down, newError) {
			if (newError == null) newError = null;
			if (this._frozen) throw new Error("Try to change a frozen value");
			this._initialized = true;
			this._dirty = false;
			newValue = checkNull(newValue);
			if (this._closed) {
				var action = co.global[actionKey];
				if (action) action.close();
			} else if (!this._isValueEqual(this._value, newValue) || this._error != newError) {
				// console.log(`>`+this.$name)//debugger
				this._value = newValue;
				this._error = newError;
				if (this._live) {
					var _iteratorNormalCompletion3 = true;
					var _didIteratorError3 = false;
					var _iteratorError3 = undefined;

					try {
						for (var _iterator3 = this._liveArray[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
							var p = _step3.value;

							p._write(newValue && newValue[p._key], true);
						}
					} catch (err) {
						_didIteratorError3 = true;
						_iteratorError3 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
								_iterator3["return"]();
							}
						} finally {
							if (_didIteratorError3) {
								throw _iteratorError3;
							}
						}
					}
				}this._fire();
				if (!down) {
					var p = this._parent;
					while (p && !p._dirty) {
						p._dirty = true;
						p._fire();
						p = p._parent;
					}
				}
			}
			if (!down) this._notifyWritten();
			return newValue;
		}
	}, {
		key: "_updateSelf",
		value: function _updateSelf() {
			var cnt = 0;
			var ret = {};
			for (var key in this._value) {
				if (Object.prototype.hasOwnProperty.call(this._value, key)) {
					ret[key] = this._value[key];
					++cnt;
				}
			}var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = this._liveArray[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var p = _step4.value;

					if (p._dirty) p._updateSelf();
					if (p._error) {
						this._error = p._error;
						this._value = null;
						this._dirty = false;
						return;
					}
					var value = p._value;
					if (value == null) {
						if (Object.prototype.hasOwnProperty.call(ret, p._key)) {
							delete ret[p._key];
							--cnt;
						}
					} else {
						ret[p._key] = value;
						cnt = Infinity;
					}
				}
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
						_iterator4["return"]();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}

			if (cnt == 0) ret = null;

			this._value = ret;
			this._dirty = false;
		}
	}, {
		key: "debug",
		value: function debug(cb) {
			this._actionsArr.push({ action: { _fire: cb } });
		}
	}, {
		key: "debugger",
		value: function _debugger() {
			this.debug(function () {
				debugger;
			});
		}
	}, {
		key: "_fire",
		value: function _fire() {
			var a = undefined;
			a = this._actionsArr;
			if (a.length) {
				for (var i = 0; i < a.length; i++) {
					var c = a[i];
					if (c.action) c.action._fire();
					c.pushedC = false;
				}
				a.length = 0;
			}
			a = this._onchange;
			if (a.length) {
				for (var i = 0; i < a.length; i++) {
					updates.later(a[i]);
				}a.length = 0;
			}
		}
	}, {
		key: "_notifyWritten",
		value: function _notifyWritten() {
			var action = co.global[actionKey];
			if (action) action.onwritten(this);
		}
	}]);

	return Cell;
})(ImmutableInterface);

var rethrow = function rethrow(error) {
	return setTimeout(function () {
		throw error;
	}, 1);
};

var Action = (function () {
	function Action(fun, dest, sticky) {
		var _this2 = this;

		_classCallCheck(this, Action);

		this._id = UID();
		this._fun = fun;
		this._dest = dest;
		this._cellSet = {};
		this._cellSetSize = 0;
		this._cellArr = [];
		this.$name = { toString: function toString() {
				return "<Action>";
			} };
		this._thread = co.gocall(this._loop, this).linkName(this).waitForInput();
		this._runCount = 0;
		var owner = undefined;
		if ((owner = co.global[actionKey]) && owner._children) owner._children.push(this);
		this._children = null;
		this._threads = null;
		this._onthread = null;
		this._generatorProxy = null;
		this._generator = null;
		if (sticky) {
			this._children = [];
			this._threads = [];
			this._onthread = function (thread) {
				return _this2._threads.push(thread);
			};
		}
	}

	_createClass(Action, [{
		key: "linkName",
		value: function linkName(value) {
			var suffix = arguments[1] === undefined ? ":action" : arguments[1];

			if (value.$name) value = value.$name;
			this.$name.toString = function () {
				return "" + value + suffix;
			};
			return this;
		}
	}, {
		key: "_initGeneratorProxy",
		value: function _initGeneratorProxy() {
			var _generatorProxy,
			    _this3 = this;

			var _value = undefined;
			var _next = function _next() {
				return _this3._generator.next(_value);
			};
			var _throw2 = function _throw2() {
				return _this3._generator["throw"](_value);
			};
			var _return2 = function _return2() {
				return _this3._generator["return"](_value);
			};
			this._generatorProxy = (_generatorProxy = {}, _defineProperty(_generatorProxy, Symbol.iterator, returnThis), _defineProperty(_generatorProxy, "next", function next(v) {
				_value = v;
				try {
					return co.catchThreads(_next, _this3._onthread);
				} finally {
					_value = null;
				}
			}), _defineProperty(_generatorProxy, "throw", function _throw(v) {
				_value = v;
				try {
					return co.catchThreads(_throw2, _this3._onthread);
				} finally {
					_value = null;
				}
			}), _defineProperty(_generatorProxy, "return", function _return(v) {
				_value = v;
				try {
					return co.catchThreads(_return2, _this3._onthread);
				} finally {
					_value = null;
				}
			}), _generatorProxy);
		}
	}, {
		key: "_loop",
		value: regeneratorRuntime.mark(function _loop() {
			var next, errorCatched, ret;
			return regeneratorRuntime.wrap(function _loop$(context$2$0) {
				var _this4 = this;

				while (1) switch (context$2$0.prev = context$2$0.next) {
					case 0:
						context$2$0.next = 2;
						return updates.later;

					case 2:
						next = { then: function then(next) {
								_this4._onchange = next;
							} };

						co.global[actionKey] = this;
						errorCatched = false;

					case 5:
						context$2$0.prev = 5;

					case 6:
						if (errorCatched) {
							context$2$0.next = 50;
							break;
						}

						if (!this.isClosed()) {
							context$2$0.next = 9;
							break;
						}

						return context$2$0.abrupt("break", 68);

					case 9:
						this._begin();
						errorCatched = true;
						ret = undefined;

						if (!this._children) {
							context$2$0.next = 35;
							break;
						}

						ret = co.catchThreads(this._fun, this._onthread);

						if (!(!ret || ret[raValue])) {
							context$2$0.next = 18;
							break;
						}

						null;
						context$2$0.next = 33;
						break;

					case 18:
						if (!(ret.next && ret["throw"])) {
							context$2$0.next = 29;
							break;
						}

						if (!this._generatorProxy) this._initGeneratorProxy();
						this._generator = ret;
						context$2$0.prev = 21;
						return context$2$0.delegateYield(this._generatorProxy, "t0", 23);

					case 23:
						ret = context$2$0.t0;

					case 24:
						context$2$0.prev = 24;
						this._generator = null;return context$2$0.finish(24);

					case 27:
						context$2$0.next = 33;
						break;

					case 29:
						if (!ret.then) {
							context$2$0.next = 33;
							break;
						}

						context$2$0.next = 32;
						return ret;

					case 32:
						ret = context$2$0.sent;

					case 33:
						context$2$0.next = 49;
						break;

					case 35:
						ret = (0, this._fun)();

						if (!(!ret || ret[raValue])) {
							context$2$0.next = 40;
							break;
						}

						null;
						context$2$0.next = 49;
						break;

					case 40:
						if (!(ret.next && ret["throw"])) {
							context$2$0.next = 45;
							break;
						}

						return context$2$0.delegateYield(ret, "t1", 42);

					case 42:
						ret = context$2$0.t1;
						context$2$0.next = 49;
						break;

					case 45:
						if (!ret.then) {
							context$2$0.next = 49;
							break;
						}

						context$2$0.next = 48;
						return ret;

					case 48:
						ret = context$2$0.sent;

					case 49:
						if (this._dest) this._dest.assign(ret);

					case 50:
						errorCatched = false;

						if (!this.isClosed()) {
							context$2$0.next = 53;
							break;
						}

						return context$2$0.abrupt("break", 68);

					case 53:
						context$2$0.t2 = this._end();
						context$2$0.next = context$2$0.t2 === false ? 56 : context$2$0.t2 === true ? 57 : 59;
						break;

					case 56:
						return context$2$0.abrupt("break", 68);

					case 57:
						context$2$0.next = 59;
						return next
						// case null:
						/* immediate recalculation */
						;

					case 59:
						context$2$0.next = 6;
						break;

					case 61:
						context$2$0.next = 66;
						break;

					case 63:
						context$2$0.prev = 63;
						context$2$0.t3 = context$2$0["catch"](5);

						if (errorCatched) this._dest["throw"](context$2$0.t3);else rethrow(context$2$0.t3);

					case 66:
						context$2$0.next = 5;
						break;

					case 68:
						co.global[actionKey] = null;
						this._finalize();

					case 70:
					case "end":
						return context$2$0.stop();
				}
			}, _loop, this, [[5, 63], [21,, 24, 27]]);
		})
	}, {
		key: "isClosed",
		value: function isClosed() {
			return !this._cellSet;
		}
	}, {
		key: "close",
		value: function close() {
			var thread = this._thread;
			this._fire();
			this._finalize();
			thread && thread.kill();
		}
	}, {
		key: "_closeChildren",
		value: function _closeChildren() {
			var c = undefined;
			if (c = this._children) {
				for (var i = 0, l = c.length; i < l; ++i) {
					c[i].close();
				}c.length = 0;
			}
			if (c = this._threads) {
				for (var i = 0, l = c.length; i < l; ++i) {
					c[i].kill();
				}c.length = 0;
			}
		}
	}, {
		key: "_finalize",
		value: function _finalize() {
			this._unsubscribe();
			this._cellSet = null;
			this._cellArr = null;
			this._fun = null;
			this._dest = null;
			this._thread = null;
		}
	}, {
		key: "_begin",
		value: function _begin() {
			this._unsubscribe();
			++this._runCount;
			if (Action.maxCount < this._runCount) {
				Action.maxCount = this._runCount;
			}
		}
	}, {
		key: "_unsubscribe",
		value: function _unsubscribe() {
			this._onchange = null;
			var a = this._cellArr;
			if (a) {
				for (var i = 0; i < a.length; ++i) {
					var c = a[i];
					c.cell = null;
					c.value = null;
					c.action = null;
					c.read = false;
					c.written = false;
					c.pushedA = false
					// do not change c.pushedC here!!
					;
				}
				if (this._cellSetSize > 32 && a.length < this._cellSetSize / 4) {
					this._cellSet = {};
					this._cellSetSize = 0;
				}
				a.length = 0;
			}
			this._closeChildren();
		}
	}, {
		key: "_end",
		value: function _end() {
			var ret = false;
			var a = this._cellArr;
			for (var i = 0; i < a.length; ++i) {
				var c = a[i];
				if (c.written) c.action = null;else {
					if (!c.pushedC) {
						c.cell._actionsArr.push(c);
						c.pushedC = true;
					}
					if (!is(c.value, c.cell._value) || c.error != c.cell._error) return null;
					c.action = this;
					ret = true;
				}
				c.value = null;
				c.cell = null;
			}
			return ret;
		}
	}, {
		key: "_linkCell",
		value: function _linkCell(cell) {
			var c = this._cellSet[cell._id];
			if (c == null) {
				c = this._cellSet[cell._id] = {
					cell: null,
					value: null,
					error: null,
					action: null,
					read: false,
					written: false,
					pushedA: false,
					pushedC: false };
				++this._cellSetSize;
			}
			if (!c.pushedA) {
				this._cellArr.push(c);
				c.cell = cell;
				c.pushedA = true;
			}
			return c;
		}
	}, {
		key: "onread",
		value: function onread(cell) {
			var c = this._linkCell(cell);
			c.read = true;
			c.value = cell._value;
			c.error = cell._error;
		}
	}, {
		key: "onwritten",
		value: function onwritten(cell) {
			this._linkCell(cell).written = true;
		}
	}, {
		key: "_fire",
		value: function _fire() {
			if (this._onchange) updates.later(this._onchange);
			this._unsubscribe();
		}
	}]);

	return Action;
})();

Action.maxCount = 0;

var newReactive = function newReactive(getter, handlers, sticky, isValueEqual) {
	var _iteratorNormalCompletion5 = true;
	var _didIteratorError5 = false;
	var _iteratorError5 = undefined;

	try {
		for (var _iterator5 = handlers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
			var h = _step5.value;

			if (h != null && typeof h != "function") throw new Error("wrong parameters");
		}
	} catch (err) {
		_didIteratorError5 = true;
		_iteratorError5 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
				_iterator5["return"]();
			}
		} finally {
			if (_didIteratorError5) {
				throw _iteratorError5;
			}
		}
	}

	var cell = new Cell(sticky);
	if (getter !== undefined) cell._init(getter, false, true, isValueEqual);
	var _iteratorNormalCompletion6 = true;
	var _didIteratorError6 = false;
	var _iteratorError6 = undefined;

	try {
		for (var _iterator6 = handlers[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
			var h = _step6.value;

			h && (h.length ? runSetter : runGetter)(cell, h, sticky);
		}
	} catch (err) {
		_didIteratorError6 = true;
		_iteratorError6 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
				_iterator6["return"]();
			}
		} finally {
			if (_didIteratorError6) {
				throw _iteratorError6;
			}
		}
	}

	return cell;
};

var ra = function ra() {
	var name = undefined,
	    fun = undefined,
	    sticky = undefined,
	    isValueEqual = undefined,
	    index = 0,
	    length = arguments.length - 1;
	if (typeof arguments[index] == "string") name = arguments[index++];
	if (typeof arguments[index] == "boolean") sticky = arguments[index++];
	fun = arguments[index++];
	if (typeof arguments[index] == "function") isValueEqual = arguments[index++];
	return newReactive(fun, [], sticky, isValueEqual);
};

function ArrayIsEqualTo(a) {
	return this == a || Array.isArray(a) && this.length == a.length && this.every(function (e, i) {
		return is(e, a[i]);
	});
}

function JsonIsEqualTo(a) {
	return this == a || JSON.stringify(this) == JSON.stringify(a);
}

exports = module.exports = ra;

exports.ra = ra;

exports.is = is;

exports.Array = function (array) {
	array.isEqualTo = ArrayIsEqualTo;
	return array;
};

exports.JSON = function (obj) {
	obj.isEqualTo = JsonIsEqualTo;
	return obj;
};

exports.Value = function (obj) {
	obj && obj.defineProperty(raValue, { value: true, configurable: true, enumerable: false, writable: false });
	return obj;
};

exports.clean = function (getter) {
	for (var _len3 = arguments.length, handers = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
		handers[_key3 - 1] = arguments[_key3];
	}

	return newReactive(getter, handers, false);
};

exports.detach = function (fun) {
	var old = undefined;
	if (old = co.global[actionKey]) {
		co.global[actionKey] = null;
		try {
			return fun();
		} finally {
			co.global[actionKey] = old;
		}
	} else return fun();
};

exports.detached = function (fun) {
	return function () {
		var old = undefined;
		if (old = co.global[actionKey]) {
			co.global[actionKey] = null;
			try {
				return fun.apply(this, arguments);
			} finally {
				co.global[actionKey] = old;
			}
		} else return fun.apply(this, arguments);
	};
};

exports.on = function (emitter, event, getter) {
	var ret = ra();
	var handler = function handler(data) {
		return ret.assign(getter(data));
	};
	if (event == "string") emitter.on(event, handler);else {
		var _iteratorNormalCompletion7 = true;
		var _didIteratorError7 = false;
		var _iteratorError7 = undefined;

		try {
			for (var _iterator7 = event[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
				var e = _step7.value;

				emitter.on(e, handler);
			}
		} catch (err) {
			_didIteratorError7 = true;
			_iteratorError7 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion7 && _iterator7["return"]) {
					_iterator7["return"]();
				}
			} finally {
				if (_didIteratorError7) {
					throw _iteratorError7;
				}
			}
		}
	}handler();
	return ret;
};

exports.Cell = Cell;
exports.ImmutableInterface = ImmutableInterface;
exports.AbstractGuard = AbstractGuard;
exports.Getter = Getter;
exports.Type = Type;
exports.importFrom = function (observable) {
	return Type(function (name) {
		return Getter(function () {
			return observable.live[name].valueOf();
		});
	});
};
exports.forceCalculations = function () {
	return updates.runAll();
};

function createActual() {
	var ret = ra();
	ret.assign(ret);
	ra(function () {
		var value = ret.valueOf();
		ra.detach(function () {
			return ret.assign(value);
		});
	});
	return ret;
}

var _DBChunk_Getter = UID();

var DBChunk = (function () {
	function DBChunk(getter, save, initial, previous) {
		_classCallCheck(this, DBChunk);

		this._previous = previous;
		this._getter = getter;
		this._save = save;
		var chunk = this._chunk = ra();
		chunk.assign(initial);
		var actual = this._actual = createActual();
		actual[_DBChunk_Getter] = ra(function () {
			return lu.applyDiff(getter.valueOf(), chunk.valueOf());
		});
		this._summary = ra(function () {
			return actual.valueOf()[_DBChunk_Getter].valueOf();
		});
	}

	_createClass(DBChunk, [{
		key: "createNext",
		value: function createNext() {
			var initial = arguments[0] === undefined ? null : arguments[0];
			return new DBChunk(this._summary, this._save, initial, this._actual);
		}
	}, {
		key: "before",
		get: function () {
			return this._getter.valueOf();
		}
	}, {
		key: "summary",
		get: function () {
			return this._summary.valueOf();
		}
	}, {
		key: "chunk",
		get: function () {
			return this._chunk.valueOf();
		},
		set: function (value) {
			this._chunk.assign(value);
		}
	}, {
		key: "valueOf",
		value: function valueOf() {
			return this.chunk;
		}
	}, {
		key: "assign",
		value: function assign(value) {
			this.chunk = value;
		}
	}, {
		key: "save",
		value: function save() {
			return this._save(this.chunk);
		}
	}, {
		key: "update",
		value: function update(diff) {
			return this._chunk.update(diff);
		}
	}, {
		key: "set",
		value: function set(name, value) {
			return this._chunk.set(name, value);
		}
	}, {
		key: "get",
		value: function get(name) {
			return this._chunk.get(name);
		}
	}, {
		key: "close",
		value: function close() {
			this._chunk.assign(null);
			if (this._previous) {
				this._actual.assign(this._previous);
				this._previous = null;
			}
		}
	}]);

	return DBChunk;
})();

var DB = (function () {
	function DB(getter, save) {
		var _this5 = this;

		_classCallCheck(this, DB);

		this._head = ra();
		this._head.assign(new DBChunk(getter, save));
		this._value = ra(function () {
			return _this5._head.valueOf().summary;
		});
	}

	_createClass(DB, [{
		key: "data",
		get: function () {
			return this.valueOf();
		}
	}, {
		key: "valueOf",
		value: function valueOf() {
			return this._value.valueOf();
		}
	}, {
		key: "createRecord",
		value: function createRecord() {
			var initial = arguments[0] === undefined ? null : arguments[0];
			// not detached
			var ret = this._head.valueOf().createNext();
			this._head.assign(ret);
			return ret;
		}
	}]);

	return DB;
})();

exports.db = function (getter, save) {
	return new DB(getter, save);
};

function toKey(obj) {
	if (!toKey.Keys) toKey.Keys = typeof WeakMap != "undefined" ? new WeakMap() : (function () {
		var id = "_to_key_" + UID();
		return {
			set: function set(obj, value) {
				Object.defineProperty(obj, id, {
					enumerable: false,
					configurable: true,
					writable: false,
					value: value });
			},
			get: function get(obj) {
				return obj[id];
			},
			has: function has(obj) {
				return Object.prototype.hasOwnProperty.call(obj, id);
			} };
	})();
	if (obj && (typeof obj == "object" || typeof obj == "function")) {
		if (!toKey.Keys.has(obj)) toKey.Keys.set(obj, UID());
		return toKey.Keys.get(obj);
	}
	return typeof obj + obj;
}

exports.makeKey = function (obj, key) {
	return ra(function () {
		return obj.get(key);
	});
};

exports.map = function (array, mapper) {
	if (!(array instanceof Cell)) throw new Error("ra.map: first argument must be a cell");
	var cache = Object.create(null);
	var ret = ra();
	ra.detach(function () {
		return ra(function () {
			// TODO праверыць, што пры array.close() гэта функцыя адпрацоўвае і прыбівае ўсе cache[].index і cache[].proc
			var a = array.valueOf();
			ra.detach(function () {
				var retarr = [];
				var index = 0;
				lodash.forEach(cache, function (c) {
					return c.abandoned = true;
				});
				a && a.forEach(function (value) {
					var key = toKey(value);
					var c = undefined;
					if (!(c = cache[key])) c = cache[key] = {
						value: value,
						index: ra() };
					c.abandoned = false;
					c.index.assign(index++);
					if (!c.proc) c.proc = ra(function () {
						return mapper(value, c.index);
					});
					retarr.push(c.proc);
				});
				lodash.keys(cache).forEach(function (key) {
					var c = cache[key];
					if (c.abandoned) {
						delete cache[key];
						c.index.close();
						c.proc.close();
					}
				});
				ret.assign(ra.Array(retarr));
			});
		});
	});
	return ret;
};

exports.keymap = function (array, mapper) {
	var mapped = ra.map(array, mapper);
	return ra(function () {
		return lodash.zipObject(array.valueOf(), mapped.valueOf());
	});
};

exports.slice = function (dest, source, keysVar) {
	throw new Error("message");
	// TODO: optimization
	if (!(dest instanceof Cell)) dest = ra.clean(dest);
	var cacheHolder = ra.clean();
	ra.clean(function () {
		var keys = getValue(keysVar);
		if (keys) keys.sort();
		updates.later(function () {
			var c = ra.clean();
			var s = c.defineProperty("source");
			var d = c.defineProperty("dest");
			keys && keys.forEach(function (k) {
				var sk = s.defineProperty(k);
				var dk = d.defineProperty(k);
				ra.clean(function () {
					return dk.assign(sk.valueOf());
				});
			});
			var t = cacheHolder.valueOf();
			cacheHolder.assign(c);
			t && t.close();
		});
	});
	ra.clean(function () {
		var c = cacheHolder.valueOf();
		c && c.source && c.source.assign(source.valueOf());
	});
	ra.clean(function () {
		var c = cacheHolder.valueOf();
		dest.assign(c && c.dest && c.dest.valueOf());
	});
	return dest;
};

// delete( obj ) { delete obj[ id ] },

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ra.js","/src")

},{"LOG":"/home/vadzim/v/work/nerojs/src/LOG.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","co":"/home/vadzim/v/work/nerojs/src/co.js","later":"/home/vadzim/v/work/nerojs/src/later.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","uid":"/home/vadzim/v/work/nerojs/src/uid.js"}],"/home/vadzim/v/work/nerojs/src/scheduler.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var maxIndex = 32768;

var Scheduler = (function () {
	function Scheduler(options) {
		_classCallCheck(this, Scheduler);

		this.setImmediate = options && options.setImmediate || process.nextTick;
		this.maxTicks = options && options.maxTicks || Infinity;
		this._procs = [];
		this._index = 0;
		this._scheduled = false;
		this._processing = false;
		this._handler = this._handler.bind(this);
		this.push = this.then.bind(this);
	}

	_createClass(Scheduler, [{
		key: "then",
		value: function then(proc) {
			this._procs.push(proc);
			if (!this._processing) this._schedule();
		}
	}, {
		key: "_schedule",
		value: function _schedule() {
			if (!this._scheduled) {
				this.setImmediate(this._handler);
				this._scheduled = true;
			}
		}
	}, {
		key: "_handler",
		value: function _handler() {
			this._scheduled = false;
			while (this._procs.length) {
				try {
					this._handler1();
				} catch (error) {
					setTimeout(function () {
						throw error;
					}, 0);
				}
			}
		}
	}, {
		key: "_handler1",
		value: function _handler1() {
			this._processing = true;
			try {
				var t = 0;
				while (this._index < this._procs.length && ++t <= this.maxTicks) {
					var proc = this._procs[this._index];
					this._procs[this._index] = null;
					++this._index;
					if (this._index >= maxIndex && this._index * 3 > this._procs.length) {
						this._procs.splice(0, this._index);
						this._index = 0;
					}
					proc();
				}
			} finally {
				this._processing = false;
				if (this._procs.length && this._index >= this._procs.length) this._procs.length = this._index = 0;
				if (this._index) this._schedule();
			}
		}
	}]);

	return Scheduler;
})();

module.exports = Scheduler;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/scheduler.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/ui/AddMenu.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app) {
	var Command = app.load(require("ui/Command"));
	return React.createElement(
		"div",
		null,
		React.createElement(Command, {
			message: "commandAddExistingItem",
			onclick: function () {
				app.dialog = "SearchItems";
				app.searchAction = function (itemId) {
					app.linkItem(app.activeDeviceId, itemId);
					app.dialog = "";
				};
			}
		}),
		React.createElement(Command, {
			message: "commandCreateNewGroup"
		}),
		React.createElement(Command, {
			message: "commandAddNewDevice",
			onclick: function () {
				return app.addDevice(app.activeDeviceId);
			}
		}),
		React.createElement(Command, {
			message: "commandAddPlace",
			visible: function () {
				return !app.editing && app.deviceType == "place";
			},
			onclick: function () {
				app.addPlace(app.activeDeviceId);
			}
		})
	);
};
// onclick = { () => { app.createGroup( app.activeDeviceId ) } }

// app.dialog = `AddPlace`

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/AddMenu.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/Command":"/home/vadzim/v/work/nerojs/src/ui/Command.js"}],"/home/vadzim/v/work/nerojs/src/ui/Application.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (_ref) {
	var appid = _ref.appid;
	var IconTemplates = _ref.IconTemplates;

	// TODO: refactoring: move to JSX, e.g. delete all occurance of CS.

	var _require = require("app")(appid);

	var app = _require.app;
	var local = _require.local;

	app.pageStarting = true;

	window._app = app;
	window._local = local;

	var httpClient = require("httpClient");
	// let cookies = require( `cookies` )
	if (navigator.standalone) void 0 // cookies.setItem( `standalone`, 1, Infinity ) -- усё адно не пасьпяваем паставіць куку перад першым зваротам да сервера
	;else {
		ra(function () {
			if (local.activeDeviceId && local.activeDeviceId.valueOf()) {
				var title = "TITLE_" + local.activeDeviceId;
				var icon = "ICON_" + local.activeDeviceId;
				screenTitle.setAttribute("content", title);
				if (local.activeDeviceId && local.activeDeviceId != "main") history.replaceState(null, title, "?appicon=" + icon);else history.replaceState(null, title, "?");
			}
		});
	}

	var application = React.createElement("div", { "class": "application" });

	var initial = application.className.split(/\s+/);
	CS.watch(function () {
		return application.className = initial.concat([app.pageStarting ? "pageStarting" : "pageRunning", // used for css effects
		app.initialLoading ? "JSONloading" : "JSONloaded", app.initialized ? "alreadyRun" : "firstRun", app.connectedToServer ? "appConnected" : "appDisconnected",
		// app.credentials == null ? `showLogin` : `hideLogin`,
		app.templates ? "templatesLoaded" : "templatesLoading", app.dialog ? "dialog" + app.dialog : "", app.dialog ? "dialogIsPresent" : "dialogIsAbsent", "app_labels_" + !!local.labels, "app_editing_" + !!app.editing]).join(" ");
	});

	app.icons = IconTemplates.reduce(function (icons, template) {
		icons[template.dataset.name] = template;
		return icons;
	}, Object.create(null));

	var MainScreen = app.load(require("ui/MainScreen"));
	var StartupScreen = app.load(require("ui/StartupScreen"));
	var LoadingScreen = function LoadingScreen() {
		return React.createElement("div", { "class": "loadingScreen" });
	};

	CS.content(application, [React.createElement(MainScreen, null), React.createElement(StartupScreen, null), React.createElement(LoadingScreen, null)]);

	var Button = app.load(require("ui/Button"));

	// dialogs
	var dialogTemplates = {

		ServiceDialog: function ServiceDialog() {
			return app.load(require("ui/ServiceDialog"));
		},
		ContextMenu: function ContextMenu() {
			return app.load(require("ui/ContextMenu"));
		},
		AddMenu: function AddMenu() {
			return app.load(require("ui/AddMenu"));
		},
		SearchItems: function SearchItems() {
			return app.load(require("ui/SearchItems"));
		},
		AskNewName: function AskNewName() {
			return app.load(require("ui/AskNewName"));
		},
		AskToLinkDevice: function AskToLinkDevice() {
			return app.load(require("ui/AskToLinkDevice"));
		},

		AskIfDeviceHasBeenLinked: function AskIfDeviceHasBeenLinked() {
			return React.createElement(
				"div",
				null,
				React.createElement(
					"p",
					null,
					"Устройство было успешно привязано?"
				),
				React.createElement(
					Button,
					{ onclick: "StopDeviceNotification" },
					"да"
				),
				React.createElement(
					Button,
					{ onclick: "AskToLinkDevice" },
					"нет"
				)
			);
		},

		StopDeviceNotification: function StopDeviceNotification() {
			return React.createElement(
				"div",
				null,
				React.createElement(
					"p",
					null,
					"Пожалуйста,",
					React.createElement("br", null),
					"переведите устройство в рабочий режим"
				),
				React.createElement(
					Button,
					null,
					"закрыть"
				)
			);
		},

		ErrorNoCarrier: function ErrorNoCarrier() {
			return React.createElement(
				"div",
				{ "class": "errorDialog" },
				React.createElement(
					"p",
					null,
					"Ошибка"
				),
				React.createElement(
					"p",
					null,
					"Произошла ошибка при попытке связаться с модемом"
				),
				React.createElement(
					Button,
					null,
					"закрыть"
				)
			);
		},

		StateWait: function StateWait() {
			return React.createElement(
				"div",
				null,
				React.createElement(
					"p",
					null,
					"Подождите..."
				)
			);
		},

		AskToReset: function AskToReset() {
			return React.createElement(
				"div",
				null,
				React.createElement(
					"p",
					null,
					"Память контроллера будет очищена,",
					React.createElement("br", null),
					"но память устройств очищаться не будет."
				),
				React.createElement(
					Button,
					{ onclick: app.reset },
					"Очистить",
					React.createElement("br", null),
					"память"
				)
			);
		} };

	ra(function () {
		var dialogName = app.dialog;
		if (!dialogName) return;
		if (!Object.prototype.hasOwnProperty.call(dialogTemplates, dialogName)) {
			alert("Error: Could not find dialog named\n\"" + dialogName + "\"");
			ra.detach(function () {
				return app.dialog = "";
			});
			return;
		}
		var Template = dialogTemplates[dialogName];
		if (!Template) return;
		dialogTemplates[dialogName] = null;

		var dialog = Template();
		dialog.classList.add(dialogName);
		dialog.classList.add("modalDialog");
		ra(Object.defineProperties({}, {
			isActive: {
				get: function () {
					return dialogName == app.dialog;
				},
				configurable: true,
				enumerable: true
			},
			updateClass: {
				get: function () {
					var event = undefined;
					if (this.isActive) {
						event = "dialogshow";
						dialog.classList.add("dialogShown");
						dialog.classList.remove("dialogHidden");
						var input = dialog.querySelector("*[ autofocus ]");
						if (input) app.focus(input);
					} else {
						event = "dialoghide";
						dialog.classList.remove("dialogShown");
						dialog.classList.add("dialogHidden");
						var _iteratorNormalCompletion = true;
						var _didIteratorError = false;
						var _iteratorError = undefined;

						try {
							for (var _iterator = dialog.querySelectorAll("*:focus")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var elem = _step.value;

								elem.blur();
							}
						} catch (err) {
							_didIteratorError = true;
							_iteratorError = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion && _iterator["return"]) {
									_iterator["return"]();
								}
							} finally {
								if (_didIteratorError) {
									throw _iteratorError;
								}
							}
						}

						dialog.blur();
					}
					dialog.dispatchEvent(new CustomEvent(event, { detail: null }));
				},
				configurable: true,
				enumerable: true
			}
		}));
		application.appendChild(dialog);
	});

	setTimeout(function () {
		return app.pageStarting = false;
	}, 1);

	return application;
};
// httpClient.post( `/cookie?appicon=${ icon }`, `` )
// cookies.setItem( `appicon`, icon, Infinity )
// LOG( local.activeDeviceId.blue )

// AddPlace,
// AddDevice,

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/Application.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","app":"/home/vadzim/v/work/nerojs/src/app.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","httpClient":"/home/vadzim/v/work/nerojs/src/httpClient.js","ui/AddMenu":"/home/vadzim/v/work/nerojs/src/ui/AddMenu.js","ui/AskNewName":"/home/vadzim/v/work/nerojs/src/ui/AskNewName.js","ui/AskToLinkDevice":"/home/vadzim/v/work/nerojs/src/ui/AskToLinkDevice.js","ui/Button":"/home/vadzim/v/work/nerojs/src/ui/Button.js","ui/ContextMenu":"/home/vadzim/v/work/nerojs/src/ui/ContextMenu.js","ui/MainScreen":"/home/vadzim/v/work/nerojs/src/ui/MainScreen.js","ui/SearchItems":"/home/vadzim/v/work/nerojs/src/ui/SearchItems.js","ui/ServiceDialog":"/home/vadzim/v/work/nerojs/src/ui/ServiceDialog.js","ui/StartupScreen":"/home/vadzim/v/work/nerojs/src/ui/StartupScreen.js"}],"/home/vadzim/v/work/nerojs/src/ui/AskNewName.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var htmlutils = require("htmlutils");

module.exports = function (app) {
	var $ = {};
	return React.createElement(
		"div",
		{ ondialogshow: function () {
				$.string.value = app.getMessage(app.getDevice(app.activeDeviceId));
				$.string.setSelectionRange(0, $.string.value.length);
			} },
		React.createElement(
			"p",
			null,
			"Название:"
		),
		React.createElement(
			"form",
			{ onsubmit: function (event) {
					event && event.preventDefault();
					var name = $.string.value.trim();
					app.dialog = "";
					if (name) app.renameItem(app.activeDeviceId, name);
				} },
			$.string = React.createElement("textarea", { name: "string", cols: "35", rows: "2", autofocus: "autofocus" }),
			React.createElement(
				"p",
				null,
				React.createElement(
					"a",
					{ "class": "button", href: "javascript:void(0)", target: "_self", ontouch: htmlutils.Submit },
					"Закрыть"
				)
			)
		)
	);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/AskNewName.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","htmlutils":"/home/vadzim/v/work/nerojs/src/htmlutils.js"}],"/home/vadzim/v/work/nerojs/src/ui/AskToLinkDevice.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app) {
	var Button = app.load(require("ui/Button"));
	return React.createElement(
		"div",
		null,
		React.createElement(
			"p",
			null,
			"Пожалуйста,",
			React.createElement("br", null),
			"переведите устройство в режим",
			React.createElement("br", null),
			"программирования и нажмите"
		),
		React.createElement(
			Button,
			{ onclick: function () {
					var placeId = app.linkingPlaceId || app.activeDeviceId;
					app.dialog = "StateWait";
					co.go(regeneratorRuntime.mark(function callee$2$0() {
						return regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
							while (1) switch (context$3$0.prev = context$3$0.next) {
								case 0:
									context$3$0.next = 2;
									return app.command(placeId, "Link");

								case 2:
									app.dialog = "AskIfDeviceHasBeenLinked";
									app.linkingPlaceId = placeId;

								case 4:
								case "end":
									return context$3$0.stop();
							}
						}, callee$2$0, this);
					}))["catch"](function (error) {
						console.log(error);
						app.dialog = "ErrorNoCarrier";
					});
				}
			},
			"здесь"
		)
	);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/AskToLinkDevice.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/Button":"/home/vadzim/v/work/nerojs/src/ui/Button.js"}],"/home/vadzim/v/work/nerojs/src/ui/Button.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app) {
	return function (_ref, content) {
		var onclick = _ref.onclick;
		return React.createElement(
			"a",
			{ "class": "button", href: "javascript:void(0)", target: "_self", ontouch: function (event) {
					event.preventDefault();
					if (typeof onclick == "string") app.dialog = onclick;else {
						app.dialog = "";
						onclick && onclick();
					}
				} },
			content
		);
	};
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/Button.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/ui/Command.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app) {
	return function (_ref) {
		var onclick = _ref.onclick;
		var url = _ref.url;
		var visible = _ref.visible;
		var enabled = _ref.enabled;
		var message = _ref.message;

		var content = app.message(message);
		var isEnabled = function isEnabled() {
			return (url || onclick) && (!enabled || enabled());
		};
		if (typeof visible == "string") {
			(function () {
				var deviceType = visible;
				visible = function () {
					return app.deviceType == deviceType;
				};
			})();
		}
		var className = function className() {
			return "command " + message + " " + (isEnabled() ? "enabled" : "disabled") + " " + (visible == null || visible() ? "itemVisible" : "itemHidden");
		};
		if (url && !onclick) return React.createElement(
			"a",
			{ "class": className, href: url, rel: "external", target: "_blank" },
			content
		);else return React.createElement(
			"a",
			{ "class": className, href: "javascript:void(0)", target: "_self", ontouch: function (event) {
					event.preventDefault();
					if (onclick && isEnabled()) {
						if (typeof onclick == "string") app.dialog = onclick;else {
							app.dialog = "";
							onclick();
						}
					}
				} },
			content
		);
	};
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/Command.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/ui/ContextMenu.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app, local) {
	var Command = app.load(require("ui/Command"));
	return React.createElement(
		"div",
		null,
		React.createElement(Command, {
			message: "commandSearchDevices",
			onclick: "SearchItems"
		}),
		React.createElement(Command, {
			message: "commandToFavourites",
			visible: function () {
				return !app.editing && app.activeDeviceId != app.main;
			},
			onclick: function () {
				app.linkActiveToFavourites();
				app.notification("Добавлено в избранное");
			}
		}),
		React.createElement(Command, {
			message: "commandLinkDevice",
			visible: "device",
			onclick: "AskToLinkDevice"
		}),
		React.createElement(Command, {
			message: "commandAdd",
			visible: function () {
				return !app.editing && app.deviceType == "place";
			},
			onclick: "AddMenu"
		}),
		React.createElement(Command, {
			message: "commandMoveIcons",
			visible: "place",
			onclick: function () {
				return app.editing = true;
			}
		}),
		React.createElement(Command, {
			message: "commandRenameItem",
			visible: function () {
				return !app.editing;
			},
			onclick: "AskNewName"
		}),
		React.createElement(Command, {
			message: "commandPurgeItem",
			visible: function () {
				return !app.editing && app.activeDeviceId != app.main;
			},
			onclick: function () {
				app.purgeItem(app.activeDeviceId);
			}
		}),
		React.createElement(Command, {
			message: "commandShowLabels",
			visible: function () {
				return !local.labels && app.activeDeviceId == app.main;
			},
			onclick: function () {
				return local.labels = true;
			}
		}),
		React.createElement(Command, {
			message: "commandHideLabels",
			visible: function () {
				return local.labels && app.activeDeviceId == app.main;
			},
			onclick: function () {
				return local.labels = false;
			}
		}),
		React.createElement(Command, {
			message: "commandResetToFactorySettings",
			visible: function () {
				return app.activeDeviceId == app.main;
			},
			enabled: function () {
				return window.location.hostname != "test.sh.neroelectronics.by";
			},
			onclick: "AskToReset"
		})
	);
};

// app.dialog = `DeleteDevice`

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/ContextMenu.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/Command":"/home/vadzim/v/work/nerojs/src/ui/Command.js"}],"/home/vadzim/v/work/nerojs/src/ui/Icon.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

var lodash = require("lodash");
var htmlutils = require("htmlutils");

module.exports = function (app, local) {
	return function (_ref2) {
		var placeId = _ref2.placeId;
		var iconId = _ref2.iconId;
		var iconDescr = _ref2.iconDescr;
		var index = _ref2.index;

		// TODO: refactoring: move to JSX, e.g. delete all occurance of CS.
		var icon = undefined,
		    iconControl = undefined,
		    image = undefined,
		    wait = undefined,
		    off = undefined,
		    on = undefined,
		    absent = undefined,
		    svg = undefined,
		    iconLabel = undefined,
		    deleteSign = undefined;
		var ret = icon = React.createElement(
			"div",
			{ "class": "icon" },
			iconControl = React.createElement(
				"div",
				{ "class": "iconControl" },
				image = React.createElement(
					"div",
					{ "class": "image" },
					wait = React.createElement("img", { "class": "error wait", src: "/images/wait.svg", style: "visibility: hidden;" }),
					off = React.createElement("img", { "class": "error off", src: "/images/room.svg" }),
					on = React.createElement("img", { "class": "error on", src: "/images/room_on.svg" }),
					absent = React.createElement("img", { "class": "error absent", src: "/images/room_absent.svg" }),
					svg = React.createElement("div", { "class": "svg" })
				),
				iconLabel = React.createElement("span", { "class": "iconLabel" }),
				React.createElement(
					"span",
					{ "class": "iconPercentage" },
					function () {
						return opts.present && opts.dimmering && "" + Math.round(iconDescr.get("state") * 100) + "%";
					}
				)
			),
			deleteSign = React.createElement("div", { "class": "deleteSign" })
		);
		var opts = ra(Object.defineProperties({
			iconData: null,

			iconCommand: function iconCommand(cmd, data) {
				return co.gocall(regeneratorRuntime.mark(function callee$3$0() {
					var dimmChanges;
					return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {
						while (1) switch (context$4$0.prev = context$4$0.next) {
							case 0:
								dimmChanges = this.dimmChanges;

								dimmChanges && (this.dimmChanges = null);
								this.isDimmering = false;
								context$4$0.prev = 3;
								context$4$0.next = 6;
								return app.iconCommand(iconDescr, iconId, cmd, data);

							case 6:
								context$4$0.prev = 6;

								dimmChanges && dimmChanges.close();
								return context$4$0.finish(6);

							case 9:
							case "end":
								return context$4$0.stop();
						}
					}, callee$3$0, this, [[3,, 6, 9]]);
				}), this);
			},

			isDimmering: false,
			dimmChanges: null,

			readyToSaveDimmering: function readyToSaveDimmering() {
				return !this.isDimmering && !!this.dimmChanges;
			},
			saveDimmering: function saveDimmering() {
				if (this.readyToSaveDimmering() && iconDescr) opts.iconCommand("Set", iconDescr.get("state"));
			},

			isMoving: false,
			moved: false,
			newIndex: null,
			x: null,
			y: null,
			dx: null,
			dy: null,
			changes: null,

			oldMoving: false,
			oldDimmering: false,
			state: 0,
			onning: false,
			offing: false,
			final: false,
			errorneous: false,

			setOpacity: function setOpacity(node, opacity) {
				if (opacity == null) {
					delete node.style.opacity;
				} else {
					node.style.opacity = opacity;
				}
			} }, {
			iconName: {
				get: function () {
					return iconDescr && iconDescr.valueOf() && iconDescr.valueOf().icon || null;
				},
				configurable: true,
				enumerable: true
			},
			iconTemplate: {
				get: function () {
					return this.iconName && app.icons && Object.prototype.hasOwnProperty.call(app.icons, this.iconName) && app.icons[this.iconName] || null;
				},
				configurable: true,
				enumerable: true
			},
			dimmering: {
				get: function () {
					var i = iconDescr == null ? null : iconDescr.valueOf();
					var id = i == null ? null : i.dimmering == null ? null : !!i.dimmering;
					if (id != null) return id;
					if (i != null && i.type === "place") return false;
					return true;
				},
				configurable: true,
				enumerable: true
			},
			image_on: {
				get: function () {
					var i = iconDescr && iconDescr.valueOf();
					var file = "" || i && i.image_on || i && i.image;
					return file && "/images/" + file;
				},
				configurable: true,
				enumerable: true
			},
			update_image_on: {
				get: function () {
					if (opts.image_on) on.src = opts.image_on;
				},
				configurable: true,
				enumerable: true
			},
			image_off: {
				get: function () {
					var i = iconDescr && iconDescr.valueOf();
					var file = "" || i && i.image_off || i && i.image;
					return file && "/images/" + file;
				},
				configurable: true,
				enumerable: true
			},
			update_image_off: {
				get: function () {
					if (opts.image_off) off.src = opts.image_off;
				},
				configurable: true,
				enumerable: true
			},
			onDimmering: {
				get: function () {
					if (this.readyToSaveDimmering()) setTimeout(this.saveDimmering);
				},
				configurable: true,
				enumerable: true
			},
			checkAppMoving: {
				get: function () {
					var isMoving = !!this.isMoving;
					var oldMoving = !!this.oldMoving;
					this.oldMoving = isMoving;
					if (isMoving != oldMoving) if (isMoving) ++app.moving;else --app.moving;
				},
				configurable: true,
				enumerable: true
			},
			checkAppDimmering: {
				get: function () {
					var isDimmering = !!this.isDimmering;
					var oldDimmering = !!this.oldDimmering;
					this.oldDimmering = isDimmering;
					if (isDimmering != oldDimmering) if (isDimmering) ++app.dimmering;else --app.dimmering;
				},
				configurable: true,
				enumerable: true
			},
			updateChanges: {
				get: function () {
					var _this = this;

					if (!app.editing || !this.isMoving || !this.changes) {
						if (this.changes) {
							this.changes.close();
							this.changes = null;
						}
						this.moved = false;
					} else {
						(function () {
							var ret = null;
							var place = lu.get(_this, "changes", "before", placeId, "content");
							if (place && place[iconId]) {
								var keys = lodash.keys(place).filter(function (key) {
									return key != iconId;
								}).sort(function (a, b) {
									return place[a].index - place[b].index;
								}).map(function (key) {
									return place[key].index;
								});
								ret = _defineProperty({}, placeId, { content: _defineProperty({}, iconId, { index: keys.length == 0 ? 0 : _this.newIndex <= 0 ? keys[0] - 1 : _this.newIndex >= keys.length ? keys[keys.length - 1] + 1 : (keys[_this.newIndex - 1] + keys[_this.newIndex]) / 2
									}) });
							}
							_this.changes.assign(ret);
						})();
					}
				},
				configurable: true,
				enumerable: true
			},
			present: {
				get: function () {
					return !!(iconDescr.get("content") || iconDescr.get("group"));
				},
				configurable: true,
				enumerable: true
			},
			updateState: {
				get: function () {
					var d = iconDescr && iconDescr.valueOf();
					if (!d) return 0;
					if (d.newstate_timestamp && (!d.state_timestamp || d.newstate_timestamp > d.state_timestamp)) {
						var fonning = d.newstate >= d.state;
						this.onning = fonning;
						this.offing = !fonning;
						this.final = false;
						this.state = d.newstate;
					} else {
						this.onning = false;
						this.offing = false;
						this.final = true;
						this.state = d.state;
					}
					this.errorneous = !!d.errorneous;
				},
				configurable: true,
				enumerable: true
			},
			updateWait: {
				get: function () {
					wait.style.visibility = this.final ? "hidden" : null;
				},
				configurable: true,
				enumerable: true
			},
			updateOpacity: {
				get: function () {
					if (this.iconTemplate) {
						on.style.visibility = "hidden";
						off.style.visibility = "hidden";
						absent.style.visibility = "hidden";
					} else if (!this.present) {
						this.setOpacity(on, 0);
						this.setOpacity(off, 0);
						this.setOpacity(absent, 0.7);
					} else {
						this.setOpacity(absent, 0);
						if (this.dimmering) {
							this.setOpacity(on, this.state);
							this.setOpacity(off, (1 - this.state) * 0.333);
						} else {
							this.setOpacity(on, +!!this.state);
							this.setOpacity(off, +!this.state);
						}
					}
				},
				configurable: true,
				enumerable: true
			}
		}));
		CS.content(svg, function () {
			return opts.iconData = opts.iconTemplate && htmlutils.importComponent(opts.iconTemplate) || null;
		});
		ra(function () {
			var state = opts.state;
			var data = opts.iconData;
			if (!data) return;
			if (data.setDeviceState) data.setDeviceState(state);
		});
		CS.updateClassX(svg, function () {
			return "state" + (!opts.present ? "Absent" : (Math.round(opts.state * 100) + 1000).toString().slice(1));
		});
		CS.updateClassX(svg, function () {
			return !opts.isDimmering && "smoothing";
		});

		![].slice.call(icon.getElementsByTagName("img")).forEach(function (img) {
			return lodash.assign(img, app.imgProps);
		});
		CS.updateClassX(icon, function () {
			return opts.onning && "onning";
		});
		CS.updateClassX(icon, function () {
			return opts.offing && "offing";
		});
		CS.updateClassX(icon, function () {
			return opts.final && "final";
		});
		CS.updateClassX(icon, function () {
			return opts.errorneous && "errorneous";
		});
		CS.updateClassX(icon, function () {
			return opts.dimmering.valueOf() ? "dimmering" : "switching";
		});
		CS.updateClassX(icon, iconId);
		CS.updateClassX(icon, function () {
			return "icon_moving_" + !!opts.isMoving;
		});
		CS.updateClassX(icon, function () {
			return "icon_moved_" + (!!opts.isMoving && !!opts.moved);
		});
		CS.watchX(function () {
			var pt = undefined;
			if (opts.isMoving) pt = { x: opts.x, y: opts.y };else {
				var i = lu.valueOf(index);
				var ph = app.pageHeight || 1;
				var pw = app.pageWidth || 1;
				var ps = pw * ph;
				var pi = i % ps;
				var p = (i - pi) / ps;
				var w = pi % pw;
				var h = (pi - w) / pw;
				w += pw * p;
				pt = { x: w * 100 / pw, y: h * 100 / ph };
			}
			var moveIt = function moveIt() {
				icon.style.left = "" + pt.x + "%";
				icon.style.top = "" + pt.y + "%";
			};
			if (app.editing)
				// калі адразу прысвоіць left і top то чамусьці не працуе transition
				setTimeout(moveIt);else moveIt();
		});
		CS.contentX(iconLabel, function () {
			return iconDescr.get(local.language) || iconDescr.get("ru") || iconDescr.get("en");
		});
		// TODO: onTap, onPress, onClick must remove themself when thread is been killing
		function logGesture(gesture) {
			LOG("" + (logGesture.c = logGesture.c || 0, ++logGesture.c) + " " + gesture.yellow);
		}
		// icon.addEventListener( `touchstart`, data => LOG( `1touchstart ` + JSON.stringify( data, null, `   ` ) ) )
		// icon.addEventListener( `touchend`, data => `1touchend ` + JSON.stringify( data, null, `   ` ) )

		var deleteIcon = function deleteIcon() {
			return app.deleteItem(placeId, iconId);
		};
		CS.onTouchStart(deleteSign, deleteIcon);
		CS.onTap(deleteSign, deleteIcon);
		CS.onPress(deleteSign, deleteIcon);

		CS.onTouchStart(iconControl, function () {
			logGesture("\nTouchStart");
		});
		function makeIndexUpdate(index) {
			return _defineProperty({}, placeId, { content: _defineProperty({}, iconId, { index: index }) });
		}
		function stopActivity() {
			// stop dimmering
			opts.isDimmering = false;
			// stop moving
			opts.isMoving && opts.changes && setTimeout(co.func(regeneratorRuntime.mark(function callee$3$0() {
				var changes, oldIndex;
				return regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {
					while (1) switch (context$4$0.prev = context$4$0.next) {
						case 0:
							changes = opts.changes;

							opts.changes = null;
							opts.isMoving = false;

							if (changes) {
								context$4$0.next = 5;
								break;
							}

							return context$4$0.abrupt("return");

						case 5:
							context$4$0.prev = 5;
							oldIndex = lu.get(changes, "before", placeId, "content", iconId, "index");

							if (!(oldIndex == opts.newIndex)) {
								context$4$0.next = 9;
								break;
							}

							return context$4$0.abrupt("return");

						case 9:
							context$4$0.next = 11;
							return changes.save();

						case 11:
							context$4$0.prev = 11;

							changes.close();
							return context$4$0.finish(11);

						case 14:
						case "end":
							return context$4$0.stop();
					}
				}, callee$3$0, this, [[5,, 11, 14]]);
			})));
		}
		CS.onTouchEnd(iconControl, function () {
			logGesture("TouchEnd");
			stopActivity();
		});
		CS.onTouchCancel(iconControl, function () {
			logGesture("TouchCancel");
			stopActivity();
		});
		CS.onMouseUp(iconControl, function () {
			logGesture("MouseUp");
			stopActivity();
		});
		CS.onTap(iconControl, function () {
			logGesture("Tap");
			!app.editing && opts.iconCommand("Short");
		});
		function placeRect() {
			var x = icon.parentNode;
			var r = undefined;
			while ((r = x.getBoundingClientRect(), !r.width || !r.height)) x = x.parentNode;
			return r;
		}
		function relPoint(p) {
			var r = placeRect();
			return {
				x: (p.x - r.left) / r.width * 100,
				y: (p.y - r.top) / r.height * 100 };
		}
		function getPoint(data) {
			var p = data.changedPointers[Object.keys(data.changedPointers)[0]];
			return relPoint({ x: p.screenX, y: p.screenY });
		}
		function getLeftTop(data) {
			var p = data.getBoundingClientRect();
			return relPoint({ x: p.left, y: p.top });
		}
		function iconsCount() {
			var place = app.getDevice(placeId);
			return lodash.keys(place && place.content).length;
		}
		CS.onPress(iconControl, function (data) {
			logGesture("Press");
			if (app.editing) {
				var p = getPoint(data);
				var r = getLeftTop(icon);
				opts.isMoving = true;
				opts.moved = false;
				opts.dx = r.x - p.x;
				opts.dy = r.y - p.y;
				opts.x = r.x;
				opts.y = r.y;
				opts.newIndex = index.valueOf();
				opts.changes = app.localDevices.createRecord();
			} else opts.iconCommand("Long");
		});
		CS.onSwipeUp(iconControl, function () {
			logGesture("SwipeUp");
			!app.editing && opts.iconCommand("Up");
		});
		CS.onSwipeDown(iconControl, function () {
			logGesture("SwipeDown");
			!app.editing && opts.iconCommand("Down");
		});
		function Dimmering(data) {
			// debugger
			var isDimmering = opts.isDimmering;
			opts.isDimmering = opts.dimmering && !data.isFinal;
			if (opts.dimmering && (isDimmering || opts.isDimmering)) {
				if (!opts.dimmChanges) {
					opts.dimmChanges = app.localDevices.createRecord();
					var _state = iconDescr && iconDescr.get("state");
					opts.dimmChanges.assign({ initialDimmeringState: _state });
				}
				var delta = -data.deltaY / (icon.getBoundingClientRect().height * 2 / 3);
				var state = Math.min(1, Math.max(0, opts.dimmChanges.get("initialDimmeringState") + delta));
				if (state == 0 || state == 1) opts.dimmChanges.assign({ initialDimmeringState: state - delta });
				opts.dimmChanges.update(_defineProperty({}, iconId, { state: state }));
			}
		}
		function Moving(data) {
			// logGesture( `Moving` )
			if (!opts.isMoving) return;
			var p = getPoint(data);
			var q = {
				x: p.x + opts.dx,
				y: p.y + opts.dy };
			opts.x = q.x;
			opts.y = q.y;
			q = {
				x: Math.min(app.pageWidth - 1, Math.max(0, Math.round(q.x / (100 / app.pageWidth)))),
				y: Math.min(app.pageHeight - 1, Math.max(0, Math.round(q.y / (100 / app.pageHeight)))) };
			opts.newIndex = q.x + q.y * app.pageWidth;
			opts.moved = true;
		}
		CS.onPanUp(iconControl, function (data) {
			logGesture("PanUp " + JSON.stringify(data.isFinal));
			app.editing ? Moving(data) : Dimmering(data);
		});
		CS.onPanDown(iconControl, function (data) {
			logGesture("PanDown " + JSON.stringify(data.isFinal));
			app.editing ? Moving(data) : Dimmering(data);
		});
		CS.onPanLeft(iconControl, function (data) {
			// logGesture( `PanLeft` )
			!app.dimmering && (opts.isMoving ? Moving(data) : app.pan(data));
		});
		CS.onPanRight(iconControl, function (data) {
			// logGesture( `PanRight` )
			!app.dimmering && (opts.isMoving ? Moving(data) : app.pan(data));
		});
		CS.onTouchEnd(iconControl, function (data) {
			app.pan({ deltaX: 0, isFinal: true });
		});
		CS.onTouchCancel(iconControl, function (data) {
			app.pan({ deltaX: 0, isFinal: true });
		});

		return ret;
	};
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/Icon.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","htmlutils":"/home/vadzim/v/work/nerojs/src/htmlutils.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js"}],"/home/vadzim/v/work/nerojs/src/ui/MainScreen.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var htmlutils = require("htmlutils");
var UID = require("uid");

module.exports = function (app, local) {

	var Place = app.load(require("ui/Place"));

	return function () {
		var id = UID();

		return React.createElement(
			"div",
			null,
			React.createElement(
				"style",
				{ "class": "style" },
				function () {
					return "\n\t\t\t\t." + id + " .icon {\n\t\t\t\t\twidth: " + 100 / app.pageWidth + "%;\n\t\t\t\t\theight: " + 100 / app.pageHeight + "%;\n\t\t\t\t}\n\t\t\t";
				}
			),
			React.createElement(
				"div",
				{ "class": "top" },
				React.createElement(
					"span",
					{ "class": "top_self" },
					React.createElement(
						htmlutils.Centered,
						null,
						function () {
							return app.caption;
						}
					)
				)
			),
			React.createElement(
				"div",
				{ "class": function () {
						return "menu " + id + " " + app.activeDeviceId;
					},
					onpanleft: function (data) {
						return !app.moving && !app.dimmering && app.pan(data);
					},
					onpanright: function (data) {
						return !app.moving && !app.dimmering && app.pan(data);
					},
					ontouchend: function () {
						return app.pan({ deltaX: 0, isFinal: true });
					},
					ontouchcancel: function () {
						return app.pan({ deltaX: 0, isFinal: true });
					},
					oncreate: function () {
						app.menuElement = this;
					}
				},
				React.createElement("span", { oncreate: function () {
						var _this = this;

						var shown = Object.create(null);
						ra(function () {
							var id = app.activeDeviceId;
							if (!id || shown[id]) return;
							app.placesShifts.defineProperty(id);
							local.placesPages.defineProperty(id);
							shown[id] = true;

							_this.appendChild(React.createElement(Place, { placeId: id, placeDescr: ra(function () {
									return app.getDevice(id);
								}) }));
						});
					} })
			),
			React.createElement(
				"div",
				{ "class": "bottom" },
				React.createElement("div", { "class": "help",
					onpress: function () {
						return app.dialog = "ServiceDialog";
					}
				}),
				React.createElement("div", { "class": "logo",
					onpress: function () {
						return app.dialog = "ContextMenu";
					},
					ontap: function () {
						app.editing = false;
						app.dialog = "";
						app.go(app.main);
					}
				}),
				React.createElement("div", { "class": "back",
					ontouch: function () {
						if (app.editing) app.editing = false;else if (app.dialog) app.dialog = "";else app.back();
					}
				})
			)
		);
	};
};
// TODO: remove <Place/> when such a place is actually removed from database

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/MainScreen.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","htmlutils":"/home/vadzim/v/work/nerojs/src/htmlutils.js","ui/Place":"/home/vadzim/v/work/nerojs/src/ui/Place.js","uid":"/home/vadzim/v/work/nerojs/src/uid.js"}],"/home/vadzim/v/work/nerojs/src/ui/OneApp.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var Application = require("ui/Application");

module.exports = function (_ref) {
	var IconTemplates = _ref.IconTemplates;
	return React.createElement(
		"span",
		null,
		React.createElement(
			"style",
			null,
			" ",
			".application { position: fixed !important; } } ",
			" "
		),
		React.createElement(Application, { IconTemplates: IconTemplates })
	);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/OneApp.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/Application":"/home/vadzim/v/work/nerojs/src/ui/Application.js"}],"/home/vadzim/v/work/nerojs/src/ui/Place.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app, local) {

	var Icon = app.load(require("ui/Icon"));

	return function (_ref) {
		var placeId = _ref.placeId;
		var placeDescr = _ref.placeDescr;

		var ids = ra(function () {
			var content = placeDescr.get("content");
			return ra.Array(lodash.keys(content).sort(function (a, b) {
				return lu.compare(content[a].index, content[b].index);
			}));
		});
		var content = ra.map(ids, function (iconId, index) {
			return React.createElement(Icon, {
				placeId: placeId,
				iconId: iconId,
				index: index,
				iconDescr: ra(function () {
					return app.getDevice(iconId);
				})
			});
		});
		return React.createElement(
			"div",
			null,
			React.createElement(
				"style",
				null,
				"\n\t\t\t\t." + placeId + " .place." + placeId + " {\n\t\t\t\t\tdisplay: initial;\n\t\t\t\t}\n\t\t\t"
			),
			React.createElement(
				"div",
				{ "class": "place " + placeId, style: {
						transform: function transform() {
							return "translateX( " + (-(local.placesPages[placeId] || 0) * app.menuElement.getBoundingClientRect().width + app.placesShifts[placeId] || 0) + "px )";
						} } },
				function () {
					return content;
				}
			)
		);
	};
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/Place.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/Icon":"/home/vadzim/v/work/nerojs/src/ui/Icon.js"}],"/home/vadzim/v/work/nerojs/src/ui/SearchItems.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var DL = require("DamerauLevenshtein");

var notAChar = function notAChar(char) {
	return char <= " " || char == "-";
};

var fuzzy = function fuzzy(mask, text) {
	return DL(mask.toUpperCase(), text.toUpperCase(), {
		replace: Infinity,
		"delete": function _delete(char) {
			return notAChar(char) ? 0.01 : Infinity;
		},
		insert: function insert(char) {
			return notAChar(char) ? 0.01 : 1;
		},
		transpose: 1 });
};

function watch(data, cb) {
	var v = undefined;
	return function () {
		if (v == null) ra.detach(function () {
			v = ra(data);
			ra(function () {
				v.valueOf();
				cb();
			});
		});
		return v.valueOf();
	};
}

module.exports = function (app) {
	var opts = undefined,
	    $ = {};

	var SearchItem = function SearchItem(_ref) {
		var placeId = _ref.placeId;
		return React.createElement(
			"div",
			{ "class": "searchItem " + placeId, onscrolltap: function () {
					return opts.goto(placeId);
				} },
			React.createElement(
				"span",
				{ "class": "caption" },
				function () {
					return opts.placeInfos[placeId].caption;
				}
			),
			React.createElement(
				"span",
				{ "class": "places" },
				function () {
					return opts.placeInfos[placeId].ptext;
				}
			),
			React.createElement("span", { "class": "cmdDeleteFromProgram" }),
			React.createElement("span", { "class": "cmdAppend" })
		);
	};

	opts = ra(Object.defineProperties({
		goto: function goto(id) {
			if (!id) return;
			var placeInfo = opts.placeInfos[id];
			~(app.searchAction || app.go)(id, placeInfo && placeInfo.places);
		} }, {
		deviceIds: {
			get: function () {
				return ra.Array(app.deviceIds.filter(function (id) {
					return id != app.main;
				}));
			},
			configurable: true,
			enumerable: true
		},
		placeInfos: {
			get: function () {
				var cache = Object.create(null);
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = this.deviceIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var id = _step.value;

						var info = app.getDevice(id);
						cache[id] = {
							info: info,
							caption: app.getMessage(info),
							places: [] };
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator["return"]) {
							_iterator["return"]();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					var _loop = function () {
						var id = _step2.value;

						lodash.forEach(cache[id].info.content, function (_, key) {
							return cache[key] && cache[key].places.push(id);
						});
					};

					for (var _iterator2 = this.deviceIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						_loop();
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
							_iterator2["return"]();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}

				var ret = Object.create(null);
				var _iteratorNormalCompletion3 = true;
				var _didIteratorError3 = false;
				var _iteratorError3 = undefined;

				try {
					for (var _iterator3 = this.deviceIds[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
						var id = _step3.value;

						var c = cache[id];
						var ptext = c.places.map(function (id) {
							return cache[id].caption;
						}).join(", ");
						if (ptext) ptext = "(" + ptext + ")";
						ret[id] = { id: id, caption: c.caption, places: c.places, ptext: ptext };
					}
				} catch (err) {
					_didIteratorError3 = true;
					_iteratorError3 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
							_iterator3["return"]();
						}
					} finally {
						if (_didIteratorError3) {
							throw _iteratorError3;
						}
					}
				}

				return ra.JSON(ret);
			},
			configurable: true,
			enumerable: true
		},
		labels: {
			get: function () {
				return ra.keymap(opts.live.deviceIds, function (placeId) {
					return React.createElement(SearchItem, { placeId: placeId });
				});
			},
			configurable: true,
			enumerable: true
		},
		filtered: {
			get: function () {
				var value = $.mask.raValue;
				var arr = [];
				var _iteratorNormalCompletion4 = true;
				var _didIteratorError4 = false;
				var _iteratorError4 = undefined;

				try {
					for (var _iterator4 = this.deviceIds.filter(app.searchFilter || Boolean)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
						var id = _step4.value;

						var i = opts.placeInfos[id];
						var key = [];
						if (value) {
							key.push(fuzzy(value, i.caption),
							// ??? Math.max( ...i.places.map( id => fuzzy( value, opts.placeInfos[ id ].caption ) ) ),
							fuzzy(value, i.caption + " " + i.ptext));
							if (key.every(function (k) {
								return Math.abs(k) == Infinity;
							})) continue;
						}
						key.push(i.caption.toUpperCase());
						arr.push({ id: id, key: key });
					}
				} catch (err) {
					_didIteratorError4 = true;
					_iteratorError4 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
							_iterator4["return"]();
						}
					} finally {
						if (_didIteratorError4) {
							throw _iteratorError4;
						}
					}
				}

				return ra.Array(arr.sort(function (a, b) {
					return lodash.zip(a.key, b.key).map(function (pair) {
						var _lu;

						return (_lu = lu).compare.apply(_lu, _toConsumableArray(pair));
					}).reduce(function (a, b) {
						return a || b;
					});
				}).map(function (a) {
					return a.id;
				}));
			},
			configurable: true,
			enumerable: true
		},
		items: {
			get: function () {
				var _this = this;

				return ra.Array(this.filtered.map(function (id) {
					return _this.labels.get(id);
				}));
			},
			configurable: true,
			enumerable: true
		}
	}));
	return React.createElement(
		"div",
		{
			ondialogshow: function () {
				return $.mask.raValue = "";
			} // TODO: разабрацца, а ці трэба заціраць пошук?
		},
		React.createElement(
			"form",
			{
				onsubmit: function (event) {
					event && event.preventDefault();
					opts.goto(opts.filtered[0]);
				}
			},
			$.mask = React.createElement("input", { name: "mask", type: "text", autofocus: "autofocus" }),
			$.scroll = React.createElement(
				"div",
				{ "class": "scroll" },
				React.createElement(
					"div",
					null,
					React.createElement(
						"div",
						{ "class": "items" },
						watch(function () {
							return opts.items;
						}, function () {
							return setTimeout(function () {
								if (!$.scroller) $.scroller = new (require("iscroll"))($.scroll, {
									mouseWheel: true,
									scrollbars: true,
									tap: "scrolltap" });else $.scroller.refresh();
							}, 100);
						})
					),
					React.createElement("div", { "class": "scrollAreaBottomFiller" })
				)
			)
		)
	);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/SearchItems.js","/src/ui")

},{"DamerauLevenshtein":"/home/vadzim/v/work/nerojs/src/DamerauLevenshtein.js","_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","iscroll":"/home/vadzim/v/work/nerojs/src/iscroll.js"}],"/home/vadzim/v/work/nerojs/src/ui/ServiceDialog.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var htmlutils = require("htmlutils");

module.exports = function (app) {
	var $ = {};
	return React.createElement(
		"div",
		{ ondialogshow: function () {
				return $.json.value = JSON.stringify(app.getDevice(app.activeDeviceId), null, 3);
			} },
		React.createElement(
			"p",
			null,
			"***"
		),
		React.createElement(
			"form",
			{
				onsubmit: function (event) {
					event && event.preventDefault();
					var text = $.json.value.trim() || null;
					try {
						text = text && JSON.parse(text);
					} catch (error) {
						return alert(error);
					}
					if (text) app.saveDevice(app.activeDeviceId, text);
					app.dialog = "";
				}
			},
			$.json = React.createElement("textarea", { name: "json", autofocus: "autofocus", style: "height: 80%; font-size: 50%;" }),
			React.createElement(
				"p",
				null,
				React.createElement(
					"a",
					{ "class": "save", href: "javascript:void(0)", target: "_self", ontouch: htmlutils.Submit },
					"Save"
				)
			)
		)
	);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/ServiceDialog.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","htmlutils":"/home/vadzim/v/work/nerojs/src/htmlutils.js"}],"/home/vadzim/v/work/nerojs/src/ui/StartupScreen.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

module.exports = function (app) {
	return function () {
		return React.createElement(
			"div",
			{ "class": "startupScreen" },
			React.createElement(
				"p",
				null,
				"Добро пожаловать в Ваш",
				React.createElement("br", null),
				"Умный Дом!"
			),
			React.createElement(
				"div",
				{ "class": "templates" },
				React.createElement(
					"p",
					null,
					"Пожалуйста, выберите место, где используется этот пульт:"
				),
				React.createElement(
					"ul",
					{ "class": "houseTemplates" },
					function () {
						return (app.templates || []).concat([{
							menu: "начать с чистого листа",
							ru: "Мой дом",
							en: "Home",
							type: "place" }]).map(function (houseTemplate) {
							return React.createElement(
								"li",
								{ "class": "houseTemplate", ontouch: function () {
										return app.setTemplate(houseTemplate);
									} },
								houseTemplate.menu || app.getMessage(houseTemplate)
							);
						});
					}
				)
			),
			React.createElement("div", { "class": "loading" })
		);
	};
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/ui/StartupScreen.js","/src/ui")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/uid.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var counter = 0;

module.exports = function uid(obj) {
	var i = (++counter).toString(36);
	var r = parseInt(Math.random().toString().slice(2, 17)).toString(36);
	var id = (r.length + 9).toString(36) + r + i;
	if (obj == null) return id;else {
		obj.uid = id;
		return obj;
	}
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/uid.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js"}],"/home/vadzim/v/work/nerojs/src/webpage.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
post /devices {"P":1}
*/

"use strict";

var marked0$0 = [onFinger].map(regeneratorRuntime.mark);
function checkBrowserFunctions() {
	var ret = true && typeof HTMLTemplateElement != "undefined" && HTMLTemplateElement;
	return !!ret;
}

if (!checkBrowserFunctions()) {
	window.__UNSUPPORTED__();
	throw new Error("unsupported");
}

var performance = global.performance || global.Date;
var startUpTime = performance.now();

require("browser-nexttick");
require("platform");
require("htmlpolyfill");

global.lu = require("localUtils");
global.ra = require("ra");
global.co = require("co");
global.lodash = require("lodash");
require("colors");

var UID = require("uid");
var httpClient = require("httpClient");

function preventDefault(event) {
	if (event.target && event.target.getAttribute("rel") == "external") return;
	var _arr = [HTMLInputElement, HTMLTextAreaElement, HTMLOptionElement, HTMLButtonElement];
	for (var _i = 0; _i < _arr.length; _i++) {
		var C = _arr[_i];
		if (event.target instanceof C) return;
	} // attempt to use native scrolling - unsuccessfull
	// let C = event.target
	// while ( C && C.classList ) {
	// 	if ( C.classList.contains( `scroll` ) )
	// 		return
	// 	C = C.parentNode
	// }
	event.preventDefault();
}

var _arr2 = ["touchstart", "touchmove", "touchend", "touchcancel"];

var _loop = function () {
	var type = _arr2[_i2];
	document.body.addEventListener(type, preventDefault);
	document.body.addEventListener(type, function (event) {
		return touch(type, event);
	});
};

for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	_loop();
}

var mouseToTouches = {
	mousedown: "touchstart",
	mousemove: "touchmove",
	mouseup: "touchend" };

var _loop2 = function (mouseType) {
	var type = mouseToTouches[mouseType];
	document.body.addEventListener(mouseType, function (event) {
		return touch(type, {
			changedTouches: {
				identifier: "mouse",
				target: event.target,
				screenX: event.screenX,
				screenY: event.screenY } });
	});
};

for (var mouseType in mouseToTouches) {
	_loop2(mouseType);
}

function rethrow(error) {
	setTimeout(function () {
		throw error;
	}, 0);
}

var touches = Object.create(null);

setInterval(function () {
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = Object.keys(touches)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var identifier = _step.value;

			var _touch = touches[identifier];
			if (_touch.abandoned) {
				if (_touch.handler["return"]) _touch.handler["return"]();
				delete touches[identifier];
			} else _touch.abandoned = true;
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator["return"]) {
				_iterator["return"]();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
}, 5000);

function onFinger(start) {
	var path, bounds, next, dir, swipe, size;
	return regeneratorRuntime.wrap(function onFinger$(context$1$0) {
		while (1) switch (context$1$0.prev = context$1$0.next) {
			case 0:
				path = [start];
				bounds = { x: 0, y: 0, min: { x: start.x, y: start.y }, max: { x: start.x, y: start.y } };
				next = undefined;
				dir = "";
				swipe = false;

			case 5:
				context$1$0.next = 7;
				return null;

			case 7:
				if (!(next = context$1$0.sent)) {
					context$1$0.next = 22;
					break;
				}

				path.push(next);
				if (bounds.min.x > next.x) bounds.min.x = next.x;
				if (bounds.min.y > next.y) bounds.min.y = next.y;
				if (bounds.max.x < next.x) bounds.max.x = next.x;
				if (bounds.max.y < next.y) bounds.max.y = next.y;
				bounds.x = bounds.max.x - bounds.min.x;
				bounds.y = bounds.max.y - bounds.min.y;
				size = Math.max(bounds.x, bounds.y);

				swipe = false;
				if (next.time - start.time < SWIPE_TIME && size > TAP_DISTANCE) {
					swipe = size > SWIPE_DISTANCE;
					if (bounds.x > bounds.y && path.map(getX).every(increasing)) dir = "right";else if (bounds.x > bounds.y && path.map(getX).every(decreasing)) dir = "left";else if (bounds.x < bounds.y && path.map(getY).every(increasing)) dir = "down";else if (bounds.x < bounds.y && path.map(getY).every(decreasing)) dir = "up";else {
						dir = "";
						swipe = false;
					}
				}

				if (!next.last) {
					context$1$0.next = 20;
					break;
				}

				return context$1$0.abrupt("break", 22);

			case 20:
				context$1$0.next = 5;
				break;

			case 22:
			case "end":
				return context$1$0.stop();
		}
	}, marked0$0[0], this);
}

function touch(type, event) {
	var now = Date.now();
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = Array.prototype.slice.call(event.changedTouches)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var touchInfo = _step2.value;

			var identifier = touchInfo.identifier;
			var _touch2 = touches[identifier];
			var info = {
				target: touchInfo.target,
				x: touchInfo.screenX,
				y: touchInfo.screenY,
				time: now,
				last: true };
			if (_touch2) {
				_touch2.abandoned = false;
				if (type == "touchstart" || type == "touchend" || type == "touchcancel") {
					delete touches[identifier];
					try {
						if (!_touch2.handler.next(info).done && _touch2.handler["return"]) _touch2.handler["return"]();
					} catch (error) {
						rethrow(error);
					}
					_touch2 = null;
				}
			}
			info.last = false;
			if (type == "touchstart") {
				_touch2 = touches[identifier] = {
					abandoned: false,
					handler: onFinger(info) };
				info = undefined;
			}
			if (_touch2) {
				var ok = false;
				try {
					ok = !_touch2.handler.next(info).done;
				} catch (error) {
					rethrow(error);
				}
				if (!ok) delete touches[identifier];
			}
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
				_iterator2["return"]();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}
}

function squareDistance(p1, p2) {
	return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
}

function bounds(path) {}

var SWIPE_TIME = 350;
var SWIPE_DISTANCE = 96 / 2.54 * 0.5;
var TAP_DISTANCE = 96 / 2.54 * 0.15;

function isSwipe(path) {
	var last = path[path.length - 1];
	var start = path[0];
	return last.time - start.time < SWIPE_TIME && Math.abs(start.x - last.x) < SWIPE_DISTANCE && squareDistance(last, start) < Math.pow(96 / 2.54 * 1, 2);
}

function getX(p) {
	return p.x;
}
function getY(p) {
	return p.y;
}
function increasing(_, i, p) {
	return i == 0 || p[i].x >= p[i - 1].x;
}
function decreasing(_, i, p) {
	return i == 0 || p[i].x <= p[i - 1].x;
}

global.LOG = function (str) {
	// if ( String( str ) == `undefined` )
	// 	debugger
	console.log.apply(console, arguments);
	global._ALERT && global._ALERT(str);
	var xhr = new XMLHttpRequest();
	xhr.open("POST", "/log?" + encodeURIComponent(str));
	xhr.onerror = lodash.noop;
	xhr.send();
	return str;
};

window.addEventListener("error", function onError(e) {
	if (!e.message.match(404) && !onError.processing) {
		onError.processing = true;
		try {
			LOG("" + e.message.red + " at " + e.lineno + ":" + e.colno + " in " + e.filename);
		} finally {
			onError.processing = false;
		}
	}
});

var onerror = window.onerror;
window.onerror = function (message, url, line, column, error) {
	var ret = undefined;
	if (error) {
		LOG("stack: " + error.stack);
	}
	if (onerror) {
		try {
			window.onerror = onerror;
			ret = onerror.apply(this, arguments);
		} finally {
			onerror = window.onerror;
		}
	}
	return ret;
};

// require( `touchLog` )
// require( `touchShow` )
// require( `touches` )

global.CS = lu["new"](require("components"), global.CS);
global.React = CS.jsx;

function script(text) {
	var script = document.createElement("script");
	script.appendChild(document.createTextNode(text));
	return script;
}

co.go(regeneratorRuntime.mark(function callee$0$0() {
	var html, data, tmp, children, i;
	return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
		while (1) switch (context$1$0.prev = context$1$0.next) {
			case 0:
				html = cacheUrlResource("./main.html");
				context$1$0.next = 3;
				return html;

			case 3:
				html = context$1$0.sent;
				data = document.createDocumentFragment();
				tmp = document.createElement("div");

				tmp.innerHTML = html;
				tmp = tmp.children[0];
				children = [];

				for (i = 0; i < tmp.childNodes.length; ++i) {
					children.push(tmp.childNodes[i]);
				}children.forEach(function (c) {
					return tmp.removeChild(c);
				});
				children.forEach(function (c) {
					if (c instanceof HTMLScriptElement) c = script(c.innerHTML);
					data.appendChild(c);
				});

				document.body.appendChild(data);

			case 13:
			case "end":
				return context$1$0.stop();
		}
	}, callee$0$0, this);
}));

// LOG( 1 + JSON.stringify( start ) )
// LOG( 2 + JSON.stringify( next ) )
// LOG( `.`+{false:``,true:`swipe`}[swipe]+`.`+dir+`.`+next.time+`.`+start.time+`.`+(next.time-start.time)+`.`+SWIPE_TIME )

// LOG( 3 )

// body...
// window.addEventListener( // TODO: выдаліць пасьля выставы. Надта страшна яно дзёргаецца пры перазагрузцы
// 	`message`,
// 	event => {
// 		if ( event && event.data && event.data.what == `urlResourceUpdated` )
// 			window.setTimeout(
// 				() => window.location.reload(),
// 				1000
// 			)
// 	},
// 	false
// )

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/webpage.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","browser-nexttick":"/home/vadzim/v/work/nerojs/src/browser-nexttick.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","co":"/home/vadzim/v/work/nerojs/src/co.js","colors":"/home/vadzim/v/work/nerojs/node_modules/colors/lib/index.js","components":"/home/vadzim/v/work/nerojs/src/components.js","htmlpolyfill":"/home/vadzim/v/work/nerojs/src/htmlpolyfill.js","httpClient":"/home/vadzim/v/work/nerojs/src/httpClient.js","localUtils":"/home/vadzim/v/work/nerojs/src/localUtils.js","lodash":"/home/vadzim/v/work/nerojs/node_modules/lodash/dist/lodash.js","platform":"/home/vadzim/v/work/nerojs/src/platform.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js","uid":"/home/vadzim/v/work/nerojs/src/uid.js"}],"/home/vadzim/v/work/nerojs/src/windowSize.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

var ra = require("ra");

var windowSize = ra.clean({
	width: 1,
	height: 1,
	ppmm: 1,
	widthmm: 1,
	heightmm: 1,
	pixelRatio: 1,
	orientation: 0,
	layout: "vertical",
	window: "browser" }).setName("windowSize");

window.addEventListener("resize", updateSize);

var orientations = {};

var cm = document.createElement("div");
cm.style.left = "0";
cm.style.top = "0";
cm.style.width = "10cm";
cm.style.height = "10cm";
cm.style.position = "fixed";
cm.style.zIndex = "-9999";
document.body.appendChild(cm);
var ppmm = cm.clientWidth / 100;
document.body.removeChild(cm);

updateSize();

function updateSize() {

	var width = window.innerWidth;
	var height = window.innerHeight;

	var orientation = (window.orientation || 0) % 360;
	if (orientation < 0) orientation += 360;

	windowSize.width = width;
	windowSize.height = height;
	windowSize.ppmm = ppmm;
	windowSize.widthmm = width / ppmm;
	windowSize.heightmm = height / ppmm;
	windowSize.pixelRatio = window.devicePixelRatio || 1;
	windowSize.orientation = orientation;
	windowSize.layout = width <= height ? "vertical" : "horizontal";
	windowSize.window = window.navigator.standalone ? "app" : "browser";
}

module.exports = windowSize;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/src/windowSize.js","/src")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ra":"/home/vadzim/v/work/nerojs/src/ra.js"}],"/home/vadzim/v/work/nerojs/tmp/index.js":[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
require( "webpage" )
require( "ui/OneApp" )
global.require = function r( name ) {
					global.require = null
					try {
						return require.apply( this, arguments )
					}
					finally {
						global.require = r
					}
				}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/tmp/index.js","/tmp")

},{"_process":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/process/browser.js","buffer":"/home/vadzim/v/work/nerojs/node_modules/browserify/node_modules/buffer/index.js","ui/OneApp":"/home/vadzim/v/work/nerojs/src/ui/OneApp.js","webpage":"/home/vadzim/v/work/nerojs/src/webpage.js"}]},{},["/home/vadzim/v/work/nerojs/node_modules/babelify/polyfill.js","/home/vadzim/v/work/nerojs/tmp/index.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
