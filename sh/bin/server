#!/usr/bin/env node
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(539);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint max-len: 0 */

	"use strict";

	var _Object$defineProperty = __webpack_require__(2)["default"];

	__webpack_require__(5);

	__webpack_require__(281);

	// Should be removed in the next major release:

	__webpack_require__(282);

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;

	function define(O, key, value) {
	  O[key] || _Object$defineProperty(O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}

	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);

	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(3), __esModule: true };

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(4);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 4 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(6);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(56);
	__webpack_require__(58);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(71);
	__webpack_require__(73);
	__webpack_require__(75);
	__webpack_require__(77);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(90);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(96);
	__webpack_require__(97);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(104);
	__webpack_require__(105);
	__webpack_require__(107);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(111);
	__webpack_require__(112);
	__webpack_require__(113);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(128);
	__webpack_require__(133);
	__webpack_require__(134);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(140);
	__webpack_require__(141);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(158);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(165);
	__webpack_require__(166);
	__webpack_require__(168);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(173);
	__webpack_require__(174);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(185);
	__webpack_require__(187);
	__webpack_require__(188);
	__webpack_require__(189);
	__webpack_require__(191);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(196);
	__webpack_require__(197);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(208);
	__webpack_require__(211);
	__webpack_require__(212);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(218);
	__webpack_require__(219);
	__webpack_require__(222);
	__webpack_require__(223);
	__webpack_require__(224);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(249);
	__webpack_require__(250);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(259);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(268);
	__webpack_require__(269);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(279);
	__webpack_require__(280);
	module.exports = __webpack_require__(8);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(7)
	  , core           = __webpack_require__(8)
	  , has            = __webpack_require__(9)
	  , DESCRIPTORS    = __webpack_require__(10)
	  , $export        = __webpack_require__(12)
	  , redefine       = __webpack_require__(21)
	  , META           = __webpack_require__(25).KEY
	  , $fails         = __webpack_require__(11)
	  , shared         = __webpack_require__(26)
	  , setToStringTag = __webpack_require__(27)
	  , uid            = __webpack_require__(22)
	  , wks            = __webpack_require__(28)
	  , keyOf          = __webpack_require__(29)
	  , enumKeys       = __webpack_require__(42)
	  , isArray        = __webpack_require__(45)
	  , anObject       = __webpack_require__(15)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(19)
	  , createDesc     = __webpack_require__(20)
	  , _create        = __webpack_require__(46)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(51)
	  , $DP            = __webpack_require__(14)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , setter         = false
	  , HIDDEN         = wks('_hidden')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , ObjectProto    = Object.prototype
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol.prototype);
	  sym._k = tag;
	  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    }
	  });
	  return sym;
	};

	var isSymbol = function(it){
	  return typeof it == 'symbol';
	};

	var $defineProperty = function defineProperty(it, key, D){
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	var $stringify = function stringify(it){
	  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	  var args = [it]
	    , i    = 1
	    , replacer, $replacer;
	  while(arguments.length > i)args.push(arguments[i++]);
	  replacer = args[1];
	  if(typeof replacer == 'function')$replacer = replacer;
	  if($replacer || !isArray(replacer))replacer = function(key, value){
	    if($replacer)value = $replacer.call(this, key, value);
	    if(!isSymbol(value))return value;
	  };
	  args[1] = replacer;
	  return _stringify.apply($JSON, args);
	};
	var BUGGY_JSON = $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	});

	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
	  };
	  redefine($Symbol.prototype, 'toString', function toString(){
	    return this._k;
	  });

	  isSymbol = function(it){
	    return it instanceof $Symbol;
	  };

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f  = $propertyIsEnumerable
	  __webpack_require__(43).f = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(52)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	for(var symbols = (
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; ){
	  var key     = symbols[i++]
	    , Wrapper = core.Symbol
	    , sym     = wks(key);
	  if(!(key in Wrapper))dP(Wrapper, key, {value: USE_NATIVE ? sym : wrap(sym)});
	};

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	if(!QObject || !QObject.prototype || !QObject.prototype.findChild)setter = true;

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || BUGGY_JSON), 'JSON', {stringify: $stringify});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 7 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 8 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.1.4'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 9 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(11)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(7)
	  , core      = __webpack_require__(8)
	  , hide      = __webpack_require__(13)
	  , redefine  = __webpack_require__(21)
	  , ctx       = __webpack_require__(23)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(14)
	  , createDesc = __webpack_require__(20);
	module.exports = __webpack_require__(10) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(15)
	  , IE8_DOM_DEFINE = __webpack_require__(17)
	  , toPrimitive    = __webpack_require__(19)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(10) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(16);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(10) && !__webpack_require__(11)(function(){
	  return Object.defineProperty(__webpack_require__(18)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(16)
	  , document = __webpack_require__(7).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(16);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(7)
	  , hide      = __webpack_require__(13)
	  , has       = __webpack_require__(9)
	  , SRC       = __webpack_require__(22)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);

	__webpack_require__(8).inspectSource = function(it){
	  return $toString.call(it);
	};

	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 22 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(24);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(22)('meta')
	  , isObject = __webpack_require__(16)
	  , has      = __webpack_require__(9)
	  , setDesc  = __webpack_require__(14).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(11)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(14).f
	  , has = __webpack_require__(9)
	  , TAG = __webpack_require__(28)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(26)('wks')
	  , uid        = __webpack_require__(22)
	  , Symbol     = __webpack_require__(7).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(31)
	  , enumBugKeys = __webpack_require__(41);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(9)
	  , toIObject    = __webpack_require__(32)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33)
	  , defined = __webpack_require__(35);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(26)('keys')
	  , uid    = __webpack_require__(22);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30)
	  , gOPS    = __webpack_require__(43)
	  , pIE     = __webpack_require__(44);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(15)
	  , dPs         = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(41)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(18)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(14)
	  , anObject = __webpack_require__(15)
	  , getKeys  = __webpack_require__(30);

	module.exports = __webpack_require__(10) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7).document && document.documentElement;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return gOPN.f(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(31)
	  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(44)
	  , createDesc     = __webpack_require__(20)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(19)
	  , has            = __webpack_require__(9)
	  , IE8_DOM_DEFINE = __webpack_require__(17)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(10) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(46)});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(10), 'Object', {defineProperty: __webpack_require__(14).f});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(10), 'Object', {defineProperties: __webpack_require__(47)});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(32)
	  , $getOwnPropertyDescriptor = __webpack_require__(51).f;

	__webpack_require__(57)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(12)
	  , core    = __webpack_require__(8)
	  , fails   = __webpack_require__(11);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(59)
	  , $getPrototypeOf = __webpack_require__(60);

	__webpack_require__(57)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(9)
	  , toObject    = __webpack_require__(59)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(59)
	  , $keys    = __webpack_require__(30);

	__webpack_require__(57)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(57)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(16)
	  , meta     = __webpack_require__(25).onFreeze;

	__webpack_require__(57)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(16)
	  , meta     = __webpack_require__(25).onFreeze;

	__webpack_require__(57)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(16)
	  , meta     = __webpack_require__(25).onFreeze;

	__webpack_require__(57)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(16);

	__webpack_require__(57)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(16);

	__webpack_require__(57)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(16);

	__webpack_require__(57)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(12);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(70)});

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(30)
	  , gOPS     = __webpack_require__(43)
	  , pIE      = __webpack_require__(44)
	  , toObject = __webpack_require__(59)
	  , IObject  = __webpack_require__(33)
	  , $assign  = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(11)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(12);
	$export($export.S, 'Object', {is: __webpack_require__(72)});

/***/ },
/* 72 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(12);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(74).set});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(16)
	  , anObject = __webpack_require__(15);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(23)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(76)
	  , test    = {};
	test[__webpack_require__(28)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(21)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34)
	  , TAG = __webpack_require__(28)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(12);

	$export($export.P, 'Function', {bind: __webpack_require__(78)});

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(24)
	  , isObject   = __webpack_require__(16)
	  , invoke     = __webpack_require__(79)
	  , arraySlice = [].slice
	  , factories  = {};

	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 79 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(14).f
	  , createDesc = __webpack_require__(20)
	  , has        = __webpack_require__(9)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(10) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    var match = ('' + this).match(nameRE)
	      , name  = match ? match[1] : '';
	    has(this, NAME) || dP(this, NAME, createDesc(5, name));
	    return name;
	  }
	});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(16)
	  , getPrototypeOf = __webpack_require__(60)
	  , HAS_INSTANCE   = __webpack_require__(28)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(14).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(12)
	  , $parseInt = __webpack_require__(83);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(7).parseInt
	  , $trim     = __webpack_require__(84).trim
	  , ws        = __webpack_require__(85)
	  , hex       = /^[\-+]?0[xX]/;

	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12)
	  , defined = __webpack_require__(35)
	  , fails   = __webpack_require__(11)
	  , spaces  = __webpack_require__(85)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');

	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};

	module.exports = exporter;

/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(12)
	  , $parseFloat = __webpack_require__(87);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(7).parseFloat
	  , $trim       = __webpack_require__(84).trim;

	module.exports = 1 / $parseFloat(__webpack_require__(85) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(7)
	  , has               = __webpack_require__(9)
	  , cof               = __webpack_require__(34)
	  , inheritIfRequired = __webpack_require__(89)
	  , toPrimitive       = __webpack_require__(19)
	  , fails             = __webpack_require__(11)
	  , gOPN              = __webpack_require__(50).f
	  , gOPD              = __webpack_require__(51).f
	  , dP                = __webpack_require__(14).f
	  , $trim             = __webpack_require__(84).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(46)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(10) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(21)(global, NUMBER, $Number);
	}

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(16)
	  , setPrototypeOf = __webpack_require__(74).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(12)
	  , anInstance   = __webpack_require__(91)
	  , toInteger    = __webpack_require__(38)
	  , aNumberValue = __webpack_require__(92)
	  , repeat       = __webpack_require__(93)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';

	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};

	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(11)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 91 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);

	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(12)
	  , $fails       = __webpack_require__(11)
	  , aNumberValue = __webpack_require__(92)
	  , $toPrecision = 1..toPrecision;

	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(12);

	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(12)
	  , _isFinite = __webpack_require__(7).isFinite;

	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(12);

	$export($export.S, 'Number', {isInteger: __webpack_require__(98)});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(16)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(12);

	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(12)
	  , isInteger = __webpack_require__(98)
	  , abs       = Math.abs;

	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(12);

	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(12);

	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(12)
	  , $parseFloat = __webpack_require__(87);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(12)
	  , $parseInt = __webpack_require__(83);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(12)
	  , log1p   = __webpack_require__(106)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;

	// V8 bug https://code.google.com/p/v8/issues/detail?id=3509
	$export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 106 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(12);

	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	$export($export.S, 'Math', {asinh: asinh});

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(12)
	  , sign    = __webpack_require__(110);

	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(12)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {expm1: __webpack_require__(114)});

/***/ },
/* 114 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	module.exports = Math.expm1 || function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(12)
	  , sign      = __webpack_require__(110)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);

	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};


	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(12)
	  , abs     = Math.abs;

	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(12)
	  , $imul   = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(11)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {log1p: __webpack_require__(106)});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {sign: __webpack_require__(110)});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(12)
	  , expm1   = __webpack_require__(114)
	  , exp     = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(11)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(12)
	  , expm1   = __webpack_require__(114)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(12)
	  , toIndex        = __webpack_require__(39)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(12)
	  , toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37);

	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(84)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(129)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(130)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(52)
	  , $export        = __webpack_require__(12)
	  , redefine       = __webpack_require__(21)
	  , hide           = __webpack_require__(13)
	  , has            = __webpack_require__(9)
	  , Iterators      = __webpack_require__(131)
	  , $iterCreate    = __webpack_require__(132)
	  , setToStringTag = __webpack_require__(27)
	  , getPrototypeOf = __webpack_require__(60)
	  , ITERATOR       = __webpack_require__(28)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 131 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(46)
	  , descriptor     = __webpack_require__(20)
	  , setToStringTag = __webpack_require__(27)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(13)(IteratorPrototype, __webpack_require__(28)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $at     = __webpack_require__(129)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(12)
	  , toLength  = __webpack_require__(37)
	  , context   = __webpack_require__(135)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];

	$export($export.P + $export.F * __webpack_require__(137)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(136)
	  , defined  = __webpack_require__(35);

	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(16)
	  , cof      = __webpack_require__(34)
	  , MATCH    = __webpack_require__(28)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(28)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(12)
	  , context  = __webpack_require__(135)
	  , INCLUDES = 'includes';

	$export($export.P + $export.F * __webpack_require__(137)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);

	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(93)
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(12)
	  , toLength    = __webpack_require__(37)
	  , context     = __webpack_require__(135)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];

	$export($export.P + $export.F * __webpack_require__(137)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(142)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12)
	  , fails   = __webpack_require__(11)
	  , defined = __webpack_require__(35)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(142)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(142)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(142)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(142)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(142)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(142)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(142)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(142)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(142)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(142)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(142)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(142)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(12);

	$export($export.S, 'Date', {now: function(){ return +new Date; }});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING];
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(21)(DateProto, TO_STRING, function toString(){
	    var value = +this;
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(12)
	  , fails   = __webpack_require__(11);

	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(this))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(12)
	  , toObject    = __webpack_require__(59)
	  , toPrimitive = __webpack_require__(19);

	$export($export.P + $export.F * __webpack_require__(11)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(12);

	$export($export.S, 'Array', {isArray: __webpack_require__(45)});

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx         = __webpack_require__(23)
	  , $export     = __webpack_require__(12)
	  , toObject    = __webpack_require__(59)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(163);
	$export($export.S + $export.F * !__webpack_require__(164)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        result[index] = mapping ? mapfn(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(15);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(131)
	  , ITERATOR   = __webpack_require__(28)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(76)
	  , ITERATOR  = __webpack_require__(28)('iterator')
	  , Iterators = __webpack_require__(131);
	module.exports = __webpack_require__(8).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(28)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12);

	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(11)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)result[index] = arguments[index++];
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(12)
	  , toIObject = __webpack_require__(32)
	  , arrayJoin = [].join;

	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(167)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(11);

	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(12)
	  , html       = __webpack_require__(48)
	  , cof        = __webpack_require__(34)
	  , toIndex    = __webpack_require__(39)
	  , toLength   = __webpack_require__(37)
	  , arraySlice = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(11)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(12)
	  , aFunction = __webpack_require__(24)
	  , toObject  = __webpack_require__(59)
	  , fails     = __webpack_require__(11)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];

	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(167)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(12)
	  , $forEach = __webpack_require__(171)(0)
	  , STRICT   = __webpack_require__(167)([].forEach, true);

	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(23)
	  , IObject  = __webpack_require__(33)
	  , toObject = __webpack_require__(59)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(172);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var isObject = __webpack_require__(16)
	  , isArray  = __webpack_require__(45)
	  , SPECIES  = __webpack_require__(28)('species');
	module.exports = function(original, length){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length);
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $map    = __webpack_require__(171)(1);

	$export($export.P + $export.F * !__webpack_require__(167)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $filter = __webpack_require__(171)(2);

	$export($export.P + $export.F * !__webpack_require__(167)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $some   = __webpack_require__(171)(3);

	$export($export.P + $export.F * !__webpack_require__(167)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $every  = __webpack_require__(171)(4);

	$export($export.P + $export.F * !__webpack_require__(167)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $reduce = __webpack_require__(178);

	$export($export.P + $export.F * !__webpack_require__(167)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(24)
	  , toObject  = __webpack_require__(59)
	  , IObject   = __webpack_require__(33)
	  , toLength  = __webpack_require__(37);

	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $reduce = __webpack_require__(178);

	$export($export.P + $export.F * !__webpack_require__(167)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(12)
	  , $indexOf = __webpack_require__(36)(false);

	$export($export.P + $export.F * !__webpack_require__(167)([].indexOf), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(12)
	  , toIObject = __webpack_require__(32)
	  , toInteger = __webpack_require__(38)
	  , toLength  = __webpack_require__(37);

	$export($export.P + $export.F * !__webpack_require__(167)([].lastIndexOf), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index;
	    return -1;
	  }
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(12);

	$export($export.P, 'Array', {copyWithin: __webpack_require__(183)});

	__webpack_require__(184)('copyWithin');

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(59)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);

	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(28)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(13)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(12);

	$export($export.P, 'Array', {fill: __webpack_require__(186)});

	__webpack_require__(184)('fill');

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(59)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(12)
	  , $find   = __webpack_require__(171)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(184)(KEY);

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(12)
	  , $find   = __webpack_require__(171)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(184)(KEY);

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(190)('Array');

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(7)
	  , dP          = __webpack_require__(14)
	  , DESCRIPTORS = __webpack_require__(10)
	  , SPECIES     = __webpack_require__(28)('species');

	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(184)
	  , step             = __webpack_require__(192)
	  , Iterators        = __webpack_require__(131)
	  , toIObject        = __webpack_require__(32);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(130)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 192 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(7)
	  , inheritIfRequired = __webpack_require__(89)
	  , dP                = __webpack_require__(14).f
	  , gOPN              = __webpack_require__(50).f
	  , isRegExp          = __webpack_require__(136)
	  , $flags            = __webpack_require__(194)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;

	if(__webpack_require__(10) && (!CORRECT_NEW || __webpack_require__(11)(function(){
	  re2[__webpack_require__(28)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(21)(global, 'RegExp', $RegExp);
	}

	__webpack_require__(190)('RegExp');

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(15);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(196);
	var anObject    = __webpack_require__(15)
	  , $flags      = __webpack_require__(194)
	  , DESCRIPTORS = __webpack_require__(10)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];

	var define = function(fn){
	  __webpack_require__(21)(RegExp.prototype, TO_STRING, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(11)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(10) && /./g.flags != 'g')__webpack_require__(14).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(194)
	});

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(198)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(13)
	  , redefine = __webpack_require__(21)
	  , fails    = __webpack_require__(11)
	  , defined  = __webpack_require__(35)
	  , wks      = __webpack_require__(28);

	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(198)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(198)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(198)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(136)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(52)
	  , global             = __webpack_require__(7)
	  , ctx                = __webpack_require__(23)
	  , classof            = __webpack_require__(76)
	  , $export            = __webpack_require__(12)
	  , isObject           = __webpack_require__(16)
	  , anObject           = __webpack_require__(15)
	  , aFunction          = __webpack_require__(24)
	  , anInstance         = __webpack_require__(91)
	  , forOf              = __webpack_require__(203)
	  , setProto           = __webpack_require__(74).set
	  , speciesConstructor = __webpack_require__(204)
	  , task               = __webpack_require__(205).set
	  , microtask          = __webpack_require__(206)
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;

	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(28)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();

	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          result = handler === true ? value : handler(value);
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};

	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(207)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(27)($Promise, PROMISE);
	__webpack_require__(190)(PROMISE);
	Wrapper = __webpack_require__(8)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(164)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(23)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , anObject    = __webpack_require__(15)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(163);
	module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    call(iterator, f, step.value, entries);
	  }
	};

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(15)
	  , aFunction = __webpack_require__(24)
	  , SPECIES   = __webpack_require__(28)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(23)
	  , invoke             = __webpack_require__(79)
	  , html               = __webpack_require__(48)
	  , cel                = __webpack_require__(18)
	  , global             = __webpack_require__(7)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(34)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(7)
	  , macrotask = __webpack_require__(205).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(34)(process) == 'process'
	  , head, last, notify;

	var flush = function(){
	  var parent, domain, fn;
	  if(isNode && (parent = process.domain)){
	    process.domain = null;
	    parent.exit();
	  }
	  while(head){
	    domain = head.domain;
	    fn     = head.fn;
	    if(domain)domain.enter();
	    fn(); // <- currently we use it only for Promise - try / catch not required
	    if(domain)domain.exit();
	    head = head.next;
	  } last = undefined;
	  if(parent)parent.enter();
	};

	// Node.js
	if(isNode){
	  notify = function(){
	    process.nextTick(flush);
	  };
	// browsers with MutationObserver
	} else if(Observer){
	  var toggle = 1
	    , node   = document.createTextNode('');
	  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	  notify = function(){
	    node.data = toggle = -toggle;
	  };
	// environments with maybe non-completely correct, but existent Promise
	} else if(Promise && Promise.resolve){
	  notify = function(){
	    Promise.resolve().then(flush);
	  };
	// for other environments - macrotask based on:
	// - setImmediate
	// - MessageChannel
	// - window.postMessag
	// - onreadystatechange
	// - setTimeout
	} else {
	  notify = function(){
	    // strange IE + webpack dev server bug - use .call(global)
	    macrotask.call(global, flush);
	  };
	}

	module.exports = function(fn){
	  var task = {fn: fn, next: undefined, domain: isNode && process.domain};
	  if(last)last.next = task;
	  if(!head){
	    head = task;
	    notify();
	  } last = task;
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(21);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(209);

	// 23.1 Map Objects
	module.exports = __webpack_require__(210)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(14).f
	  , create      = __webpack_require__(46)
	  , hide        = __webpack_require__(13)
	  , redefineAll = __webpack_require__(207)
	  , ctx         = __webpack_require__(23)
	  , anInstance  = __webpack_require__(91)
	  , defined     = __webpack_require__(35)
	  , forOf       = __webpack_require__(203)
	  , $iterDefine = __webpack_require__(130)
	  , step        = __webpack_require__(192)
	  , setSpecies  = __webpack_require__(190)
	  , DESCRIPTORS = __webpack_require__(10)
	  , fastKey     = __webpack_require__(25).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(7)
	  , $export           = __webpack_require__(12)
	  , redefine          = __webpack_require__(21)
	  , redefineAll       = __webpack_require__(207)
	  , meta              = __webpack_require__(25)
	  , forOf             = __webpack_require__(203)
	  , anInstance        = __webpack_require__(91)
	  , isObject          = __webpack_require__(16)
	  , fails             = __webpack_require__(11)
	  , $iterDetect       = __webpack_require__(164)
	  , setToStringTag    = __webpack_require__(27)
	  , inheritIfRequired = __webpack_require__(89);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(209);

	// 23.2 Set Objects
	module.exports = __webpack_require__(210)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(171)(0)
	  , redefine     = __webpack_require__(21)
	  , meta         = __webpack_require__(25)
	  , assign       = __webpack_require__(70)
	  , weak         = __webpack_require__(213)
	  , isObject     = __webpack_require__(16)
	  , has          = __webpack_require__(9)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;

	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(210)('WeakMap', wrapper, methods, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(207)
	  , getWeak           = __webpack_require__(25).getWeak
	  , anObject          = __webpack_require__(15)
	  , isObject          = __webpack_require__(16)
	  , anInstance        = __webpack_require__(91)
	  , forOf             = __webpack_require__(203)
	  , createArrayMethod = __webpack_require__(171)
	  , $has              = __webpack_require__(9)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(213);

	// 23.4 WeakSet Objects
	__webpack_require__(210)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(12)
	  , $typed       = __webpack_require__(216)
	  , buffer       = __webpack_require__(217)
	  , anObject     = __webpack_require__(15)
	  , toIndex      = __webpack_require__(39)
	  , toLength     = __webpack_require__(37)
	  , isObject     = __webpack_require__(16)
	  , TYPED_ARRAY  = __webpack_require__(28)('typed_array')
	  , ArrayBuffer  = __webpack_require__(7).ArrayBuffer
	  , speciesConstructor = __webpack_require__(204)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';

	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});

	$export($export.P + $export.U + $export.F * __webpack_require__(11)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	__webpack_require__(190)(ARRAY_BUFFER);

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7)
	  , hide   = __webpack_require__(13)
	  , uid    = __webpack_require__(22)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(7)
	  , DESCRIPTORS    = __webpack_require__(10)
	  , LIBRARY        = __webpack_require__(52)
	  , $typed         = __webpack_require__(216)
	  , hide           = __webpack_require__(13)
	  , redefineAll    = __webpack_require__(207)
	  , fails          = __webpack_require__(11)
	  , anInstance     = __webpack_require__(91)
	  , toInteger      = __webpack_require__(38)
	  , toLength       = __webpack_require__(37)
	  , gOPN           = __webpack_require__(50).f
	  , dP             = __webpack_require__(14).f
	  , arrayFill      = __webpack_require__(186)
	  , setToStringTag = __webpack_require__(27)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , parseInt       = global.parseInt
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , min            = Math.min
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};

	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};

	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};

	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};

	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};

	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12);
	$export($export.G + $export.W + $export.F * !__webpack_require__(216).ABV, {
	  DataView: __webpack_require__(217).DataView
	});

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(10)){
	  var LIBRARY             = __webpack_require__(52)
	    , global              = __webpack_require__(7)
	    , fails               = __webpack_require__(11)
	    , $export             = __webpack_require__(12)
	    , $typed              = __webpack_require__(216)
	    , $buffer             = __webpack_require__(217)
	    , ctx                 = __webpack_require__(23)
	    , anInstance          = __webpack_require__(91)
	    , propertyDesc        = __webpack_require__(20)
	    , hide                = __webpack_require__(13)
	    , redefineAll         = __webpack_require__(207)
	    , isInteger           = __webpack_require__(98)
	    , toInteger           = __webpack_require__(38)
	    , toLength            = __webpack_require__(37)
	    , toIndex             = __webpack_require__(39)
	    , toPrimitive         = __webpack_require__(19)
	    , has                 = __webpack_require__(9)
	    , same                = __webpack_require__(72)
	    , classof             = __webpack_require__(76)
	    , isObject            = __webpack_require__(16)
	    , toObject            = __webpack_require__(59)
	    , isArrayIter         = __webpack_require__(162)
	    , create              = __webpack_require__(46)
	    , getPrototypeOf      = __webpack_require__(60)
	    , gOPN                = __webpack_require__(50).f
	    , isIterable          = __webpack_require__(221)
	    , getIterFn           = __webpack_require__(163)
	    , uid                 = __webpack_require__(22)
	    , wks                 = __webpack_require__(28)
	    , createArrayMethod   = __webpack_require__(171)
	    , createArrayIncludes = __webpack_require__(36)
	    , speciesConstructor  = __webpack_require__(204)
	    , ArrayIterators      = __webpack_require__(191)
	    , Iterators           = __webpack_require__(131)
	    , $iterDetect         = __webpack_require__(164)
	    , setSpecies          = __webpack_require__(190)
	    , arrayFill           = __webpack_require__(186)
	    , arrayCopyWithin     = __webpack_require__(183)
	    , $DP                 = __webpack_require__(14)
	    , $GOPD               = __webpack_require__(51)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';

	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });

	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };

	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };

	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    slice: function slice(start, end){
	      return speciesFromList(this, arraySlice.call(validate(this), start, end));
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };

	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });

	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });

	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });

	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);

	    setSpecies(NAME);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(76)
	  , ITERATOR  = __webpack_require__(28)('iterator')
	  , Iterators = __webpack_require__(131);
	module.exports = __webpack_require__(8).isIterable = function(it){
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    || Iterators.hasOwnProperty(classof(O));
	};

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(220)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export = __webpack_require__(12)
	  , _apply  = Function.apply;

	$export($export.S, 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    return _apply.call(target, thisArgument, argumentsList);
	  }
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export   = __webpack_require__(12)
	  , create    = __webpack_require__(46)
	  , aFunction = __webpack_require__(24)
	  , anObject  = __webpack_require__(15)
	  , isObject  = __webpack_require__(16)
	  , bind      = __webpack_require__(78);

	// MS Edge supports only 2 arguments
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	$export($export.S + $export.F * __webpack_require__(11)(function(){
	  function F(){}
	  return !(Reflect.construct(function(){}, [], F) instanceof F);
	}), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      if(args != undefined)switch(anObject(args).length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(14)
	  , $export     = __webpack_require__(12)
	  , anObject    = __webpack_require__(15)
	  , toPrimitive = __webpack_require__(19);

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(11)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(12)
	  , gOPD     = __webpack_require__(51).f
	  , anObject = __webpack_require__(15);

	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(12)
	  , anObject = __webpack_require__(15);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(132)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});

	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(60)
	  , has            = __webpack_require__(9)
	  , $export        = __webpack_require__(12)
	  , isObject       = __webpack_require__(16)
	  , anObject       = __webpack_require__(15);

	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}

	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(51)
	  , $export  = __webpack_require__(12)
	  , anObject = __webpack_require__(15);

	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(12)
	  , getProto = __webpack_require__(60)
	  , anObject = __webpack_require__(15);

	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(12);

	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(12)
	  , anObject      = __webpack_require__(15)
	  , $isExtensible = Object.isExtensible;

	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(12);

	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(241)});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(50)
	  , gOPS     = __webpack_require__(43)
	  , anObject = __webpack_require__(15)
	  , Reflect  = __webpack_require__(7).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(12)
	  , anObject           = __webpack_require__(15)
	  , $preventExtensions = Object.preventExtensions;

	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(14)
	  , gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(60)
	  , has            = __webpack_require__(9)
	  , $export        = __webpack_require__(12)
	  , createDesc     = __webpack_require__(20)
	  , anObject       = __webpack_require__(15)
	  , isObject       = __webpack_require__(16);

	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(12)
	  , setProto = __webpack_require__(74);

	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(12)
	  , $includes = __webpack_require__(36)(true);

	$export($export.P, 'Array', {
	  // https://github.com/domenic/Array.prototype.includes
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	__webpack_require__(184)('includes');

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(12)
	  , $at     = __webpack_require__(129)(true);

	$export($export.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $pad    = __webpack_require__(248);

	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37)
	  , repeat   = __webpack_require__(93)
	  , defined  = __webpack_require__(35);

	module.exports = function(that, maxLength, fillString, left){
	  var S            = String(defined(that))
	    , stringLength = S.length
	    , fillStr      = fillString === undefined ? ' ' : String(fillString)
	    , intMaxLength = toLength(maxLength);
	  if(intMaxLength <= stringLength)return S;
	  if(fillStr == '')fillStr = ' ';
	  var fillLen = intMaxLength - stringLength
	    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(12)
	  , $pad    = __webpack_require__(248);

	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(84)('trimLeft', function($trim){
	  return function trimLeft(){
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(84)('trimRight', function($trim){
	  return function trimRight(){
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/WebReflection/9353781
	var $export    = __webpack_require__(12)
	  , ownKeys    = __webpack_require__(241)
	  , toIObject  = __webpack_require__(32)
	  , createDesc = __webpack_require__(20)
	  , gOPD       = __webpack_require__(51)
	  , dP         = __webpack_require__(14);

	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O       = toIObject(object)
	      , getDesc = gOPD.f
	      , keys    = ownKeys(O)
	      , result  = {}
	      , i       = 0
	      , key, D;
	    while(keys.length > i){
	      D = getDesc(O, key = keys[i++]);
	      if(key in result)dP.f(result, key, createDesc(0, D));
	      else result[key] = D;
	    } return result;
	  }
	});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	// http://goo.gl/XkBrjD
	var $export = __webpack_require__(12)
	  , $values = __webpack_require__(254)(false);

	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32)
	  , isEnum    = __webpack_require__(44).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	// http://goo.gl/XkBrjD
	var $export  = __webpack_require__(12)
	  , $entries = __webpack_require__(254)(true);

	$export($export.S, 'Object', {
	  entries: function entries(it){
	    return $entries(it);
	  }
	});

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(12);

	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(257)('Map')});

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(76)
	  , from    = __webpack_require__(258);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(203);

	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(12);

	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(257)('Set')});

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-global
	var $export = __webpack_require__(12);

	$export($export.S, 'System', {global: __webpack_require__(7)});

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(12)
	  , cof     = __webpack_require__(34);

	$export($export.S, 'Error', {
	  isError: function isError(it){
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  imulh: function imulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >> 16
	      , v1 = $v >> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(12);

	$export($export.S, 'Math', {
	  umulh: function umulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >>> 16
	      , v1 = $v >>> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(267)
	  , anObject                  = __webpack_require__(15)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(208)
	  , $export = __webpack_require__(12)
	  , shared  = __webpack_require__(26)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(212)));

	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};

	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(267)
	  , anObject               = __webpack_require__(15)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;

	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(267)
	  , anObject               = __webpack_require__(15)
	  , getPrototypeOf         = __webpack_require__(60)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(211)
	  , from                    = __webpack_require__(258)
	  , metadata                = __webpack_require__(267)
	  , anObject                = __webpack_require__(15)
	  , getPrototypeOf          = __webpack_require__(60)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(267)
	  , anObject               = __webpack_require__(15)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(267)
	  , anObject                = __webpack_require__(15)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(267)
	  , anObject               = __webpack_require__(15)
	  , getPrototypeOf         = __webpack_require__(60)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(267)
	  , anObject               = __webpack_require__(15)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(267)
	  , anObject                  = __webpack_require__(15)
	  , aFunction                 = __webpack_require__(24)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global     = __webpack_require__(7)
	  , $export    = __webpack_require__(12)
	  , invoke     = __webpack_require__(79)
	  , partial    = __webpack_require__(277)
	  , navigator  = global.navigator
	  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout:  wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path      = __webpack_require__(278)
	  , invoke    = __webpack_require__(79)
	  , aFunction = __webpack_require__(24);
	module.exports = function(/* ...pargs */){
	  var fn     = aFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that = this
	      , aLen = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !aLen)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(aLen > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7);

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(12)
	  , $task   = __webpack_require__(205);
	$export($export.G + $export.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(191)
	  , redefine      = __webpack_require__(21)
	  , global        = __webpack_require__(7)
	  , hide          = __webpack_require__(13)
	  , Iterators     = __webpack_require__(131)
	  , wks           = __webpack_require__(28)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;

	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 281 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol =
	    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };

	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }

	  function AsyncIterator(generator) {
	    // This invoke function is written in a style that assumes some
	    // calling function (or Promise) will handle exceptions.
	    function invoke(method, arg) {
	      var result = generator[method](arg);
	      var value = result.value;
	      return value instanceof AwaitArgument
	        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
	        : Promise.resolve(value).then(function(unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration. If the Promise is rejected, however, the
	            // result for this iteration will be rejected with the same
	            // reason. Note that rejections of yielded Promises are not
	            // thrown back into the generator function, as is the case
	            // when an awaited Promise is rejected. This difference in
	            // behavior between yield and await is important, because it
	            // allows the consumer to decide what to do with the yielded
	            // rejection (swallow it and continue, manually .throw it back
	            // into the generator, abandon iteration, whatever). With
	            // await, by contrast, there is no opportunity to examine the
	            // rejection reason outside the generator function, so the
	            // only option is to throw it from the await expression, and
	            // let the generator function handle the exception.
	            result.value = unwrapped;
	            return result;
	          });
	    }

	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }

	    var invokeNext = invoke.bind(generator, "next");
	    var invokeThrow = invoke.bind(generator, "throw");
	    var invokeReturn = invoke.bind(generator, "return");
	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return invoke(method, arg);
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : new Promise(function (resolve) {
	          resolve(callInvokeWithMethodAndArg());
	        });
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          context._sent = arg;

	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            context.sent = undefined;
	          }
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }

	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(283);
	module.exports = __webpack_require__(8).RegExp.escape;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(12)
	  , $re     = __webpack_require__(284)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

	$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 284 */
/***/ function(module, exports) {

	module.exports = function(regExp, replace){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 285 */,
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var old;
	if (typeof Promise !== "undefined") old = Promise;
	function noConflict() {
	    try { if (Promise === bluebird) Promise = old; }
	    catch (e) {}
	    return bluebird;
	}
	var bluebird = __webpack_require__(287)();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function() {
	var makeSelfResolutionError = function () {
	    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	var reflectHandler = function() {
	    return new Promise.PromiseInspection(this._target());
	};
	var apiRejection = function(msg) {
	    return Promise.reject(new TypeError(msg));
	};
	function Proxyable() {}
	var UNDEFINED_BINDING = {};
	var util = __webpack_require__(288);

	var getDomain;
	if (util.isNode) {
	    getDomain = function() {
	        var ret = process.domain;
	        if (ret === undefined) ret = null;
	        return ret;
	    };
	} else {
	    getDomain = function() {
	        return null;
	    };
	}
	util.notEnumerableProp(Promise, "_getDomain", getDomain);

	var es5 = __webpack_require__(289);
	var Async = __webpack_require__(290);
	var async = new Async();
	es5.defineProperty(Promise, "_async", {value: async});
	var errors = __webpack_require__(293);
	var TypeError = Promise.TypeError = errors.TypeError;
	Promise.RangeError = errors.RangeError;
	var CancellationError = Promise.CancellationError = errors.CancellationError;
	Promise.TimeoutError = errors.TimeoutError;
	Promise.OperationalError = errors.OperationalError;
	Promise.RejectionError = errors.OperationalError;
	Promise.AggregateError = errors.AggregateError;
	var INTERNAL = function(){};
	var APPLY = {};
	var NEXT_FILTER = {};
	var tryConvertToPromise = __webpack_require__(294)(Promise, INTERNAL);
	var PromiseArray =
	    __webpack_require__(295)(Promise, INTERNAL,
	                               tryConvertToPromise, apiRejection, Proxyable);
	var Context = __webpack_require__(296)(Promise);
	 /*jshint unused:false*/
	var createContext = Context.create;
	var debug = __webpack_require__(297)(Promise, Context);
	var CapturedTrace = debug.CapturedTrace;
	var PassThroughHandlerContext =
	    __webpack_require__(298)(Promise, tryConvertToPromise);
	var catchFilter = __webpack_require__(299)(NEXT_FILTER);
	var nodebackForPromise = __webpack_require__(300);
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	function check(self, executor) {
	    if (typeof executor !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(executor));
	    }
	    if (self.constructor !== Promise) {
	        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	}

	function Promise(executor) {
	    this._bitField = 0;
	    this._fulfillmentHandler0 = undefined;
	    this._rejectionHandler0 = undefined;
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    if (executor !== INTERNAL) {
	        check(this, executor);
	        this._resolveFromExecutor(executor);
	    }
	    this._promiseCreated();
	    this._fireEvent("promiseCreated", this);
	}

	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};

	Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	    var len = arguments.length;
	    if (len > 1) {
	        var catchInstances = new Array(len - 1),
	            j = 0, i;
	        for (i = 0; i < len - 1; ++i) {
	            var item = arguments[i];
	            if (util.isObject(item)) {
	                catchInstances[j++] = item;
	            } else {
	                return apiRejection("expecting an object but got " + util.classString(item));
	            }
	        }
	        catchInstances.length = j;
	        fn = arguments[i];
	        return this.then(undefined, catchFilter(catchInstances, fn, this));
	    }
	    return this.then(undefined, fn);
	};

	Promise.prototype.reflect = function () {
	    return this._then(reflectHandler,
	        reflectHandler, undefined, this, undefined);
	};

	Promise.prototype.then = function (didFulfill, didReject) {
	    if (debug.warnings() && arguments.length > 0 &&
	        typeof didFulfill !== "function" &&
	        typeof didReject !== "function") {
	        var msg = ".then() only accepts functions but was passed: " +
	                util.classString(didFulfill);
	        if (arguments.length > 1) {
	            msg += ", " + util.classString(didReject);
	        }
	        this._warn(msg);
	    }
	    return this._then(didFulfill, didReject, undefined, undefined, undefined);
	};

	Promise.prototype.done = function (didFulfill, didReject) {
	    var promise =
	        this._then(didFulfill, didReject, undefined, undefined, undefined);
	    promise._setIsFinal();
	};

	Promise.prototype.spread = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
	};

	Promise.prototype.toJSON = function () {
	    var ret = {
	        isFulfilled: false,
	        isRejected: false,
	        fulfillmentValue: undefined,
	        rejectionReason: undefined
	    };
	    if (this.isFulfilled()) {
	        ret.fulfillmentValue = this.value();
	        ret.isFulfilled = true;
	    } else if (this.isRejected()) {
	        ret.rejectionReason = this.reason();
	        ret.isRejected = true;
	    }
	    return ret;
	};

	Promise.prototype.all = function () {
	    if (arguments.length > 0) {
	        this._warn(".all() was passed arguments but it does not take any");
	    }
	    return new PromiseArray(this).promise();
	};

	Promise.prototype.error = function (fn) {
	    return this.caught(util.originatesFromRejection, fn);
	};

	Promise.is = function (val) {
	    return val instanceof Promise;
	};

	Promise.fromNode = Promise.fromCallback = function(fn) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
	                                         : false;
	    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
	    if (result === errorObj) {
	        ret._rejectCallback(result.e, true);
	    }
	    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
	    return ret;
	};

	Promise.all = function (promises) {
	    return new PromiseArray(promises).promise();
	};

	Promise.cast = function (obj) {
	    var ret = tryConvertToPromise(obj);
	    if (!(ret instanceof Promise)) {
	        ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._setFulfilled();
	        ret._rejectionHandler0 = obj;
	    }
	    return ret;
	};

	Promise.resolve = Promise.fulfilled = Promise.cast;

	Promise.reject = Promise.rejected = function (reason) {
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._rejectCallback(reason, true);
	    return ret;
	};

	Promise.setScheduler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    var prev = async._schedule;
	    async._schedule = fn;
	    return prev;
	};

	Promise.prototype._then = function (
	    didFulfill,
	    didReject,
	    _,    receiver,
	    internalData
	) {
	    var haveInternalData = internalData !== undefined;
	    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
	    var target = this._target();
	    var bitField = target._bitField;

	    if (!haveInternalData) {
	        promise._propagateFrom(this, 3);
	        promise._captureStackTrace();
	        if (receiver === undefined &&
	            ((this._bitField & 2097152) !== 0)) {
	            if (!((bitField & 50397184) === 0)) {
	                receiver = this._boundValue();
	            } else {
	                receiver = target === this ? undefined : this._boundTo;
	            }
	        }
	        this._fireEvent("promiseChained", this, promise);
	    }

	    var domain = getDomain();
	    if (!((bitField & 50397184) === 0)) {
	        var handler, value, settler = target._settlePromiseCtx;
	        if (((bitField & 33554432) !== 0)) {
	            value = target._rejectionHandler0;
	            handler = didFulfill;
	        } else if (((bitField & 16777216) !== 0)) {
	            value = target._fulfillmentHandler0;
	            handler = didReject;
	            target._unsetRejectionIsUnhandled();
	        } else {
	            settler = target._settlePromiseLateCancellationObserver;
	            value = new CancellationError("late cancellation observer");
	            target._attachExtraTrace(value);
	            handler = didReject;
	        }

	        async.invoke(settler, target, {
	            handler: domain === null ? handler
	                : (typeof handler === "function" && domain.bind(handler)),
	            promise: promise,
	            receiver: receiver,
	            value: value
	        });
	    } else {
	        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
	    }

	    return promise;
	};

	Promise.prototype._length = function () {
	    return this._bitField & 65535;
	};

	Promise.prototype._isFateSealed = function () {
	    return (this._bitField & 117506048) !== 0;
	};

	Promise.prototype._isFollowing = function () {
	    return (this._bitField & 67108864) === 67108864;
	};

	Promise.prototype._setLength = function (len) {
	    this._bitField = (this._bitField & -65536) |
	        (len & 65535);
	};

	Promise.prototype._setFulfilled = function () {
	    this._bitField = this._bitField | 33554432;
	    this._fireEvent("promiseFulfilled", this);
	};

	Promise.prototype._setRejected = function () {
	    this._bitField = this._bitField | 16777216;
	    this._fireEvent("promiseRejected", this);
	};

	Promise.prototype._setFollowing = function () {
	    this._bitField = this._bitField | 67108864;
	    this._fireEvent("promiseResolved", this);
	};

	Promise.prototype._setIsFinal = function () {
	    this._bitField = this._bitField | 4194304;
	};

	Promise.prototype._isFinal = function () {
	    return (this._bitField & 4194304) > 0;
	};

	Promise.prototype._unsetCancelled = function() {
	    this._bitField = this._bitField & (~65536);
	};

	Promise.prototype._setCancelled = function() {
	    this._bitField = this._bitField | 65536;
	    this._fireEvent("promiseCancelled", this);
	};

	Promise.prototype._setAsyncGuaranteed = function() {
	    this._bitField = this._bitField | 134217728;
	};

	Promise.prototype._receiverAt = function (index) {
	    var ret = index === 0 ? this._receiver0 : this[
	            index * 4 - 4 + 3];
	    if (ret === UNDEFINED_BINDING) {
	        return undefined;
	    } else if (ret === undefined && this._isBound()) {
	        return this._boundValue();
	    }
	    return ret;
	};

	Promise.prototype._promiseAt = function (index) {
	    return this[
	            index * 4 - 4 + 2];
	};

	Promise.prototype._fulfillmentHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 0];
	};

	Promise.prototype._rejectionHandlerAt = function (index) {
	    return this[
	            index * 4 - 4 + 1];
	};

	Promise.prototype._boundValue = function() {};

	Promise.prototype._migrateCallback0 = function (follower) {
	    var bitField = follower._bitField;
	    var fulfill = follower._fulfillmentHandler0;
	    var reject = follower._rejectionHandler0;
	    var promise = follower._promise0;
	    var receiver = follower._receiverAt(0);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};

	Promise.prototype._migrateCallbackAt = function (follower, index) {
	    var fulfill = follower._fulfillmentHandlerAt(index);
	    var reject = follower._rejectionHandlerAt(index);
	    var promise = follower._promiseAt(index);
	    var receiver = follower._receiverAt(index);
	    if (receiver === undefined) receiver = UNDEFINED_BINDING;
	    this._addCallbacks(fulfill, reject, promise, receiver, null);
	};

	Promise.prototype._addCallbacks = function (
	    fulfill,
	    reject,
	    promise,
	    receiver,
	    domain
	) {
	    var index = this._length();

	    if (index >= 65535 - 4) {
	        index = 0;
	        this._setLength(0);
	    }

	    if (index === 0) {
	        this._promise0 = promise;
	        this._receiver0 = receiver;
	        if (typeof fulfill === "function") {
	            this._fulfillmentHandler0 =
	                domain === null ? fulfill : domain.bind(fulfill);
	        }
	        if (typeof reject === "function") {
	            this._rejectionHandler0 =
	                domain === null ? reject : domain.bind(reject);
	        }
	    } else {
	        var base = index * 4 - 4;
	        this[base + 2] = promise;
	        this[base + 3] = receiver;
	        if (typeof fulfill === "function") {
	            this[base + 0] =
	                domain === null ? fulfill : domain.bind(fulfill);
	        }
	        if (typeof reject === "function") {
	            this[base + 1] =
	                domain === null ? reject : domain.bind(reject);
	        }
	    }
	    this._setLength(index + 1);
	    return index;
	};

	Promise.prototype._proxy = function (proxyable, arg) {
	    this._addCallbacks(undefined, undefined, arg, proxyable, null);
	};

	Promise.prototype._resolveCallback = function(value, shouldBind) {
	    if (((this._bitField & 117506048) !== 0)) return;
	    if (value === this)
	        return this._rejectCallback(makeSelfResolutionError(), false);
	    var maybePromise = tryConvertToPromise(value, this);
	    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

	    if (shouldBind) this._propagateFrom(maybePromise, 2);

	    var promise = maybePromise._target();

	    if (promise === this) {
	        this._reject(makeSelfResolutionError());
	        return;
	    }

	    var bitField = promise._bitField;
	    if (((bitField & 50397184) === 0)) {
	        var len = this._length();
	        if (len > 0) promise._migrateCallback0(this);
	        for (var i = 1; i < len; ++i) {
	            promise._migrateCallbackAt(this, i);
	        }
	        this._setFollowing();
	        this._setLength(0);
	        this._setFollowee(promise);
	    } else if (((bitField & 33554432) !== 0)) {
	        this._fulfill(promise._value());
	    } else if (((bitField & 16777216) !== 0)) {
	        this._reject(promise._reason());
	    } else {
	        var reason = new CancellationError("late cancellation observer");
	        promise._attachExtraTrace(reason);
	        this._reject(reason);
	    }
	};

	Promise.prototype._rejectCallback =
	function(reason, synchronous, ignoreNonErrorWarnings) {
	    var trace = util.ensureErrorObject(reason);
	    var hasStack = trace === reason;
	    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
	        var message = "a promise was rejected with a non-error: " +
	            util.classString(reason);
	        this._warn(message, true);
	    }
	    this._attachExtraTrace(trace, synchronous ? hasStack : false);
	    this._reject(reason);
	};

	Promise.prototype._resolveFromExecutor = function (executor) {
	    var promise = this;
	    this._captureStackTrace();
	    this._pushContext();
	    var synchronous = true;
	    var r = this._execute(executor, function(value) {
	        promise._resolveCallback(value);
	    }, function (reason) {
	        promise._rejectCallback(reason, synchronous);
	    });
	    synchronous = false;
	    this._popContext();

	    if (r !== undefined) {
	        promise._rejectCallback(r, true);
	    }
	};

	Promise.prototype._settlePromiseFromHandler = function (
	    handler, receiver, value, promise
	) {
	    var bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;
	    promise._pushContext();
	    var x;
	    if (receiver === APPLY) {
	        if (!value || typeof value.length !== "number") {
	            x = errorObj;
	            x.e = new TypeError("cannot .spread() a non-array: " +
	                                    util.classString(value));
	        } else {
	            x = tryCatch(handler).apply(this._boundValue(), value);
	        }
	    } else {
	        x = tryCatch(handler).call(receiver, value);
	    }
	    var promiseCreated = promise._popContext();
	    bitField = promise._bitField;
	    if (((bitField & 65536) !== 0)) return;

	    if (x === NEXT_FILTER) {
	        promise._reject(value);
	    } else if (x === errorObj) {
	        promise._rejectCallback(x.e, false);
	    } else {
	        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
	        promise._resolveCallback(x);
	    }
	};

	Promise.prototype._target = function() {
	    var ret = this;
	    while (ret._isFollowing()) ret = ret._followee();
	    return ret;
	};

	Promise.prototype._followee = function() {
	    return this._rejectionHandler0;
	};

	Promise.prototype._setFollowee = function(promise) {
	    this._rejectionHandler0 = promise;
	};

	Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
	    var isPromise = promise instanceof Promise;
	    var bitField = this._bitField;
	    var asyncGuaranteed = ((bitField & 134217728) !== 0);
	    if (((bitField & 65536) !== 0)) {
	        if (isPromise) promise._invokeInternalOnCancel();

	        if (receiver instanceof PassThroughHandlerContext &&
	            receiver.isFinallyHandler()) {
	            receiver.cancelPromise = promise;
	            if (tryCatch(handler).call(receiver, value) === errorObj) {
	                promise._reject(errorObj.e);
	            }
	        } else if (handler === reflectHandler) {
	            promise._fulfill(reflectHandler.call(receiver));
	        } else if (receiver instanceof Proxyable) {
	            receiver._promiseCancelled(promise);
	        } else if (isPromise || promise instanceof PromiseArray) {
	            promise._cancel();
	        } else {
	            receiver.cancel();
	        }
	    } else if (typeof handler === "function") {
	        if (!isPromise) {
	            handler.call(receiver, value, promise);
	        } else {
	            if (asyncGuaranteed) promise._setAsyncGuaranteed();
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (receiver instanceof Proxyable) {
	        if (!receiver._isResolved()) {
	            if (((bitField & 33554432) !== 0)) {
	                receiver._promiseFulfilled(value, promise);
	            } else {
	                receiver._promiseRejected(value, promise);
	            }
	        }
	    } else if (isPromise) {
	        if (asyncGuaranteed) promise._setAsyncGuaranteed();
	        if (((bitField & 33554432) !== 0)) {
	            promise._fulfill(value);
	        } else {
	            promise._reject(value);
	        }
	    }
	};

	Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
	    var handler = ctx.handler;
	    var promise = ctx.promise;
	    var receiver = ctx.receiver;
	    var value = ctx.value;
	    if (typeof handler === "function") {
	        if (!(promise instanceof Promise)) {
	            handler.call(receiver, value, promise);
	        } else {
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	        }
	    } else if (promise instanceof Promise) {
	        promise._reject(value);
	    }
	};

	Promise.prototype._settlePromiseCtx = function(ctx) {
	    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
	};

	Promise.prototype._settlePromise0 = function(handler, value, bitField) {
	    var promise = this._promise0;
	    var receiver = this._receiverAt(0);
	    this._promise0 = undefined;
	    this._receiver0 = undefined;
	    this._settlePromise(promise, handler, receiver, value);
	};

	Promise.prototype._clearCallbackDataAtIndex = function(index) {
	    var base = index * 4 - 4;
	    this[base + 2] =
	    this[base + 3] =
	    this[base + 0] =
	    this[base + 1] = undefined;
	};

	Promise.prototype._fulfill = function (value) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    if (value === this) {
	        var err = makeSelfResolutionError();
	        this._attachExtraTrace(err);
	        return this._reject(err);
	    }
	    this._setFulfilled();
	    this._rejectionHandler0 = value;

	    if ((bitField & 65535) > 0) {
	        if (((bitField & 134217728) !== 0)) {
	            this._settlePromises();
	        } else {
	            async.settlePromises(this);
	        }
	    }
	};

	Promise.prototype._reject = function (reason) {
	    var bitField = this._bitField;
	    if (((bitField & 117506048) >>> 16)) return;
	    this._setRejected();
	    this._fulfillmentHandler0 = reason;

	    if (this._isFinal()) {
	        return async.fatalError(reason, util.isNode);
	    }

	    if ((bitField & 65535) > 0) {
	        async.settlePromises(this);
	    } else {
	        this._ensurePossibleRejectionHandled();
	    }
	};

	Promise.prototype._fulfillPromises = function (len, value) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._fulfillmentHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, value);
	    }
	};

	Promise.prototype._rejectPromises = function (len, reason) {
	    for (var i = 1; i < len; i++) {
	        var handler = this._rejectionHandlerAt(i);
	        var promise = this._promiseAt(i);
	        var receiver = this._receiverAt(i);
	        this._clearCallbackDataAtIndex(i);
	        this._settlePromise(promise, handler, receiver, reason);
	    }
	};

	Promise.prototype._settlePromises = function () {
	    var bitField = this._bitField;
	    var len = (bitField & 65535);

	    if (len > 0) {
	        if (((bitField & 16842752) !== 0)) {
	            var reason = this._fulfillmentHandler0;
	            this._settlePromise0(this._rejectionHandler0, reason, bitField);
	            this._rejectPromises(len, reason);
	        } else {
	            var value = this._rejectionHandler0;
	            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
	            this._fulfillPromises(len, value);
	        }
	        this._setLength(0);
	    }
	    this._clearCancellationData();
	};

	Promise.prototype._settledValue = function() {
	    var bitField = this._bitField;
	    if (((bitField & 33554432) !== 0)) {
	        return this._rejectionHandler0;
	    } else if (((bitField & 16777216) !== 0)) {
	        return this._fulfillmentHandler0;
	    }
	};

	function deferResolve(v) {this.promise._resolveCallback(v);}
	function deferReject(v) {this.promise._rejectCallback(v, false);}

	Promise.defer = Promise.pending = function() {
	    debug.deprecated("Promise.defer", "new Promise");
	    var promise = new Promise(INTERNAL);
	    return {
	        promise: promise,
	        resolve: deferResolve,
	        reject: deferReject
	    };
	};

	util.notEnumerableProp(Promise,
	                       "_makeSelfResolutionError",
	                       makeSelfResolutionError);

	__webpack_require__(301)(Promise, INTERNAL, tryConvertToPromise, apiRejection,
	    debug);
	__webpack_require__(302)(Promise, INTERNAL, tryConvertToPromise, debug);
	__webpack_require__(303)(Promise, PromiseArray, apiRejection, debug);
	__webpack_require__(304)(Promise);
	__webpack_require__(305)(Promise);
	__webpack_require__(306)(
	    Promise, PromiseArray, tryConvertToPromise, INTERNAL, debug);
	Promise.Promise = Promise;
	__webpack_require__(307)(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	__webpack_require__(308)(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
	__webpack_require__(309)(Promise, INTERNAL, debug);
	__webpack_require__(310)(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
	__webpack_require__(311)(Promise);
	__webpack_require__(312)(Promise);
	__webpack_require__(313)(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	__webpack_require__(314)(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	__webpack_require__(315)(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
	__webpack_require__(316)(Promise, PromiseArray, debug);
	__webpack_require__(317)(Promise, PromiseArray, apiRejection);
	__webpack_require__(318)(Promise, INTERNAL);
	__webpack_require__(319)(Promise);
	__webpack_require__(320)(Promise, INTERNAL);
	__webpack_require__(321)(Promise, INTERNAL);
	                                                         
	    util.toFastProperties(Promise);                                          
	    util.toFastProperties(Promise.prototype);                                
	    function fillTypes(value) {                                              
	        var p = new Promise(INTERNAL);                                       
	        p._fulfillmentHandler0 = value;                                      
	        p._rejectionHandler0 = value;                                        
	        p._promise0 = value;                                                 
	        p._receiver0 = value;                                                
	    }                                                                        
	    // Complete slack tracking, opt out of field-type tracking and           
	    // stabilize map                                                         
	    fillTypes({a: 1});                                                       
	    fillTypes({b: 2});                                                       
	    fillTypes({c: 3});                                                       
	    fillTypes(1);                                                            
	    fillTypes(function(){});                                                 
	    fillTypes(undefined);                                                    
	    fillTypes(false);                                                        
	    fillTypes(new Promise(INTERNAL));                                        
	    debug.setBounds(Async.firstLineError, util.lastLineError);               
	    return Promise;                                                          

	};


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var es5 = __webpack_require__(289);
	var canEvaluate = typeof navigator == "undefined";

	var errorObj = {e: {}};
	var tryCatchTarget;
	var globalObject = typeof self !== "undefined" ? self :
	    typeof window !== "undefined" ? window :
	    typeof global !== "undefined" ? global :
	    this !== undefined ? this : null;

	function tryCatcher() {
	    try {
	        var target = tryCatchTarget;
	        tryCatchTarget = null;
	        return target.apply(this, arguments);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}

	var inherits = function(Child, Parent) {
	    var hasProp = {}.hasOwnProperty;

	    function T() {
	        this.constructor = Child;
	        this.constructor$ = Parent;
	        for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) &&
	                propertyName.charAt(propertyName.length-1) !== "$"
	           ) {
	                this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	        }
	    }
	    T.prototype = Parent.prototype;
	    Child.prototype = new T();
	    return Child.prototype;
	};


	function isPrimitive(val) {
	    return val == null || val === true || val === false ||
	        typeof val === "string" || typeof val === "number";

	}

	function isObject(value) {
	    return typeof value === "function" ||
	           typeof value === "object" && value !== null;
	}

	function maybeWrapAsError(maybeError) {
	    if (!isPrimitive(maybeError)) return maybeError;

	    return new Error(safeToString(maybeError));
	}

	function withAppended(target, appendee) {
	    var len = target.length;
	    var ret = new Array(len + 1);
	    var i;
	    for (i = 0; i < len; ++i) {
	        ret[i] = target[i];
	    }
	    ret[i] = appendee;
	    return ret;
	}

	function getDataPropertyOrDefault(obj, key, defaultValue) {
	    if (es5.isES5) {
	        var desc = Object.getOwnPropertyDescriptor(obj, key);

	        if (desc != null) {
	            return desc.get == null && desc.set == null
	                    ? desc.value
	                    : defaultValue;
	        }
	    } else {
	        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	    }
	}

	function notEnumerableProp(obj, name, value) {
	    if (isPrimitive(obj)) return obj;
	    var descriptor = {
	        value: value,
	        configurable: true,
	        enumerable: false,
	        writable: true
	    };
	    es5.defineProperty(obj, name, descriptor);
	    return obj;
	}

	function thrower(r) {
	    throw r;
	}

	var inheritedDataKeys = (function() {
	    var excludedPrototypes = [
	        Array.prototype,
	        Object.prototype,
	        Function.prototype
	    ];

	    var isExcludedProto = function(val) {
	        for (var i = 0; i < excludedPrototypes.length; ++i) {
	            if (excludedPrototypes[i] === val) {
	                return true;
	            }
	        }
	        return false;
	    };

	    if (es5.isES5) {
	        var getKeys = Object.getOwnPropertyNames;
	        return function(obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && !isExcludedProto(obj)) {
	                var keys;
	                try {
	                    keys = getKeys(obj);
	                } catch (e) {
	                    return ret;
	                }
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                        ret.push(key);
	                    }
	                }
	                obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	        };
	    } else {
	        var hasProp = {}.hasOwnProperty;
	        return function(obj) {
	            if (isExcludedProto(obj)) return [];
	            var ret = [];

	            /*jshint forin:false */
	            enumeration: for (var key in obj) {
	                if (hasProp.call(obj, key)) {
	                    ret.push(key);
	                } else {
	                    for (var i = 0; i < excludedPrototypes.length; ++i) {
	                        if (hasProp.call(excludedPrototypes[i], key)) {
	                            continue enumeration;
	                        }
	                    }
	                    ret.push(key);
	                }
	            }
	            return ret;
	        };
	    }

	})();

	var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
	function isClass(fn) {
	    try {
	        if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);

	            var hasMethods = es5.isES5 && keys.length > 1;
	            var hasMethodsOtherThanConstructor = keys.length > 0 &&
	                !(keys.length === 1 && keys[0] === "constructor");
	            var hasThisAssignmentAndStaticMethods =
	                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

	            if (hasMethods || hasMethodsOtherThanConstructor ||
	                hasThisAssignmentAndStaticMethods) {
	                return true;
	            }
	        }
	        return false;
	    } catch (e) {
	        return false;
	    }
	}

	function toFastProperties(obj) {
	    /*jshint -W027,-W055,-W031*/
	    function FakeConstructor() {}
	    FakeConstructor.prototype = obj;
	    var l = 8;
	    while (l--) new FakeConstructor();
	    return obj;
	    eval(obj);
	}

	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier(str) {
	    return rident.test(str);
	}

	function filledRange(count, prefix, suffix) {
	    var ret = new Array(count);
	    for(var i = 0; i < count; ++i) {
	        ret[i] = prefix + i + suffix;
	    }
	    return ret;
	}

	function safeToString(obj) {
	    try {
	        return obj + "";
	    } catch (e) {
	        return "[no string representation]";
	    }
	}

	function isError(obj) {
	    return obj !== null &&
	           typeof obj === "object" &&
	           typeof obj.message === "string" &&
	           typeof obj.name === "string";
	}

	function markAsOriginatingFromRejection(e) {
	    try {
	        notEnumerableProp(e, "isOperational", true);
	    }
	    catch(ignore) {}
	}

	function originatesFromRejection(e) {
	    if (e == null) return false;
	    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
	        e["isOperational"] === true);
	}

	function canAttachTrace(obj) {
	    return isError(obj) && es5.propertyIsWritable(obj, "stack");
	}

	var ensureErrorObject = (function() {
	    if (!("stack" in new Error())) {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            try {throw new Error(safeToString(value));}
	            catch(err) {return err;}
	        };
	    } else {
	        return function(value) {
	            if (canAttachTrace(value)) return value;
	            return new Error(safeToString(value));
	        };
	    }
	})();

	function classString(obj) {
	    return {}.toString.call(obj);
	}

	function copyDescriptors(from, to, filter) {
	    var keys = es5.names(from);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        if (filter(key)) {
	            try {
	                es5.defineProperty(to, key, es5.getDescriptor(from, key));
	            } catch (ignore) {}
	        }
	    }
	}

	var asArray = function(v) {
	    if (es5.isArray(v)) {
	        return v;
	    }
	    return null;
	};

	if (typeof Symbol !== "undefined" && Symbol.iterator) {
	    var ArrayFrom = typeof Array.from === "function" ? function(v) {
	        return Array.from(v);
	    } : function(v) {
	        var ret = [];
	        var it = v[Symbol.iterator]();
	        var itResult;
	        while (!((itResult = it.next()).done)) {
	            ret.push(itResult.value);
	        }
	        return ret;
	    };

	    asArray = function(v) {
	        if (es5.isArray(v)) {
	            return v;
	        } else if (v != null && typeof v[Symbol.iterator] === "function") {
	            return ArrayFrom(v);
	        }
	        return null;
	    };
	}

	var isNode = typeof process !== "undefined" &&
	        classString(process).toLowerCase() === "[object process]";

	function env(key, def) {
	    return isNode ? process.env[key] : def;
	}

	var ret = {
	    isClass: isClass,
	    isIdentifier: isIdentifier,
	    inheritedDataKeys: inheritedDataKeys,
	    getDataPropertyOrDefault: getDataPropertyOrDefault,
	    thrower: thrower,
	    isArray: es5.isArray,
	    asArray: asArray,
	    notEnumerableProp: notEnumerableProp,
	    isPrimitive: isPrimitive,
	    isObject: isObject,
	    isError: isError,
	    canEvaluate: canEvaluate,
	    errorObj: errorObj,
	    tryCatch: tryCatch,
	    inherits: inherits,
	    withAppended: withAppended,
	    maybeWrapAsError: maybeWrapAsError,
	    toFastProperties: toFastProperties,
	    filledRange: filledRange,
	    toString: safeToString,
	    canAttachTrace: canAttachTrace,
	    ensureErrorObject: ensureErrorObject,
	    originatesFromRejection: originatesFromRejection,
	    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	    classString: classString,
	    copyDescriptors: copyDescriptors,
	    hasDevTools: typeof chrome !== "undefined" && chrome &&
	                 typeof chrome.loadTimes === "function",
	    isNode: isNode,
	    env: env,
	    global: globalObject
	};
	ret.isRecentNode = ret.isNode && (function() {
	    var version = process.versions.node.split(".").map(Number);
	    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
	})();

	if (ret.isNode) ret.toFastProperties(process);

	try {throw new Error(); } catch (e) {ret.lastLineError = e;}
	module.exports = ret;


/***/ },
/* 289 */
/***/ function(module, exports) {

	var isES5 = (function(){
	    "use strict";
	    return this === undefined;
	})();

	if (isES5) {
	    module.exports = {
	        freeze: Object.freeze,
	        defineProperty: Object.defineProperty,
	        getDescriptor: Object.getOwnPropertyDescriptor,
	        keys: Object.keys,
	        names: Object.getOwnPropertyNames,
	        getPrototypeOf: Object.getPrototypeOf,
	        isArray: Array.isArray,
	        isES5: isES5,
	        propertyIsWritable: function(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	        }
	    };
	} else {
	    var has = {}.hasOwnProperty;
	    var str = {}.toString;
	    var proto = {}.constructor.prototype;

	    var ObjectKeys = function (o) {
	        var ret = [];
	        for (var key in o) {
	            if (has.call(o, key)) {
	                ret.push(key);
	            }
	        }
	        return ret;
	    };

	    var ObjectGetDescriptor = function(o, key) {
	        return {value: o[key]};
	    };

	    var ObjectDefineProperty = function (o, key, desc) {
	        o[key] = desc.value;
	        return o;
	    };

	    var ObjectFreeze = function (obj) {
	        return obj;
	    };

	    var ObjectGetPrototypeOf = function (obj) {
	        try {
	            return Object(obj).constructor.prototype;
	        }
	        catch (e) {
	            return proto;
	        }
	    };

	    var ArrayIsArray = function (obj) {
	        try {
	            return str.call(obj) === "[object Array]";
	        }
	        catch(e) {
	            return false;
	        }
	    };

	    module.exports = {
	        isArray: ArrayIsArray,
	        keys: ObjectKeys,
	        names: ObjectKeys,
	        defineProperty: ObjectDefineProperty,
	        getDescriptor: ObjectGetDescriptor,
	        freeze: ObjectFreeze,
	        getPrototypeOf: ObjectGetPrototypeOf,
	        isES5: isES5,
	        propertyIsWritable: function() {
	            return true;
	        }
	    };
	}


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var firstLineError;
	try {throw new Error(); } catch (e) {firstLineError = e;}
	var schedule = __webpack_require__(291);
	var Queue = __webpack_require__(292);
	var util = __webpack_require__(288);

	function Async() {
	    this._isTickUsed = false;
	    this._lateQueue = new Queue(16);
	    this._normalQueue = new Queue(16);
	    this._haveDrainedQueues = false;
	    this._trampolineEnabled = true;
	    var self = this;
	    this.drainQueues = function () {
	        self._drainQueues();
	    };
	    this._schedule = schedule;
	}

	Async.prototype.enableTrampoline = function() {
	    this._trampolineEnabled = true;
	};

	Async.prototype.disableTrampolineIfNecessary = function() {
	    if (util.hasDevTools) {
	        this._trampolineEnabled = false;
	    }
	};

	Async.prototype.haveItemsQueued = function () {
	    return this._isTickUsed || this._haveDrainedQueues;
	};


	Async.prototype.fatalError = function(e, isNode) {
	    if (isNode) {
	        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
	            "\n");
	        process.exit(2);
	    } else {
	        this.throwLater(e);
	    }
	};

	Async.prototype.throwLater = function(fn, arg) {
	    if (arguments.length === 1) {
	        arg = fn;
	        fn = function () { throw arg; };
	    }
	    if (typeof setTimeout !== "undefined") {
	        setTimeout(function() {
	            fn(arg);
	        }, 0);
	    } else try {
	        this._schedule(function() {
	            fn(arg);
	        });
	    } catch (e) {
	        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	};

	function AsyncInvokeLater(fn, receiver, arg) {
	    this._lateQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncInvoke(fn, receiver, arg) {
	    this._normalQueue.push(fn, receiver, arg);
	    this._queueTick();
	}

	function AsyncSettlePromises(promise) {
	    this._normalQueue._pushOne(promise);
	    this._queueTick();
	}

	if (!util.hasDevTools) {
	    Async.prototype.invokeLater = AsyncInvokeLater;
	    Async.prototype.invoke = AsyncInvoke;
	    Async.prototype.settlePromises = AsyncSettlePromises;
	} else {
	    Async.prototype.invokeLater = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvokeLater.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                setTimeout(function() {
	                    fn.call(receiver, arg);
	                }, 100);
	            });
	        }
	    };

	    Async.prototype.invoke = function (fn, receiver, arg) {
	        if (this._trampolineEnabled) {
	            AsyncInvoke.call(this, fn, receiver, arg);
	        } else {
	            this._schedule(function() {
	                fn.call(receiver, arg);
	            });
	        }
	    };

	    Async.prototype.settlePromises = function(promise) {
	        if (this._trampolineEnabled) {
	            AsyncSettlePromises.call(this, promise);
	        } else {
	            this._schedule(function() {
	                promise._settlePromises();
	            });
	        }
	    };
	}

	Async.prototype.invokeFirst = function (fn, receiver, arg) {
	    this._normalQueue.unshift(fn, receiver, arg);
	    this._queueTick();
	};

	Async.prototype._drainQueue = function(queue) {
	    while (queue.length() > 0) {
	        var fn = queue.shift();
	        if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	        }
	        var receiver = queue.shift();
	        var arg = queue.shift();
	        fn.call(receiver, arg);
	    }
	};

	Async.prototype._drainQueues = function () {
	    this._drainQueue(this._normalQueue);
	    this._reset();
	    this._haveDrainedQueues = true;
	    this._drainQueue(this._lateQueue);
	};

	Async.prototype._queueTick = function () {
	    if (!this._isTickUsed) {
	        this._isTickUsed = true;
	        this._schedule(this.drainQueues);
	    }
	};

	Async.prototype._reset = function () {
	    this._isTickUsed = false;
	};

	module.exports = Async;
	module.exports.firstLineError = firstLineError;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var util = __webpack_require__(288);
	var schedule;
	var noAsyncScheduler = function() {
	    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	};
	if (util.isNode && typeof MutationObserver === "undefined") {
	    var GlobalSetImmediate = global.setImmediate;
	    var ProcessNextTick = process.nextTick;
	    schedule = util.isRecentNode
	                ? function(fn) { GlobalSetImmediate.call(global, fn); }
	                : function(fn) { ProcessNextTick.call(process, fn); };
	} else if ((typeof MutationObserver !== "undefined") &&
	          !(typeof window !== "undefined" &&
	            window.navigator &&
	            window.navigator.standalone)) {
	    schedule = (function() {
	        var div = document.createElement("div");
	        var opts = {attributes: true};
	        var toggleScheduled = false;
	        var div2 = document.createElement("div");
	        var o2 = new MutationObserver(function() {
	            div.classList.toggle("foo");
	          toggleScheduled = false;
	        });
	        o2.observe(div2, opts);

	        var scheduleToggle = function() {
	            if (toggleScheduled) return;
	          toggleScheduled = true;
	          div2.classList.toggle("foo");
	        };

	        return function schedule(fn) {
	          var o = new MutationObserver(function() {
	            o.disconnect();
	            fn();
	          });
	          o.observe(div, opts);
	          scheduleToggle();
	        };
	    })();
	} else if (typeof setImmediate !== "undefined") {
	    schedule = function (fn) {
	        setImmediate(fn);
	    };
	} else if (typeof setTimeout !== "undefined") {
	    schedule = function (fn) {
	        setTimeout(fn, 0);
	    };
	} else {
	    schedule = noAsyncScheduler;
	}
	module.exports = schedule;


/***/ },
/* 292 */
/***/ function(module, exports) {

	"use strict";
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
	    for (var j = 0; j < len; ++j) {
	        dst[j + dstIndex] = src[j + srcIndex];
	        src[j + srcIndex] = void 0;
	    }
	}

	function Queue(capacity) {
	    this._capacity = capacity;
	    this._length = 0;
	    this._front = 0;
	}

	Queue.prototype._willBeOverCapacity = function (size) {
	    return this._capacity < size;
	};

	Queue.prototype._pushOne = function (arg) {
	    var length = this.length();
	    this._checkCapacity(length + 1);
	    var i = (this._front + length) & (this._capacity - 1);
	    this[i] = arg;
	    this._length = length + 1;
	};

	Queue.prototype._unshiftOne = function(value) {
	    var capacity = this._capacity;
	    this._checkCapacity(this.length() + 1);
	    var front = this._front;
	    var i = (((( front - 1 ) &
	                    ( capacity - 1) ) ^ capacity ) - capacity );
	    this[i] = value;
	    this._front = i;
	    this._length = this.length() + 1;
	};

	Queue.prototype.unshift = function(fn, receiver, arg) {
	    this._unshiftOne(arg);
	    this._unshiftOne(receiver);
	    this._unshiftOne(fn);
	};

	Queue.prototype.push = function (fn, receiver, arg) {
	    var length = this.length() + 3;
	    if (this._willBeOverCapacity(length)) {
	        this._pushOne(fn);
	        this._pushOne(receiver);
	        this._pushOne(arg);
	        return;
	    }
	    var j = this._front + length - 3;
	    this._checkCapacity(length);
	    var wrapMask = this._capacity - 1;
	    this[(j + 0) & wrapMask] = fn;
	    this[(j + 1) & wrapMask] = receiver;
	    this[(j + 2) & wrapMask] = arg;
	    this._length = length;
	};

	Queue.prototype.shift = function () {
	    var front = this._front,
	        ret = this[front];

	    this[front] = undefined;
	    this._front = (front + 1) & (this._capacity - 1);
	    this._length--;
	    return ret;
	};

	Queue.prototype.length = function () {
	    return this._length;
	};

	Queue.prototype._checkCapacity = function (size) {
	    if (this._capacity < size) {
	        this._resizeTo(this._capacity << 1);
	    }
	};

	Queue.prototype._resizeTo = function (capacity) {
	    var oldCapacity = this._capacity;
	    this._capacity = capacity;
	    var front = this._front;
	    var length = this._length;
	    var moveItemsCount = (front + length) & (oldCapacity - 1);
	    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};

	module.exports = Queue;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var es5 = __webpack_require__(289);
	var Objectfreeze = es5.freeze;
	var util = __webpack_require__(288);
	var inherits = util.inherits;
	var notEnumerableProp = util.notEnumerableProp;

	function subError(nameProperty, defaultMessage) {
	    function SubError(message) {
	        if (!(this instanceof SubError)) return new SubError(message);
	        notEnumerableProp(this, "message",
	            typeof message === "string" ? message : defaultMessage);
	        notEnumerableProp(this, "name", nameProperty);
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            Error.call(this);
	        }
	    }
	    inherits(SubError, Error);
	    return SubError;
	}

	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
	    _TypeError = TypeError;
	    _RangeError = RangeError;
	} catch(e) {
	    _TypeError = subError("TypeError", "type error");
	    _RangeError = subError("RangeError", "range error");
	}

	var methods = ("join pop push shift unshift slice filter forEach some " +
	    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

	for (var i = 0; i < methods.length; ++i) {
	    if (typeof Array.prototype[methods[i]] === "function") {
	        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	    }
	}

	es5.defineProperty(AggregateError.prototype, "length", {
	    value: 0,
	    configurable: false,
	    writable: true,
	    enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function() {
	    var indent = Array(level * 4 + 1).join(" ");
	    var ret = "\n" + indent + "AggregateError of:" + "\n";
	    level++;
	    indent = Array(level * 4 + 1).join(" ");
	    for (var i = 0; i < this.length; ++i) {
	        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	        var lines = str.split("\n");
	        for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	        }
	        str = lines.join("\n");
	        ret += str + "\n";
	    }
	    level--;
	    return ret;
	};

	function OperationalError(message) {
	    if (!(this instanceof OperationalError))
	        return new OperationalError(message);
	    notEnumerableProp(this, "name", "OperationalError");
	    notEnumerableProp(this, "message", message);
	    this.cause = message;
	    this["isOperational"] = true;

	    if (message instanceof Error) {
	        notEnumerableProp(this, "message", message.message);
	        notEnumerableProp(this, "stack", message.stack);
	    } else if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, this.constructor);
	    }

	}
	inherits(OperationalError, Error);

	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
	    errorTypes = Objectfreeze({
	        CancellationError: CancellationError,
	        TimeoutError: TimeoutError,
	        OperationalError: OperationalError,
	        RejectionError: OperationalError,
	        AggregateError: AggregateError
	    });
	    es5.defineProperty(Error, "__BluebirdErrorTypes__", {
	        value: errorTypes,
	        writable: false,
	        enumerable: false,
	        configurable: false
	    });
	}

	module.exports = {
	    Error: Error,
	    TypeError: _TypeError,
	    RangeError: _RangeError,
	    CancellationError: errorTypes.CancellationError,
	    OperationalError: errorTypes.OperationalError,
	    TimeoutError: errorTypes.TimeoutError,
	    AggregateError: errorTypes.AggregateError,
	    Warning: Warning
	};


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var util = __webpack_require__(288);
	var errorObj = util.errorObj;
	var isObject = util.isObject;

	function tryConvertToPromise(obj, context) {
	    if (isObject(obj)) {
	        if (obj instanceof Promise) return obj;
	        var then = getThen(obj);
	        if (then === errorObj) {
	            if (context) context._pushContext();
	            var ret = Promise.reject(then.e);
	            if (context) context._popContext();
	            return ret;
	        } else if (typeof then === "function") {
	            if (isAnyBluebirdPromise(obj)) {
	                var ret = new Promise(INTERNAL);
	                obj._then(
	                    ret._fulfill,
	                    ret._reject,
	                    undefined,
	                    ret,
	                    null
	                );
	                return ret;
	            }
	            return doThenable(obj, then, context);
	        }
	    }
	    return obj;
	}

	function doGetThen(obj) {
	    return obj.then;
	}

	function getThen(obj) {
	    try {
	        return doGetThen(obj);
	    } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	    }
	}

	var hasProp = {}.hasOwnProperty;
	function isAnyBluebirdPromise(obj) {
	    return hasProp.call(obj, "_promise0");
	}

	function doThenable(x, then, context) {
	    var promise = new Promise(INTERNAL);
	    var ret = promise;
	    if (context) context._pushContext();
	    promise._captureStackTrace();
	    if (context) context._popContext();
	    var synchronous = true;
	    var result = util.tryCatch(then).call(x, resolve, reject);
	    synchronous = false;

	    if (promise && result === errorObj) {
	        promise._rejectCallback(result.e, true, true);
	        promise = null;
	    }

	    function resolve(value) {
	        if (!promise) return;
	        promise._resolveCallback(value);
	        promise = null;
	    }

	    function reject(reason) {
	        if (!promise) return;
	        promise._rejectCallback(reason, synchronous, true);
	        promise = null;
	    }
	    return ret;
	}

	return tryConvertToPromise;
	};


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise,
	    apiRejection, Proxyable) {
	var util = __webpack_require__(288);
	var isArray = util.isArray;

	function toResolutionValue(val) {
	    switch(val) {
	    case -2: return [];
	    case -3: return {};
	    }
	}

	function PromiseArray(values) {
	    var promise = this._promise = new Promise(INTERNAL);
	    if (values instanceof Promise) {
	        promise._propagateFrom(values, 3);
	    }
	    promise._setOnCancel(this);
	    this._values = values;
	    this._length = 0;
	    this._totalResolved = 0;
	    this._init(undefined, -2);
	}
	util.inherits(PromiseArray, Proxyable);

	PromiseArray.prototype.length = function () {
	    return this._length;
	};

	PromiseArray.prototype.promise = function () {
	    return this._promise;
	};

	PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	    var values = tryConvertToPromise(this._values, this._promise);
	    if (values instanceof Promise) {
	        values = values._target();
	        var bitField = values._bitField;
	        ;
	        this._values = values;

	        if (((bitField & 50397184) === 0)) {
	            this._promise._setAsyncGuaranteed();
	            return values._then(
	                init,
	                this._reject,
	                undefined,
	                this,
	                resolveValueIfEmpty
	           );
	        } else if (((bitField & 33554432) !== 0)) {
	            values = values._value();
	        } else if (((bitField & 16777216) !== 0)) {
	            return this._reject(values._reason());
	        } else {
	            return this._cancel();
	        }
	    }
	    values = util.asArray(values);
	    if (values === null) {
	        var err = apiRejection(
	            "expecting an array or an iterable object but got " + util.classString(values)).reason();
	        this._promise._rejectCallback(err, false);
	        return;
	    }

	    if (values.length === 0) {
	        if (resolveValueIfEmpty === -5) {
	            this._resolveEmptyArray();
	        }
	        else {
	            this._resolve(toResolutionValue(resolveValueIfEmpty));
	        }
	        return;
	    }
	    this._iterate(values);
	};

	PromiseArray.prototype._iterate = function(values) {
	    var len = this.getActualLength(values.length);
	    this._length = len;
	    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	    var result = this._promise;
	    var isResolved = false;
	    var bitField = null;
	    for (var i = 0; i < len; ++i) {
	        var maybePromise = tryConvertToPromise(values[i], result);

	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            bitField = maybePromise._bitField;
	        } else {
	            bitField = null;
	        }

	        if (isResolved) {
	            if (bitField !== null) {
	                maybePromise.suppressUnhandledRejections();
	            }
	        } else if (bitField !== null) {
	            if (((bitField & 50397184) === 0)) {
	                maybePromise._proxy(this, i);
	                this._values[i] = maybePromise;
	            } else if (((bitField & 33554432) !== 0)) {
	                isResolved = this._promiseFulfilled(maybePromise._value(), i);
	            } else if (((bitField & 16777216) !== 0)) {
	                isResolved = this._promiseRejected(maybePromise._reason(), i);
	            } else {
	                isResolved = this._promiseCancelled(i);
	            }
	        } else {
	            isResolved = this._promiseFulfilled(maybePromise, i);
	        }
	    }
	    if (!isResolved) result._setAsyncGuaranteed();
	};

	PromiseArray.prototype._isResolved = function () {
	    return this._values === null;
	};

	PromiseArray.prototype._resolve = function (value) {
	    this._values = null;
	    this._promise._fulfill(value);
	};

	PromiseArray.prototype._cancel = function() {
	    if (this._isResolved() || !this._promise.isCancellable()) return;
	    this._values = null;
	    this._promise._cancel();
	};

	PromiseArray.prototype._reject = function (reason) {
	    this._values = null;
	    this._promise._rejectCallback(reason, false);
	};

	PromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};

	PromiseArray.prototype._promiseCancelled = function() {
	    this._cancel();
	    return true;
	};

	PromiseArray.prototype._promiseRejected = function (reason) {
	    this._totalResolved++;
	    this._reject(reason);
	    return true;
	};

	PromiseArray.prototype._resultCancelled = function() {
	    if (this._isResolved()) return;
	    var values = this._values;
	    this._cancel();
	    if (values instanceof Promise) {
	        values.cancel();
	    } else {
	        for (var i = 0; i < values.length; ++i) {
	            if (values[i] instanceof Promise) {
	                values[i].cancel();
	            }
	        }
	    }
	};

	PromiseArray.prototype.shouldCopyValues = function () {
	    return true;
	};

	PromiseArray.prototype.getActualLength = function (len) {
	    return len;
	};

	return PromiseArray;
	};


/***/ },
/* 296 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise) {
	var longStackTraces = false;
	var contextStack = [];

	Promise.prototype._promiseCreated = function() {};
	Promise.prototype._pushContext = function() {};
	Promise.prototype._popContext = function() {return null;};
	Promise._peekContext = Promise.prototype._peekContext = function() {};

	function Context() {
	    this._trace = new Context.CapturedTrace(peekContext());
	}
	Context.prototype._pushContext = function () {
	    if (this._trace !== undefined) {
	        this._trace._promiseCreated = null;
	        contextStack.push(this._trace);
	    }
	};

	Context.prototype._popContext = function () {
	    if (this._trace !== undefined) {
	        var trace = contextStack.pop();
	        var ret = trace._promiseCreated;
	        trace._promiseCreated = null;
	        return ret;
	    }
	    return null;
	};

	function createContext() {
	    if (longStackTraces) return new Context();
	}

	function peekContext() {
	    var lastIndex = contextStack.length - 1;
	    if (lastIndex >= 0) {
	        return contextStack[lastIndex];
	    }
	    return undefined;
	}
	Context.CapturedTrace = null;
	Context.create = createContext;
	Context.deactivateLongStackTraces = function() {};
	Context.activateLongStackTraces = function() {
	    var Promise_pushContext = Promise.prototype._pushContext;
	    var Promise_popContext = Promise.prototype._popContext;
	    var Promise_PeekContext = Promise._peekContext;
	    var Promise_peekContext = Promise.prototype._peekContext;
	    var Promise_promiseCreated = Promise.prototype._promiseCreated;
	    Context.deactivateLongStackTraces = function() {
	        Promise.prototype._pushContext = Promise_pushContext;
	        Promise.prototype._popContext = Promise_popContext;
	        Promise._peekContext = Promise_PeekContext;
	        Promise.prototype._peekContext = Promise_peekContext;
	        Promise.prototype._promiseCreated = Promise_promiseCreated;
	        longStackTraces = false;
	    };
	    longStackTraces = true;
	    Promise.prototype._pushContext = Context.prototype._pushContext;
	    Promise.prototype._popContext = Context.prototype._popContext;
	    Promise._peekContext = Promise.prototype._peekContext = peekContext;
	    Promise.prototype._promiseCreated = function() {
	        var ctx = this._peekContext();
	        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
	    };
	};
	return Context;
	};


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, Context) {
	var getDomain = Promise._getDomain;
	var async = Promise._async;
	var Warning = __webpack_require__(293).Warning;
	var util = __webpack_require__(288);
	var canAttachTrace = util.canAttachTrace;
	var unhandledRejectionHandled;
	var possiblyUnhandledRejection;
	var bluebirdFramePattern =
	    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
	var stackFramePattern = null;
	var formatStack = null;
	var indentStackFrames = false;
	var printWarning;
	var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
	                        (false ||
	                         util.env("BLUEBIRD_DEBUG") ||
	                         util.env("NODE_ENV") === "development"));

	var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
	    (debugging || util.env("BLUEBIRD_WARNINGS")));

	var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
	    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

	var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
	    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

	Promise.prototype.suppressUnhandledRejections = function() {
	    var target = this._target();
	    target._bitField = ((target._bitField & (~1048576)) |
	                      524288);
	};

	Promise.prototype._ensurePossibleRejectionHandled = function () {
	    if ((this._bitField & 524288) !== 0) return;
	    this._setRejectionIsUnhandled();
	    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	};

	Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	    fireRejectionEvent("rejectionHandled",
	                                  unhandledRejectionHandled, undefined, this);
	};

	Promise.prototype._setReturnedNonUndefined = function() {
	    this._bitField = this._bitField | 268435456;
	};

	Promise.prototype._returnedNonUndefined = function() {
	    return (this._bitField & 268435456) !== 0;
	};

	Promise.prototype._notifyUnhandledRejection = function () {
	    if (this._isRejectionUnhandled()) {
	        var reason = this._settledValue();
	        this._setUnhandledRejectionIsNotified();
	        fireRejectionEvent("unhandledRejection",
	                                      possiblyUnhandledRejection, reason, this);
	    }
	};

	Promise.prototype._setUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField | 262144;
	};

	Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	    this._bitField = this._bitField & (~262144);
	};

	Promise.prototype._isUnhandledRejectionNotified = function () {
	    return (this._bitField & 262144) > 0;
	};

	Promise.prototype._setRejectionIsUnhandled = function () {
	    this._bitField = this._bitField | 1048576;
	};

	Promise.prototype._unsetRejectionIsUnhandled = function () {
	    this._bitField = this._bitField & (~1048576);
	    if (this._isUnhandledRejectionNotified()) {
	        this._unsetUnhandledRejectionIsNotified();
	        this._notifyUnhandledRejectionIsHandled();
	    }
	};

	Promise.prototype._isRejectionUnhandled = function () {
	    return (this._bitField & 1048576) > 0;
	};

	Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
	    return warn(message, shouldUseOwnTrace, promise || this);
	};

	Promise.onPossiblyUnhandledRejection = function (fn) {
	    var domain = getDomain();
	    possiblyUnhandledRejection =
	        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
	                                 : undefined;
	};

	Promise.onUnhandledRejectionHandled = function (fn) {
	    var domain = getDomain();
	    unhandledRejectionHandled =
	        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
	                                 : undefined;
	};

	var disableLongStackTraces = function() {};
	Promise.longStackTraces = function () {
	    if (async.haveItemsQueued() && !config.longStackTraces) {
	        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    if (!config.longStackTraces && longStackTracesIsSupported()) {
	        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
	        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
	        config.longStackTraces = true;
	        disableLongStackTraces = function() {
	            if (async.haveItemsQueued() && !config.longStackTraces) {
	                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	            }
	            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
	            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
	            Context.deactivateLongStackTraces();
	            async.enableTrampoline();
	            config.longStackTraces = false;
	        };
	        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
	        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
	        Context.activateLongStackTraces();
	        async.disableTrampolineIfNecessary();
	    }
	};

	Promise.hasLongStackTraces = function () {
	    return config.longStackTraces && longStackTracesIsSupported();
	};

	var fireDomEvent = (function() {
	    try {
	        var event = document.createEvent("CustomEvent");
	        event.initCustomEvent("testingtheevent", false, true, {});
	        util.global.dispatchEvent(event);
	        return function(name, event) {
	            var domEvent = document.createEvent("CustomEvent");
	            domEvent.initCustomEvent(name.toLowerCase(), false, true, event);
	            return !util.global.dispatchEvent(domEvent);
	        };
	    } catch (e) {}
	    return function() {
	        return false;
	    };
	})();

	var fireGlobalEvent = (function() {
	    if (util.isNode) {
	        return function() {
	            return process.emit.apply(process, arguments);
	        };
	    } else {
	        if (!util.global) {
	            return function() {
	                return false;
	            };
	        }
	        return function(name) {
	            var methodName = "on" + name.toLowerCase();
	            var method = util.global[methodName];
	            if (!method) return false;
	            method.apply(util.global, [].slice.call(arguments, 1));
	            return true;
	        };
	    }
	})();

	function generatePromiseLifecycleEventObject(name, promise) {
	    return {promise: promise};
	}

	var eventToObjectGenerator = {
	    promiseCreated: generatePromiseLifecycleEventObject,
	    promiseFulfilled: generatePromiseLifecycleEventObject,
	    promiseRejected: generatePromiseLifecycleEventObject,
	    promiseResolved: generatePromiseLifecycleEventObject,
	    promiseCancelled: generatePromiseLifecycleEventObject,
	    promiseChained: function(name, promise, child) {
	        return {promise: promise, child: child};
	    },
	    warning: function(name, warning) {
	        return {warning: warning};
	    },
	    unhandledRejection: function (name, reason, promise) {
	        return {reason: reason, promise: promise};
	    },
	    rejectionHandled: generatePromiseLifecycleEventObject
	};

	var activeFireEvent = function (name) {
	    var globalEventFired = false;
	    try {
	        globalEventFired = fireGlobalEvent.apply(null, arguments);
	    } catch (e) {
	        async.throwLater(e);
	        globalEventFired = true;
	    }

	    var domEventFired = false;
	    try {
	        domEventFired = fireDomEvent(name,
	                    eventToObjectGenerator[name].apply(null, arguments));
	    } catch (e) {
	        async.throwLater(e);
	        domEventFired = true;
	    }

	    return domEventFired || globalEventFired;
	};

	Promise.config = function(opts) {
	    opts = Object(opts);
	    if ("longStackTraces" in opts) {
	        if (opts.longStackTraces) {
	            Promise.longStackTraces();
	        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
	            disableLongStackTraces();
	        }
	    }
	    if ("warnings" in opts) {
	        var warningsOption = opts.warnings;
	        config.warnings = !!warningsOption;
	        wForgottenReturn = config.warnings;

	        if (util.isObject(warningsOption)) {
	            if ("wForgottenReturn" in warningsOption) {
	                wForgottenReturn = !!warningsOption.wForgottenReturn;
	            }
	        }
	    }
	    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
	        if (async.haveItemsQueued()) {
	            throw new Error(
	                "cannot enable cancellation after promises are in use");
	        }
	        Promise.prototype._clearCancellationData =
	            cancellationClearCancellationData;
	        Promise.prototype._propagateFrom = cancellationPropagateFrom;
	        Promise.prototype._onCancel = cancellationOnCancel;
	        Promise.prototype._setOnCancel = cancellationSetOnCancel;
	        Promise.prototype._attachCancellationCallback =
	            cancellationAttachCancellationCallback;
	        Promise.prototype._execute = cancellationExecute;
	        propagateFromFunction = cancellationPropagateFrom;
	        config.cancellation = true;
	    }
	    if ("monitoring" in opts) {
	        if (opts.monitoring && !config.monitoring) {
	            config.monitoring = true;
	            Promise.prototype._fireEvent = activeFireEvent;
	        } else if (!opts.monitoring && config.monitoring) {
	            config.monitoring = false;
	            Promise.prototype._fireEvent = defaultFireEvent;
	        }
	    }
	};

	function defaultFireEvent() { return false; }

	Promise.prototype._fireEvent = defaultFireEvent;
	Promise.prototype._execute = function(executor, resolve, reject) {
	    try {
	        executor(resolve, reject);
	    } catch (e) {
	        return e;
	    }
	};
	Promise.prototype._onCancel = function () {};
	Promise.prototype._setOnCancel = function (handler) { ; };
	Promise.prototype._attachCancellationCallback = function(onCancel) {
	    ;
	};
	Promise.prototype._captureStackTrace = function () {};
	Promise.prototype._attachExtraTrace = function () {};
	Promise.prototype._clearCancellationData = function() {};
	Promise.prototype._propagateFrom = function (parent, flags) {
	    ;
	    ;
	};

	function cancellationExecute(executor, resolve, reject) {
	    var promise = this;
	    try {
	        executor(resolve, reject, function(onCancel) {
	            if (typeof onCancel !== "function") {
	                throw new TypeError("onCancel must be a function, got: " +
	                                    util.toString(onCancel));
	            }
	            promise._attachCancellationCallback(onCancel);
	        });
	    } catch (e) {
	        return e;
	    }
	}

	function cancellationAttachCancellationCallback(onCancel) {
	    if (!this.isCancellable()) return this;

	    var previousOnCancel = this._onCancel();
	    if (previousOnCancel !== undefined) {
	        if (util.isArray(previousOnCancel)) {
	            previousOnCancel.push(onCancel);
	        } else {
	            this._setOnCancel([previousOnCancel, onCancel]);
	        }
	    } else {
	        this._setOnCancel(onCancel);
	    }
	}

	function cancellationOnCancel() {
	    return this._onCancelField;
	}

	function cancellationSetOnCancel(onCancel) {
	    this._onCancelField = onCancel;
	}

	function cancellationClearCancellationData() {
	    this._cancellationParent = undefined;
	    this._onCancelField = undefined;
	}

	function cancellationPropagateFrom(parent, flags) {
	    if ((flags & 1) !== 0) {
	        this._cancellationParent = parent;
	        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
	        if (branchesRemainingToCancel === undefined) {
	            branchesRemainingToCancel = 0;
	        }
	        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
	    }
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}

	function bindingPropagateFrom(parent, flags) {
	    if ((flags & 2) !== 0 && parent._isBound()) {
	        this._setBoundTo(parent._boundTo);
	    }
	}
	var propagateFromFunction = bindingPropagateFrom;

	function boundValueFunction() {
	    var ret = this._boundTo;
	    if (ret !== undefined) {
	        if (ret instanceof Promise) {
	            if (ret.isFulfilled()) {
	                return ret.value();
	            } else {
	                return undefined;
	            }
	        }
	    }
	    return ret;
	}

	function longStackTracesCaptureStackTrace() {
	    this._trace = new CapturedTrace(this._peekContext());
	}

	function longStackTracesAttachExtraTrace(error, ignoreSelf) {
	    if (canAttachTrace(error)) {
	        var trace = this._trace;
	        if (trace !== undefined) {
	            if (ignoreSelf) trace = trace._parent;
	        }
	        if (trace !== undefined) {
	            trace.attachExtraTrace(error);
	        } else if (!error.__stackCleaned__) {
	            var parsed = parseStackAndMessage(error);
	            util.notEnumerableProp(error, "stack",
	                parsed.message + "\n" + parsed.stack.join("\n"));
	            util.notEnumerableProp(error, "__stackCleaned__", true);
	        }
	    }
	}

	function checkForgottenReturns(returnValue, promiseCreated, name, promise,
	                               parent) {
	    if (returnValue === undefined && promiseCreated !== null &&
	        wForgottenReturn) {
	        if (parent !== undefined && parent._returnedNonUndefined()) return;
	        var bitField = promise._bitField;
	        if ((bitField & 65535) === 0) return;

	        if (name) name = name + " ";
	        var msg = "a promise was created in a " + name +
	            "handler but was not returned from it";
	        promise._warn(msg, true, promiseCreated);
	    }
	}

	function deprecated(name, replacement) {
	    var message = name +
	        " is deprecated and will be removed in a future version.";
	    if (replacement) message += " Use " + replacement + " instead.";
	    return warn(message);
	}

	function warn(message, shouldUseOwnTrace, promise) {
	    if (!config.warnings) return;
	    var warning = new Warning(message);
	    var ctx;
	    if (shouldUseOwnTrace) {
	        promise._attachExtraTrace(warning);
	    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
	        ctx.attachExtraTrace(warning);
	    } else {
	        var parsed = parseStackAndMessage(warning);
	        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	    }

	    if (!activeFireEvent("warning", warning)) {
	        formatAndLogError(warning, "", true);
	    }
	}

	function reconstructStack(message, stacks) {
	    for (var i = 0; i < stacks.length - 1; ++i) {
	        stacks[i].push("From previous event:");
	        stacks[i] = stacks[i].join("\n");
	    }
	    if (i < stacks.length) {
	        stacks[i] = stacks[i].join("\n");
	    }
	    return message + "\n" + stacks.join("\n");
	}

	function removeDuplicateOrEmptyJumps(stacks) {
	    for (var i = 0; i < stacks.length; ++i) {
	        if (stacks[i].length === 0 ||
	            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
	            stacks.splice(i, 1);
	            i--;
	        }
	    }
	}

	function removeCommonRoots(stacks) {
	    var current = stacks[0];
	    for (var i = 1; i < stacks.length; ++i) {
	        var prev = stacks[i];
	        var currentLastIndex = current.length - 1;
	        var currentLastLine = current[currentLastIndex];
	        var commonRootMeetPoint = -1;

	        for (var j = prev.length - 1; j >= 0; --j) {
	            if (prev[j] === currentLastLine) {
	                commonRootMeetPoint = j;
	                break;
	            }
	        }

	        for (var j = commonRootMeetPoint; j >= 0; --j) {
	            var line = prev[j];
	            if (current[currentLastIndex] === line) {
	                current.pop();
	                currentLastIndex--;
	            } else {
	                break;
	            }
	        }
	        current = prev;
	    }
	}

	function cleanStack(stack) {
	    var ret = [];
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        var isTraceLine = "    (No stack trace)" === line ||
	            stackFramePattern.test(line);
	        var isInternalFrame = isTraceLine && shouldIgnore(line);
	        if (isTraceLine && !isInternalFrame) {
	            if (indentStackFrames && line.charAt(0) !== " ") {
	                line = "    " + line;
	            }
	            ret.push(line);
	        }
	    }
	    return ret;
	}

	function stackFramesAsArray(error) {
	    var stack = error.stack.replace(/\s+$/g, "").split("\n");
	    for (var i = 0; i < stack.length; ++i) {
	        var line = stack[i];
	        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	            break;
	        }
	    }
	    if (i > 0) {
	        stack = stack.slice(i);
	    }
	    return stack;
	}

	function parseStackAndMessage(error) {
	    var stack = error.stack;
	    var message = error.toString();
	    stack = typeof stack === "string" && stack.length > 0
	                ? stackFramesAsArray(error) : ["    (No stack trace)"];
	    return {
	        message: message,
	        stack: cleanStack(stack)
	    };
	}

	function formatAndLogError(error, title, isSoft) {
	    if (typeof console !== "undefined") {
	        var message;
	        if (util.isObject(error)) {
	            var stack = error.stack;
	            message = title + formatStack(stack, error);
	        } else {
	            message = title + String(error);
	        }
	        if (typeof printWarning === "function") {
	            printWarning(message, isSoft);
	        } else if (typeof console.log === "function" ||
	            typeof console.log === "object") {
	            console.log(message);
	        }
	    }
	}

	function fireRejectionEvent(name, localHandler, reason, promise) {
	    var localEventFired = false;
	    try {
	        if (typeof localHandler === "function") {
	            localEventFired = true;
	            if (name === "rejectionHandled") {
	                localHandler(promise);
	            } else {
	                localHandler(reason, promise);
	            }
	        }
	    } catch (e) {
	        async.throwLater(e);
	    }

	    if (name === "unhandledRejection") {
	        if (!activeFireEvent(name, reason, promise) && !localEventFired) {
	            formatAndLogError(reason, "Unhandled rejection ");
	        }
	    } else {
	        activeFireEvent(name, promise);
	    }
	}

	function formatNonError(obj) {
	    var str;
	    if (typeof obj === "function") {
	        str = "[function " +
	            (obj.name || "anonymous") +
	            "]";
	    } else {
	        str = obj && typeof obj.toString === "function"
	            ? obj.toString() : util.toString(obj);
	        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	        if (ruselessToString.test(str)) {
	            try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	            }
	            catch(e) {

	            }
	        }
	        if (str.length === 0) {
	            str = "(empty array)";
	        }
	    }
	    return ("(<" + snip(str) + ">, no stack trace)");
	}

	function snip(str) {
	    var maxChars = 41;
	    if (str.length < maxChars) {
	        return str;
	    }
	    return str.substr(0, maxChars - 3) + "...";
	}

	function longStackTracesIsSupported() {
	    return typeof captureStackTrace === "function";
	}

	var shouldIgnore = function() { return false; };
	var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	function parseLineInfo(line) {
	    var matches = line.match(parseLineInfoRegex);
	    if (matches) {
	        return {
	            fileName: matches[1],
	            line: parseInt(matches[2], 10)
	        };
	    }
	}

	function setBounds(firstLineError, lastLineError) {
	    if (!longStackTracesIsSupported()) return;
	    var firstStackLines = firstLineError.stack.split("\n");
	    var lastStackLines = lastLineError.stack.split("\n");
	    var firstIndex = -1;
	    var lastIndex = -1;
	    var firstFileName;
	    var lastFileName;
	    for (var i = 0; i < firstStackLines.length; ++i) {
	        var result = parseLineInfo(firstStackLines[i]);
	        if (result) {
	            firstFileName = result.fileName;
	            firstIndex = result.line;
	            break;
	        }
	    }
	    for (var i = 0; i < lastStackLines.length; ++i) {
	        var result = parseLineInfo(lastStackLines[i]);
	        if (result) {
	            lastFileName = result.fileName;
	            lastIndex = result.line;
	            break;
	        }
	    }
	    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
	        firstFileName !== lastFileName || firstIndex >= lastIndex) {
	        return;
	    }

	    shouldIgnore = function(line) {
	        if (bluebirdFramePattern.test(line)) return true;
	        var info = parseLineInfo(line);
	        if (info) {
	            if (info.fileName === firstFileName &&
	                (firstIndex <= info.line && info.line <= lastIndex)) {
	                return true;
	            }
	        }
	        return false;
	    };
	}

	function CapturedTrace(parent) {
	    this._parent = parent;
	    this._promisesCreated = 0;
	    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	    captureStackTrace(this, CapturedTrace);
	    if (length > 32) this.uncycle();
	}
	util.inherits(CapturedTrace, Error);
	Context.CapturedTrace = CapturedTrace;

	CapturedTrace.prototype.uncycle = function() {
	    var length = this._length;
	    if (length < 2) return;
	    var nodes = [];
	    var stackToIndex = {};

	    for (var i = 0, node = this; node !== undefined; ++i) {
	        nodes.push(node);
	        node = node._parent;
	    }
	    length = this._length = i;
	    for (var i = length - 1; i >= 0; --i) {
	        var stack = nodes[i].stack;
	        if (stackToIndex[stack] === undefined) {
	            stackToIndex[stack] = i;
	        }
	    }
	    for (var i = 0; i < length; ++i) {
	        var currentStack = nodes[i].stack;
	        var index = stackToIndex[currentStack];
	        if (index !== undefined && index !== i) {
	            if (index > 0) {
	                nodes[index - 1]._parent = undefined;
	                nodes[index - 1]._length = 1;
	            }
	            nodes[i]._parent = undefined;
	            nodes[i]._length = 1;
	            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

	            if (index < length - 1) {
	                cycleEdgeNode._parent = nodes[index + 1];
	                cycleEdgeNode._parent.uncycle();
	                cycleEdgeNode._length =
	                    cycleEdgeNode._parent._length + 1;
	            } else {
	                cycleEdgeNode._parent = undefined;
	                cycleEdgeNode._length = 1;
	            }
	            var currentChildLength = cycleEdgeNode._length + 1;
	            for (var j = i - 2; j >= 0; --j) {
	                nodes[j]._length = currentChildLength;
	                currentChildLength++;
	            }
	            return;
	        }
	    }
	};

	CapturedTrace.prototype.attachExtraTrace = function(error) {
	    if (error.__stackCleaned__) return;
	    this.uncycle();
	    var parsed = parseStackAndMessage(error);
	    var message = parsed.message;
	    var stacks = [parsed.stack];

	    var trace = this;
	    while (trace !== undefined) {
	        stacks.push(cleanStack(trace.stack.split("\n")));
	        trace = trace._parent;
	    }
	    removeCommonRoots(stacks);
	    removeDuplicateOrEmptyJumps(stacks);
	    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
	    util.notEnumerableProp(error, "__stackCleaned__", true);
	};

	var captureStackTrace = (function stackDetection() {
	    var v8stackFramePattern = /^\s*at\s*/;
	    var v8stackFormatter = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if (error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    if (typeof Error.stackTraceLimit === "number" &&
	        typeof Error.captureStackTrace === "function") {
	        Error.stackTraceLimit += 6;
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        var captureStackTrace = Error.captureStackTrace;

	        shouldIgnore = function(line) {
	            return bluebirdFramePattern.test(line);
	        };
	        return function(receiver, ignoreUntil) {
	            Error.stackTraceLimit += 6;
	            captureStackTrace(receiver, ignoreUntil);
	            Error.stackTraceLimit -= 6;
	        };
	    }
	    var err = new Error();

	    if (typeof err.stack === "string" &&
	        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	        stackFramePattern = /@/;
	        formatStack = v8stackFormatter;
	        indentStackFrames = true;
	        return function captureStackTrace(o) {
	            o.stack = new Error().stack;
	        };
	    }

	    var hasStackAfterThrow;
	    try { throw new Error(); }
	    catch(e) {
	        hasStackAfterThrow = ("stack" in e);
	    }
	    if (!("stack" in err) && hasStackAfterThrow &&
	        typeof Error.stackTraceLimit === "number") {
	        stackFramePattern = v8stackFramePattern;
	        formatStack = v8stackFormatter;
	        return function captureStackTrace(o) {
	            Error.stackTraceLimit += 6;
	            try { throw new Error(); }
	            catch(e) { o.stack = e.stack; }
	            Error.stackTraceLimit -= 6;
	        };
	    }

	    formatStack = function(stack, error) {
	        if (typeof stack === "string") return stack;

	        if ((typeof error === "object" ||
	            typeof error === "function") &&
	            error.name !== undefined &&
	            error.message !== undefined) {
	            return error.toString();
	        }
	        return formatNonError(error);
	    };

	    return null;

	})([]);

	if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	    printWarning = function (message) {
	        console.warn(message);
	    };
	    if (util.isNode && process.stderr.isTTY) {
	        printWarning = function(message, isSoft) {
	            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
	            console.warn(color + message + "\u001b[0m\n");
	        };
	    } else if (!util.isNode && typeof (new Error().stack) === "string") {
	        printWarning = function(message, isSoft) {
	            console.warn("%c" + message,
	                        isSoft ? "color: darkorange" : "color: red");
	        };
	    }
	}

	var config = {
	    warnings: warnings,
	    longStackTraces: false,
	    cancellation: false,
	    monitoring: false
	};

	if (longStackTraces) Promise.longStackTraces();

	return {
	    longStackTraces: function() {
	        return config.longStackTraces;
	    },
	    warnings: function() {
	        return config.warnings;
	    },
	    cancellation: function() {
	        return config.cancellation;
	    },
	    monitoring: function() {
	        return config.monitoring;
	    },
	    propagateFromFunction: function() {
	        return propagateFromFunction;
	    },
	    boundValueFunction: function() {
	        return boundValueFunction;
	    },
	    checkForgottenReturns: checkForgottenReturns,
	    setBounds: setBounds,
	    warn: warn,
	    deprecated: deprecated,
	    CapturedTrace: CapturedTrace,
	    fireDomEvent: fireDomEvent,
	    fireGlobalEvent: fireGlobalEvent
	};
	};


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, tryConvertToPromise) {
	var util = __webpack_require__(288);
	var CancellationError = Promise.CancellationError;
	var errorObj = util.errorObj;

	function PassThroughHandlerContext(promise, type, handler) {
	    this.promise = promise;
	    this.type = type;
	    this.handler = handler;
	    this.called = false;
	    this.cancelPromise = null;
	}

	PassThroughHandlerContext.prototype.isFinallyHandler = function() {
	    return this.type === 0;
	};

	function FinallyHandlerCancelReaction(finallyHandler) {
	    this.finallyHandler = finallyHandler;
	}

	FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
	    checkCancel(this.finallyHandler);
	};

	function checkCancel(ctx, reason) {
	    if (ctx.cancelPromise != null) {
	        if (arguments.length > 1) {
	            ctx.cancelPromise._reject(reason);
	        } else {
	            ctx.cancelPromise._cancel();
	        }
	        ctx.cancelPromise = null;
	        return true;
	    }
	    return false;
	}

	function succeed() {
	    return finallyHandler.call(this, this.promise._target()._settledValue());
	}
	function fail(reason) {
	    if (checkCancel(this, reason)) return;
	    errorObj.e = reason;
	    return errorObj;
	}
	function finallyHandler(reasonOrValue) {
	    var promise = this.promise;
	    var handler = this.handler;

	    if (!this.called) {
	        this.called = true;
	        var ret = this.isFinallyHandler()
	            ? handler.call(promise._boundValue())
	            : handler.call(promise._boundValue(), reasonOrValue);
	        if (ret !== undefined) {
	            promise._setReturnedNonUndefined();
	            var maybePromise = tryConvertToPromise(ret, promise);
	            if (maybePromise instanceof Promise) {
	                if (this.cancelPromise != null) {
	                    if (maybePromise.isCancelled()) {
	                        var reason =
	                            new CancellationError("late cancellation observer");
	                        promise._attachExtraTrace(reason);
	                        errorObj.e = reason;
	                        return errorObj;
	                    } else if (maybePromise.isPending()) {
	                        maybePromise._attachCancellationCallback(
	                            new FinallyHandlerCancelReaction(this));
	                    }
	                }
	                return maybePromise._then(
	                    succeed, fail, undefined, this, undefined);
	            }
	        }
	    }

	    if (promise.isRejected()) {
	        checkCancel(this);
	        errorObj.e = reasonOrValue;
	        return errorObj;
	    } else {
	        checkCancel(this);
	        return reasonOrValue;
	    }
	}

	Promise.prototype._passThrough = function(handler, type, success, fail) {
	    if (typeof handler !== "function") return this.then();
	    return this._then(success,
	                      fail,
	                      undefined,
	                      new PassThroughHandlerContext(this, type, handler),
	                      undefined);
	};

	Promise.prototype.lastly =
	Promise.prototype["finally"] = function (handler) {
	    return this._passThrough(handler,
	                             0,
	                             finallyHandler,
	                             finallyHandler);
	};

	Promise.prototype.tap = function (handler) {
	    return this._passThrough(handler, 1, finallyHandler);
	};

	return PassThroughHandlerContext;
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(NEXT_FILTER) {
	var util = __webpack_require__(288);
	var getKeys = __webpack_require__(289).keys;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	function catchFilter(instances, cb, promise) {
	    return function(e) {
	        var boundTo = promise._boundValue();
	        predicateLoop: for (var i = 0; i < instances.length; ++i) {
	            var item = instances[i];

	            if (item === Error ||
	                (item != null && item.prototype instanceof Error)) {
	                if (e instanceof item) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (typeof item === "function") {
	                var matchesPredicate = tryCatch(item).call(boundTo, e);
	                if (matchesPredicate === errorObj) {
	                    return matchesPredicate;
	                } else if (matchesPredicate) {
	                    return tryCatch(cb).call(boundTo, e);
	                }
	            } else if (util.isObject(e)) {
	                var keys = getKeys(item);
	                for (var j = 0; j < keys.length; ++j) {
	                    var key = keys[j];
	                    if (item[key] != e[key]) {
	                        continue predicateLoop;
	                    }
	                }
	                return tryCatch(cb).call(boundTo, e);
	            }
	        }
	        return NEXT_FILTER;
	    };
	}

	return catchFilter;
	};


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var util = __webpack_require__(288);
	var maybeWrapAsError = util.maybeWrapAsError;
	var errors = __webpack_require__(293);
	var OperationalError = errors.OperationalError;
	var es5 = __webpack_require__(289);

	function isUntypedError(obj) {
	    return obj instanceof Error &&
	        es5.getPrototypeOf(obj) === Error.prototype;
	}

	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
	    var ret;
	    if (isUntypedError(obj)) {
	        ret = new OperationalError(obj);
	        ret.name = obj.name;
	        ret.message = obj.message;
	        ret.stack = obj.stack;
	        var keys = es5.keys(obj);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    util.markAsOriginatingFromRejection(obj);
	    return obj;
	}

	function nodebackForPromise(promise, multiArgs) {
	    return function(err, value) {
	        if (promise === null) return;
	        if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	        } else if (!multiArgs) {
	            promise._fulfill(value);
	        } else {
	            var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};
	            promise._fulfill(args);
	        }
	        promise = null;
	    };
	}

	module.exports = nodebackForPromise;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports =
	function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
	var util = __webpack_require__(288);
	var tryCatch = util.tryCatch;

	Promise.method = function (fn) {
	    if (typeof fn !== "function") {
	        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
	    }
	    return function () {
	        var ret = new Promise(INTERNAL);
	        ret._captureStackTrace();
	        ret._pushContext();
	        var value = tryCatch(fn).apply(this, arguments);
	        var promiseCreated = ret._popContext();
	        debug.checkForgottenReturns(
	            value, promiseCreated, "Promise.method", ret);
	        ret._resolveFromSyncValue(value);
	        return ret;
	    };
	};

	Promise.attempt = Promise["try"] = function (fn) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var ret = new Promise(INTERNAL);
	    ret._captureStackTrace();
	    ret._pushContext();
	    var value;
	    if (arguments.length > 1) {
	        debug.deprecated("calling Promise.try with more than 1 argument");
	        var arg = arguments[1];
	        var ctx = arguments[2];
	        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
	                                  : tryCatch(fn).call(ctx, arg);
	    } else {
	        value = tryCatch(fn)();
	    }
	    var promiseCreated = ret._popContext();
	    debug.checkForgottenReturns(
	        value, promiseCreated, "Promise.try", ret);
	    ret._resolveFromSyncValue(value);
	    return ret;
	};

	Promise.prototype._resolveFromSyncValue = function (value) {
	    if (value === util.errorObj) {
	        this._rejectCallback(value.e, false);
	    } else {
	        this._resolveCallback(value, true);
	    }
	};
	};


/***/ },
/* 302 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
	var calledBind = false;
	var rejectThis = function(_, e) {
	    this._reject(e);
	};

	var targetRejected = function(e, context) {
	    context.promiseRejectionQueued = true;
	    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	};

	var bindingResolved = function(thisArg, context) {
	    if (((this._bitField & 50397184) === 0)) {
	        this._resolveCallback(context.target);
	    }
	};

	var bindingRejected = function(e, context) {
	    if (!context.promiseRejectionQueued) this._reject(e);
	};

	Promise.prototype.bind = function (thisArg) {
	    if (!calledBind) {
	        calledBind = true;
	        Promise.prototype._propagateFrom = debug.propagateFromFunction();
	        Promise.prototype._boundValue = debug.boundValueFunction();
	    }
	    var maybePromise = tryConvertToPromise(thisArg);
	    var ret = new Promise(INTERNAL);
	    ret._propagateFrom(this, 1);
	    var target = this._target();
	    ret._setBoundTo(maybePromise);
	    if (maybePromise instanceof Promise) {
	        var context = {
	            promiseRejectionQueued: false,
	            promise: ret,
	            target: target,
	            bindingPromise: maybePromise
	        };
	        target._then(INTERNAL, targetRejected, undefined, ret, context);
	        maybePromise._then(
	            bindingResolved, bindingRejected, undefined, ret, context);
	        ret._setOnCancel(maybePromise);
	    } else {
	        ret._resolveCallback(target);
	    }
	    return ret;
	};

	Promise.prototype._setBoundTo = function (obj) {
	    if (obj !== undefined) {
	        this._bitField = this._bitField | 2097152;
	        this._boundTo = obj;
	    } else {
	        this._bitField = this._bitField & (~2097152);
	    }
	};

	Promise.prototype._isBound = function () {
	    return (this._bitField & 2097152) === 2097152;
	};

	Promise.bind = function (thisArg, value) {
	    return Promise.resolve(value).bind(thisArg);
	};
	};


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, PromiseArray, apiRejection, debug) {
	var util = __webpack_require__(288);
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var async = Promise._async;

	Promise.prototype["break"] = Promise.prototype.cancel = function() {
	    if (!debug.cancellation()) return this._warn("cancellation is disabled");

	    var promise = this;
	    var child = promise;
	    while (promise.isCancellable()) {
	        if (!promise._cancelBy(child)) {
	            if (child._isFollowing()) {
	                child._followee().cancel();
	            } else {
	                child._cancelBranched();
	            }
	            break;
	        }

	        var parent = promise._cancellationParent;
	        if (parent == null || !parent.isCancellable()) {
	            if (promise._isFollowing()) {
	                promise._followee().cancel();
	            } else {
	                promise._cancelBranched();
	            }
	            break;
	        } else {
	            if (promise._isFollowing()) promise._followee().cancel();
	            child = promise;
	            promise = parent;
	        }
	    }
	};

	Promise.prototype._branchHasCancelled = function() {
	    this._branchesRemainingToCancel--;
	};

	Promise.prototype._enoughBranchesHaveCancelled = function() {
	    return this._branchesRemainingToCancel === undefined ||
	           this._branchesRemainingToCancel <= 0;
	};

	Promise.prototype._cancelBy = function(canceller) {
	    if (canceller === this) {
	        this._branchesRemainingToCancel = 0;
	        this._invokeOnCancel();
	        return true;
	    } else {
	        this._branchHasCancelled();
	        if (this._enoughBranchesHaveCancelled()) {
	            this._invokeOnCancel();
	            return true;
	        }
	    }
	    return false;
	};

	Promise.prototype._cancelBranched = function() {
	    if (this._enoughBranchesHaveCancelled()) {
	        this._cancel();
	    }
	};

	Promise.prototype._cancel = function() {
	    if (!this.isCancellable()) return;

	    this._setCancelled();
	    async.invoke(this._cancelPromises, this, undefined);
	};

	Promise.prototype._cancelPromises = function() {
	    if (this._length() > 0) this._settlePromises();
	};

	Promise.prototype._unsetOnCancel = function() {
	    this._onCancelField = undefined;
	};

	Promise.prototype.isCancellable = function() {
	    return this.isPending() && !this.isCancelled();
	};

	Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
	    if (util.isArray(onCancelCallback)) {
	        for (var i = 0; i < onCancelCallback.length; ++i) {
	            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
	        }
	    } else if (onCancelCallback !== undefined) {
	        if (typeof onCancelCallback === "function") {
	            if (!internalOnly) {
	                var e = tryCatch(onCancelCallback).call(this._boundValue());
	                if (e === errorObj) {
	                    this._attachExtraTrace(e.e);
	                    async.throwLater(e.e);
	                }
	            }
	        } else {
	            onCancelCallback._resultCancelled(this);
	        }
	    }
	};

	Promise.prototype._invokeOnCancel = function() {
	    var onCancelCallback = this._onCancel();
	    this._unsetOnCancel();
	    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
	};

	Promise.prototype._invokeInternalOnCancel = function() {
	    if (this.isCancellable()) {
	        this._doInvokeOnCancel(this._onCancel(), true);
	        this._unsetOnCancel();
	    }
	};

	Promise.prototype._resultCancelled = function() {
	    this.cancel();
	};

	};


/***/ },
/* 304 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise) {
	function returner() {
	    return this.value;
	}
	function thrower() {
	    throw this.reason;
	}

	Promise.prototype["return"] =
	Promise.prototype.thenReturn = function (value) {
	    if (value instanceof Promise) value.suppressUnhandledRejections();
	    return this._then(
	        returner, undefined, undefined, {value: value}, undefined);
	};

	Promise.prototype["throw"] =
	Promise.prototype.thenThrow = function (reason) {
	    return this._then(
	        thrower, undefined, undefined, {reason: reason}, undefined);
	};

	Promise.prototype.catchThrow = function (reason) {
	    if (arguments.length <= 1) {
	        return this._then(
	            undefined, thrower, undefined, {reason: reason}, undefined);
	    } else {
	        var _reason = arguments[1];
	        var handler = function() {throw _reason;};
	        return this.caught(reason, handler);
	    }
	};

	Promise.prototype.catchReturn = function (value) {
	    if (arguments.length <= 1) {
	        if (value instanceof Promise) value.suppressUnhandledRejections();
	        return this._then(
	            undefined, returner, undefined, {value: value}, undefined);
	    } else {
	        var _value = arguments[1];
	        if (_value instanceof Promise) _value.suppressUnhandledRejections();
	        var handler = function() {return _value;};
	        return this.caught(value, handler);
	    }
	};
	};


/***/ },
/* 305 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise) {
	function PromiseInspection(promise) {
	    if (promise !== undefined) {
	        promise = promise._target();
	        this._bitField = promise._bitField;
	        this._settledValueField = promise._isFateSealed()
	            ? promise._settledValue() : undefined;
	    }
	    else {
	        this._bitField = 0;
	        this._settledValueField = undefined;
	    }
	}

	PromiseInspection.prototype._settledValue = function() {
	    return this._settledValueField;
	};

	var value = PromiseInspection.prototype.value = function () {
	    if (!this.isFulfilled()) {
	        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};

	var reason = PromiseInspection.prototype.error =
	PromiseInspection.prototype.reason = function () {
	    if (!this.isRejected()) {
	        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    return this._settledValue();
	};

	var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
	    return (this._bitField & 33554432) !== 0;
	};

	var isRejected = PromiseInspection.prototype.isRejected = function () {
	    return (this._bitField & 16777216) !== 0;
	};

	var isPending = PromiseInspection.prototype.isPending = function () {
	    return (this._bitField & 50397184) === 0;
	};

	var isResolved = PromiseInspection.prototype.isResolved = function () {
	    return (this._bitField & 50331648) !== 0;
	};

	PromiseInspection.prototype.isCancelled =
	Promise.prototype._isCancelled = function() {
	    return (this._bitField & 65536) === 65536;
	};

	Promise.prototype.isCancelled = function() {
	    return this._target()._isCancelled();
	};

	Promise.prototype.isPending = function() {
	    return isPending.call(this._target());
	};

	Promise.prototype.isRejected = function() {
	    return isRejected.call(this._target());
	};

	Promise.prototype.isFulfilled = function() {
	    return isFulfilled.call(this._target());
	};

	Promise.prototype.isResolved = function() {
	    return isResolved.call(this._target());
	};

	Promise.prototype.value = function() {
	    return value.call(this._target());
	};

	Promise.prototype.reason = function() {
	    var target = this._target();
	    target._unsetRejectionIsUnhandled();
	    return reason.call(target);
	};

	Promise.prototype._value = function() {
	    return this._settledValue();
	};

	Promise.prototype._reason = function() {
	    this._unsetRejectionIsUnhandled();
	    return this._settledValue();
	};

	Promise.PromiseInspection = PromiseInspection;
	};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports =
	function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
	var util = __webpack_require__(288);
	var canEvaluate = util.canEvaluate;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var reject;

	if (true) {
	if (canEvaluate) {
	    var thenCallback = function(i) {
	        return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	    };

	    var promiseSetter = function(i) {
	        return new Function("promise", "holder", "                           \n\
	            'use strict';                                                    \n\
	            holder.pIndex = promise;                                         \n\
	            ".replace(/Index/g, i));
	    };

	    var generateHolderClass = function(total) {
	        var props = new Array(total);
	        for (var i = 0; i < props.length; ++i) {
	            props[i] = "this.p" + (i+1);
	        }
	        var assignment = props.join(" = ") + " = null;";
	        var cancellationCode= "var promise;\n" + props.map(function(prop) {
	            return "                                                         \n\
	                promise = " + prop + ";                                      \n\
	                if (promise instanceof Promise) {                            \n\
	                    promise.cancel();                                        \n\
	                }                                                            \n\
	            ";
	        }).join("\n");
	        var passedArguments = props.join(", ");
	        var name = "Holder$" + total;


	        var code = "return function(tryCatch, errorObj, Promise) {           \n\
	            'use strict';                                                    \n\
	            function [TheName](fn) {                                         \n\
	                [TheProperties]                                              \n\
	                this.fn = fn;                                                \n\
	                this.now = 0;                                                \n\
	            }                                                                \n\
	            [TheName].prototype.checkFulfillment = function(promise) {       \n\
	                var now = ++this.now;                                        \n\
	                if (now === [TheTotal]) {                                    \n\
	                    promise._pushContext();                                  \n\
	                    var callback = this.fn;                                  \n\
	                    var ret = tryCatch(callback)([ThePassedArguments]);      \n\
	                    promise._popContext();                                   \n\
	                    if (ret === errorObj) {                                  \n\
	                        promise._rejectCallback(ret.e, false);               \n\
	                    } else {                                                 \n\
	                        promise._resolveCallback(ret);                       \n\
	                    }                                                        \n\
	                }                                                            \n\
	            };                                                               \n\
	                                                                             \n\
	            [TheName].prototype._resultCancelled = function() {              \n\
	                [CancellationCode]                                           \n\
	            };                                                               \n\
	                                                                             \n\
	            return [TheName];                                                \n\
	        }(tryCatch, errorObj, Promise);                                      \n\
	        ";

	        code = code.replace(/\[TheName\]/g, name)
	            .replace(/\[TheTotal\]/g, total)
	            .replace(/\[ThePassedArguments\]/g, passedArguments)
	            .replace(/\[TheProperties\]/g, assignment)
	            .replace(/\[CancellationCode\]/g, cancellationCode);

	        return new Function("tryCatch", "errorObj", "Promise", code)
	                           (tryCatch, errorObj, Promise);
	    };

	    var holderClasses = [];
	    var thenCallbacks = [];
	    var promiseSetters = [];

	    for (var i = 0; i < 8; ++i) {
	        holderClasses.push(generateHolderClass(i + 1));
	        thenCallbacks.push(thenCallback(i + 1));
	        promiseSetters.push(promiseSetter(i + 1));
	    }

	    reject = function (reason) {
	        this._reject(reason);
	    };
	}}

	Promise.join = function () {
	    var last = arguments.length - 1;
	    var fn;
	    if (last > 0 && typeof arguments[last] === "function") {
	        fn = arguments[last];
	        if (true) {
	            if (last <= 8 && canEvaluate) {
	                var ret = new Promise(INTERNAL);
	                ret._captureStackTrace();
	                var HolderClass = holderClasses[last - 1];
	                var holder = new HolderClass(fn);
	                var callbacks = thenCallbacks;

	                for (var i = 0; i < last; ++i) {
	                    var maybePromise = tryConvertToPromise(arguments[i], ret);
	                    if (maybePromise instanceof Promise) {
	                        maybePromise = maybePromise._target();
	                        var bitField = maybePromise._bitField;
	                        ;
	                        if (((bitField & 50397184) === 0)) {
	                            maybePromise._then(callbacks[i], reject,
	                                               undefined, ret, holder);
	                            promiseSetters[i](maybePromise, holder);
	                        } else if (((bitField & 33554432) !== 0)) {
	                            callbacks[i].call(ret,
	                                              maybePromise._value(), holder);
	                        } else if (((bitField & 16777216) !== 0)) {
	                            ret._reject(maybePromise._reason());
	                        } else {
	                            ret._cancel();
	                        }
	                    } else {
	                        callbacks[i].call(ret, maybePromise, holder);
	                    }
	                }
	                if (!ret._isFateSealed()) {
	                    ret._setAsyncGuaranteed();
	                    ret._setOnCancel(holder);
	                }
	                return ret;
	            }
	        }
	    }
	    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];};
	    if (fn) args.pop();
	    var ret = new PromiseArray(args).promise();
	    return fn !== undefined ? ret.spread(fn) : ret;
	};

	};


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = __webpack_require__(288);
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;
	var EMPTY_ARRAY = [];

	function MappingPromiseArray(promises, fn, limit, _filter) {
	    this.constructor$(promises);
	    this._promise._captureStackTrace();
	    var domain = getDomain();
	    this._callback = domain === null ? fn : domain.bind(fn);
	    this._preservedValues = _filter === INTERNAL
	        ? new Array(this.length())
	        : null;
	    this._limit = limit;
	    this._inFlight = 0;
	    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
	    this._init$(undefined, -2);
	}
	util.inherits(MappingPromiseArray, PromiseArray);

	MappingPromiseArray.prototype._init = function () {};

	MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var values = this._values;
	    var length = this.length();
	    var preservedValues = this._preservedValues;
	    var limit = this._limit;

	    if (index < 0) {
	        index = (index * -1) - 1;
	        values[index] = value;
	        if (limit >= 1) {
	            this._inFlight--;
	            this._drainQueue();
	            if (this._isResolved()) return true;
	        }
	    } else {
	        if (limit >= 1 && this._inFlight >= limit) {
	            values[index] = value;
	            this._queue.push(index);
	            return false;
	        }
	        if (preservedValues !== null) preservedValues[index] = value;

	        var promise = this._promise;
	        var callback = this._callback;
	        var receiver = promise._boundValue();
	        promise._pushContext();
	        var ret = tryCatch(callback).call(receiver, value, index, length);
	        var promiseCreated = promise._popContext();
	        debug.checkForgottenReturns(
	            ret,
	            promiseCreated,
	            preservedValues !== null ? "Promise.filter" : "Promise.map",
	            promise
	        );
	        if (ret === errorObj) {
	            this._reject(ret.e);
	            return true;
	        }

	        var maybePromise = tryConvertToPromise(ret, this._promise);
	        if (maybePromise instanceof Promise) {
	            maybePromise = maybePromise._target();
	            var bitField = maybePromise._bitField;
	            ;
	            if (((bitField & 50397184) === 0)) {
	                if (limit >= 1) this._inFlight++;
	                values[index] = maybePromise;
	                maybePromise._proxy(this, (index + 1) * -1);
	                return false;
	            } else if (((bitField & 33554432) !== 0)) {
	                ret = maybePromise._value();
	            } else if (((bitField & 16777216) !== 0)) {
	                this._reject(maybePromise._reason());
	                return true;
	            } else {
	                this._cancel();
	                return true;
	            }
	        }
	        values[index] = ret;
	    }
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= length) {
	        if (preservedValues !== null) {
	            this._filter(values, preservedValues);
	        } else {
	            this._resolve(values);
	        }
	        return true;
	    }
	    return false;
	};

	MappingPromiseArray.prototype._drainQueue = function () {
	    var queue = this._queue;
	    var limit = this._limit;
	    var values = this._values;
	    while (queue.length > 0 && this._inFlight < limit) {
	        if (this._isResolved()) return;
	        var index = queue.pop();
	        this._promiseFulfilled(values[index], index);
	    }
	};

	MappingPromiseArray.prototype._filter = function (booleans, values) {
	    var len = values.length;
	    var ret = new Array(len);
	    var j = 0;
	    for (var i = 0; i < len; ++i) {
	        if (booleans[i]) ret[j++] = values[i];
	    }
	    ret.length = j;
	    this._resolve(ret);
	};

	MappingPromiseArray.prototype.preservedValues = function () {
	    return this._preservedValues;
	};

	function map(promises, fn, options, _filter) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var limit = typeof options === "object" && options !== null
	        ? options.concurrency
	        : 0;
	    limit = typeof limit === "number" &&
	        isFinite(limit) && limit >= 1 ? limit : 0;
	    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
	}

	Promise.prototype.map = function (fn, options) {
	    return map(this, fn, options, null);
	};

	Promise.map = function (promises, fn, options, _filter) {
	    return map(promises, fn, options, _filter);
	};


	};


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function (Promise, apiRejection, tryConvertToPromise,
	    createContext, INTERNAL, debug) {
	    var util = __webpack_require__(288);
	    var TypeError = __webpack_require__(293).TypeError;
	    var inherits = __webpack_require__(288).inherits;
	    var errorObj = util.errorObj;
	    var tryCatch = util.tryCatch;

	    function thrower(e) {
	        setTimeout(function(){throw e;}, 0);
	    }

	    function castPreservingDisposable(thenable) {
	        var maybePromise = tryConvertToPromise(thenable);
	        if (maybePromise !== thenable &&
	            typeof thenable._isDisposable === "function" &&
	            typeof thenable._getDisposer === "function" &&
	            thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	        }
	        return maybePromise;
	    }
	    function dispose(resources, inspection) {
	        var i = 0;
	        var len = resources.length;
	        var ret = new Promise(INTERNAL);
	        function iterator() {
	            if (i >= len) return ret._fulfill();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise &&
	                maybePromise._isDisposable()) {
	                try {
	                    maybePromise = tryConvertToPromise(
	                        maybePromise._getDisposer().tryDispose(inspection),
	                        resources.promise);
	                } catch (e) {
	                    return thrower(e);
	                }
	                if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower,
	                                              null, null, null);
	                }
	            }
	            iterator();
	        }
	        iterator();
	        return ret;
	    }

	    function Disposer(data, promise, context) {
	        this._data = data;
	        this._promise = promise;
	        this._context = context;
	    }

	    Disposer.prototype.data = function () {
	        return this._data;
	    };

	    Disposer.prototype.promise = function () {
	        return this._promise;
	    };

	    Disposer.prototype.resource = function () {
	        if (this.promise().isFulfilled()) {
	            return this.promise().value();
	        }
	        return null;
	    };

	    Disposer.prototype.tryDispose = function(inspection) {
	        var resource = this.resource();
	        var context = this._context;
	        if (context !== undefined) context._pushContext();
	        var ret = resource !== null
	            ? this.doDispose(resource, inspection) : null;
	        if (context !== undefined) context._popContext();
	        this._promise._unsetDisposable();
	        this._data = null;
	        return ret;
	    };

	    Disposer.isDisposer = function (d) {
	        return (d != null &&
	                typeof d.resource === "function" &&
	                typeof d.tryDispose === "function");
	    };

	    function FunctionDisposer(fn, promise, context) {
	        this.constructor$(fn, promise, context);
	    }
	    inherits(FunctionDisposer, Disposer);

	    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	        var fn = this.data();
	        return fn.call(resource, resource, inspection);
	    };

	    function maybeUnwrapDisposer(value) {
	        if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	        }
	        return value;
	    }

	    function ResourceList(length) {
	        this.length = length;
	        this.promise = null;
	        this[length-1] = null;
	    }

	    ResourceList.prototype._resultCancelled = function() {
	        var len = this.length;
	        for (var i = 0; i < len; ++i) {
	            var item = this[i];
	            if (item instanceof Promise) {
	                item.cancel();
	            }
	        }
	    };

	    Promise.using = function () {
	        var len = arguments.length;
	        if (len < 2) return apiRejection(
	                        "you must pass at least 2 arguments to Promise.using");
	        var fn = arguments[len - 1];
	        if (typeof fn !== "function") {
	            return apiRejection("expecting a function but got " + util.classString(fn));
	        }
	        var input;
	        var spreadArgs = true;
	        if (len === 2 && Array.isArray(arguments[0])) {
	            input = arguments[0];
	            len = input.length;
	            spreadArgs = false;
	        } else {
	            input = arguments;
	            len--;
	        }
	        var resources = new ResourceList(len);
	        for (var i = 0; i < len; ++i) {
	            var resource = input[i];
	            if (Disposer.isDisposer(resource)) {
	                var disposer = resource;
	                resource = resource.promise();
	                resource._setDisposable(disposer);
	            } else {
	                var maybePromise = tryConvertToPromise(resource);
	                if (maybePromise instanceof Promise) {
	                    resource =
	                        maybePromise._then(maybeUnwrapDisposer, null, null, {
	                            resources: resources,
	                            index: i
	                    }, undefined);
	                }
	            }
	            resources[i] = resource;
	        }

	        var reflectedResources = new Array(resources.length);
	        for (var i = 0; i < reflectedResources.length; ++i) {
	            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
	        }

	        var resultPromise = Promise.all(reflectedResources)
	            .then(function(inspections) {
	                for (var i = 0; i < inspections.length; ++i) {
	                    var inspection = inspections[i];
	                    if (inspection.isRejected()) {
	                        errorObj.e = inspection.error();
	                        return errorObj;
	                    } else if (!inspection.isFulfilled()) {
	                        resultPromise.cancel();
	                        return;
	                    }
	                    inspections[i] = inspection.value();
	                }
	                promise._pushContext();

	                fn = tryCatch(fn);
	                var ret = spreadArgs
	                    ? fn.apply(undefined, inspections) : fn(inspections);
	                var promiseCreated = promise._popContext();
	                debug.checkForgottenReturns(
	                    ret, promiseCreated, "Promise.using", promise);
	                return ret;
	            });

	        var promise = resultPromise.lastly(function() {
	            var inspection = new Promise.PromiseInspection(resultPromise);
	            return dispose(resources, inspection);
	        });
	        resources.promise = promise;
	        promise._setOnCancel(resources);
	        return promise;
	    };

	    Promise.prototype._setDisposable = function (disposer) {
	        this._bitField = this._bitField | 131072;
	        this._disposer = disposer;
	    };

	    Promise.prototype._isDisposable = function () {
	        return (this._bitField & 131072) > 0;
	    };

	    Promise.prototype._getDisposer = function () {
	        return this._disposer;
	    };

	    Promise.prototype._unsetDisposable = function () {
	        this._bitField = this._bitField & (~131072);
	        this._disposer = undefined;
	    };

	    Promise.prototype.disposer = function (fn) {
	        if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	        }
	        throw new TypeError();
	    };

	};


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, INTERNAL, debug) {
	var util = __webpack_require__(288);
	var TimeoutError = Promise.TimeoutError;

	function HandleWrapper(handle)  {
	    this.handle = handle;
	}

	HandleWrapper.prototype._resultCancelled = function() {
	    clearTimeout(this.handle);
	};

	var afterValue = function(value) { return delay(+this).thenReturn(value); };
	var delay = Promise.delay = function (ms, value) {
	    var ret;
	    var handle;
	    if (value !== undefined) {
	        ret = Promise.resolve(value)
	                ._then(afterValue, null, null, ms, undefined);
	        if (debug.cancellation() && value instanceof Promise) {
	            ret._setOnCancel(value);
	        }
	    } else {
	        ret = new Promise(INTERNAL);
	        handle = setTimeout(function() { ret._fulfill(); }, +ms);
	        if (debug.cancellation()) {
	            ret._setOnCancel(new HandleWrapper(handle));
	        }
	    }
	    ret._setAsyncGuaranteed();
	    return ret;
	};

	Promise.prototype.delay = function (ms) {
	    return delay(ms, this);
	};

	var afterTimeout = function (promise, message, parent) {
	    var err;
	    if (typeof message !== "string") {
	        if (message instanceof Error) {
	            err = message;
	        } else {
	            err = new TimeoutError("operation timed out");
	        }
	    } else {
	        err = new TimeoutError(message);
	    }
	    util.markAsOriginatingFromRejection(err);
	    promise._attachExtraTrace(err);
	    promise._reject(err);

	    if (parent != null) {
	        parent.cancel();
	    }
	};

	function successClear(value) {
	    clearTimeout(this.handle);
	    return value;
	}

	function failureClear(reason) {
	    clearTimeout(this.handle);
	    throw reason;
	}

	Promise.prototype.timeout = function (ms, message) {
	    ms = +ms;
	    var ret, parent;

	    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
	        if (ret.isPending()) {
	            afterTimeout(ret, message, parent);
	        }
	    }, ms));

	    if (debug.cancellation()) {
	        parent = this.then();
	        ret = parent._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	        ret._setOnCancel(handleWrapper);
	    } else {
	        ret = this._then(successClear, failureClear,
	                            undefined, handleWrapper, undefined);
	    }

	    return ret;
	};

	};


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise,
	                          apiRejection,
	                          INTERNAL,
	                          tryConvertToPromise,
	                          Proxyable,
	                          debug) {
	var errors = __webpack_require__(293);
	var TypeError = errors.TypeError;
	var util = __webpack_require__(288);
	var errorObj = util.errorObj;
	var tryCatch = util.tryCatch;
	var yieldHandlers = [];

	function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	    for (var i = 0; i < yieldHandlers.length; ++i) {
	        traceParent._pushContext();
	        var result = tryCatch(yieldHandlers[i])(value);
	        traceParent._popContext();
	        if (result === errorObj) {
	            traceParent._pushContext();
	            var ret = Promise.reject(errorObj.e);
	            traceParent._popContext();
	            return ret;
	        }
	        var maybePromise = tryConvertToPromise(result, traceParent);
	        if (maybePromise instanceof Promise) return maybePromise;
	    }
	    return null;
	}

	function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	    var promise = this._promise = new Promise(INTERNAL);
	    promise._captureStackTrace();
	    promise._setOnCancel(this);
	    this._stack = stack;
	    this._generatorFunction = generatorFunction;
	    this._receiver = receiver;
	    this._generator = undefined;
	    this._yieldHandlers = typeof yieldHandler === "function"
	        ? [yieldHandler].concat(yieldHandlers)
	        : yieldHandlers;
	    this._yieldedPromise = null;
	}
	util.inherits(PromiseSpawn, Proxyable);

	PromiseSpawn.prototype._isResolved = function() {
	    return this._promise === null;
	};

	PromiseSpawn.prototype._cleanup = function() {
	    this._promise = this._generator = null;
	};

	PromiseSpawn.prototype._promiseCancelled = function() {
	    if (this._isResolved()) return;
	    var implementsReturn = typeof this._generator["return"] !== "undefined";

	    var result;
	    if (!implementsReturn) {
	        var reason = new Promise.CancellationError(
	            "generator .return() sentinel");
	        Promise.coroutine.returnSentinel = reason;
	        this._promise._attachExtraTrace(reason);
	        this._promise._pushContext();
	        result = tryCatch(this._generator["throw"]).call(this._generator,
	                                                         reason);
	        this._promise._popContext();
	        if (result === errorObj && result.e === reason) {
	            result = null;
	        }
	    } else {
	        this._promise._pushContext();
	        result = tryCatch(this._generator["return"]).call(this._generator,
	                                                          undefined);
	        this._promise._popContext();
	    }
	    var promise = this._promise;
	    this._cleanup();
	    if (result === errorObj) {
	        promise._rejectCallback(result.e, false);
	    } else {
	        promise.cancel();
	    }
	};

	PromiseSpawn.prototype._promiseFulfilled = function(value) {
	    this._yieldedPromise = null;
	    this._promise._pushContext();
	    var result = tryCatch(this._generator.next).call(this._generator, value);
	    this._promise._popContext();
	    this._continue(result);
	};

	PromiseSpawn.prototype._promiseRejected = function(reason) {
	    this._yieldedPromise = null;
	    this._promise._attachExtraTrace(reason);
	    this._promise._pushContext();
	    var result = tryCatch(this._generator["throw"])
	        .call(this._generator, reason);
	    this._promise._popContext();
	    this._continue(result);
	};

	PromiseSpawn.prototype._resultCancelled = function() {
	    if (this._yieldedPromise instanceof Promise) {
	        var promise = this._yieldedPromise;
	        this._yieldedPromise = null;
	        this._promiseCancelled();
	        promise.cancel();
	    }
	};

	PromiseSpawn.prototype.promise = function () {
	    return this._promise;
	};

	PromiseSpawn.prototype._run = function () {
	    this._generator = this._generatorFunction.call(this._receiver);
	    this._receiver =
	        this._generatorFunction = undefined;
	    this._promiseFulfilled(undefined);
	};

	PromiseSpawn.prototype._continue = function (result) {
	    var promise = this._promise;
	    if (result === errorObj) {
	        this._cleanup();
	        return promise._rejectCallback(result.e, false);
	    }

	    var value = result.value;
	    if (result.done === true) {
	        this._cleanup();
	        return promise._resolveCallback(value);
	    } else {
	        var maybePromise = tryConvertToPromise(value, this._promise);
	        if (!(maybePromise instanceof Promise)) {
	            maybePromise =
	                promiseFromYieldHandler(maybePromise,
	                                        this._yieldHandlers,
	                                        this._promise);
	            if (maybePromise === null) {
	                this._promiseRejected(
	                    new TypeError(
	                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
	                        "From coroutine:\u000a" +
	                        this._stack.split("\n").slice(1, -7).join("\n")
	                    )
	                );
	                return;
	            }
	        }
	        maybePromise = maybePromise._target();
	        var bitField = maybePromise._bitField;
	        ;
	        if (((bitField & 50397184) === 0)) {
	            this._yieldedPromise = maybePromise;
	            maybePromise._proxy(this, null);
	        } else if (((bitField & 33554432) !== 0)) {
	            this._promiseFulfilled(maybePromise._value());
	        } else if (((bitField & 16777216) !== 0)) {
	            this._promiseRejected(maybePromise._reason());
	        } else {
	            this._promiseCancelled();
	        }
	    }
	};

	Promise.coroutine = function (generatorFunction, options) {
	    if (typeof generatorFunction !== "function") {
	        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var yieldHandler = Object(options).yieldHandler;
	    var PromiseSpawn$ = PromiseSpawn;
	    var stack = new Error().stack;
	    return function () {
	        var generator = generatorFunction.apply(this, arguments);
	        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
	                                      stack);
	        var ret = spawn.promise();
	        spawn._generator = generator;
	        spawn._promiseFulfilled(undefined);
	        return ret;
	    };
	};

	Promise.coroutine.addYieldHandler = function(fn) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    yieldHandlers.push(fn);
	};

	Promise.spawn = function (generatorFunction) {
	    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
	    if (typeof generatorFunction !== "function") {
	        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var spawn = new PromiseSpawn(generatorFunction, this);
	    var ret = spawn.promise();
	    spawn._run(Promise.spawn);
	    return ret;
	};
	};


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise) {
	var util = __webpack_require__(288);
	var async = Promise._async;
	var tryCatch = util.tryCatch;
	var errorObj = util.errorObj;

	function spreadAdapter(val, nodeback) {
	    var promise = this;
	    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
	    var ret =
	        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	function successAdapter(val, nodeback) {
	    var promise = this;
	    var receiver = promise._boundValue();
	    var ret = val === undefined
	        ? tryCatch(nodeback).call(receiver, null)
	        : tryCatch(nodeback).call(receiver, null, val);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}
	function errorAdapter(reason, nodeback) {
	    var promise = this;
	    if (!reason) {
	        var newReason = new Error(reason + "");
	        newReason.cause = reason;
	        reason = newReason;
	    }
	    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
	    if (ret === errorObj) {
	        async.throwLater(ret.e);
	    }
	}

	Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
	                                                                     options) {
	    if (typeof nodeback == "function") {
	        var adapter = successAdapter;
	        if (options !== undefined && Object(options).spread) {
	            adapter = spreadAdapter;
	        }
	        this._then(
	            adapter,
	            errorAdapter,
	            undefined,
	            this,
	            nodeback
	        );
	    }
	    return this;
	};
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var cr = Object.create;
	if (cr) {
	    var callerCache = cr(null);
	    var getterCache = cr(null);
	    callerCache[" size"] = getterCache[" size"] = 0;
	}

	module.exports = function(Promise) {
	var util = __webpack_require__(288);
	var canEvaluate = util.canEvaluate;
	var isIdentifier = util.isIdentifier;

	var getMethodCaller;
	var getGetter;
	if (true) {
	var makeMethodCaller = function (methodName) {
	    return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	};

	var makeGetter = function (propertyName) {
	    return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	};

	var getCompiled = function(name, compiler, cache) {
	    var ret = cache[name];
	    if (typeof ret !== "function") {
	        if (!isIdentifier(name)) {
	            return null;
	        }
	        ret = compiler(name);
	        cache[name] = ret;
	        cache[" size"]++;
	        if (cache[" size"] > 512) {
	            var keys = Object.keys(cache);
	            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
	            cache[" size"] = keys.length - 256;
	        }
	    }
	    return ret;
	};

	getMethodCaller = function(name) {
	    return getCompiled(name, makeMethodCaller, callerCache);
	};

	getGetter = function(name) {
	    return getCompiled(name, makeGetter, getterCache);
	};
	}

	function ensureMethod(obj, methodName) {
	    var fn;
	    if (obj != null) fn = obj[methodName];
	    if (typeof fn !== "function") {
	        var message = "Object " + util.classString(obj) + " has no method '" +
	            util.toString(methodName) + "'";
	        throw new Promise.TypeError(message);
	    }
	    return fn;
	}

	function caller(obj) {
	    var methodName = this.pop();
	    var fn = ensureMethod(obj, methodName);
	    return fn.apply(obj, this);
	}
	Promise.prototype.call = function (methodName) {
	    var $_len = arguments.length;var args = new Array($_len - 1); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};
	    if (true) {
	        if (canEvaluate) {
	            var maybeCaller = getMethodCaller(methodName);
	            if (maybeCaller !== null) {
	                return this._then(
	                    maybeCaller, undefined, undefined, args, undefined);
	            }
	        }
	    }
	    args.push(methodName);
	    return this._then(caller, undefined, undefined, args, undefined);
	};

	function namedGetter(obj) {
	    return obj[this];
	}
	function indexedGetter(obj) {
	    var index = +this;
	    if (index < 0) index = Math.max(0, index + obj.length);
	    return obj[index];
	}
	Promise.prototype.get = function (propertyName) {
	    var isIndex = (typeof propertyName === "number");
	    var getter;
	    if (!isIndex) {
	        if (canEvaluate) {
	            var maybeGetter = getGetter(propertyName);
	            getter = maybeGetter !== null ? maybeGetter : namedGetter;
	        } else {
	            getter = namedGetter;
	        }
	    } else {
	        getter = indexedGetter;
	    }
	    return this._then(getter, undefined, undefined, propertyName, undefined);
	};
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(
	    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	var util = __webpack_require__(288);
	var isObject = util.isObject;
	var es5 = __webpack_require__(289);
	var Es6Map;
	if (typeof Map === "function") Es6Map = Map;

	var mapToEntries = (function() {
	    var index = 0;
	    var size = 0;

	    function extractEntry(value, key) {
	        this[index] = value;
	        this[index + size] = key;
	        index++;
	    }

	    return function mapToEntries(map) {
	        size = map.size;
	        index = 0;
	        var ret = new Array(map.size * 2);
	        map.forEach(extractEntry, ret);
	        return ret;
	    };
	})();

	var entriesToMap = function(entries) {
	    var ret = new Es6Map();
	    var length = entries.length / 2 | 0;
	    for (var i = 0; i < length; ++i) {
	        var key = entries[length + i];
	        var value = entries[i];
	        ret.set(key, value);
	    }
	    return ret;
	};

	function PropertiesPromiseArray(obj) {
	    var isMap = false;
	    var entries;
	    if (Es6Map !== undefined && obj instanceof Es6Map) {
	        entries = mapToEntries(obj);
	        isMap = true;
	    } else {
	        var keys = es5.keys(obj);
	        var len = keys.length;
	        entries = new Array(len * 2);
	        for (var i = 0; i < len; ++i) {
	            var key = keys[i];
	            entries[i] = obj[key];
	            entries[i + len] = key;
	        }
	    }
	    this.constructor$(entries);
	    this._isMap = isMap;
	    this._init$(undefined, -3);
	}
	util.inherits(PropertiesPromiseArray, PromiseArray);

	PropertiesPromiseArray.prototype._init = function () {};

	PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    this._values[index] = value;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        var val;
	        if (this._isMap) {
	            val = entriesToMap(this._values);
	        } else {
	            val = {};
	            var keyOffset = this.length();
	            for (var i = 0, len = this.length(); i < len; ++i) {
	                val[this._values[i + keyOffset]] = this._values[i];
	            }
	        }
	        this._resolve(val);
	        return true;
	    }
	    return false;
	};

	PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};

	PropertiesPromiseArray.prototype.getActualLength = function (len) {
	    return len >> 1;
	};

	function props(promises) {
	    var ret;
	    var castValue = tryConvertToPromise(promises);

	    if (!isObject(castValue)) {
	        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    } else if (castValue instanceof Promise) {
	        ret = castValue._then(
	            Promise.props, undefined, undefined, undefined, undefined);
	    } else {
	        ret = new PropertiesPromiseArray(castValue).promise();
	    }

	    if (castValue instanceof Promise) {
	        ret._propagateFrom(castValue, 2);
	    }
	    return ret;
	}

	Promise.prototype.props = function () {
	    return props(this);
	};

	Promise.props = function (promises) {
	    return props(promises);
	};
	};


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(
	    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	var util = __webpack_require__(288);

	var raceLater = function (promise) {
	    return promise.then(function(array) {
	        return race(array, promise);
	    });
	};

	function race(promises, parent) {
	    var maybePromise = tryConvertToPromise(promises);

	    if (maybePromise instanceof Promise) {
	        return raceLater(maybePromise);
	    } else {
	        promises = util.asArray(promises);
	        if (promises === null)
	            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
	    }

	    var ret = new Promise(INTERNAL);
	    if (parent !== undefined) {
	        ret._propagateFrom(parent, 3);
	    }
	    var fulfill = ret._fulfill;
	    var reject = ret._reject;
	    for (var i = 0, len = promises.length; i < len; ++i) {
	        var val = promises[i];

	        if (val === undefined && !(i in promises)) {
	            continue;
	        }

	        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	    }
	    return ret;
	}

	Promise.race = function (promises) {
	    return race(promises, undefined);
	};

	Promise.prototype.race = function () {
	    return race(this, undefined);
	};

	};


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise,
	                          PromiseArray,
	                          apiRejection,
	                          tryConvertToPromise,
	                          INTERNAL,
	                          debug) {
	var getDomain = Promise._getDomain;
	var util = __webpack_require__(288);
	var tryCatch = util.tryCatch;

	function ReductionPromiseArray(promises, fn, initialValue, _each) {
	    this.constructor$(promises);
	    var domain = getDomain();
	    this._fn = domain === null ? fn : domain.bind(fn);
	    if (initialValue !== undefined) {
	        initialValue = Promise.resolve(initialValue);
	        initialValue._attachCancellationCallback(this);
	    }
	    this._initialValue = initialValue;
	    this._currentCancellable = null;
	    this._eachValues = _each === INTERNAL ? [] : undefined;
	    this._promise._captureStackTrace();
	    this._init$(undefined, -5);
	}
	util.inherits(ReductionPromiseArray, PromiseArray);

	ReductionPromiseArray.prototype._gotAccum = function(accum) {
	    if (this._eachValues !== undefined && accum !== INTERNAL) {
	        this._eachValues.push(accum);
	    }
	};

	ReductionPromiseArray.prototype._eachComplete = function(value) {
	    this._eachValues.push(value);
	    return this._eachValues;
	};

	ReductionPromiseArray.prototype._init = function() {};

	ReductionPromiseArray.prototype._resolveEmptyArray = function() {
	    this._resolve(this._eachValues !== undefined ? this._eachValues
	                                                 : this._initialValue);
	};

	ReductionPromiseArray.prototype.shouldCopyValues = function () {
	    return false;
	};

	ReductionPromiseArray.prototype._resolve = function(value) {
	    this._promise._resolveCallback(value);
	    this._values = null;
	};

	ReductionPromiseArray.prototype._resultCancelled = function(sender) {
	    if (sender === this._initialValue) return this._cancel();
	    if (this._isResolved()) return;
	    this._resultCancelled$();
	    if (this._currentCancellable instanceof Promise) {
	        this._currentCancellable.cancel();
	    }
	    if (this._initialValue instanceof Promise) {
	        this._initialValue.cancel();
	    }
	};

	ReductionPromiseArray.prototype._iterate = function (values) {
	    this._values = values;
	    var value;
	    var i;
	    var length = values.length;
	    if (this._initialValue !== undefined) {
	        value = this._initialValue;
	        i = 0;
	    } else {
	        value = Promise.resolve(values[0]);
	        i = 1;
	    }

	    this._currentCancellable = value;

	    if (!value.isRejected()) {
	        for (; i < length; ++i) {
	            var ctx = {
	                accum: null,
	                value: values[i],
	                index: i,
	                length: length,
	                array: this
	            };
	            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
	        }
	    }

	    if (this._eachValues !== undefined) {
	        value = value
	            ._then(this._eachComplete, undefined, undefined, this, undefined);
	    }
	    value._then(completed, completed, undefined, value, this);
	};

	Promise.prototype.reduce = function (fn, initialValue) {
	    return reduce(this, fn, initialValue, null);
	};

	Promise.reduce = function (promises, fn, initialValue, _each) {
	    return reduce(promises, fn, initialValue, _each);
	};

	function completed(valueOrReason, array) {
	    if (this.isFulfilled()) {
	        array._resolve(valueOrReason);
	    } else {
	        array._reject(valueOrReason);
	    }
	}

	function reduce(promises, fn, initialValue, _each) {
	    if (typeof fn !== "function") {
	        return apiRejection("expecting a function but got " + util.classString(fn));
	    }
	    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	    return array.promise();
	}

	function gotAccum(accum) {
	    this.accum = accum;
	    this.array._gotAccum(accum);
	    var value = tryConvertToPromise(this.value, this.array._promise);
	    if (value instanceof Promise) {
	        this.array._currentCancellable = value;
	        return value._then(gotValue, undefined, undefined, this, undefined);
	    } else {
	        return gotValue.call(this, value);
	    }
	}

	function gotValue(value) {
	    var array = this.array;
	    var promise = array._promise;
	    var fn = tryCatch(array._fn);
	    promise._pushContext();
	    var ret;
	    if (array._eachValues !== undefined) {
	        ret = fn.call(promise._boundValue(), value, this.index, this.length);
	    } else {
	        ret = fn.call(promise._boundValue(),
	                              this.accum, value, this.index, this.length);
	    }
	    if (ret instanceof Promise) {
	        array._currentCancellable = ret;
	    }
	    var promiseCreated = promise._popContext();
	    debug.checkForgottenReturns(
	        ret,
	        promiseCreated,
	        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
	        promise
	    );
	    return ret;
	}
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports =
	    function(Promise, PromiseArray, debug) {
	var PromiseInspection = Promise.PromiseInspection;
	var util = __webpack_require__(288);

	function SettledPromiseArray(values) {
	    this.constructor$(values);
	}
	util.inherits(SettledPromiseArray, PromiseArray);

	SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	    this._values[index] = inspection;
	    var totalResolved = ++this._totalResolved;
	    if (totalResolved >= this._length) {
	        this._resolve(this._values);
	        return true;
	    }
	    return false;
	};

	SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 33554432;
	    ret._settledValueField = value;
	    return this._promiseResolved(index, ret);
	};
	SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	    var ret = new PromiseInspection();
	    ret._bitField = 16777216;
	    ret._settledValueField = reason;
	    return this._promiseResolved(index, ret);
	};

	Promise.settle = function (promises) {
	    debug.deprecated(".settle()", ".reflect()");
	    return new SettledPromiseArray(promises).promise();
	};

	Promise.prototype.settle = function () {
	    return Promise.settle(this);
	};
	};


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports =
	function(Promise, PromiseArray, apiRejection) {
	var util = __webpack_require__(288);
	var RangeError = __webpack_require__(293).RangeError;
	var AggregateError = __webpack_require__(293).AggregateError;
	var isArray = util.isArray;
	var CANCELLATION = {};


	function SomePromiseArray(values) {
	    this.constructor$(values);
	    this._howMany = 0;
	    this._unwrap = false;
	    this._initialized = false;
	}
	util.inherits(SomePromiseArray, PromiseArray);

	SomePromiseArray.prototype._init = function () {
	    if (!this._initialized) {
	        return;
	    }
	    if (this._howMany === 0) {
	        this._resolve([]);
	        return;
	    }
	    this._init$(undefined, -5);
	    var isArrayResolved = isArray(this._values);
	    if (!this._isResolved() &&
	        isArrayResolved &&
	        this._howMany > this._canPossiblyFulfill()) {
	        this._reject(this._getRangeError(this.length()));
	    }
	};

	SomePromiseArray.prototype.init = function () {
	    this._initialized = true;
	    this._init();
	};

	SomePromiseArray.prototype.setUnwrap = function () {
	    this._unwrap = true;
	};

	SomePromiseArray.prototype.howMany = function () {
	    return this._howMany;
	};

	SomePromiseArray.prototype.setHowMany = function (count) {
	    this._howMany = count;
	};

	SomePromiseArray.prototype._promiseFulfilled = function (value) {
	    this._addFulfilled(value);
	    if (this._fulfilled() === this.howMany()) {
	        this._values.length = this.howMany();
	        if (this.howMany() === 1 && this._unwrap) {
	            this._resolve(this._values[0]);
	        } else {
	            this._resolve(this._values);
	        }
	        return true;
	    }
	    return false;

	};
	SomePromiseArray.prototype._promiseRejected = function (reason) {
	    this._addRejected(reason);
	    return this._checkOutcome();
	};

	SomePromiseArray.prototype._promiseCancelled = function () {
	    if (this._values instanceof Promise || this._values == null) {
	        return this._cancel();
	    }
	    this._addRejected(CANCELLATION);
	    return this._checkOutcome();
	};

	SomePromiseArray.prototype._checkOutcome = function() {
	    if (this.howMany() > this._canPossiblyFulfill()) {
	        var e = new AggregateError();
	        for (var i = this.length(); i < this._values.length; ++i) {
	            if (this._values[i] !== CANCELLATION) {
	                e.push(this._values[i]);
	            }
	        }
	        if (e.length > 0) {
	            this._reject(e);
	        } else {
	            this._cancel();
	        }
	        return true;
	    }
	    return false;
	};

	SomePromiseArray.prototype._fulfilled = function () {
	    return this._totalResolved;
	};

	SomePromiseArray.prototype._rejected = function () {
	    return this._values.length - this.length();
	};

	SomePromiseArray.prototype._addRejected = function (reason) {
	    this._values.push(reason);
	};

	SomePromiseArray.prototype._addFulfilled = function (value) {
	    this._values[this._totalResolved++] = value;
	};

	SomePromiseArray.prototype._canPossiblyFulfill = function () {
	    return this.length() - this._rejected();
	};

	SomePromiseArray.prototype._getRangeError = function (count) {
	    var message = "Input array must contain at least " +
	            this._howMany + " items but contains only " + count + " items";
	    return new RangeError(message);
	};

	SomePromiseArray.prototype._resolveEmptyArray = function () {
	    this._reject(this._getRangeError(0));
	};

	function some(promises, howMany) {
	    if ((howMany | 0) !== howMany || howMany < 0) {
	        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(howMany);
	    ret.init();
	    return promise;
	}

	Promise.some = function (promises, howMany) {
	    return some(promises, howMany);
	};

	Promise.prototype.some = function (howMany) {
	    return some(this, howMany);
	};

	Promise._SomePromiseArray = SomePromiseArray;
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var THIS = {};
	var util = __webpack_require__(288);
	var nodebackForPromise = __webpack_require__(300);
	var withAppended = util.withAppended;
	var maybeWrapAsError = util.maybeWrapAsError;
	var canEvaluate = util.canEvaluate;
	var TypeError = __webpack_require__(293).TypeError;
	var defaultSuffix = "Async";
	var defaultPromisified = {__isPromisified__: true};
	var noCopyProps = [
	    "arity",    "length",
	    "name",
	    "arguments",
	    "caller",
	    "callee",
	    "prototype",
	    "__isPromisified__"
	];
	var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

	var defaultFilter = function(name) {
	    return util.isIdentifier(name) &&
	        name.charAt(0) !== "_" &&
	        name !== "constructor";
	};

	function propsFilter(key) {
	    return !noCopyPropsPattern.test(key);
	}

	function isPromisified(fn) {
	    try {
	        return fn.__isPromisified__ === true;
	    }
	    catch (e) {
	        return false;
	    }
	}

	function hasPromisified(obj, key, suffix) {
	    var val = util.getDataPropertyOrDefault(obj, key + suffix,
	                                            defaultPromisified);
	    return val ? isPromisified(val) : false;
	}
	function checkValid(ret, suffix, suffixRegexp) {
	    for (var i = 0; i < ret.length; i += 2) {
	        var key = ret[i];
	        if (suffixRegexp.test(key)) {
	            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	            for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
	                        .replace("%s", suffix));
	                }
	            }
	        }
	    }
	}

	function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	    var keys = util.inheritedDataKeys(obj);
	    var ret = [];
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var value = obj[key];
	        var passesDefaultFilter = filter === defaultFilter
	            ? true : defaultFilter(key, value, obj);
	        if (typeof value === "function" &&
	            !isPromisified(value) &&
	            !hasPromisified(obj, key, suffix) &&
	            filter(key, value, obj, passesDefaultFilter)) {
	            ret.push(key, value);
	        }
	    }
	    checkValid(ret, suffix, suffixRegexp);
	    return ret;
	}

	var escapeIdentRegex = function(str) {
	    return str.replace(/([$])/, "\\$");
	};

	var makeNodePromisifiedEval;
	if (true) {
	var switchCaseArgumentOrder = function(likelyArgumentCount) {
	    var ret = [likelyArgumentCount];
	    var min = Math.max(0, likelyArgumentCount - 1 - 3);
	    for(var i = likelyArgumentCount - 1; i >= min; --i) {
	        ret.push(i);
	    }
	    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
	        ret.push(i);
	    }
	    return ret;
	};

	var argumentSequence = function(argumentCount) {
	    return util.filledRange(argumentCount, "_arg", "");
	};

	var parameterDeclaration = function(parameterCount) {
	    return util.filledRange(
	        Math.max(parameterCount, 3), "_arg", "");
	};

	var parameterCount = function(fn) {
	    if (typeof fn.length === "number") {
	        return Math.max(Math.min(fn.length, 1023 + 1), 0);
	    }
	    return 0;
	};

	makeNodePromisifiedEval =
	function(callback, receiver, originalName, fn, _, multiArgs) {
	    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

	    function generateCallForArgumentCount(count) {
	        var args = argumentSequence(count).join(", ");
	        var comma = count > 0 ? ", " : "";
	        var ret;
	        if (shouldProxyThis) {
	            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	        } else {
	            ret = receiver === undefined
	                ? "ret = callback({{args}}, nodeback); break;\n"
	                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	        }
	        return ret.replace("{{args}}", args).replace(", ", comma);
	    }

	    function generateArgumentSwitchCase() {
	        var ret = "";
	        for (var i = 0; i < argumentOrder.length; ++i) {
	            ret += "case " + argumentOrder[i] +":" +
	                generateCallForArgumentCount(argumentOrder[i]);
	        }

	        ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", (shouldProxyThis
	                                ? "ret = callback.apply(this, args);\n"
	                                : "ret = callback.apply(receiver, args);\n"));
	        return ret;
	    }

	    var getFunctionCode = typeof callback === "string"
	                                ? ("this != null ? this['"+callback+"'] : fn")
	                                : "fn";
	    var body = "'use strict';                                                \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
	        return ret;                                                          \n\
	    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
	        .replace("[GetFunctionCode]", getFunctionCode);
	    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
	    return new Function("Promise",
	                        "fn",
	                        "receiver",
	                        "withAppended",
	                        "maybeWrapAsError",
	                        "nodebackForPromise",
	                        "tryCatch",
	                        "errorObj",
	                        "notEnumerableProp",
	                        "INTERNAL",
	                        body)(
	                    Promise,
	                    fn,
	                    receiver,
	                    withAppended,
	                    maybeWrapAsError,
	                    nodebackForPromise,
	                    util.tryCatch,
	                    util.errorObj,
	                    util.notEnumerableProp,
	                    INTERNAL);
	};
	}

	function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
	    var defaultThis = (function() {return this;})();
	    var method = callback;
	    if (typeof method === "string") {
	        callback = fn;
	    }
	    function promisified() {
	        var _receiver = receiver;
	        if (receiver === THIS) _receiver = this;
	        var promise = new Promise(INTERNAL);
	        promise._captureStackTrace();
	        var cb = typeof method === "string" && this !== defaultThis
	            ? this[method] : callback;
	        var fn = nodebackForPromise(promise, multiArgs);
	        try {
	            cb.apply(_receiver, withAppended(arguments, fn));
	        } catch(e) {
	            promise._rejectCallback(maybeWrapAsError(e), true, true);
	        }
	        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
	        return promise;
	    }
	    util.notEnumerableProp(promisified, "__isPromisified__", true);
	    return promisified;
	}

	var makeNodePromisified = canEvaluate
	    ? makeNodePromisifiedEval
	    : makeNodePromisifiedClosure;

	function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
	    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	    var methods =
	        promisifiableMethods(obj, suffix, suffixRegexp, filter);

	    for (var i = 0, len = methods.length; i < len; i+= 2) {
	        var key = methods[i];
	        var fn = methods[i+1];
	        var promisifiedKey = key + suffix;
	        if (promisifier === makeNodePromisified) {
	            obj[promisifiedKey] =
	                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
	        } else {
	            var promisified = promisifier(fn, function() {
	                return makeNodePromisified(key, THIS, key,
	                                           fn, suffix, multiArgs);
	            });
	            util.notEnumerableProp(promisified, "__isPromisified__", true);
	            obj[promisifiedKey] = promisified;
	        }
	    }
	    util.toFastProperties(obj);
	    return obj;
	}

	function promisify(callback, receiver, multiArgs) {
	    return makeNodePromisified(callback, receiver, undefined,
	                                callback, null, multiArgs);
	}

	Promise.promisify = function (fn, options) {
	    if (typeof fn !== "function") {
	        throw new TypeError("expecting a function but got " + util.classString(fn));
	    }
	    if (isPromisified(fn)) {
	        return fn;
	    }
	    options = Object(options);
	    var receiver = options.context === undefined ? THIS : options.context;
	    var multiArgs = !!options.multiArgs;
	    var ret = promisify(fn, receiver, multiArgs);
	    util.copyDescriptors(fn, ret, propsFilter);
	    return ret;
	};

	Promise.promisifyAll = function (target, options) {
	    if (typeof target !== "function" && typeof target !== "object") {
	        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }
	    options = Object(options);
	    var multiArgs = !!options.multiArgs;
	    var suffix = options.suffix;
	    if (typeof suffix !== "string") suffix = defaultSuffix;
	    var filter = options.filter;
	    if (typeof filter !== "function") filter = defaultFilter;
	    var promisifier = options.promisifier;
	    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

	    if (!util.isIdentifier(suffix)) {
	        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
	    }

	    var keys = util.inheritedDataKeys(target);
	    for (var i = 0; i < keys.length; ++i) {
	        var value = target[keys[i]];
	        if (keys[i] !== "constructor" &&
	            util.isClass(value)) {
	            promisifyAll(value.prototype, suffix, filter, promisifier,
	                multiArgs);
	            promisifyAll(value, suffix, filter, promisifier, multiArgs);
	        }
	    }

	    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
	};
	};



/***/ },
/* 319 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise) {
	var SomePromiseArray = Promise._SomePromiseArray;
	function any(promises) {
	    var ret = new SomePromiseArray(promises);
	    var promise = ret.promise();
	    ret.setHowMany(1);
	    ret.setUnwrap();
	    ret.init();
	    return promise;
	}

	Promise.any = function (promises) {
	    return any(promises);
	};

	Promise.prototype.any = function () {
	    return any(this);
	};

	};


/***/ },
/* 320 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseReduce = Promise.reduce;
	var PromiseAll = Promise.all;

	function promiseAllThis() {
	    return PromiseAll(this);
	}

	function PromiseMapSeries(promises, fn) {
	    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
	}

	Promise.prototype.each = function (fn) {
	    return this.mapSeries(fn)
	            ._then(promiseAllThis, undefined, undefined, this, undefined);
	};

	Promise.prototype.mapSeries = function (fn) {
	    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
	};

	Promise.each = function (promises, fn) {
	    return PromiseMapSeries(promises, fn)
	            ._then(promiseAllThis, undefined, undefined, promises, undefined);
	};

	Promise.mapSeries = PromiseMapSeries;
	};


/***/ },
/* 321 */
/***/ function(module, exports) {

	"use strict";
	module.exports = function(Promise, INTERNAL) {
	var PromiseMap = Promise.map;

	Promise.prototype.filter = function (fn, options) {
	    return PromiseMap(this, fn, options, INTERNAL);
	};

	Promise.filter = function (promises, fn, options) {
	    return PromiseMap(promises, fn, options, INTERNAL);
	};
	};


/***/ },
/* 322 */
/***/ function(module, exports) {

	module.exports = require("stream");

/***/ },
/* 323 */
/***/ function(module, exports) {

	module.exports = require("net");

/***/ },
/* 324 */
/***/ function(module, exports) {

	module.exports = require("url");

/***/ },
/* 325 */
/***/ function(module, exports) {

	module.exports = require("util");

/***/ },
/* 326 */
/***/ function(module, exports) {

	module.exports = require("http");

/***/ },
/* 327 */,
/* 328 */
/***/ function(module, exports) {

	"use strict";

	var counter = 0;

	module.exports = function uid(obj) {
	  var i = (++counter).toString(36);
	  var r = global.parseInt((1 + Math.random()).toString().slice(2, 17)).toString(36);
	  var id = (r.length + 9).toString(36) + r + i;
	  if (obj == null) return id;else {
	    obj.uid = id;
	    return obj;
	  }
	};

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license
	 * lodash 4.6.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash -d -o ./foo/lodash.js`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.6.1';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;

	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;

	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+',
	    rsUpper + '+',
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
	    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[mapTag] = cloneableTags[numberTag] =
	  cloneableTags[objectTag] = cloneableTags[regexpTag] =
	  cloneableTags[setTag] = cloneableTags[stringTag] =
	  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
	  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
	  cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `exports`. */
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	    ? exports
	    : undefined;

	  /** Detect free variable `module`. */
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	    ? module
	    : undefined;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = (freeModule && freeModule.exports === freeExports)
	    ? freeExports
	    : undefined;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	  /** Detect free variable `window`. */
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal ||
	    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	      freeSelf || thisGlobal || Function('return this')();

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {...*} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * Creates a new array concatenating `array` with `other`.
	   *
	   * @private
	   * @param {Array} array The first array to concatenate.
	   * @param {Array} other The second array to concatenate.
	   * @returns {Array} Returns the new concatenated array.
	   */
	  function arrayConcat(array, other) {
	    var index = -1,
	        length = array.length,
	        othIndex = -1,
	        othLength = other.length,
	        result = Array(length + othLength);

	    while (++index < length) {
	      result[index] = array[index];
	    }
	    while (++othIndex < othLength) {
	      result[index++] = other[othIndex];
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    return !!array.length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * The base implementation of methods like `_.max` and `_.min` which accepts a
	   * `comparator` to determine the extremum value.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The iteratee invoked per iteration.
	   * @param {Function} comparator The comparator used to compare values.
	   * @returns {*} Returns the extremum value.
	   */
	  function baseExtremum(array, iteratee, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index],
	          current = iteratee(value);

	      if (current != null && (computed === undefined
	            ? current === current
	            : comparator(current, computed)
	          )) {
	        var computed = current,
	            result = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFind(collection, predicate, eachFunc, retKey) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = retKey ? key : value;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` without support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the new array of key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /**
	   * Compares values to sort them in ascending order.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function compareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * Used by `_.orderBy` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	   * specify an order of "desc" for descending or "asc" for ascending sort order
	   * of corresponding values.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]|string[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = compareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * (order == 'desc' ? -1 : 1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }

	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */
	  function isIndex(value, length) {
	    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	    length = length == null ? MAX_SAFE_INTEGER : length;
	    return value > -1 && value % 1 == 0 && value < length;
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to an array.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

	    /** Built-in constructor references. */
	    var Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        clearTimeout = context.clearTimeout,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        getPrototypeOf = Object.getPrototypeOf,
	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var Map = getNative(context, 'Map'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var mapCtorString = Map ? funcToString.call(Map) : '',
	        setCtorString = Set ? funcToString.call(Set) : '',
	        weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chaining. Methods that operate on and return arrays, collections, and
	     * functions can be chained together. Methods that retrieve a single value or
	     * may return a primitive value will automatically end the chain sequence and
	     * return the unwrapped value. Otherwise, the value must be unwrapped with
	     * `_#value`.
	     *
	     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
	     * may be enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization to merge iteratee calls; this avoids the creation
	     * of intermediate arrays and can greatly reduce the number of iteratee executions.
	     * Sections of a chain sequence qualify for shortcut fusion if the section is
	     * applied to an array of at least two hundred elements and any iteratees
	     * accept only one argument. The heuristic for whether a section qualifies
	     * for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatten`, `flattenDeep`, `flattenDepth`, `flip`, `flow`, `flowRight`,
	     * `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`, `intersection`,
	     * `intersectionBy`, `intersectionWith`, `invert`, `invertBy`, `invokeMap`,
	     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
	     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
	     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
	     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
	     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
	     * `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `push`, `range`,
	     * `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`,
	     * `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
	     * `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`,
	     * `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`,
	     * `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `update`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`,
	     * `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `each`, `eachRight`,
	     * `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`, `floor`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`, `includes`,
	     * `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`, `isArrayBuffer`,
	     * `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`, `isDate`,
	     * `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`, `isFinite`,
	     * `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`, `isMatchWith`,
	     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
	     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isSet`, `isString`,
	     * `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`,
	     * `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toInteger`, `toJSON`, `toLength`, `toLower`,
	     * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,
	     * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,
	     * `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an hash object.
	     *
	     * @private
	     * @constructor
	     * @returns {Object} Returns the new hash object.
	     */
	    function Hash() {}

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(hash, key) {
	      return hashHas(hash, key) && delete hash[key];
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(hash, key) {
	      if (nativeCreate) {
	        var result = hash[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(hash, key) {
	      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function hashSet(hash, key, value) {
	      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function MapCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': Map ? new Map : [],
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapDelete(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapGet(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.get(key) : assocGet(data.map, key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.has(key) : assocHas(data.map, key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache object.
	     */
	    function mapSet(key, value) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	      } else if (Map) {
	        data.map.set(key, value);
	      } else {
	        assocSet(data.map, key, value);
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a set cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.push(values[index]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache`.
	     *
	     * @private
	     * @param {Object} cache The set cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function cacheHas(cache, value) {
	      var map = cache.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        return hash[value] === HASH_UNDEFINED;
	      }
	      return map.has(value);
	    }

	    /**
	     * Adds `value` to the set cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var map = this.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        hash[value] = HASH_UNDEFINED;
	      }
	      else {
	        map.set(value, HASH_UNDEFINED);
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function Stack(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = { 'array': [], 'map': null };
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocDelete(array, key) : data.map['delete'](key);
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocGet(array, key) : data.map.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocHas(array, key) : data.map.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache object.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__,
	          array = data.array;

	      if (array) {
	        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	          assocSet(array, key, value);
	        } else {
	          data.array = null;
	          data.map = new MapCache(array);
	        }
	      }
	      var map = data.map;
	      if (map) {
	        map.set(key, value);
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Removes `key` and its value from the associative array.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function assocDelete(array, key) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = array.length - 1;
	      if (index == lastIndex) {
	        array.pop();
	      } else {
	        splice.call(array, index, 1);
	      }
	      return true;
	    }

	    /**
	     * Gets the associative array value for `key`.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function assocGet(array, key) {
	      var index = assocIndexOf(array, key);
	      return index < 0 ? undefined : array[index][1];
	    }

	    /**
	     * Checks if an associative array value for `key` exists.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function assocHas(array, key) {
	      return assocIndexOf(array, key) > -1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `key` is found in `array`
	     * of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Sets the associative array `key` to `value`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function assocSet(array, key, value) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        array.push([key, value]);
	      } else {
	        array[index][1] = value;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the array-like object.
	     */
	    function baseCastArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the array-like object.
	     */
	    function baseCastFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function baseCastPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            result = baseAssign(result, value);
	            return isFull ? copySymbols(value, result) : result;
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return (isFull && !isArr) ? copySymbols(value, result) : result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     */
	    function baseConforms(source) {
	      var props = keys(source),
	          length = props.length;

	      return function(object) {
	        if (object == null) {
	          return !length;
	        }
	        var index = length;
	        while (index--) {
	          var key = props[index],
	              predicate = source[key],
	              value = object[key];

	          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
	            return false;
	          }
	        }
	        return true;
	      };
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support for
	     * excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && isArrayLikeObject(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return object == null ? object : baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = baseCastPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          stack || (stack = new Stack);
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack,
	              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      var type = typeof value;
	      if (type == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      return nativeKeys(Object(object));
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);

	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }

	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value &&
	            (value !== undefined || (key in Object(object)));
	        };
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      var props = (isArray(source) || isTypedArray(source))
	        ? undefined
	        : keysIn(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, !customizer);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, !customizer);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      stack.set(srcValue, newValue);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	      }
	      stack['delete'](srcValue);
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), getIteratee());

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property names.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return arrayReduce(props, function(result, key) {
	        if (key in object) {
	          result[key] = object[key];
	        }
	        return result;
	      }, {});
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key) {
	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (lastIndex == length || index != previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = baseCastPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[last(path)];
	            }
	          }
	          else {
	            delete array[index];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the new array of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq`.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array) {
	      return baseSortedUniqBy(array);
	    }

	    /**
	     * The base implementation of `_.sortedUniqBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniqBy(array, iteratee) {
	      var index = 0,
	          length = array.length,
	          value = array[0],
	          computed = iteratee ? iteratee(value) : value,
	          seen = computed,
	          resIndex = 1,
	          result = [value];

	      while (++index < length) {
	        value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	        if (!eq(computed, seen)) {
	          seen = computed;
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path + ''] : baseCastPath(path);
	      object = parent(object, path);
	      var key = last(path);
	      return (object != null && has(object, key)) ? delete object[key] : true;
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;

	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property names.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        assignFunc(result, props[index], index < valsLength ? values[index] : undefined);
	      }
	      return result;
	    }

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map) {
	      return arrayReduce(mapToArray(map), addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set) {
	      return arrayReduce(setToArray(set), addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object) {
	      return copyObjectWith(source, props, object);
	    }

	    /**
	     * This function is like `copyObject` except that it accepts a function to
	     * customize copied values.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObjectWith(source, props, object, customizer) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : source[key];

	        assignValue(object, key, newValue);
	      }
	      return object;
	    }

	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return rest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = typeof customizer == 'function'
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBaseWrapper(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols ? strSymbols[0] : string.charAt(0),
	            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string)), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurryWrapper(func, bitmask, arity) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getPlaceholder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return rest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);

	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getPlaceholder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new invoker function.
	     */
	    function createOver(arrayFunc) {
	      return rest(function(iteratees) {
	        iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());
	        return rest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(string, length, chars) {
	      length = toInteger(length);

	      var strLength = stringSize(string);
	      if (!length || strLength >= length) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars === undefined ? ' ' : (chars + '');

	      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? stringToArray(result).slice(0, padLength).join('')
	        : result.slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newArgPos = argPos ? copyArray(argPos) : undefined,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, newArgPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return result;
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = toInteger(precision);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBaseWrapper(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurryWrapper(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartialWrapper(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var index = -1,
	          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(array, other);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isUnordered) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object) ? other != +other : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          // Recursively compare objects (susceptible to call stack limits).
	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask | UNORDERED_COMPARE_FLAG, stack.set(object, other));

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
	     * customized this function returns the custom method, otherwise it returns
	     * `baseIteratee`. If arguments are provided the chosen function is invoked
	     * with them and its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = toPairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getPlaceholder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Creates an array of the own symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = getOwnPropertySymbols || function() {
	      return [];
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function getTag(value) {
	      return objectToString.call(value);
	    }

	    // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
	    if ((Map && getTag(new Map) != mapTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : null,
	            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case mapCtorString: return mapTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasFunc(object, path);
	      if (!result && !isKey(path)) {
	        path = baseCastPath(path);
	        object = parent(object, path);
	        if (object != null) {
	          path = last(path);
	          result = hasFunc(object, path);
	        }
	      }
	      var length = object ? object.length : undefined;
	      return result || (
	        !!length && isLength(length) && isIndex(path, length) &&
	        (isArray(object) || isString(object) || isArguments(object))
	      );
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototypeOf(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (typeof value == 'number') {
	        return true;
	      }
	      return !isArray(value) &&
	        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	          (object != null && value in Object(object)));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return type == 'number' || type == 'boolean' ||
	        (type == 'string' && value != '__proto__') || value == null;
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * modify function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = copyArray(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	      }
	      return objValue;
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    function stringToPath(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=0] The length of each chunk.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size) {
	      size = nativeMax(toInteger(size), 0);

	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var concat = rest(function(array, values) {
	      if (!isArray(array)) {
	        array = array == null ? [] : [Object(array)];
	      }
	      values = baseFlatten(values, 1);
	      return arrayConcat(array, values);
	    });

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([3, 2, 1], [4, 2]);
	     * // => [3, 1]
	     */
	    var difference = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	     * // => [3.1, 1.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = rest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = rest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3))
	        : -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3), true)
	        : -1;
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	     * from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      fromIndex = toInteger(fromIndex);
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [4, 2], [1, 2]);
	     * // => [2]
	     */
	    var intersection = rest(function(arrays) {
	      var mapped = arrayMap(arrays, baseCastArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = rest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, baseCastArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = rest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, baseCastArrayLikeObject);

	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    var pull = rest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified individually or in arrays.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = rest(function(array, indexes) {
	      indexes = arrayMap(baseFlatten(indexes, 1), String);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(compareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
	     * to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniqBy(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with three
	     * arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2, 1], [4, 2], [1, 2]);
	     * // => [2, 1, 4]
	     */
	    var union = rest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1, 1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([2, 1], [4, 2]);
	     * // => [1, 4]
	     */
	    var xor = rest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by which
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = rest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property names and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} [props=[]] The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} [props=[]] The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = rest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
	     * The result of such method chaining must be unwrapped with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     *
	     * _(['a', 'b', 'c']).at(0, 2).value();
	     * // => ['a', 'c']
	     */
	    var wrapperAt = rest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * This method is the wrapper version of `_.flatMap`.
	     *
	     * @name flatMap
	     * @memberOf _
	     * @category Seq
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _([1, 2]).flatMap(duplicate).value();
	     * // => [1, 1, 2, 2]
	     */
	    function wrapperFlatMap(iteratee) {
	      return this.map(iteratee).flatten();
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    function find(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate, true);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Creates an array of flattened values by running each element in `collection`
	     * through `iteratee` and concating its result to the other mapped values.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
	     * for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => logs `1` then `2`
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' then 'b' (iteration order is not guaranteed)
	     */
	    function forEach(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, baseCastFunction(iteratee));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => logs `2` then `1`
	     */
	    function forEachRight(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, baseCastFunction(iteratee));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of elements responsible for generating the key.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string it's checked
	     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it's
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = rest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
	     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
	     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
	     * and `words`
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getIteratee(predicate, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;

	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=0] The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = baseClamp(toInteger(n), 0, length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      return keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by, specified individually or in arrays.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortBy = rest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees.length = 1;
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @type {Function}
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = Date.now;

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = rest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = rest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it's invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          leading = false,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function flush() {
	        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
	          result = func.apply(thisArg, args);
	        }
	        cancel();
	        return result;
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!lastCalled && !maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled);

	          var isCalled = (remaining <= 0 || remaining > maxWait) &&
	            (leading || maxTimeoutId);

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => logs 'deferred' after one or more milliseconds
	     */
	    var defer = rest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = rest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrapper(func, FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified individually or in arrays.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = rest(function(func, transforms) {
	      transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());

	      var funcsLength = transforms.length;
	      return rest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partial));
	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partialRight));
	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified individually or in arrays.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = rest(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, array);
	          case 1: return func.call(this, args[0], array);
	          case 2: return func.call(this, args[0], args[1], array);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return rest(function(args) {
	        var array = args[start],
	            otherArgs = args.slice(0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }

	    /**
	     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @type {Function}
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    function isArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = !Buffer ? constant(false) : function(value) {
	      return value instanceof Buffer;
	    };

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty collection or object. A value is considered
	     * empty if it's an `arguments` object, array, string, or jQuery-like collection
	     * with a length of `0` or has no own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) ||
	            isFunction(value.splice) || isArguments(value))) {
	        return !value.length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined` comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MAX_VALUE);
	     * // => true
	     *
	     * _.isFinite(3.14);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    function isMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined` comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(funcToString.call(value));
	      }
	      return isObjectLike(value) &&
	        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototypeOf(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    function isSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3');
	     * // => 3
	     */
	    function toInteger(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      var remainder = value % 1;
	      return value === value ? (remainder ? value - remainder : value) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3);
	     * // => 3
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3');
	     * // => 3
	     */
	    function toNumber(value) {
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string if it's not one. An empty string is returned
	     * for `null` and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (value == null) {
	        return '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source objects to the destination
	     * object. Source objects are applied from left to right. Subsequent sources
	     * overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.c = 3;
	     * }
	     *
	     * function Bar() {
	     *   this.e = 5;
	     * }
	     *
	     * Foo.prototype.d = 4;
	     * Bar.prototype.f = 6;
	     *
	     * _.assign({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3, 'e': 5 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * function Bar() {
	     *   this.d = 4;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     * Bar.prototype.e = 5;
	     *
	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer` which
	     * is invoked to produce the assigned values. If `customizer` returns `undefined`
	     * assignment is handled by the method instead. The `customizer` is invoked
	     * with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObjectWith(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer` which
	     * is invoked to produce the assigned values. If `customizer` returns `undefined`
	     * assignment is handled by the method instead. The `customizer` is invoked
	     * with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObjectWith(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick,
	     *  specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     *
	     * _.at(['a', 'b', 'c'], 0, 2);
	     * // => ['a', 'c']
	     */
	    var at = rest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });

	    /**
	     * Creates an object that inherits from the `prototype` object. If a `properties`
	     * object is given its own enumerable properties are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own and inherited enumerable properties of source objects to the
	     * destination object for all destination properties that resolve to `undefined`.
	     * Source objects are applied from left to right. Once a property is set,
	     * additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = rest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = rest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The iteratee is invoked with three arguments:
	     * (value, key, object). Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, baseCastFunction(iteratee), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, baseCastFunction(iteratee), keysIn);
	    }

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The iteratee is invoked with three arguments:
	     * (value, key, object). Iteratee functions may exit iteration early by
	     * explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' then 'b' (iteration order is not guaranteed)
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, baseCastFunction(iteratee));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, baseCastFunction(iteratee));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b.c');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b', 'c']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` through `iteratee`.
	     * The corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = rest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`. The iteratee is invoked with
	     * three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee is invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable properties of source objects into the destination
	     * object. Source properties that resolve to `undefined` are skipped if a
	     * destination value exists. Array and plain object properties are merged
	     * recursively.Other objects and value types are overridden by assignment.
	     * Source objects are applied from left to right. Subsequent sources
	     * overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined` merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property names to omit, specified
	     *  individually or in arrays.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = rest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), String);
	      return basePick(object, baseDifference(keysIn(object), props));
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable properties of `object` that `predicate`
	     * doesn't return truthy for. The predicate is invoked with two arguments:
	     * (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      predicate = getIteratee(predicate);
	      return basePickBy(object, function(value, key) {
	        return !predicate(value, key);
	      });
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property names to pick, specified
	     *  individually or in arrays.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = rest(function(object, props) {
	      return object == null ? {} : basePick(object, baseFlatten(props, 1));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it's invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      if (!isKey(path, object)) {
	        path = baseCastPath(path);
	        var result = get(object, path);
	        object = parent(object, path);
	      } else {
	        result = object == null ? undefined : object[path];
	      }
	      if (result === undefined) {
	        result = defaultValue;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable key-value pairs for `object` which
	     * can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    function toPairs(object) {
	      return baseToPairs(object, keys(object));
	    }

	    /**
	     * Creates an array of own and inherited enumerable key-value pairs for
	     * `object` which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
	     */
	    function toPairsIn(object) {
	      return baseToPairs(object, keysIn(object));
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The iteratee is invoked with four arguments:
	     * (accumulator, value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototypeOf(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
	     * a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = typeof target == 'string' ? target : (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = stringSize(string);
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      return string + createPadding(string, length, chars);
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      return createPadding(string, length, chars) + string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      string = toString(string);
	      n = toInteger(n);

	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the new array of string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      return toString(string).split(separator, limit);
	    }

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + capitalize(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar');
	     * // => '--foo-bar'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar');
	     * // => '--FOO-BAR'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrim, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars);

	      return strSymbols
	        .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)
	        .join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimEnd, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string);
	      return strSymbols
	        .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)
	        .join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimStart, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string);
	      return strSymbols
	        .slice(charsStartIndex(strSymbols, stringToArray(chars)))
	        .join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options=({})] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? toString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? strSymbols.slice(0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = rest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, 'onClick');
	     * jQuery(element).on('click', view.onClick);
	     * // => logs 'clicked docs' when clicked
	     */
	    var bindAll = rest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` invoking the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return rest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name the created callback returns the
	     * property value for a given element. If `func` is an object the created
	     * callback returns `true` for elements that contain the equivalent object
	     * properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
	     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
	     *   return !p ? callback(func) : function(object) {
	     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
	     *   };
	     * });
	     *
	     * _.filter(users, 'age > 36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = rest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = rest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns its nth argument.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     *
	     * func('a', 'b', 'c');
	     * // => 'b'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return function() {
	        return arguments[n];
	      };
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments provided
	     * to the created function and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over(Math.max, Math.min);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments provided to the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} predicates The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments provided to the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} predicates The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = baseCastFunction(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
	    function toPath(value) {
	      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      var result;
	      if (augend === undefined && addend === undefined) {
	        return 0;
	      }
	      if (augend !== undefined) {
	        result = augend;
	      }
	      if (addend !== undefined) {
	        result = result === undefined ? addend : (result + addend);
	      }
	      return result;
	    }

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey
	     * `undefined` is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, gt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), gt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return sum(array) / (array ? array.length : 0);
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey
	     * `undefined` is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, lt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), lt)
	        : undefined;
	    }

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    function subtract(minuend, subtrahend) {
	      var result;
	      if (minuend === undefined && subtrahend === undefined) {
	        return 0;
	      }
	      if (minuend !== undefined) {
	        result = minuend;
	      }
	      if (subtrahend !== undefined) {
	        result = result === undefined ? subtrahend : (result - subtrahend);
	      }
	      return result;
	    }

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Avoid inheriting from `Object.prototype` when possible.
	    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	    // Add functions to the `MapCache`.
	    MapCache.prototype.clear = mapClear;
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `SetCache`.
	    SetCache.prototype.push = cachePush;

	    // Add functions to the `Stack` cache.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      predicate = getIteratee(predicate, 3);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.flatMap = wrapperFlatMap;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Expose lodash on the free variable `window` or `self` when available. This
	  // prevents errors in cases where lodash is loaded by a script tag in the presence
	  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
	  (freeWindow || freeSelf || {})._ = _;

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 330 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 331 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	module.exports = {
	  100: 'Continue',
	  101: 'Switching Protocols',
	  200: 'OK',
	  201: 'Created',
	  202: 'Accepted',
	  203: 'Non-Authoritative Information',
	  204: 'No Content',
	  205: 'Reset Content',
	  206: 'Partial Content',
	  300: 'Multiple Choices',
	  301: 'Moved Permanently',
	  302: 'Found',
	  303: 'See Other',
	  304: 'Not Modified',
	  305: 'Use Proxy',
	  307: 'Temporary Redirect',
	  400: 'Bad Request',
	  401: 'Unauthorized',
	  402: 'Payment Required',
	  403: 'Forbidden',
	  404: 'Not Found',
	  405: 'Method Not Allowed',
	  406: 'Not Acceptable',
	  407: 'Proxy Authentication Required',
	  408: 'Request Time-out',
	  409: 'Conflict',
	  410: 'Gone',
	  411: 'Length Required',
	  412: 'Precondition Failed',
	  413: 'Request Entity Too Large',
	  414: 'Request-URI Too Large',
	  415: 'Unsupported Media Type',
	  416: 'Requested Range not Satisfiable',
	  417: 'Expectation Failed',
	  422: 'Unprocessable Entity',
	  429: 'Too Many Requests',
	  451: 'Unavailable For Legal Reasons',
	  500: 'Internal Server Error',
	  501: 'Not Implemented',
	  502: 'Bad Gateway',
	  503: 'Service Unavailable',
	  504: 'Gateway Time-out',
	  505: 'HTTP Version not Supported',
	  CONTINUE: 100,
	  SWITCHING_PROTOCOLS: 101,
	  OK: 200,
	  CREATED: 201,
	  ACCEPTED: 202,
	  NON_AUTHORITATIVE_INFORMATION: 203,
	  NO_CONTENT: 204,
	  RESET_CONTENT: 205,
	  PARTIAL_CONTENT: 206,
	  MULTIPLE_CHOICES: 300,
	  MOVED_PERMANENTLY: 301,
	  FOUND: 302,
	  SEE_OTHER: 303,
	  NOT_MODIFIED: 304,
	  USE_PROXY: 305,
	  TEMPORARY_REDIRECT: 307,
	  BAD_REQUEST: 400,
	  UNAUTHORIZED: 401,
	  PAYMENT_REQUIRED: 402,
	  FORBIDDEN: 403,
	  NOT_FOUND: 404,
	  METHOD_NOT_ALLOWED: 405,
	  NOT_ACCEPTABLE: 406,
	  PROXY_AUTHENTICATION_REQUIRED: 407,
	  REQUEST_TIMEOUT: 408,
	  CONFLICT: 409,
	  GONE: 410,
	  LENGTH_REQUIRED: 411,
	  PRECONDITION_FAILED: 412,
	  REQUEST_ENTITY_TOO_LARGE: 413,
	  REQUEST_URI_TOO_LONG: 414,
	  UNSUPPORTED_MEDIA_TYPE: 415,
	  REQUESTED_RANGE_NOT_SATISFIABLE: 416,
	  EXPECTATION_FAILED: 417,
	  UNPROCESSABLE_ENTITY: 422,
	  TOO_MANY_REQUESTS: 429,
	  UNAVAILABLE_FOR_LEGAL_REASONS: 451,
	  INTERNAL_SERVER_ERROR: 500,
	  NOT_IMPLEMENTED: 501,
	  BAD_GATEWAY: 502,
	  SERVICE_UNAVAILABLE: 503,
	  GATEWAY_TIMEOUT: 504,
	  HTTP_VERSION_NOT_SUPPORTED: 505
	};


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.catch = exports.new = exports.empty = exports.returnOnePromise = exports.returnZeroPromise = exports.returnFalsePromise = exports.returnTruePromise = exports.returnNullPromise = exports.returnFailed = exports.returnSucceeded = exports.promiseOne = exports.promiseZero = exports.promiseFalse = exports.promiseTrue = exports.promiseNull = exports.promiseFailed = exports.promiseSucceeded = exports.returnOne = exports.returnZero = exports.returnFalse = exports.returnTrue = exports.returnNull = exports.valueOf = exports.stack = exports.dumpPromise = undefined;

	var _marked = [concat].map(regeneratorRuntime.mark);

	exports.dump = dump;
	exports.mapObj = mapObj;
	exports.rests = rests;
	exports.pad = pad;
	exports.time = time;
	exports.options = options;
	exports.str = str;
	exports.returnThis = returnThis;
	exports.when = when;
	exports.JSONEqual = JSONEqual;
	exports.call = call;
	exports.rethrow = rethrow;
	exports.catchMap = catchMap;
	exports.catchCall = catchCall;
	exports.unique = unique;
	exports.joinData = joinData;
	exports.on = on;
	exports.off = off;
	exports.property = property;
	exports.isSet = isSet;
	exports.concatString = concatString;
	exports.measure = measure;
	exports.copy = copy;
	exports.array1 = array1;
	exports.array = array;
	exports.buffer = buffer;
	exports.vector = vector;
	exports.concat = concat;
	exports.word = word;
	exports.dword = dword;
	exports.makeWord = makeWord;
	exports.arrayEqual = arrayEqual;
	exports.compare = compare;
	exports.formatms = formatms;
	exports.get = get;
	exports.limitCalls = limitCalls;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var LiteralPrototype = Object.getPrototypeOf({});

	var dumpPromise = exports.dumpPromise = function dumpPromise(p) {
	  return p.then(function (result) {
	    return console.log("result:", result);
	  }, function (error) {
	    return console.error("error:", error);
	  });
	};

	function dump(msg, value) {
	  console.log(msg, value);
	  return value;
	}

	function mapObj(obj, props) {
	  var ret = Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);
	  lodash.forEach(props, function (fun, key) {
	    ret[key] = typeof fun == "function" ? fun(obj[key]) : fun;
	  });
	  return ret;
	}

	function rests(num) {
	  for (var _len = arguments.length, rests = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    rests[_key - 1] = arguments[_key];
	  }

	  var ret = [];
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = rests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var r = _step.value;

	      var n = num % r;
	      num = (num - n) / r;
	      ret.push(n);
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return ret;
	}

	function pad(s, n, p) {
	  s = String(s);
	  var x = "";
	  n -= s.length;
	  while (n > 0) {
	    x += p;
	    --n;
	  }
	  return x + s;
	}

	function time() {
	  var d = new Date();
	  return d.getHours() + ":" + pad(d.getMinutes(), 2, 0) + ":" + pad(d.getSeconds(), 2, 0) + "." + pad(d.getMilliseconds(), 3, 0);
	}

	var stack = exports.stack = function stack() {
	  return new Error().stack;
	};

	function options(options, def) {
	  var ret = {};
	  for (var i in def) {
	    if (Object.prototype.hasOwnProperty.call(def, i)) if (options == null) ret[i] = def[i];else {
	      var op = options[i];
	      if (op == null) op = def[i];
	      ret[i] = op;
	    }
	  }return ret;
	}

	function str(obj, depth) {
	  if (depth == null) depth = 1;
	  if (!obj || !depth || depth < 1) return "" + obj;
	  if (Array.isArray(obj)) return "[ " + obj.map(function (x) {
	    return str(x, depth - 1);
	  }).join(" ") + " ]";
	  if (!obj.constructor || obj.constructor == Object) return "{ " + Object.keys(obj).map(function (x) {
	    return x + "=" + str(obj[x], depth - 1);
	  }).join(" ") + " }";
	  return String(obj);
	}

	var valueOf = exports.valueOf = function valueOf(val) {
	  return val == null ? null : val.valueOf == null ? val : val.valueOf();
	};

	function returnThis() {
	  return this;
	}

	var returnNull = exports.returnNull = function returnNull() {
	  return null;
	};

	var returnTrue = exports.returnTrue = function returnTrue() {
	  return true;
	};

	var returnFalse = exports.returnFalse = function returnFalse() {
	  return false;
	};

	var returnZero = exports.returnZero = function returnZero() {
	  return 0;
	};

	var returnOne = exports.returnOne = function returnOne() {
	  return 1;
	};

	var promiseSucceeded = exports.promiseSucceeded = _bluebird2.default.resolve();

	var promiseFailed = exports.promiseFailed = _bluebird2.default.reject(new Error("failed"));
	promiseFailed.catch(lodash.noop); // shut up warnings about unhandled reject

	var promiseNull = exports.promiseNull = _bluebird2.default.resolve(null);

	var promiseTrue = exports.promiseTrue = _bluebird2.default.resolve(true);

	var promiseFalse = exports.promiseFalse = _bluebird2.default.resolve(false);

	var promiseZero = exports.promiseZero = _bluebird2.default.resolve(0);

	var promiseOne = exports.promiseOne = _bluebird2.default.resolve(1);

	var returnSucceeded = exports.returnSucceeded = function returnSucceeded() {
	  return promiseSucceeded;
	};

	var returnFailed = exports.returnFailed = function returnFailed() {
	  return promiseFailed;
	};

	var returnNullPromise = exports.returnNullPromise = function returnNullPromise() {
	  return promiseNull;
	};

	var returnTruePromise = exports.returnTruePromise = function returnTruePromise() {
	  return promiseTrue;
	};

	var returnFalsePromise = exports.returnFalsePromise = function returnFalsePromise() {
	  return promiseFalse;
	};

	var returnZeroPromise = exports.returnZeroPromise = function returnZeroPromise() {
	  return promiseZero;
	};

	var returnOnePromise = exports.returnOnePromise = function returnOnePromise() {
	  return promiseOne;
	};

	function when(promise, cb) {
	  if (promise != null) promise.then(cb, cb);else process.nextTick(cb);
	  return promise;
	}

	var empty = exports.empty = Object.freeze(Object.create(null));

	function JSONEqual(a, b) {
	  return JSON.stringify(a) == JSON.stringify(b);
	}

	exports.new = _new;

	function _new() {
	  for (var _len2 = arguments.length, descedents = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    descedents[_key2] = arguments[_key2];
	  }

	  return Object.assign.apply(Object, [{}].concat(descedents));
	}

	function call(fun) {
	  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    args[_key3 - 1] = arguments[_key3];
	  }

	  return fun.apply(undefined, args);
	}

	function rethrow(e) {
	  process.nextTick(function () {
	    throw e;
	  });
	}

	// optimization -- using try/catch in a separate function.
	exports.catch = _catch;

	function _catch(cb, ret) {
	  try {
	    return cb();
	  } catch (e) {
	    return ret(e);
	  }
	}

	function catchMap(cb, mapResult, mapError) {
	  var result = void 0;
	  try {
	    result = cb();
	  } catch (error) {
	    return mapError(error);
	  }
	  return mapResult(result);
	}

	function catchCall(cb) {
	  try {
	    return { ok: true, result: cb() };
	  } catch (error) {
	    return { ok: false, error: error };
	  }
	}

	function unique(value, index, array) {
	  return index == 0 || value != array[index - 1];
	}

	function joinData(array) {
	  return array.length == 0 ? "" : typeof array[0] == "string" ? array.join("") : Buffer.isBuffer(array[0]) ? Buffer.concat(array) : array.join("");
	}

	function on(emitter, events) {
	  lodash.forEach(events, function (handler, event) {
	    emitter.on(event, handler);
	  });
	}

	function off(emitter, events) {
	  lodash.forEach(events, function (handler, event) {
	    emitter.removeListener(event, handler);
	  });
	}

	function property(obj, name, defaultValue) {
	  var privateName = "_" + name;
	  if (arguments.length > 2) obj[privateName] = defaultValue;
	  obj[name] = function (value) {
	    if (arguments.length == 0) return obj[privateName];else {
	      obj[privateName] = value;
	      return obj;
	    }
	  };
	  return obj;
	}

	function isSet(obj) {
	  if (obj == null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  return proto === LiteralPrototype || proto === null;
	}

	function concatString(array) {
	  var ret = "";
	  !function walk(array) {
	    if (typeof array != "object") ret += array;else if (array.length != null) array.forEach(walk);else {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = array[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var s = _step2.value;

	          walk(s);
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }
	  }(array);
	  return ret;
	}

	function measure(fun) {
	  var now = global.performance || global.Date;
	  var t = now.now();
	  try {
	    return fun();
	  } finally {
	    t = (now.now() - t) / 1000;
	    if (t > 0) {
	      var i = 1;
	      while (t < 1000) {
	        i *= 10;
	        t *= 10;
	      }
	      t = Math.round(t) / i;
	    }
	    console.log(t);
	  }
	}

	function copy(buf) {
	  var ret = array(buf);
	  if (ret == buf) ret = buf.slice();
	  return ret;
	}

	function array1(value) {
	  if (Array.isArray(value)) return value;else return [value];
	}

	function array(buf) {
	  if (Array.isArray(buf)) return buf;
	  var ret = [];
	  if (!buf[Symbol.iterator]) for (var i = 0; i < buf.length; ++i) {
	    ret.push(buf[i]);
	  } else {
	    var _iteratorNormalCompletion3 = true;
	    var _didIteratorError3 = false;
	    var _iteratorError3 = undefined;

	    try {
	      for (var _iterator3 = buf[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	        var b = _step3.value;

	        ret.push(b);
	      }
	    } catch (err) {
	      _didIteratorError3 = true;
	      _iteratorError3 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	          _iterator3.return();
	        }
	      } finally {
	        if (_didIteratorError3) {
	          throw _iteratorError3;
	        }
	      }
	    }
	  }return ret;
	}

	function buffer(buf) {
	  if (buf instanceof Buffer) return buf;else return new Buffer(array(buf));
	}

	function vector(buf) {
	  return buf instanceof Buffer ? buf : array(buf);
	}

	function concat(list) {
	  var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, l, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, x;

	  return regeneratorRuntime.wrap(function concat$(_context) {
	    while (1) switch (_context.prev = _context.next) {
	      case 0:
	        _iteratorNormalCompletion4 = true;
	        _didIteratorError4 = false;
	        _iteratorError4 = undefined;
	        _context.prev = 3;
	        _iterator4 = list[Symbol.iterator]();

	      case 5:
	        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
	          _context.next = 36;
	          break;
	        }

	        l = _step4.value;
	        _iteratorNormalCompletion5 = true;
	        _didIteratorError5 = false;
	        _iteratorError5 = undefined;
	        _context.prev = 10;
	        _iterator5 = l[Symbol.iterator]();

	      case 12:
	        if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
	          _context.next = 19;
	          break;
	        }

	        x = _step5.value;
	        _context.next = 16;
	        return x;

	      case 16:
	        _iteratorNormalCompletion5 = true;
	        _context.next = 12;
	        break;

	      case 19:
	        _context.next = 25;
	        break;

	      case 21:
	        _context.prev = 21;
	        _context.t0 = _context["catch"](10);
	        _didIteratorError5 = true;
	        _iteratorError5 = _context.t0;

	      case 25:
	        _context.prev = 25;
	        _context.prev = 26;

	        if (!_iteratorNormalCompletion5 && _iterator5.return) {
	          _iterator5.return();
	        }

	      case 28:
	        _context.prev = 28;

	        if (!_didIteratorError5) {
	          _context.next = 31;
	          break;
	        }

	        throw _iteratorError5;

	      case 31:
	        return _context.finish(28);

	      case 32:
	        return _context.finish(25);

	      case 33:
	        _iteratorNormalCompletion4 = true;
	        _context.next = 5;
	        break;

	      case 36:
	        _context.next = 42;
	        break;

	      case 38:
	        _context.prev = 38;
	        _context.t1 = _context["catch"](3);
	        _didIteratorError4 = true;
	        _iteratorError4 = _context.t1;

	      case 42:
	        _context.prev = 42;
	        _context.prev = 43;

	        if (!_iteratorNormalCompletion4 && _iterator4.return) {
	          _iterator4.return();
	        }

	      case 45:
	        _context.prev = 45;

	        if (!_didIteratorError4) {
	          _context.next = 48;
	          break;
	        }

	        throw _iteratorError4;

	      case 48:
	        return _context.finish(45);

	      case 49:
	        return _context.finish(42);

	      case 50:
	      case "end":
	        return _context.stop();
	    }
	  }, _marked[0], this, [[3, 38, 42, 50], [10, 21, 25, 33], [26,, 28, 32], [43,, 45, 49]]);
	}

	function word(w) {
	  return [w & 0xff, w >> 8 & 0xff];
	}

	function dword(w) {
	  return [w & 0xff, w >> 8 & 0xff, w >> 16 & 0xff, w >> 24 & 0xff];
	}

	function makeWord(lo, hi) {
	  return (lo & 0xff) + (hi & 0xff) << 8;
	}

	function arrayEqual(a, b) {
	  return a && b && a.length == b.length && a.every(function (ai, i) {
	    return ai == b[i];
	  });
	}

	function compare(a, b) {
	  if (a == b) return 0;
	  if (a < b) return -1;
	  return 1;
	}

	function formatms(value) {
	  var ret = "";
	  value = Math.round(value);
	  var ms = value % 1000;
	  value -= ms;
	  value /= 1000;
	  var s = value % 60;
	  value -= s;
	  value /= 60;
	  var m = value % 60;
	  value -= m;
	  value /= 60;
	  var h = value;
	  ret += h ? h : "";
	  ret += ret ? ":" + z(m, 2) : m ? m : "";
	  ret += ret ? ":" + z(s, 2) : s;
	  ret += "." + z(ms, 3);
	  return ret;
	  function z(value, len) {
	    var str = String(value);
	    var ret = "";
	    for (var i = str.length; i < len; ++i) {
	      ret += "0";
	    }ret += str;
	    return ret;
	  }
	}

	function get(obj) {
	  for (var _len4 = arguments.length, path = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	    path[_key4 - 1] = arguments[_key4];
	  }

	  var _iteratorNormalCompletion6 = true;
	  var _didIteratorError6 = false;
	  var _iteratorError6 = undefined;

	  try {
	    for (var _iterator6 = path[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	      var p = _step6.value;

	      if (obj == null) break;else obj = obj[p];
	    }
	  } catch (err) {
	    _didIteratorError6 = true;
	    _iteratorError6 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion6 && _iterator6.return) {
	        _iterator6.return();
	      }
	    } finally {
	      if (_didIteratorError6) {
	        throw _iteratorError6;
	      }
	    }
	  }

	  return obj;
	}

	function limitCalls(limit, period, message) {
	  var calls = 0;
	  return function () {
	    if (calls >= limit) if (message) throw new Error.create(message);else return false;
	    ++calls;
	    setTimeout(function () {
	      return --calls;
	    }, period);
	    return true;
	  };
	}

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.do = exports.default = exports.defun = undefined;

	var _this = this;

	var _marked = [doAsyncGenerator, doGenerator].map(regeneratorRuntime.mark);

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defers = [];
	// let defers = null
	// let dcount = 0
	// const noop = () => {}
	// let sbuf = null // speed becomes even worth a bit. memory was not measured.

	var rewindStack0 = function rewindStack0(defer) {
	  var s = defer._s;
	  while (s) {
	    var _proc = s.proc;
	    // s.proc = noop
	    // s.n = sbuf
	    // sbuf = s
	    s = defer._s = s.n;
	    var ret = _proc();
	    if (ret != null && typeof ret == "object") {
	      if (typeof ret.then == "function") throw new Error("async defer is not allowed in non-async function");
	      if (typeof ret.next == "function") throw new Error("generator defer is not allowed in non-generator function");
	    }
	  }
	  // defer._n = defers
	  // defers = defer
	  // ++dcount
	  defers.push(defer);
	};

	var rewindStack = function rewindStack(defer) {
	  var error = void 0,
	      isError = false;
	  while (defer._s) {
	    try {
	      rewindStack0(defer);
	    } catch (e) {
	      isError = true;
	      error = e;
	    }
	  }if (isError) throw error;
	};

	var rewindStackA = function rewindStackA(defer) {
	  var error, isError, s, _proc2;

	  return regeneratorRuntime.async(function rewindStackA$(_context) {
	    while (1) switch (_context.prev = _context.next) {
	      case 0:
	        error = void 0, isError = false, s = defer._s;

	      case 1:
	        if (!s) {
	          _context.next = 15;
	          break;
	        }

	        _context.prev = 2;
	        _proc2 = s.proc;
	        // s.proc = noop
	        // s.n = sbuf
	        // sbuf = s

	        s = defer._s = s.n;
	        _context.next = 7;
	        return regeneratorRuntime.awrap(_proc2());

	      case 7:
	        _context.next = 13;
	        break;

	      case 9:
	        _context.prev = 9;
	        _context.t0 = _context["catch"](2);

	        isError = true;
	        error = _context.t0;

	      case 13:
	        _context.next = 1;
	        break;

	      case 15:
	        defers.push(defer);
	        // defer._n = defers
	        // defers = defer
	        // ++dcount

	        if (!isError) {
	          _context.next = 18;
	          break;
	        }

	        throw error;

	      case 18:
	      case "end":
	        return _context.stop();
	    }
	  }, null, _this, [[2, 9]]);
	};

	var rewindStackG = regeneratorRuntime.mark(function rewindStackG(defer) {
	  var error, isError, s, _proc3, ret;

	  return regeneratorRuntime.wrap(function rewindStackG$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        error = void 0, isError = false, s = defer._s;

	      case 1:
	        if (!s) {
	          _context2.next = 19;
	          break;
	        }

	        _context2.prev = 2;
	        _proc3 = s.proc;
	        // s.proc = noop
	        // s.n = sbuf
	        // sbuf = s

	        s = defer._s = s.n;
	        ret = _proc3();

	        if (!(ret != null && typeof ret == "object")) {
	          _context2.next = 11;
	          break;
	        }

	        if (!(typeof ret.then == "function")) {
	          _context2.next = 9;
	          break;
	        }

	        throw new Error("async defer is not allowed in non-async function");

	      case 9:
	        if (!(typeof ret.next == "function" && typeof ret[Symbol.iterator] == "function")) {
	          _context2.next = 11;
	          break;
	        }

	        return _context2.delegateYield(ret, "t0", 11);

	      case 11:
	        _context2.next = 17;
	        break;

	      case 13:
	        _context2.prev = 13;
	        _context2.t1 = _context2["catch"](2);

	        isError = true;
	        error = _context2.t1;

	      case 17:
	        _context2.next = 1;
	        break;

	      case 19:
	        defers.push(defer);
	        // defer._n = defers
	        // defers = defer
	        // ++dcount

	        if (!isError) {
	          _context2.next = 22;
	          break;
	        }

	        throw error;

	      case 22:
	      case "end":
	        return _context2.stop();
	    }
	  }, rewindStackG, this, [[2, 13]]);
	});

	var rewindStackAG = regeneratorRuntime.mark(function rewindStackAG(defer) {
	  var error, isError, s, _proc4, ret, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, i, _5, _4, _3, _2, _1, _i;

	  return regeneratorRuntime.async(function rewindStackAG$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	        error = void 0, isError = false, s = defer._s;

	      case 1:
	        if (!s) {
	          _context3.next = 75;
	          break;
	        }

	        _context3.prev = 2;
	        _proc4 = s.proc;
	        // s.proc = noop
	        // s.n = sbuf
	        // sbuf = s

	        s = defer._s = s.n;
	        _context3.next = 7;
	        return regeneratorRuntime.awrap(_proc4());

	      case 7:
	        ret = _context3.sent;

	        if (!(ret != null && typeof ret == "object")) {
	          _context3.next = 67;
	          break;
	        }

	        if (!(typeof ret.next == "function" && typeof ret[Symbol.iterator] == "function")) {
	          _context3.next = 38;
	          break;
	        }

	        _iteratorNormalCompletion = true;
	        _didIteratorError = false;
	        _iteratorError = undefined;
	        _context3.prev = 13;
	        _iterator = ret[Symbol.iterator]();

	      case 15:
	        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	          _context3.next = 22;
	          break;
	        }

	        i = _step.value;
	        _context3.next = 19;
	        return i;

	      case 19:
	        _iteratorNormalCompletion = true;
	        _context3.next = 15;
	        break;

	      case 22:
	        _context3.next = 28;
	        break;

	      case 24:
	        _context3.prev = 24;
	        _context3.t0 = _context3["catch"](13);
	        _didIteratorError = true;
	        _iteratorError = _context3.t0;

	      case 28:
	        _context3.prev = 28;
	        _context3.prev = 29;

	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }

	      case 31:
	        _context3.prev = 31;

	        if (!_didIteratorError) {
	          _context3.next = 34;
	          break;
	        }

	        throw _iteratorError;

	      case 34:
	        return _context3.finish(31);

	      case 35:
	        return _context3.finish(28);

	      case 36:
	        _context3.next = 67;
	        break;

	      case 38:
	        if (!(typeof ret.next == "function" && typeof ret[Symbol.asyncIterator] == "function")) {
	          _context3.next = 67;
	          break;
	        }

	        _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = ret[Symbol.asyncIterator]();
	        _context3.prev = 40;

	      case 41:
	        _3 = false;
	        _context3.next = 44;
	        return regeneratorRuntime.awrap(_1.next());

	      case 44:
	        if ((_2 = _context3.sent).done) {
	          _context3.next = 51;
	          break;
	        }

	        _3 = true;
	        _i = _2.value;
	        _context3.next = 49;
	        return _i;

	      case 49:
	        _context3.next = 41;
	        break;

	      case 51:
	        _context3.next = 57;
	        break;

	      case 53:
	        _context3.prev = 53;
	        _context3.t1 = _context3["catch"](40);
	        _5 = true;
	        _4 = _context3.t1;

	      case 57:
	        _context3.prev = 57;
	        _context3.prev = 58;

	        if (!(_3 && _1.return)) {
	          _context3.next = 62;
	          break;
	        }

	        _context3.next = 62;
	        return regeneratorRuntime.awrap(_1.return());

	      case 62:
	        _context3.prev = 62;

	        if (!_5) {
	          _context3.next = 65;
	          break;
	        }

	        throw _4;

	      case 65:
	        return _context3.finish(62);

	      case 66:
	        return _context3.finish(57);

	      case 67:
	        _context3.next = 73;
	        break;

	      case 69:
	        _context3.prev = 69;
	        _context3.t2 = _context3["catch"](2);

	        isError = true;
	        error = _context3.t2;

	      case 73:
	        _context3.next = 1;
	        break;

	      case 75:
	        defers.push(defer);
	        // defer._n = defers
	        // defers = defer
	        // ++dcount

	        if (!isError) {
	          _context3.next = 78;
	          break;
	        }

	        throw error;

	      case 78:
	      case "end":
	        return _context3.stop();
	    }
	  }, rewindStackAG, this, [[2, 69], [13, 24, 28, 36], [29,, 31, 35], [40, 53, 57, 67], [58,, 62, 66]]);
	});

	var rewindNow = false,
	    self = void 0,
	    proc = void 0,
	    arg0 = void 0,
	    arg1 = void 0,
	    arg2 = void 0,
	    arg3 = void 0,
	    args = [],
	    procX = void 0;

	function doTry(defer) {
	  try {
	    return doProc(defer);
	  } catch (e) {
	    fin(defer, true);
	    throw e;
	  }
	}

	function fin(defer, error) {
	  if (args.length) args.length = 0;
	  self = proc = arg0 = arg1 = arg2 = arg3 = undefined;
	  if (error || rewindNow) {
	    // if error is false then rewindNow is true.
	    // if error is true than it can be either
	    //   1. Error while calling user proc. Then rewindNow isn't yet assigned. So, do rewind.
	    //   or
	    //   2. Error while previous fin. Then rewindNow WAS true because fin was running with error==false so rewindNow had to be true. So, do the rest of rewind.
	    rewindNow = false;
	    if (error) rewindStack(defer);else rewindStack0(defer);
	  }
	}

	function doProc(defer) {
	  var ret = procX(defer);
	  rewindNow = true;
	  if (ret != null && typeof ret == "object") {
	    if (typeof ret.then == "function") {
	      rewindNow = false;
	      return doAsync(defer, ret);
	    }
	    if (typeof ret.next == "function") {
	      if (typeof ret[Symbol.iterator] == "function") {
	        rewindNow = false;
	        return doGenerator(defer, ret);
	      }
	      if (typeof ret[Symbol.asyncIterator] == "function") {
	        rewindNow = false;
	        return doAsyncGenerator(defer, ret);
	      }
	    }
	  }
	  fin(defer, false);
	  return ret;
	}

	function doAsyncGenerator(defer, ret) {
	  var i, ok, n, _10, _9, _8, _7, _6, _i2;

	  return regeneratorRuntime.async(function doAsyncGenerator$(_context4) {
	    while (1) switch (_context4.prev = _context4.next) {
	      case 0:
	        _context4.prev = 0;

	        // return yield* ret -- TODO: uncomment after right support in babel
	        i = ret[Symbol.asyncIterator]();
	        ok = true;
	        n = void 0;
	        _context4.prev = 4;

	      case 5:
	        ok = true;
	        _context4.next = 8;
	        return regeneratorRuntime.awrap(i.next());

	      case 8:
	        n = _context4.sent;
	        ok = false;

	        if (n.done) {
	          _context4.next = 15;
	          break;
	        }

	        _context4.next = 13;
	        return n.value;

	      case 13:
	        _context4.next = 5;
	        break;

	      case 15:
	        _context4.prev = 15;

	        if (!(!ok && i.return)) {
	          _context4.next = 19;
	          break;
	        }

	        _context4.next = 19;
	        return regeneratorRuntime.awrap(i.return());

	      case 19:
	        return _context4.finish(15);

	      case 20:
	        return _context4.abrupt("return", n.value);

	      case 21:
	        _context4.prev = 21;
	        _10 = void 0, _9 = void 0, _8 = void 0, _7 = void 0, _6 = rewindStackAG(defer)[Symbol.asyncIterator]();
	        _context4.prev = 23;

	      case 24:
	        _8 = false;
	        _context4.next = 27;
	        return regeneratorRuntime.awrap(_6.next());

	      case 27:
	        if ((_7 = _context4.sent).done) {
	          _context4.next = 34;
	          break;
	        }

	        _8 = true;
	        _i2 = _7.value;
	        _context4.next = 32;
	        return _i2;

	      case 32:
	        _context4.next = 24;
	        break;

	      case 34:
	        _context4.next = 40;
	        break;

	      case 36:
	        _context4.prev = 36;
	        _context4.t0 = _context4["catch"](23);
	        _10 = true;
	        _9 = _context4.t0;

	      case 40:
	        _context4.prev = 40;
	        _context4.prev = 41;

	        if (!(_8 && _6.return)) {
	          _context4.next = 45;
	          break;
	        }

	        _context4.next = 45;
	        return regeneratorRuntime.awrap(_6.return());

	      case 45:
	        _context4.prev = 45;

	        if (!_10) {
	          _context4.next = 48;
	          break;
	        }

	        throw _9;

	      case 48:
	        return _context4.finish(45);

	      case 49:
	        return _context4.finish(40);

	      case 50:
	        return _context4.finish(21);

	      case 51:
	      case "end":
	        return _context4.stop();
	    }
	  }, _marked[0], this, [[0,, 21, 51], [4,, 15, 20], [23, 36, 40, 50], [41,, 45, 49]]);
	}

	function doGenerator(defer, ret) {
	  return regeneratorRuntime.wrap(function doGenerator$(_context5) {
	    while (1) switch (_context5.prev = _context5.next) {
	      case 0:
	        _context5.prev = 0;
	        return _context5.delegateYield(ret, "t0", 2);

	      case 2:
	        return _context5.abrupt("return", _context5.t0);

	      case 3:
	        _context5.prev = 3;
	        return _context5.delegateYield(rewindStackG(defer), "t1", 5);

	      case 5:
	        return _context5.finish(3);

	      case 6:
	      case "end":
	        return _context5.stop();
	    }
	  }, _marked[1], this, [[0,, 3, 6]]);
	}

	function doAsync(defer, ret) {
	  return _bluebird2.default.resolve(ret).finally(function () {
	    return rewindStackA(defer);
	  });
	}

	var method0 = function method0(defer) {
	  return proc.call(self, defer);
	};
	var method1 = function method1(defer) {
	  return proc.call(self, defer, arg0);
	};
	var method2 = function method2(defer) {
	  return proc.call(self, defer, arg0, arg1);
	};
	var method3 = function method3(defer) {
	  return proc.call(self, defer, arg0, arg1, arg2);
	};
	var method4 = function method4(defer) {
	  return proc.call(self, defer, arg0, arg1, arg2, arg3);
	};
	var methodN = function methodN(defer) {
	  return proc.apply(self, args);
	};

	function doDefer(defer, proc) {
	  if (typeof proc != "function") throw new Error("wrong argument");
	  // if ( sbuf == null )
	  defer._s = { n: defer._s, proc: proc };
	  // else {
	  // 	let s = sbuf
	  // 	sbuf = s.n
	  // 	s.n = defer._s
	  // 	s.proc = proc
	  // 	defer._s = s
	  // }
	}

	function makeDefer() {
	  if (defers.length) return defers.pop();
	  // if ( defers ) {
	  // 	const defer = defers
	  // 	defers = defers._n
	  // 	--dcount
	  // 	return defer
	  // }
	  var defer = function defer(proc) {
	    return doDefer(defer, proc);
	  };
	  defer._s = null;
	  // defer._n = null
	  return defer;
	}

	var DO = function DO(aproc) {
	  if (typeof aproc != "function") throw new Error("wrong argument");
	  proc = aproc;
	  self = undefined;
	  procX = method0;
	  return doTry(makeDefer());
	};

	var defun = function defun(aproc) {
	  if (typeof aproc != "function") throw new Error("wrong argument");
	  return function () {
	    proc = aproc;
	    self = this;
	    var defer = makeDefer();
	    switch (arguments.length) {
	      case 0:
	        procX = method0;
	        break;
	      case 1:
	        procX = method1;
	        arg0 = arguments[0];
	        break;
	      case 2:
	        procX = method2;
	        arg0 = arguments[0];
	        arg1 = arguments[1];
	        break;
	      case 3:
	        procX = method3;
	        arg0 = arguments[0];
	        arg1 = arguments[1];
	        arg2 = arguments[2];
	        break;
	      case 4:
	        procX = method4;
	        arg0 = arguments[0];
	        arg1 = arguments[1];
	        arg2 = arguments[2];
	        arg3 = arguments[3];
	        break;
	      default:
	        procX = methodN;
	        args.length = arguments.length + 1;
	        args[0] = defer;
	        for (var i = 0; i < arguments.length; ++i) {
	          args[i + 1] = arguments[i];
	        }}
	    return doTry(defer);
	  };
	};

	defun.do = DO;

	exports.defun = defun;
	exports.default = defun;
	exports.do = DO;

	// function TEST( name, proc ) {
	// 	console.log( `${ name }:` )
	// 	for ( let i = 0; i < 100; ++i )
	// 		proc(1,2,3)
	// 	let a = []
	// 	for ( let k = 0; k < 10; ++k ) {
	// 		let s = Date.now()
	// 		let t
	// 		let n = 0
	// 		do {
	// 			for ( let i = 0; i < 10000; ++i ) {
	// 				proc(1,2,3)
	// 				++n
	// 			}
	// 		} while ( ( t = Date.now() ) - s < 410 )
	// 		a.push( n / ( ( t - s ) / 1000 ) )
	// 	}
	// 	a = a.sort( ( i, j ) => i - j ).slice( a.length / 2 )
	// 	a = a.reduce( ( i, j ) => i + j )/ a.length
	// 	console.log( `${ a } op/s` )
	// }

	// // const RET={}
	// TEST( `defer`, defun( function ( defer ) {
	// 	let x = 1
	// 	defer( () => ++x )
	// 	// defer( noop )
	// 	for ( let i = 0; i < 10000; ++i )
	// 		++x
	// 	for ( let j = 0; j < 5000; ++j )
	// 		--x
	// 	for ( let k = 0; k < 5000; ++k )
	// 		++x
	// 	for ( let m = 0; m < 5000; ++m )
	// 		++x
	// 	return 1
	// } ) )

	// let as = []
	// TEST( `async`, function () {
	// 	let x = 1
	// 	as.push( () => ++x )
	// 	for ( let i = 0; i < 10000; ++i )
	// 		++x
	// 	for ( let j = 0; j < 5000; ++j )
	// 		--x
	// 	for ( let k = 0; k < 5000; ++k )
	// 		++x
	// 	for ( let m = 0; m < 5000; ++m )
	// 		++x
	// 	as.pop()()
	// 	return 1
	// } )

	// TEST( `tryFinally`, function () {
	// 	let x = 1
	// 	try {
	// 		for ( let i = 0; i < 10000; ++i )
	// 			++x
	// 		for ( let j = 0; j < 5000; ++j )
	// 			--x
	// 		for ( let k = 0; k < 5000; ++k )
	// 			++x
	// 		for ( let m = 0; m < 5000; ++m )
	// 			++x
	// 	}
	// 	finally {
	// 		++x
	// 	}
	// 	return x
	// } )

	// TEST( `plain`, function () {
	// 	let x = 1
	// 	for ( let i = 0; i < 10000; ++i )
	// 		++x
	// 	for ( let j = 0; j < 5000; ++j )
	// 		--x
	// 	for ( let k = 0; k < 5000; ++k )
	// 		++x
	// 	for ( let m = 0; m < 5000; ++m )
	// 		++x
	// 	++x
	// 	return x
	// } )

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _pingpongTransform = __webpack_require__(335);

	var _pingpongTransform2 = _interopRequireDefault(_pingpongTransform);

	var _numberedTransform = __webpack_require__(340);

	var _numberedTransform2 = _interopRequireDefault(_numberedTransform);

	var _JSONTransform = __webpack_require__(341);

	var _JSONTransform2 = _interopRequireDefault(_JSONTransform);

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = collections.connect(collections.mixer(), _numberedTransform2.default, (0, _pingpongTransform2.default)(), _JSONTransform2.default, collections.duplex);

	// export
	// const reconnectable =
	// 	reconnectConsumer =>
	// 	consumer =>
	// 	collection => {
	// 		collection = await getIterator( collection )
	// 		const source = { next: ::collection.next } // hide return and throw

	// 		async function* () {
	// 			let n, r
	// 			try { while ( r = false, !( n = await collection.next() ).done && ( r = true ) ) {
	// 				const cc = await getIterator( transformer( n.value ) )
	// 				let nn, rr
	// 				try { while ( rr = false, !( nn = await cc.next() ).done && ( rr = true ) ) {
	// 					yield nn.value
	// 				} } finally { if ( rr && cc.return ) await cc.return() }
	// 			} } finally { if ( r && collection.return ) await collection.return() }
	// 		}
	// 	}

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	var _iterable = __webpack_require__(339);

	var _iterable2 = _interopRequireDefault(_iterable);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _defun = __webpack_require__(333);

	var _defun2 = _interopRequireDefault(_defun);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var INTERVAL = 60000;
	var TIMEOUT = 9000;
	var MAX_PINGS = 2000;

	// this - filtered stream
	// this.other - stream with pingpongs

	exports.default = function () {
	  var _ref = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

	  var _ref$log = _ref.log;
	  var log = _ref$log === undefined ? null : _ref$log;
	  var _ref$interval = _ref.interval;
	  var interval = _ref$interval === undefined ? INTERVAL : _ref$interval;
	  var _ref$timeout = _ref.timeout;
	  var timeout = _ref$timeout === undefined ? TIMEOUT : _ref$timeout;
	  var _ref$maxpings = _ref.maxpings;
	  var maxpings = _ref$maxpings === undefined ? MAX_PINGS : _ref$maxpings;
	  return collections.transformer(function (rawClient, encodedServer) {

	    var ret = _defun2.default.do(regeneratorRuntime.mark(function _callee2(defer) {
	      var timer, pingTimers, clear, io, _5, _4, _3, _2, _1, _$value, type, value, id, _value, otype, ovalue;

	      return regeneratorRuntime.async(function _callee2$(_context2) {
	        while (1) switch (_context2.prev = _context2.next) {
	          case 0:
	            timer = collections.timer(interval, false);
	            pingTimers = new Map();

	            clear = function clear() {
	              var _iteratorNormalCompletion = true;
	              var _didIteratorError = false;
	              var _iteratorError = undefined;

	              try {
	                for (var _iterator = pingTimers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                  var t = _step.value;

	                  clearTimeout(t);
	                }
	              } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	              } finally {
	                try {
	                  if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                  }
	                } finally {
	                  if (_didIteratorError) {
	                    throw _iteratorError;
	                  }
	                }
	              }

	              timer.stop();
	            };

	            defer(clear);

	            io = collections.mix(collections.concat(collections.zip({ rawClient: rawClient, encodedServer: encodedServer }), regeneratorRuntime.mark(function _callee() {
	              return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) switch (_context.prev = _context.next) {
	                  case 0:
	                    clear();
	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }, _callee, this);
	            })()), // stop all timers when data is up.
	            collections.zip({ timer: timer }));
	            _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = (0, _iterable2.default)(io)[Symbol.asyncIterator]();
	            _context2.prev = 6;

	          case 7:
	            _3 = false;
	            _context2.next = 10;
	            return regeneratorRuntime.awrap(_1.next());

	          case 10:
	            if ((_2 = _context2.sent).done) {
	              _context2.next = 49;
	              break;
	            }

	            _3 = true;
	            _$value = _slicedToArray(_2.value, 2);
	            type = _$value[0];
	            value = _$value[1];

	            timer.pause();
	            _context2.t0 = type;
	            _context2.next = _context2.t0 === "rawClient" ? 19 : _context2.t0 === "timer" ? 21 : _context2.t0 === "encodedServer" ? 28 : 45;
	            break;

	          case 19:
	            _context2.next = 21;
	            return ["encodedClient", ["data", value]];

	          case 21:
	            if (!(pingTimers.size >= maxpings)) {
	              _context2.next = 23;
	              break;
	            }

	            throw new Error("too many pings");

	          case 23:
	            id = (0, _uid2.default)();

	            pingTimers.set(id, setTimeout(function () {
	              return timer.stop(new Error("time out on " + id));
	            }, timeout));
	            _context2.next = 27;
	            return ["encodedClient", ["ping", id]];

	          case 27:
	            return _context2.abrupt("break", 46);

	          case 28:
	            _value = _slicedToArray(value, 2);
	            otype = _value[0];
	            ovalue = _value[1];
	            _context2.t1 = otype;
	            _context2.next = _context2.t1 === "data" ? 34 : _context2.t1 === "ping" ? 37 : _context2.t1 === "pong" ? 40 : 43;
	            break;

	          case 34:
	            _context2.next = 36;
	            return ["rawServer", ovalue];

	          case 36:
	            return _context2.abrupt("break", 44);

	          case 37:
	            _context2.next = 39;
	            return ["encodedClient", ["pong", ovalue]];

	          case 39:
	            return _context2.abrupt("break", 44);

	          case 40:
	            clearTimeout(pingTimers.get(ovalue));
	            pingTimers.delete(ovalue);
	            return _context2.abrupt("break", 44);

	          case 43:
	            throw new Error("wrong type");

	          case 44:
	            return _context2.abrupt("break", 46);

	          case 45:
	            throw new Error("wrong type");

	          case 46:
	            timer.reset();
	            _context2.next = 7;
	            break;

	          case 49:
	            _context2.next = 55;
	            break;

	          case 51:
	            _context2.prev = 51;
	            _context2.t2 = _context2["catch"](6);
	            _5 = true;
	            _4 = _context2.t2;

	          case 55:
	            _context2.prev = 55;
	            _context2.prev = 56;

	            if (!(_3 && _1.return)) {
	              _context2.next = 60;
	              break;
	            }

	            _context2.next = 60;
	            return regeneratorRuntime.awrap(_1.return());

	          case 60:
	            _context2.prev = 60;

	            if (!_5) {
	              _context2.next = 63;
	              break;
	            }

	            throw _4;

	          case 63:
	            return _context2.finish(60);

	          case 64:
	            return _context2.finish(55);

	          case 65:
	          case "end":
	            return _context2.stop();
	        }
	      }, _callee2, this, [[6, 51, 55, 65], [56,, 60, 64]]);
	    }));

	    return collections.unzipA(ret, ["encodedClient", "rawServer"]);
	  });
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.attachHandler = exports.attachFunction = exports.makeFunction = exports.attachAsyncFunction = exports.makeAsyncFunction = exports.makeSender = exports.makeReceiver = exports.mixer = exports.demux = exports.mix = exports.zip = exports.unzipA = exports.unzip = exports.wrap = exports.timer = exports.connect = exports.transformer = exports.repair = exports.concat = exports.takeWhile = exports.filter = exports.map = exports.transform = exports.reduce = exports.forEach = exports.for = exports.stream = exports.duplex = exports.streams = exports.toReadable = exports.fromReadable = exports.__namespace__ = undefined;

	var _this = this;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _stream_dbg = __webpack_require__(337);

	var stream = _interopRequireWildcard(_stream_dbg);

	var _method = __webpack_require__(338);

	var _method2 = _interopRequireDefault(_method);

	var _iterable = __webpack_require__(339);

	var _iterable2 = _interopRequireDefault(_iterable);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var __namespace__ = exports.__namespace__ = true;

	var fromReadable = exports.fromReadable = (0, _method2.default)(function (s) {
	  return stream.Readable.prototype[Symbol.asyncIterator].call(s);
	});

	var makeReadMethod = function makeReadMethod(collection) {
	  var i = null;
	  return function _callee() {
	    var _ref, value, done, v;

	    return regeneratorRuntime.async(function _callee$(_context2) {
	      while (1) switch (_context2.prev = _context2.next) {
	        case 0:
	          _context2.prev = 0;

	          if (i == null) i = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	          _context2.next = 4;
	          return regeneratorRuntime.awrap(i.next());

	        case 4:
	          _ref = _context2.sent;
	          value = _ref.value;
	          done = _ref.done;

	          if (!done) {
	            _context2.next = 11;
	            break;
	          }

	          this.push(null);
	          _context2.next = 15;
	          break;

	        case 11:
	          _context2.next = 13;
	          return regeneratorRuntime.awrap(value);

	        case 13:
	          v = _context2.sent;

	          if (v == null) this.push(_bluebird2.default.resolve(v));else this.push(v);

	        case 15:
	          _context2.next = 20;
	          break;

	        case 17:
	          _context2.prev = 17;
	          _context2.t0 = _context2["catch"](0);

	          try {
	            this.push(null);
	          } finally {
	            this.emit("error", _context2.t0);
	          }

	        case 20:
	        case "end":
	          return _context2.stop();
	      }
	    }, null, this, [[0, 17]]);
	  };
	};

	var toReadable = exports.toReadable = (0, _method2.default)(function (collection) {
	  return new stream.Readable({ objectMode: true, read: makeReadMethod(collection) });
	});

	var streams = exports.streams = function streams(_ref2) {
	  var _ref3 = _slicedToArray(_ref2, 2);

	  var instream = _ref3[0];
	  var outstream = _ref3[1];
	  return function (collection) {
	    _bluebird2.default.resolve(outstream).then(function (outstream) {
	      return toReadable(collection).pipe(outstream);
	    });
	    return (0, _iterable2.default)(instream);
	  };
	};

	var duplex = exports.duplex = function duplex(_duplex) {
	  return streams([_duplex, _duplex]);
	};

	var makeStream = function makeStream(consumer) {
	  var push = void 0,
	      collection = _iterable2.default.create(function (p) {
	    return push = p;
	  });
	  var ret = new stream.Duplex({
	    objectMode: true,
	    read: makeReadMethod(consumer(collection)),
	    write: function write(data, _, cb) {
	      return _bluebird2.default.try(function () {
	        return push(data);
	      }).asCallback(cb);
	    }
	  });
	  ret.on("finish", function () {
	    return push(_iterable2.default.end);
	  });
	  return ret;
	};

	exports.stream = makeStream;


	var m = function m(proc) {
	  return (0, _method2.default)(function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (args.length < proc.length) return (0, _method2.default)(function (self) {
	      return proc.apply(undefined, [self].concat(args));
	    });else return proc.apply(undefined, args);
	  });
	};

	var genAsync = regeneratorRuntime.mark(function genAsync(collection, generator) {
	  var cok, error, isError, c, g, cv, gv;
	  return regeneratorRuntime.async(function genAsync$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	        cok = true, error = void 0, isError = false;
	        c = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        g = (0, _iterable2.default)(generator)[Symbol.asyncIterator]();
	        _context3.prev = 3;
	        cv = void 0;
	        _context3.next = 7;
	        return regeneratorRuntime.awrap(g.next());

	      case 7:
	        gv = _context3.sent;

	      case 8:
	        if (gv.done) {
	          _context3.next = 39;
	          break;
	        }

	        _context3.next = 11;
	        return gv.value;

	      case 11:
	        _context3.prev = 11;

	        cok = true;
	        _context3.next = 15;
	        return regeneratorRuntime.awrap(c.next());

	      case 15:
	        cv = _context3.sent;
	        _context3.next = 26;
	        break;

	      case 18:
	        _context3.prev = 18;
	        _context3.t0 = _context3["catch"](11);

	        if (g.throw) {
	          _context3.next = 22;
	          break;
	        }

	        throw _context3.t0;

	      case 22:
	        _context3.next = 24;
	        return regeneratorRuntime.awrap(g.throw(_context3.t0));

	      case 24:
	        gv = _context3.sent;
	        return _context3.abrupt("break", 39);

	      case 26:
	        if (!cv.done) {
	          _context3.next = 33;
	          break;
	        }

	        if (g.return) {
	          _context3.next = 29;
	          break;
	        }

	        return _context3.abrupt("return", cv.value);

	      case 29:
	        _context3.next = 31;
	        return regeneratorRuntime.awrap(g.return(cv.value));

	      case 31:
	        gv = _context3.sent;
	        return _context3.abrupt("break", 39);

	      case 33:
	        cok = false;
	        _context3.next = 36;
	        return regeneratorRuntime.awrap(g.next(cv.value));

	      case 36:
	        gv = _context3.sent;
	        _context3.next = 8;
	        break;

	      case 39:
	        if (gv.done) {
	          _context3.next = 47;
	          break;
	        }

	        _context3.next = 42;
	        return gv.value;

	      case 42:
	        _context3.next = 44;
	        return regeneratorRuntime.awrap(g.next());

	      case 44:
	        gv = _context3.sent;
	        _context3.next = 39;
	        break;

	      case 47:
	        return _context3.abrupt("return", gv.value);

	      case 50:
	        _context3.prev = 50;
	        _context3.t1 = _context3["catch"](3);

	        error = _context3.t1;
	        isError = true;

	      case 54:
	        _context3.prev = 54;
	        _context3.prev = 55;

	        if (!(!cok && c.return)) {
	          _context3.next = 59;
	          break;
	        }

	        _context3.next = 59;
	        return regeneratorRuntime.awrap(c.return());

	      case 59:
	        _context3.prev = 59;

	        if (!isError) {
	          _context3.next = 62;
	          break;
	        }

	        throw error;

	      case 62:
	        return _context3.finish(59);

	      case 63:
	        return _context3.finish(54);

	      case 64:
	      case "end":
	        return _context3.stop();
	    }
	  }, genAsync, this, [[3, 50, 54, 64], [11, 18], [55,, 59, 63]]);
	});

	var genSync = regeneratorRuntime.mark(function genSync(collection, generator) {
	  var cok, error, isError, c, g, cv, gv;
	  return regeneratorRuntime.wrap(function genSync$(_context4) {
	    while (1) switch (_context4.prev = _context4.next) {
	      case 0:
	        cok = true, error = void 0, isError = false;
	        c = collection[Symbol.iterator]();
	        g = generator[Symbol.iterator]();
	        _context4.prev = 3;
	        cv = void 0, gv = g.next();

	      case 5:
	        if (gv.done) {
	          _context4.next = 28;
	          break;
	        }

	        _context4.next = 8;
	        return gv.value;

	      case 8:
	        _context4.prev = 8;

	        cok = true;
	        cv = c.next();
	        _context4.next = 19;
	        break;

	      case 13:
	        _context4.prev = 13;
	        _context4.t0 = _context4["catch"](8);

	        if (g.throw) {
	          _context4.next = 17;
	          break;
	        }

	        throw _context4.t0;

	      case 17:
	        gv = g.throw(_context4.t0);
	        return _context4.abrupt("break", 28);

	      case 19:
	        if (!cv.done) {
	          _context4.next = 24;
	          break;
	        }

	        if (g.return) {
	          _context4.next = 22;
	          break;
	        }

	        return _context4.abrupt("return", cv.value);

	      case 22:
	        gv = g.return(cv.value);
	        return _context4.abrupt("break", 28);

	      case 24:
	        cok = false;
	        gv = g.next(cv.value);
	        _context4.next = 5;
	        break;

	      case 28:
	        if (gv.done) {
	          _context4.next = 34;
	          break;
	        }

	        _context4.next = 31;
	        return gv.value;

	      case 31:
	        gv = g.next();
	        _context4.next = 28;
	        break;

	      case 34:
	        return _context4.abrupt("return", gv.value);

	      case 37:
	        _context4.prev = 37;
	        _context4.t1 = _context4["catch"](3);

	        error = _context4.t1;
	        isError = true;

	      case 41:
	        _context4.prev = 41;
	        _context4.prev = 42;

	        if (!cok && c.return) c.return();

	      case 44:
	        _context4.prev = 44;

	        if (!isError) {
	          _context4.next = 47;
	          break;
	        }

	        throw error;

	      case 47:
	        return _context4.finish(44);

	      case 48:
	        return _context4.finish(41);

	      case 49:
	      case "end":
	        return _context4.stop();
	    }
	  }, genSync, this, [[3, 37, 41, 49], [8, 13], [42,, 44, 48]]);
	});

	var runAsync = function runAsync(generator) {
	  var p, it;
	  return regeneratorRuntime.async(function runAsync$(_context5) {
	    while (1) switch (_context5.prev = _context5.next) {
	      case 0:
	        p = void 0, it = (0, _iterable2.default)(generator)[Symbol.asyncIterator]();

	      case 1:
	        _context5.next = 3;
	        return regeneratorRuntime.awrap(it.next());

	      case 3:
	        p = _context5.sent;

	      case 4:
	        if (!p.done) {
	          _context5.next = 1;
	          break;
	        }

	      case 5:
	        return _context5.abrupt("return", p.value);

	      case 6:
	      case "end":
	        return _context5.stop();
	    }
	  }, null, _this);
	};

	var runSync = function runSync(generator) {
	  var p = void 0,
	      it = generator[Symbol.iterator]();
	  do {
	    p = it.next();
	  } while (!p.done);
	  return p.value;
	};

	var for_ = m(function (collection, generator) {
	  if (typeof generator == "function") generator = generator();
	  if (_iterable2.default.isSync(collection) && _iterable2.default.isSync(generator)) return runSync(genSync(collection, generator));else return runAsync(genAsync(collection, generator));
	});
	exports.for = for_;

	var forEach = exports.forEach = m(function _callee2(collection, proc) {
	  var _5, _4, _3, _2, _1, value;

	  return regeneratorRuntime.async(function _callee2$(_context6) {
	    while (1) switch (_context6.prev = _context6.next) {
	      case 0:
	        _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context6.prev = 1;

	      case 2:
	        _3 = false;
	        _context6.next = 5;
	        return regeneratorRuntime.awrap(_1.next());

	      case 5:
	        if ((_2 = _context6.sent).done) {
	          _context6.next = 15;
	          break;
	        }

	        _3 = true;
	        value = _2.value;
	        _context6.next = 10;
	        return regeneratorRuntime.awrap(proc(value));

	      case 10:
	        _context6.t0 = _context6.sent;

	        if (!(false === _context6.t0)) {
	          _context6.next = 13;
	          break;
	        }

	        return _context6.abrupt("break", 15);

	      case 13:
	        _context6.next = 2;
	        break;

	      case 15:
	        _context6.next = 21;
	        break;

	      case 17:
	        _context6.prev = 17;
	        _context6.t1 = _context6["catch"](1);
	        _5 = true;
	        _4 = _context6.t1;

	      case 21:
	        _context6.prev = 21;
	        _context6.prev = 22;

	        if (!(_3 && _1.return)) {
	          _context6.next = 26;
	          break;
	        }

	        _context6.next = 26;
	        return regeneratorRuntime.awrap(_1.return());

	      case 26:
	        _context6.prev = 26;

	        if (!_5) {
	          _context6.next = 29;
	          break;
	        }

	        throw _4;

	      case 29:
	        return _context6.finish(26);

	      case 30:
	        return _context6.finish(21);

	      case 31:
	      case "end":
	        return _context6.stop();
	    }
	  }, null, _this, [[1, 17, 21, 31], [22,, 26, 30]]);
	});

	var reduce = exports.reduce = m(function _callee3(collection, proc) {
	  var result,
	      first,
	      _10,
	      _9,
	      _8,
	      _7,
	      _6,
	      value,
	      _args6 = arguments;

	  return regeneratorRuntime.async(function _callee3$(_context7) {
	    while (1) switch (_context7.prev = _context7.next) {
	      case 0:
	        collection = (0, _iterable2.default)(collection);
	        result = _args6[2], first = _args6.length == 2;
	        _10 = void 0, _9 = void 0, _8 = void 0, _7 = void 0, _6 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context7.prev = 3;

	      case 4:
	        _8 = false;
	        _context7.next = 7;
	        return regeneratorRuntime.awrap(_6.next());

	      case 7:
	        if ((_7 = _context7.sent).done) {
	          _context7.next = 20;
	          break;
	        }

	        _8 = true;
	        value = _7.value;

	        if (!first) {
	          _context7.next = 15;
	          break;
	        }

	        first = false;
	        result = value;
	        _context7.next = 18;
	        break;

	      case 15:
	        _context7.next = 17;
	        return regeneratorRuntime.awrap(proc(result, value));

	      case 17:
	        result = _context7.sent;

	      case 18:
	        _context7.next = 4;
	        break;

	      case 20:
	        _context7.next = 26;
	        break;

	      case 22:
	        _context7.prev = 22;
	        _context7.t0 = _context7["catch"](3);
	        _10 = true;
	        _9 = _context7.t0;

	      case 26:
	        _context7.prev = 26;
	        _context7.prev = 27;

	        if (!(_8 && _6.return)) {
	          _context7.next = 31;
	          break;
	        }

	        _context7.next = 31;
	        return regeneratorRuntime.awrap(_6.return());

	      case 31:
	        _context7.prev = 31;

	        if (!_10) {
	          _context7.next = 34;
	          break;
	        }

	        throw _9;

	      case 34:
	        return _context7.finish(31);

	      case 35:
	        return _context7.finish(26);

	      case 36:
	        return _context7.abrupt("return", result);

	      case 37:
	      case "end":
	        return _context7.stop();
	    }
	  }, null, this, [[3, 22, 26, 36], [27,, 31, 35]]);
	});

	var transform = exports.transform = m(regeneratorRuntime.mark(function _callee4(collection, transformer) {
	  var _15, _14, _13, _12, _11, value, _20, _19, _18, _17, _16, v;

	  return regeneratorRuntime.async(function _callee4$(_context8) {
	    while (1) switch (_context8.prev = _context8.next) {
	      case 0:
	        _15 = void 0, _14 = void 0, _13 = void 0, _12 = void 0, _11 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context8.prev = 1;

	      case 2:
	        _13 = false;
	        _context8.next = 5;
	        return regeneratorRuntime.awrap(_11.next());

	      case 5:
	        if ((_12 = _context8.sent).done) {
	          _context8.next = 38;
	          break;
	        }

	        _13 = true;
	        value = _12.value;
	        _20 = void 0, _19 = void 0, _18 = void 0, _17 = void 0, _16 = (0, _iterable2.default)(transformer(value))[Symbol.asyncIterator]();
	        _context8.prev = 9;

	      case 10:
	        _18 = false;
	        _context8.next = 13;
	        return regeneratorRuntime.awrap(_16.next());

	      case 13:
	        if ((_17 = _context8.sent).done) {
	          _context8.next = 20;
	          break;
	        }

	        _18 = true;
	        v = _17.value;
	        _context8.next = 18;
	        return v;

	      case 18:
	        _context8.next = 10;
	        break;

	      case 20:
	        _context8.next = 26;
	        break;

	      case 22:
	        _context8.prev = 22;
	        _context8.t0 = _context8["catch"](9);
	        _20 = true;
	        _19 = _context8.t0;

	      case 26:
	        _context8.prev = 26;
	        _context8.prev = 27;

	        if (!(_18 && _16.return)) {
	          _context8.next = 31;
	          break;
	        }

	        _context8.next = 31;
	        return regeneratorRuntime.awrap(_16.return());

	      case 31:
	        _context8.prev = 31;

	        if (!_20) {
	          _context8.next = 34;
	          break;
	        }

	        throw _19;

	      case 34:
	        return _context8.finish(31);

	      case 35:
	        return _context8.finish(26);

	      case 36:
	        _context8.next = 2;
	        break;

	      case 38:
	        _context8.next = 44;
	        break;

	      case 40:
	        _context8.prev = 40;
	        _context8.t1 = _context8["catch"](1);
	        _15 = true;
	        _14 = _context8.t1;

	      case 44:
	        _context8.prev = 44;
	        _context8.prev = 45;

	        if (!(_13 && _11.return)) {
	          _context8.next = 49;
	          break;
	        }

	        _context8.next = 49;
	        return regeneratorRuntime.awrap(_11.return());

	      case 49:
	        _context8.prev = 49;

	        if (!_15) {
	          _context8.next = 52;
	          break;
	        }

	        throw _14;

	      case 52:
	        return _context8.finish(49);

	      case 53:
	        return _context8.finish(44);

	      case 54:
	      case "end":
	        return _context8.stop();
	    }
	  }, _callee4, this, [[1, 40, 44, 54], [9, 22, 26, 36], [27,, 31, 35], [45,, 49, 53]]);
	}));

	var map = exports.map = m(regeneratorRuntime.mark(function _callee5(collection, mapper) {
	  var _25, _24, _23, _22, _21, value;

	  return regeneratorRuntime.async(function _callee5$(_context9) {
	    while (1) switch (_context9.prev = _context9.next) {
	      case 0:
	        if (typeof mapper == "string") {
	          (function () {
	            var label = mapper;
	            mapper = function mapper(value) {
	              return [label, value];
	            };
	          })();
	        }
	        _25 = void 0, _24 = void 0, _23 = void 0, _22 = void 0, _21 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context9.prev = 2;

	      case 3:
	        _23 = false;
	        _context9.next = 6;
	        return regeneratorRuntime.awrap(_21.next());

	      case 6:
	        if ((_22 = _context9.sent).done) {
	          _context9.next = 13;
	          break;
	        }

	        _23 = true;
	        value = _22.value;
	        _context9.next = 11;
	        return mapper(value);

	      case 11:
	        _context9.next = 3;
	        break;

	      case 13:
	        _context9.next = 19;
	        break;

	      case 15:
	        _context9.prev = 15;
	        _context9.t0 = _context9["catch"](2);
	        _25 = true;
	        _24 = _context9.t0;

	      case 19:
	        _context9.prev = 19;
	        _context9.prev = 20;

	        if (!(_23 && _21.return)) {
	          _context9.next = 24;
	          break;
	        }

	        _context9.next = 24;
	        return regeneratorRuntime.awrap(_21.return());

	      case 24:
	        _context9.prev = 24;

	        if (!_25) {
	          _context9.next = 27;
	          break;
	        }

	        throw _24;

	      case 27:
	        return _context9.finish(24);

	      case 28:
	        return _context9.finish(19);

	      case 29:
	      case "end":
	        return _context9.stop();
	    }
	  }, _callee5, this, [[2, 15, 19, 29], [20,, 24, 28]]);
	}));

	var filter = exports.filter = m(regeneratorRuntime.mark(function _callee6(collection, predicate) {
	  var _30, _29, _28, _27, _26, value;

	  return regeneratorRuntime.async(function _callee6$(_context10) {
	    while (1) switch (_context10.prev = _context10.next) {
	      case 0:
	        _30 = void 0, _29 = void 0, _28 = void 0, _27 = void 0, _26 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context10.prev = 1;

	      case 2:
	        _28 = false;
	        _context10.next = 5;
	        return regeneratorRuntime.awrap(_26.next());

	      case 5:
	        if ((_27 = _context10.sent).done) {
	          _context10.next = 15;
	          break;
	        }

	        _28 = true;
	        value = _27.value;
	        _context10.next = 10;
	        return regeneratorRuntime.awrap(predicate(value));

	      case 10:
	        if (!_context10.sent) {
	          _context10.next = 13;
	          break;
	        }

	        _context10.next = 13;
	        return value;

	      case 13:
	        _context10.next = 2;
	        break;

	      case 15:
	        _context10.next = 21;
	        break;

	      case 17:
	        _context10.prev = 17;
	        _context10.t0 = _context10["catch"](1);
	        _30 = true;
	        _29 = _context10.t0;

	      case 21:
	        _context10.prev = 21;
	        _context10.prev = 22;

	        if (!(_28 && _26.return)) {
	          _context10.next = 26;
	          break;
	        }

	        _context10.next = 26;
	        return regeneratorRuntime.awrap(_26.return());

	      case 26:
	        _context10.prev = 26;

	        if (!_30) {
	          _context10.next = 29;
	          break;
	        }

	        throw _29;

	      case 29:
	        return _context10.finish(26);

	      case 30:
	        return _context10.finish(21);

	      case 31:
	      case "end":
	        return _context10.stop();
	    }
	  }, _callee6, this, [[1, 17, 21, 31], [22,, 26, 30]]);
	}));

	var takeWhile = exports.takeWhile = m(regeneratorRuntime.mark(function _callee7(collection, predicate) {
	  var _35, _34, _33, _32, _31, value;

	  return regeneratorRuntime.async(function _callee7$(_context11) {
	    while (1) switch (_context11.prev = _context11.next) {
	      case 0:
	        _35 = void 0, _34 = void 0, _33 = void 0, _32 = void 0, _31 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	        _context11.prev = 1;

	      case 2:
	        _33 = false;
	        _context11.next = 5;
	        return regeneratorRuntime.awrap(_31.next());

	      case 5:
	        if ((_32 = _context11.sent).done) {
	          _context11.next = 18;
	          break;
	        }

	        _33 = true;
	        value = _32.value;
	        _context11.next = 10;
	        return regeneratorRuntime.awrap(predicate(value));

	      case 10:
	        if (!_context11.sent) {
	          _context11.next = 15;
	          break;
	        }

	        _context11.next = 13;
	        return value;

	      case 13:
	        _context11.next = 16;
	        break;

	      case 15:
	        return _context11.abrupt("break", 18);

	      case 16:
	        _context11.next = 2;
	        break;

	      case 18:
	        _context11.next = 24;
	        break;

	      case 20:
	        _context11.prev = 20;
	        _context11.t0 = _context11["catch"](1);
	        _35 = true;
	        _34 = _context11.t0;

	      case 24:
	        _context11.prev = 24;
	        _context11.prev = 25;

	        if (!(_33 && _31.return)) {
	          _context11.next = 29;
	          break;
	        }

	        _context11.next = 29;
	        return regeneratorRuntime.awrap(_31.return());

	      case 29:
	        _context11.prev = 29;

	        if (!_35) {
	          _context11.next = 32;
	          break;
	        }

	        throw _34;

	      case 32:
	        return _context11.finish(29);

	      case 33:
	        return _context11.finish(24);

	      case 34:
	      case "end":
	        return _context11.stop();
	    }
	  }, _callee7, this, [[1, 20, 24, 34], [25,, 29, 33]]);
	}));

	var concat = exports.concat = (0, _method2.default)(function () {
	  for (var _len2 = arguments.length, collections = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    collections[_key2] = arguments[_key2];
	  }

	  return transform.call(collections, lodash.identity);
	});

	var repair = exports.repair = (0, _method2.default)(regeneratorRuntime.mark(function _callee8(collection, endHandler) {
	  var _this2 = this;

	  var getNext, n, r;
	  return regeneratorRuntime.async(function _callee8$(_context13) {
	    while (1) switch (_context13.prev = _context13.next) {
	      case 0:
	        collection = (0, _iterable2.default)(collection);

	        getNext = function getNext() {
	          var ret;
	          return regeneratorRuntime.async(function getNext$(_context12) {
	            while (1) switch (_context12.prev = _context12.next) {
	              case 0:
	                _context12.prev = 0;
	                _context12.next = 3;
	                return regeneratorRuntime.awrap(collection.next());

	              case 3:
	                ret = _context12.sent;

	                if (!ret.done) {
	                  _context12.next = 12;
	                  break;
	                }

	                _context12.next = 7;
	                return regeneratorRuntime.awrap(endHandler(null));

	              case 7:
	                collection = _context12.sent;

	                if (!(collection == null)) {
	                  _context12.next = 10;
	                  break;
	                }

	                return _context12.abrupt("return", ret);

	              case 10:
	                _context12.next = 13;
	                break;

	              case 12:
	                return _context12.abrupt("return", ret);

	              case 13:
	                _context12.next = 22;
	                break;

	              case 15:
	                _context12.prev = 15;
	                _context12.t0 = _context12["catch"](0);
	                _context12.next = 19;
	                return regeneratorRuntime.awrap(endHandler(_context12.t0));

	              case 19:
	                collection = _context12.sent;

	                if (!(collection == null)) {
	                  _context12.next = 22;
	                  break;
	                }

	                throw _context12.t0;

	              case 22:
	                collection = (0, _iterable2.default)(collection);

	              case 23:
	                _context12.next = 0;
	                break;

	              case 25:
	              case "end":
	                return _context12.stop();
	            }
	          }, null, _this2, [[0, 15]]);
	        };

	        n = void 0, r = void 0;
	        _context13.prev = 3;

	      case 4:
	        r = false;
	        _context13.next = 7;
	        return regeneratorRuntime.awrap(getNext());

	      case 7:
	        _context13.t0 = !(n = _context13.sent).done;

	        if (!_context13.t0) {
	          _context13.next = 10;
	          break;
	        }

	        _context13.t0 = r = true;

	      case 10:
	        if (!_context13.t0) {
	          _context13.next = 15;
	          break;
	        }

	        _context13.next = 13;
	        return n.value;

	      case 13:
	        _context13.next = 4;
	        break;

	      case 15:
	        _context13.prev = 15;

	        if (!(r && collection.return)) {
	          _context13.next = 19;
	          break;
	        }

	        _context13.next = 19;
	        return regeneratorRuntime.awrap(collection.return());

	      case 19:
	        return _context13.finish(15);

	      case 20:
	      case "end":
	        return _context13.stop();
	    }
	  }, _callee8, this, [[3,, 15, 20]]);
	}));

	var transformer = exports.transformer = function transformer() {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  if (args.length == 2) {
	    var _ret2 = function () {
	      var encode = args[0];
	      var decode = args[1];

	      return {
	        v: Object.assign(function (consumer) {
	          return function (collection) {
	            return decode(consumer(encode(collection)));
	          };
	        }, {
	          encode: (0, _method2.default)(encode),
	          decode: (0, _method2.default)(decode),
	          __namespace__: true
	        })
	      };
	    }();

	    if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
	  } else {
	    var _ret3 = function () {
	      var T = args[0];

	      return {
	        v: function v(consumer) {
	          return function (collection) {
	            var output = void 0;

	            var _T = T(collection, new _bluebird2.default(function (r) {
	              return output = r;
	            }));

	            var _T2 = _slicedToArray(_T, 2);

	            var input = _T2[0];
	            var ret = _T2[1];

	            output(consumer(input));
	            return ret;
	          };
	        }
	      };
	    }();

	    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
	  }
	};

	var connect = exports.connect = function connect() {
	  for (var _len4 = arguments.length, transformers = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    transformers[_key4] = arguments[_key4];
	  }

	  return function (consumer) {
	    return transformers.reduceRight(function (consumer, t) {
	      return t(consumer);
	    }, consumer);
	  };
	};

	var timer = exports.timer = function timer(interval) {
	  var _ref4;

	  var autoreset = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	  var push = void 0,
	      events = _iterable2.default.create(function (p) {
	    return push = p;
	  });
	  var timer = null;
	  var index = 0;
	  var active = true;
	  var fire = function fire() {
	    return regeneratorRuntime.async(function fire$(_context14) {
	      while (1) switch (_context14.prev = _context14.next) {
	        case 0:
	          _context14.next = 2;
	          return regeneratorRuntime.awrap(push(index++));

	        case 2:
	          if (autoreset) reset();

	        case 3:
	        case "end":
	          return _context14.stop();
	      }
	    }, null, _this);
	  };
	  var pause = function pause() {
	    clearTimeout(timer);
	    timer = null;
	  };
	  var reset = function reset() {
	    var i = arguments.length <= 0 || arguments[0] === undefined ? interval : arguments[0];

	    pause();
	    if (active) {
	      interval = i;
	      timer = setTimeout(fire, interval);
	    }
	  };
	  reset();
	  return _ref4 = {}, _defineProperty(_ref4, Symbol.asyncIterator, function () {
	    return events;
	  }), _defineProperty(_ref4, "reset", reset), _defineProperty(_ref4, "pause", pause), _defineProperty(_ref4, "stop", function stop(error) {
	    pause();
	    active = false;
	    push(error ? _bluebird2.default.reject(error) : _iterable2.default.end);
	  }), _ref4;
	};

	var wrap = exports.wrap = regeneratorRuntime.mark(function wrap(value) {
	  return regeneratorRuntime.async(function wrap$(_context15) {
	    while (1) switch (_context15.prev = _context15.next) {
	      case 0:
	        _context15.next = 2;
	        return regeneratorRuntime.awrap(value);

	      case 2:
	        _context15.next = 4;
	        return _context15.sent;

	      case 4:
	      case "end":
	        return _context15.stop();
	    }
	  }, wrap, this);
	});

	var unzip = exports.unzip = m(function (collection, labels) {
	  var ret = Object.create(null);
	  var push = Object.create(null);
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    var _loop = function _loop() {
	      var label = _step.value;

	      ret[label] = _iterable2.default.create(function (p) {
	        return push[label] = p;
	      });
	    };

	    for (var _iterator = labels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      _loop();
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  void function _callee9() {
	    var _40, _39, _38, _37, _36, _$value, label, value, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, p, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _p;

	    return regeneratorRuntime.async(function _callee9$(_context16) {
	      while (1) switch (_context16.prev = _context16.next) {
	        case 0:
	          _context16.prev = 0;
	          _40 = void 0, _39 = void 0, _38 = void 0, _37 = void 0, _36 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	          _context16.prev = 2;

	        case 3:
	          _38 = false;
	          _context16.next = 6;
	          return regeneratorRuntime.awrap(_36.next());

	        case 6:
	          if ((_37 = _context16.sent).done) {
	            _context16.next = 19;
	            break;
	          }

	          _38 = true;
	          _$value = _slicedToArray(_37.value, 2);
	          label = _$value[0];
	          value = _$value[1];

	          if (!push[label]) {
	            _context16.next = 16;
	            break;
	          }

	          _context16.next = 14;
	          return regeneratorRuntime.awrap(push[label](value));

	        case 14:
	          _context16.next = 17;
	          break;

	        case 16:
	          throw new Error("unkown label: " + label);

	        case 17:
	          _context16.next = 3;
	          break;

	        case 19:
	          _context16.next = 25;
	          break;

	        case 21:
	          _context16.prev = 21;
	          _context16.t0 = _context16["catch"](2);
	          _40 = true;
	          _39 = _context16.t0;

	        case 25:
	          _context16.prev = 25;
	          _context16.prev = 26;

	          if (!(_38 && _36.return)) {
	            _context16.next = 30;
	            break;
	          }

	          _context16.next = 30;
	          return regeneratorRuntime.awrap(_36.return());

	        case 30:
	          _context16.prev = 30;

	          if (!_40) {
	            _context16.next = 33;
	            break;
	          }

	          throw _39;

	        case 33:
	          return _context16.finish(30);

	        case 34:
	          return _context16.finish(25);

	        case 35:
	          _iteratorNormalCompletion2 = true;
	          _didIteratorError2 = false;
	          _iteratorError2 = undefined;
	          _context16.prev = 38;

	          for (_iterator2 = lodash.values(push)[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            p = _step2.value;

	            p(_iterable2.default.end);
	          }_context16.next = 46;
	          break;

	        case 42:
	          _context16.prev = 42;
	          _context16.t1 = _context16["catch"](38);
	          _didIteratorError2 = true;
	          _iteratorError2 = _context16.t1;

	        case 46:
	          _context16.prev = 46;
	          _context16.prev = 47;

	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }

	        case 49:
	          _context16.prev = 49;

	          if (!_didIteratorError2) {
	            _context16.next = 52;
	            break;
	          }

	          throw _iteratorError2;

	        case 52:
	          return _context16.finish(49);

	        case 53:
	          return _context16.finish(46);

	        case 54:
	          _context16.next = 77;
	          break;

	        case 56:
	          _context16.prev = 56;
	          _context16.t2 = _context16["catch"](0);
	          _iteratorNormalCompletion3 = true;
	          _didIteratorError3 = false;
	          _iteratorError3 = undefined;
	          _context16.prev = 61;

	          for (_iterator3 = lodash.values(push)[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            _p = _step3.value;

	            _p(_bluebird2.default.reject(_context16.t2));
	          }_context16.next = 69;
	          break;

	        case 65:
	          _context16.prev = 65;
	          _context16.t3 = _context16["catch"](61);
	          _didIteratorError3 = true;
	          _iteratorError3 = _context16.t3;

	        case 69:
	          _context16.prev = 69;
	          _context16.prev = 70;

	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }

	        case 72:
	          _context16.prev = 72;

	          if (!_didIteratorError3) {
	            _context16.next = 75;
	            break;
	          }

	          throw _iteratorError3;

	        case 75:
	          return _context16.finish(72);

	        case 76:
	          return _context16.finish(69);

	        case 77:
	        case "end":
	          return _context16.stop();
	      }
	    }, null, this, [[0, 56], [2, 21, 25, 35], [26,, 30, 34], [38, 42, 46, 54], [47,, 49, 53], [61, 65, 69, 77], [70,, 72, 76]]);
	  }();
	  return ret;
	});

	var unzipA = exports.unzipA = m(function (collection, labels) {
	  var ret = unzip(collection, labels);
	  return labels.map(function (label) {
	    return ret[label];
	  });
	});

	var zip = exports.zip = (0, _method2.default)(function (collections) {
	  return mix.apply(undefined, _toConsumableArray(lodash.toPairs(collections).map(function (_ref5) {
	    var _ref6 = _slicedToArray(_ref5, 2);

	    var label = _ref6[0];
	    var collection = _ref6[1];
	    return map(collection, function (value) {
	      return [label, value];
	    });
	  })));
	});

	var mix = exports.mix = (0, _method2.default)(function () {
	  for (var _len5 = arguments.length, collections = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	    collections[_key5] = arguments[_key5];
	  }

	  return _iterable2.default.create(function _callee11(push) {
	    return regeneratorRuntime.async(function _callee11$(_context18) {
	      while (1) switch (_context18.prev = _context18.next) {
	        case 0:
	          _context18.prev = 0;
	          _context18.next = 3;
	          return regeneratorRuntime.awrap(_bluebird2.default.all(collections.map(function _callee10(collection) {
	            var _45, _44, _43, _42, _41, value;

	            return regeneratorRuntime.async(function _callee10$(_context17) {
	              while (1) switch (_context17.prev = _context17.next) {
	                case 0:
	                  _45 = void 0, _44 = void 0, _43 = void 0, _42 = void 0, _41 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	                  _context17.prev = 1;

	                case 2:
	                  _43 = false;
	                  _context17.next = 5;
	                  return regeneratorRuntime.awrap(_41.next());

	                case 5:
	                  if ((_42 = _context17.sent).done) {
	                    _context17.next = 12;
	                    break;
	                  }

	                  _43 = true;
	                  value = _42.value;
	                  _context17.next = 10;
	                  return regeneratorRuntime.awrap(push(value));

	                case 10:
	                  _context17.next = 2;
	                  break;

	                case 12:
	                  _context17.next = 18;
	                  break;

	                case 14:
	                  _context17.prev = 14;
	                  _context17.t0 = _context17["catch"](1);
	                  _45 = true;
	                  _44 = _context17.t0;

	                case 18:
	                  _context17.prev = 18;
	                  _context17.prev = 19;

	                  if (!(_43 && _41.return)) {
	                    _context17.next = 23;
	                    break;
	                  }

	                  _context17.next = 23;
	                  return regeneratorRuntime.awrap(_41.return());

	                case 23:
	                  _context17.prev = 23;

	                  if (!_45) {
	                    _context17.next = 26;
	                    break;
	                  }

	                  throw _44;

	                case 26:
	                  return _context17.finish(23);

	                case 27:
	                  return _context17.finish(18);

	                case 28:
	                case "end":
	                  return _context17.stop();
	              }
	            }, null, _this, [[1, 14, 18, 28], [19,, 23, 27]]);
	          })));

	        case 3:
	          push(_iterable2.default.end);
	          _context18.next = 9;
	          break;

	        case 6:
	          _context18.prev = 6;
	          _context18.t0 = _context18["catch"](0);

	          push(_bluebird2.default.reject(_context18.t0));

	        case 9:
	        case "end":
	          return _context18.stop();
	      }
	    }, null, _this, [[0, 6]]);
	  });
	});

	var dropError = function dropError(name, value) {
	  console.error("unexpected: ", name, value);
	  throw new Error("unexpected: \"" + name + "\"");
	};

	var _demux = function _demux(collection, out, drop) {
	  return process.nextTick(function _callee12() {
	    var _50, _49, _48, _47, _46, _$value2, name, value, _name;

	    return regeneratorRuntime.async(function _callee12$(_context19) {
	      while (1) switch (_context19.prev = _context19.next) {
	        case 0:
	          _context19.prev = 0;
	          _50 = void 0, _49 = void 0, _48 = void 0, _47 = void 0, _46 = (0, _iterable2.default)(collection)[Symbol.asyncIterator]();
	          _context19.prev = 2;

	        case 3:
	          _48 = false;
	          _context19.next = 6;
	          return regeneratorRuntime.awrap(_46.next());

	        case 6:
	          if ((_47 = _context19.sent).done) {
	            _context19.next = 20;
	            break;
	          }

	          _48 = true;
	          _$value2 = _slicedToArray(_47.value, 2);
	          name = _$value2[0];
	          value = _$value2[1];

	          if (!out[name]) {
	            _context19.next = 16;
	            break;
	          }

	          _context19.next = 14;
	          return regeneratorRuntime.awrap(out[name](value));

	        case 14:
	          _context19.next = 18;
	          break;

	        case 16:
	          _context19.next = 18;
	          return regeneratorRuntime.awrap(drop(name, value));

	        case 18:
	          _context19.next = 3;
	          break;

	        case 20:
	          _context19.next = 26;
	          break;

	        case 22:
	          _context19.prev = 22;
	          _context19.t0 = _context19["catch"](2);
	          _50 = true;
	          _49 = _context19.t0;

	        case 26:
	          _context19.prev = 26;
	          _context19.prev = 27;

	          if (!(_48 && _46.return)) {
	            _context19.next = 31;
	            break;
	          }

	          _context19.next = 31;
	          return regeneratorRuntime.awrap(_46.return());

	        case 31:
	          _context19.prev = 31;

	          if (!_50) {
	            _context19.next = 34;
	            break;
	          }

	          throw _49;

	        case 34:
	          return _context19.finish(31);

	        case 35:
	          return _context19.finish(26);

	        case 36:
	          for (name in out) {
	            out[name](_iterable2.default.end);
	          }_context19.next = 42;
	          break;

	        case 39:
	          _context19.prev = 39;
	          _context19.t1 = _context19["catch"](0);

	          for (_name in out) {
	            out[_name](_bluebird2.default.reject(_context19.t1));
	          }
	        case 42:
	        case "end":
	          return _context19.stop();
	      }
	    }, null, this, [[0, 39], [2, 22, 26, 36], [27,, 31, 35]]);
	  });
	};

	var demux = exports.demux = (0, _method2.default)(function (collection) {
	  var drop = arguments.length <= 1 || arguments[1] === undefined ? dropError : arguments[1];

	  var done = false;
	  var out = Object.create(null);
	  var ret = Object.create(null);
	  _demux(collection, out, drop);
	  return {
	    open: function open(name) {
	      return ret[name] || (ret[name] = _iterable2.default.create(function (p) {
	        return out[name] = p;
	      }));
	    },
	    close: function close(name) {
	      if (out[name]) out[name](_iterable2.default.end);
	      delete out[name];
	      delete ret[name];
	    }
	  };
	});

	var mixer = exports.mixer = function mixer() {
	  var drop = arguments.length <= 0 || arguments[0] === undefined ? dropError : arguments[0];
	  return function (consumer) {
	    var done = false;
	    var out = Object.create(null);
	    var ret = Object.create(null);
	    var push = void 0,
	        input = _iterable2.default.create(function (p) {
	      return push = p;
	    });
	    _demux(consumer(input), out, drop);
	    return {
	      open: function open(name) {
	        if (!ret[name]) {
	          (function () {
	            var opush = void 0,
	                output = _iterable2.default.create(function (p) {
	              return opush = p;
	            });
	            out[name] = opush;
	            var pinput = new _bluebird2.default(function (resolve) {
	              return ret[name] = function (input) {
	                resolve(input);
	                return output;
	              };
	            });
	            void function _callee13() {
	              var _55, _54, _53, _52, _51, value;

	              return regeneratorRuntime.async(function _callee13$(_context20) {
	                while (1) switch (_context20.prev = _context20.next) {
	                  case 0:
	                    _context20.prev = 0;
	                    _55 = void 0, _54 = void 0, _53 = void 0, _52 = void 0, _51 = (0, _iterable2.default)(pinput)[Symbol.asyncIterator]();
	                    _context20.prev = 2;

	                  case 3:
	                    _53 = false;
	                    _context20.next = 6;
	                    return regeneratorRuntime.awrap(_51.next());

	                  case 6:
	                    if ((_52 = _context20.sent).done) {
	                      _context20.next = 15;
	                      break;
	                    }

	                    _53 = true;
	                    value = _52.value;

	                    if (!(out[name] != opush)) {
	                      _context20.next = 11;
	                      break;
	                    }

	                    return _context20.abrupt("break", 15);

	                  case 11:
	                    _context20.next = 13;
	                    return regeneratorRuntime.awrap(push([name, value]));

	                  case 13:
	                    _context20.next = 3;
	                    break;

	                  case 15:
	                    _context20.next = 21;
	                    break;

	                  case 17:
	                    _context20.prev = 17;
	                    _context20.t0 = _context20["catch"](2);
	                    _55 = true;
	                    _54 = _context20.t0;

	                  case 21:
	                    _context20.prev = 21;
	                    _context20.prev = 22;

	                    if (!(_53 && _51.return)) {
	                      _context20.next = 26;
	                      break;
	                    }

	                    _context20.next = 26;
	                    return regeneratorRuntime.awrap(_51.return());

	                  case 26:
	                    _context20.prev = 26;

	                    if (!_55) {
	                      _context20.next = 29;
	                      break;
	                    }

	                    throw _54;

	                  case 29:
	                    return _context20.finish(26);

	                  case 30:
	                    return _context20.finish(21);

	                  case 31:
	                    _context20.next = 36;
	                    break;

	                  case 33:
	                    _context20.prev = 33;
	                    _context20.t1 = _context20["catch"](0);

	                    if (out[name] == opush) {
	                      done = true;
	                      push(_bluebird2.default.reject(_context20.t1));
	                    }

	                  case 36:
	                  case "end":
	                    return _context20.stop();
	                }
	              }, null, this, [[0, 33], [2, 17, 21, 31], [22,, 26, 30]]);
	            }();
	          })();
	        }
	        return ret[name];
	      },
	      close: function close(name) {
	        if (out[name]) out[name](_iterable2.default.end);
	        delete out[name];
	      }
	    };
	  };
	};

	// const makeReceiver = method( consumer => consumer( async function* (){ await new Promise( () => {} ) }() ) )
	var makeReceiver = exports.makeReceiver = (0, _method2.default)(function (consumer) {
	  return consumer([]);
	});

	var makeSender = exports.makeSender = (0, _method2.default)(function (consumer, handler) {
	  var _context;

	  var push = void 0,
	      collection = _iterable2.default.create(function (p) {
	    return push = p;
	  });
	  (_context = consumer(collection), forEach).call(_context, function () {
	    throw new Error("no data expected");
	  });
	  var ret = {
	    send: function send(value) {
	      return push(value);
	    },
	    close: function close() {
	      return push(_iterable2.default.end);
	    },
	    throw: function _throw(error) {
	      return push(_bluebird2.default.reject(error));
	    }
	  };
	  if (handler) return handler(ret);else return ret;
	});

	var unexpected = function unexpected(result) {
	  throw new Error("unexpected data: " + result);
	};
	var createEndOfStream = function createEndOfStream() {
	  return new Error("end of stream");
	};

	var makeAsyncFunction = exports.makeAsyncFunction = (0, _method2.default)(function (consumer) {
	  var id = 0;
	  var buffer = new Map();
	  var chunks = new Map();
	  var apush = void 0,
	      collection = _iterable2.default.create(function (p) {
	    return apush = p;
	  });
	  void function _callee14() {
	    var error, _60, _59, _58, _57, _56, _$value3, _id, result, type, resolve, rpush, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _resolve, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _rpush;

	    return regeneratorRuntime.async(function _callee14$(_context21) {
	      while (1) switch (_context21.prev = _context21.next) {
	        case 0:
	          error = void 0;
	          _context21.prev = 1;
	          _60 = void 0, _59 = void 0, _58 = void 0, _57 = void 0, _56 = (0, _iterable2.default)(consumer(collection))[Symbol.asyncIterator]();
	          _context21.prev = 3;

	        case 4:
	          _58 = false;
	          _context21.next = 7;
	          return regeneratorRuntime.awrap(_56.next());

	        case 7:
	          if ((_57 = _context21.sent).done) {
	            _context21.next = 46;
	            break;
	          }

	          _58 = true;
	          _$value3 = _slicedToArray(_57.value, 3);
	          _id = _$value3[0];
	          result = _$value3[1];
	          type = _$value3[2];
	          resolve = buffer.get(_id);
	          rpush = void 0;

	          if (!resolve) {
	            _context21.next = 19;
	            break;
	          }

	          buffer.delete(_id);
	          _context21.next = 23;
	          break;

	        case 19:
	          rpush = chunks.get(_id);

	          if (!(rpush == null)) {
	            _context21.next = 23;
	            break;
	          }

	          console.error("unexpected", [_id, result, type]);
	          return _context21.abrupt("continue", 4);

	        case 23:
	          _context21.t0 = type;
	          _context21.next = _context21.t0 === undefined ? 26 : _context21.t0 === null ? 26 : _context21.t0 === "error" ? 28 : _context21.t0 === "next" ? 31 : 43;
	          break;

	        case 26:
	          if (resolve) resolve(result);else {
	            chunks.delete(_id);
	            if (result !== undefined) rpush(result);
	            rpush(_iterable2.default.end);
	          }
	          return _context21.abrupt("break", 44);

	        case 28:
	          error = _bluebird2.default.reject(new Error(result));

	          if (resolve) resolve(error);else {
	            chunks.delete(_id);
	            rpush(error);
	          }
	          return _context21.abrupt("break", 44);

	        case 31:
	          if (resolve) {
	            resolve(_iterable2.default.create(function (p) {
	              return rpush = p;
	            }));
	            chunks.set(_id, rpush);
	          }
	          _context21.prev = 32;
	          _context21.next = 35;
	          return regeneratorRuntime.awrap(rpush(result));

	        case 35:
	          _context21.next = 42;
	          break;

	        case 37:
	          _context21.prev = 37;
	          _context21.t1 = _context21["catch"](32);

	          console.error(_context21.t1);
	          chunks.delete(_id);
	          apush([_id, "stop"]);

	        case 42:
	          return _context21.abrupt("break", 44);

	        case 43:
	          throw new Error("unknown type");

	        case 44:
	          _context21.next = 4;
	          break;

	        case 46:
	          _context21.next = 52;
	          break;

	        case 48:
	          _context21.prev = 48;
	          _context21.t2 = _context21["catch"](3);
	          _60 = true;
	          _59 = _context21.t2;

	        case 52:
	          _context21.prev = 52;
	          _context21.prev = 53;

	          if (!(_58 && _56.return)) {
	            _context21.next = 57;
	            break;
	          }

	          _context21.next = 57;
	          return regeneratorRuntime.awrap(_56.return());

	        case 57:
	          _context21.prev = 57;

	          if (!_60) {
	            _context21.next = 60;
	            break;
	          }

	          throw _59;

	        case 60:
	          return _context21.finish(57);

	        case 61:
	          return _context21.finish(52);

	        case 62:
	          _context21.next = 69;
	          break;

	        case 64:
	          _context21.prev = 64;
	          _context21.t3 = _context21["catch"](1);

	          console.info("makeAsyncFunction", "ERROR", _context21.t3);
	          error = _context21.t3;
	          console.error(_context21.t3);

	        case 69:
	          _iteratorNormalCompletion4 = true;
	          _didIteratorError4 = false;
	          _iteratorError4 = undefined;
	          _context21.prev = 72;

	          for (_iterator4 = buffer.values()[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            _resolve = _step4.value;

	            _resolve(_bluebird2.default.reject(error || createEndOfStream()));
	          }_context21.next = 80;
	          break;

	        case 76:
	          _context21.prev = 76;
	          _context21.t4 = _context21["catch"](72);
	          _didIteratorError4 = true;
	          _iteratorError4 = _context21.t4;

	        case 80:
	          _context21.prev = 80;
	          _context21.prev = 81;

	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }

	        case 83:
	          _context21.prev = 83;

	          if (!_didIteratorError4) {
	            _context21.next = 86;
	            break;
	          }

	          throw _iteratorError4;

	        case 86:
	          return _context21.finish(83);

	        case 87:
	          return _context21.finish(80);

	        case 88:
	          _iteratorNormalCompletion5 = true;
	          _didIteratorError5 = false;
	          _iteratorError5 = undefined;
	          _context21.prev = 91;
	          for (_iterator5 = chunks.values()[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	            _rpush = _step5.value;

	            _rpush(_bluebird2.default.reject(error || createEndOfStream()));
	          }_context21.next = 99;
	          break;

	        case 95:
	          _context21.prev = 95;
	          _context21.t5 = _context21["catch"](91);
	          _didIteratorError5 = true;
	          _iteratorError5 = _context21.t5;

	        case 99:
	          _context21.prev = 99;
	          _context21.prev = 100;

	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }

	        case 102:
	          _context21.prev = 102;

	          if (!_didIteratorError5) {
	            _context21.next = 105;
	            break;
	          }

	          throw _iteratorError5;

	        case 105:
	          return _context21.finish(102);

	        case 106:
	          return _context21.finish(99);

	        case 107:
	          buffer = chunks = null;

	        case 108:
	        case "end":
	          return _context21.stop();
	      }
	    }, null, this, [[1, 64], [3, 48, 52, 62], [32, 37], [53,, 57, 61], [72, 76, 80, 88], [81,, 83, 87], [91, 95, 99, 107], [100,, 102, 106]]);
	  }();
	  return function _callee15() {
	    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	      args[_key6] = arguments[_key6];
	    }

	    var ret;
	    return regeneratorRuntime.async(function _callee15$(_context22) {
	      while (1) switch (_context22.prev = _context22.next) {
	        case 0:
	          if (!(buffer == null)) {
	            _context22.next = 2;
	            break;
	          }

	          throw createEndOfStream();

	        case 2:
	          ++id;
	          ret = new _bluebird2.default(function (resolve) {
	            return buffer.set(id, resolve);
	          });

	          apush([id, args]); // send value __only__ after preparing buffer
	          return _context22.abrupt("return", ret);

	        case 6:
	        case "end":
	          return _context22.stop();
	      }
	    }, null, _this);
	  };
	});

	var attachAsyncFunction = exports.attachAsyncFunction = (0, _method2.default)(function _callee16(consumer, func) {
	  var last, push, collection, processing, _65, _64, _63, _62, _61, data, send, process;

	  return regeneratorRuntime.async(function _callee16$(_context25) {
	    while (1) switch (_context25.prev = _context25.next) {
	      case 0:
	        process = function process(_ref7) {
	          var _ref8 = _slicedToArray(_ref7, 2);

	          var id = _ref8[0];
	          var args = _ref8[1];

	          var result, _70, _69, _68, _67, _66, item;

	          return regeneratorRuntime.async(function process$(_context24) {
	            while (1) switch (_context24.prev = _context24.next) {
	              case 0:
	                _context24.prev = 0;

	                if (!Array.isArray(args)) {
	                  _context24.next = 45;
	                  break;
	                }

	                _context24.next = 4;
	                return regeneratorRuntime.awrap(func.apply(undefined, _toConsumableArray(args)));

	              case 4:
	                result = _context24.sent;

	                if (!(result == null || result[Symbol.iterator] == null || result[Symbol.asyncIterator] == null)) {
	                  _context24.next = 10;
	                  break;
	                }

	                _context24.next = 8;
	                return regeneratorRuntime.awrap(send([id, result]));

	              case 8:
	                _context24.next = 43;
	                break;

	              case 10:
	                processing.add(id);
	                _70 = void 0, _69 = void 0, _68 = void 0, _67 = void 0, _66 = (0, _iterable2.default)(result)[Symbol.asyncIterator]();
	                _context24.prev = 12;

	              case 13:
	                _68 = false;
	                _context24.next = 16;
	                return regeneratorRuntime.awrap(_66.next());

	              case 16:
	                if ((_67 = _context24.sent).done) {
	                  _context24.next = 25;
	                  break;
	                }

	                _68 = true;
	                item = _67.value;

	                if (processing.has(id)) {
	                  _context24.next = 21;
	                  break;
	                }

	                return _context24.abrupt("return");

	              case 21:
	                _context24.next = 23;
	                return regeneratorRuntime.awrap(send([id, item, "next"]));

	              case 23:
	                _context24.next = 13;
	                break;

	              case 25:
	                _context24.next = 31;
	                break;

	              case 27:
	                _context24.prev = 27;
	                _context24.t0 = _context24["catch"](12);
	                _70 = true;
	                _69 = _context24.t0;

	              case 31:
	                _context24.prev = 31;
	                _context24.prev = 32;

	                if (!(_68 && _66.return)) {
	                  _context24.next = 36;
	                  break;
	                }

	                _context24.next = 36;
	                return regeneratorRuntime.awrap(_66.return());

	              case 36:
	                _context24.prev = 36;

	                if (!_70) {
	                  _context24.next = 39;
	                  break;
	                }

	                throw _69;

	              case 39:
	                return _context24.finish(36);

	              case 40:
	                return _context24.finish(31);

	              case 41:
	                _context24.next = 43;
	                return regeneratorRuntime.awrap(send([id]));

	              case 43:
	                _context24.next = 49;
	                break;

	              case 45:
	                if (!(args == "stop")) {
	                  _context24.next = 48;
	                  break;
	                }

	                _context24.next = 49;
	                break;

	              case 48:
	                throw new Error("wrong arguments");

	              case 49:
	                _context24.next = 55;
	                break;

	              case 51:
	                _context24.prev = 51;
	                _context24.t1 = _context24["catch"](0);
	                _context24.next = 55;
	                return regeneratorRuntime.awrap(send([id, String(_context24.t1 && _context24.t1.message || _context24.t1), "error"]));

	              case 55:
	                _context24.prev = 55;

	                processing.delete(id);
	                return _context24.finish(55);

	              case 58:
	              case "end":
	                return _context24.stop();
	            }
	          }, null, this, [[0, 51, 55, 58], [12, 27, 31, 41], [32,, 36, 40]]);
	        };

	        send = function send(data) {
	          return regeneratorRuntime.async(function send$(_context23) {
	            while (1) switch (_context23.prev = _context23.next) {
	              case 0:
	                _context23.next = 2;
	                return regeneratorRuntime.awrap(last);

	              case 2:
	                // await another thread if present
	                last = push(data);
	                return _context23.abrupt("return", last);

	              case 4:
	              case "end":
	                return _context23.stop();
	            }
	          }, null, this);
	        };

	        last = void 0, push = void 0, collection = _iterable2.default.create(function (p) {
	          return push = p;
	        });
	        processing = new Set();
	        _65 = void 0, _64 = void 0, _63 = void 0, _62 = void 0, _61 = (0, _iterable2.default)(consumer(collection))[Symbol.asyncIterator]();
	        _context25.prev = 5;

	      case 6:
	        _63 = false;
	        _context25.next = 9;
	        return regeneratorRuntime.awrap(_61.next());

	      case 9:
	        if ((_62 = _context25.sent).done) {
	          _context25.next = 17;
	          break;
	        }

	        _63 = true;
	        data = _62.value;
	        _context25.next = 14;
	        return regeneratorRuntime.awrap(last);

	      case 14:
	        // pause reading if not written
	        process(data);
	        _context25.next = 6;
	        break;

	      case 17:
	        _context25.next = 23;
	        break;

	      case 19:
	        _context25.prev = 19;
	        _context25.t0 = _context25["catch"](5);
	        _65 = true;
	        _64 = _context25.t0;

	      case 23:
	        _context25.prev = 23;
	        _context25.prev = 24;

	        if (!(_63 && _61.return)) {
	          _context25.next = 28;
	          break;
	        }

	        _context25.next = 28;
	        return regeneratorRuntime.awrap(_61.return());

	      case 28:
	        _context25.prev = 28;

	        if (!_65) {
	          _context25.next = 31;
	          break;
	        }

	        throw _64;

	      case 31:
	        return _context25.finish(28);

	      case 32:
	        return _context25.finish(23);

	      case 33:
	      case "end":
	        return _context25.stop();
	    }
	  }, null, _this, [[5, 19, 23, 33], [24,, 28, 32]]);
	});

	var makeFunction = exports.makeFunction = (0, _method2.default)(function (consumer) {
	  var buffer = [];
	  var push = void 0,
	      collection = _iterable2.default.create(function (p) {
	    return push = p;
	  });
	  void function _callee17() {
	    var error, results, _75, _74, _73, _72, _71, result, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, resolve;

	    return regeneratorRuntime.async(function _callee17$(_context26) {
	      while (1) switch (_context26.prev = _context26.next) {
	        case 0:
	          error = void 0;
	          _context26.prev = 1;
	          results = (0, _iterable2.default)(consumer(collection));
	          _75 = void 0, _74 = void 0, _73 = void 0, _72 = void 0, _71 = results[Symbol.asyncIterator]();
	          _context26.prev = 4;

	        case 5:
	          _73 = false;
	          _context26.next = 8;
	          return regeneratorRuntime.awrap(_71.next());

	        case 8:
	          if ((_72 = _context26.sent).done) {
	            _context26.next = 14;
	            break;
	          }

	          _73 = true;
	          result = _72.value;

	          if (buffer.length) buffer.shift()(result);else unexpected(result);
	          _context26.next = 5;
	          break;

	        case 14:
	          _context26.next = 20;
	          break;

	        case 16:
	          _context26.prev = 16;
	          _context26.t0 = _context26["catch"](4);
	          _75 = true;
	          _74 = _context26.t0;

	        case 20:
	          _context26.prev = 20;
	          _context26.prev = 21;

	          if (!(_73 && _71.return)) {
	            _context26.next = 25;
	            break;
	          }

	          _context26.next = 25;
	          return regeneratorRuntime.awrap(_71.return());

	        case 25:
	          _context26.prev = 25;

	          if (!_75) {
	            _context26.next = 28;
	            break;
	          }

	          throw _74;

	        case 28:
	          return _context26.finish(25);

	        case 29:
	          return _context26.finish(20);

	        case 30:
	          _context26.next = 36;
	          break;

	        case 32:
	          _context26.prev = 32;
	          _context26.t1 = _context26["catch"](1);

	          error = _context26.t1;
	          console.error(_context26.t1);

	        case 36:
	          _iteratorNormalCompletion6 = true;
	          _didIteratorError6 = false;
	          _iteratorError6 = undefined;
	          _context26.prev = 39;

	          for (_iterator6 = buffer[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	            resolve = _step6.value;

	            resolve(_bluebird2.default.reject(error || createEndOfStream()));
	          }_context26.next = 47;
	          break;

	        case 43:
	          _context26.prev = 43;
	          _context26.t2 = _context26["catch"](39);
	          _didIteratorError6 = true;
	          _iteratorError6 = _context26.t2;

	        case 47:
	          _context26.prev = 47;
	          _context26.prev = 48;

	          if (!_iteratorNormalCompletion6 && _iterator6.return) {
	            _iterator6.return();
	          }

	        case 50:
	          _context26.prev = 50;

	          if (!_didIteratorError6) {
	            _context26.next = 53;
	            break;
	          }

	          throw _iteratorError6;

	        case 53:
	          return _context26.finish(50);

	        case 54:
	          return _context26.finish(47);

	        case 55:
	          buffer = null;

	        case 56:
	        case "end":
	          return _context26.stop();
	      }
	    }, null, this, [[1, 32], [4, 16, 20, 30], [21,, 25, 29], [39, 43, 47, 55], [48,, 50, 54]]);
	  }();
	  return function _callee18(value) {
	    var ret;
	    return regeneratorRuntime.async(function _callee18$(_context27) {
	      while (1) switch (_context27.prev = _context27.next) {
	        case 0:
	          if (!(buffer == null)) {
	            _context27.next = 2;
	            break;
	          }

	          throw createEndOfStream();

	        case 2:
	          ret = new _bluebird2.default(function (resolve) {
	            return buffer.push(resolve);
	          });

	          push(value); // send value __only__ after preparing buffer
	          return _context27.abrupt("return", ret);

	        case 5:
	        case "end":
	          return _context27.stop();
	      }
	    }, null, _this);
	  };
	});

	var attachFunction = exports.attachFunction = (0, _method2.default)(function _callee19(consumer, func) {
	  var push, collection, _80, _79, _78, _77, _76, _loop2;

	  return regeneratorRuntime.async(function _callee19$(_context29) {
	    while (1) switch (_context29.prev = _context29.next) {
	      case 0:
	        push = void 0, collection = _iterable2.default.create(function (p) {
	          return push = p;
	        });
	        _80 = void 0, _79 = void 0, _78 = void 0, _77 = void 0, _76 = (0, _iterable2.default)(consumer(collection))[Symbol.asyncIterator]();
	        _context29.prev = 2;

	        _loop2 = function _loop2() {
	          var data;
	          return regeneratorRuntime.async(function _loop2$(_context28) {
	            while (1) switch (_context28.prev = _context28.next) {
	              case 0:
	                _78 = true;
	                data = _77.value;
	                _context28.next = 4;
	                return regeneratorRuntime.awrap(push(_bluebird2.default.try(function () {
	                  return func(data);
	                })));

	              case 4:
	              case "end":
	                return _context28.stop();
	            }
	          }, null, _this);
	        };

	      case 4:
	        _78 = false;
	        _context29.next = 7;
	        return regeneratorRuntime.awrap(_76.next());

	      case 7:
	        if ((_77 = _context29.sent).done) {
	          _context29.next = 12;
	          break;
	        }

	        _context29.next = 10;
	        return regeneratorRuntime.awrap(_loop2());

	      case 10:
	        _context29.next = 4;
	        break;

	      case 12:
	        _context29.next = 18;
	        break;

	      case 14:
	        _context29.prev = 14;
	        _context29.t0 = _context29["catch"](2);
	        _80 = true;
	        _79 = _context29.t0;

	      case 18:
	        _context29.prev = 18;
	        _context29.prev = 19;

	        if (!(_78 && _76.return)) {
	          _context29.next = 23;
	          break;
	        }

	        _context29.next = 23;
	        return regeneratorRuntime.awrap(_76.return());

	      case 23:
	        _context29.prev = 23;

	        if (!_80) {
	          _context29.next = 26;
	          break;
	        }

	        throw _79;

	      case 26:
	        return _context29.finish(23);

	      case 27:
	        return _context29.finish(18);

	      case 28:
	      case "end":
	        return _context29.stop();
	    }
	  }, null, _this, [[2, 14, 18, 28], [19,, 23, 27]]);
	});

	var attachHandler = exports.attachHandler = (0, _method2.default)(function _callee21(consumer, func) {
	  var push, collection, _85, _84, _83, _82, _81, _loop3;

	  return regeneratorRuntime.async(function _callee21$(_context31) {
	    while (1) switch (_context31.prev = _context31.next) {
	      case 0:
	        push = void 0, collection = _iterable2.default.create(function (p) {
	          return push = p;
	        });
	        _85 = void 0, _84 = void 0, _83 = void 0, _82 = void 0, _81 = (0, _iterable2.default)(consumer(collection))[Symbol.asyncIterator]();
	        _context31.prev = 2;

	        _loop3 = function _loop3() {
	          _83 = true;
	          var data = _82.value;void function _callee20() {
	            var _90, _89, _88, _87, _86, _data;

	            return regeneratorRuntime.async(function _callee20$(_context30) {
	              while (1) switch (_context30.prev = _context30.next) {
	                case 0:
	                  _context30.prev = 0;
	                  _90 = void 0, _89 = void 0, _88 = void 0, _87 = void 0, _86 = (0, _iterable2.default)(func(data))[Symbol.asyncIterator]();
	                  _context30.prev = 2;

	                case 3:
	                  _88 = false;
	                  _context30.next = 6;
	                  return regeneratorRuntime.awrap(_86.next());

	                case 6:
	                  if ((_87 = _context30.sent).done) {
	                    _context30.next = 13;
	                    break;
	                  }

	                  _88 = true;
	                  _data = _87.value;
	                  _context30.next = 11;
	                  return regeneratorRuntime.awrap(push(_data));

	                case 11:
	                  _context30.next = 3;
	                  break;

	                case 13:
	                  _context30.next = 19;
	                  break;

	                case 15:
	                  _context30.prev = 15;
	                  _context30.t0 = _context30["catch"](2);
	                  _90 = true;
	                  _89 = _context30.t0;

	                case 19:
	                  _context30.prev = 19;
	                  _context30.prev = 20;

	                  if (!(_88 && _86.return)) {
	                    _context30.next = 24;
	                    break;
	                  }

	                  _context30.next = 24;
	                  return regeneratorRuntime.awrap(_86.return());

	                case 24:
	                  _context30.prev = 24;

	                  if (!_90) {
	                    _context30.next = 27;
	                    break;
	                  }

	                  throw _89;

	                case 27:
	                  return _context30.finish(24);

	                case 28:
	                  return _context30.finish(19);

	                case 29:
	                  _context30.next = 35;
	                  break;

	                case 31:
	                  _context30.prev = 31;
	                  _context30.t1 = _context30["catch"](0);
	                  _context30.next = 35;
	                  return regeneratorRuntime.awrap(push(_bluebird2.default.reject(_context30.t1)));

	                case 35:
	                case "end":
	                  return _context30.stop();
	              }
	            }, null, this, [[0, 31], [2, 15, 19, 29], [20,, 24, 28]]);
	          }();
	        };

	      case 4:
	        _83 = false;
	        _context31.next = 7;
	        return regeneratorRuntime.awrap(_81.next());

	      case 7:
	        if ((_82 = _context31.sent).done) {
	          _context31.next = 11;
	          break;
	        }

	        _loop3();

	        _context31.next = 4;
	        break;

	      case 11:
	        _context31.next = 17;
	        break;

	      case 13:
	        _context31.prev = 13;
	        _context31.t0 = _context31["catch"](2);
	        _85 = true;
	        _84 = _context31.t0;

	      case 17:
	        _context31.prev = 17;
	        _context31.prev = 18;

	        if (!(_83 && _81.return)) {
	          _context31.next = 22;
	          break;
	        }

	        _context31.next = 22;
	        return regeneratorRuntime.awrap(_81.return());

	      case 22:
	        _context31.prev = 22;

	        if (!_85) {
	          _context31.next = 25;
	          break;
	        }

	        throw _84;

	      case 25:
	        return _context31.finish(22);

	      case 26:
	        return _context31.finish(17);

	      case 27:
	      case "end":
	        return _context31.stop();
	    }
	  }, null, _this, [[2, 13, 17, 27], [18,, 22, 26]]);
	});

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Transform = exports.Duplex = exports.Writable = exports.Readable = undefined;

	var _stream = __webpack_require__(322);

	var stream = _interopRequireWildcard(_stream);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dummy. TOD: remove

	var Readable = exports.Readable = function (_stream$Readable) {
	  _inherits(Readable, _stream$Readable);

	  function Readable(options) {
	    _classCallCheck(this, Readable);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Readable).call(this, options));

	    if (options.read) _this._read = options.read;
	    return _this;
	  }

	  return Readable;
	}(stream.Readable);

	var Writable = exports.Writable = function (_stream$Writable) {
	  _inherits(Writable, _stream$Writable);

	  function Writable(options) {
	    _classCallCheck(this, Writable);

	    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Writable).call(this, options));

	    if (options.write) _this2._write = options.write;
	    return _this2;
	  }

	  return Writable;
	}(stream.Writable);

	var Duplex = exports.Duplex = function (_stream$Duplex) {
	  _inherits(Duplex, _stream$Duplex);

	  function Duplex(options) {
	    _classCallCheck(this, Duplex);

	    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Duplex).call(this, options));

	    if (options.read) _this3._read = options.read;
	    if (options.write) _this3._write = options.write;
	    return _this3;
	  }

	  return Duplex;
	}(stream.Duplex);

	var Transform = exports.Transform = function (_stream$Transform) {
	  _inherits(Transform, _stream$Transform);

	  function Transform(options) {
	    _classCallCheck(this, Transform);

	    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(Transform).call(this, options));

	    if (options.transform) _this4._transform = options.transform;
	    if (options.flush) _this4._flush = options.flush;
	    return _this4;
	  }

	  return Transform;
	}(stream.Transform);

/***/ },
/* 338 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = method(method);

	/* lines to copy to your library

	import method from "method"
	export const __namespace__ = true

	*/

	function method(func) {
	  var namespace_flag = arguments.length <= 1 || arguments[1] === undefined ? "__namespace__" : arguments[1];

	  var ret = function ret() {
	    if (this != null && !this[namespace_flag]) switch (arguments.length) {
	      case 0:
	        return func(this);
	      case 1:
	        return func(this, arguments[0]);
	      case 2:
	        return func(this, arguments[0], arguments[1]);
	      case 3:
	        return func(this, arguments[0], arguments[1], arguments[2]);
	      case 4:
	        return func(this, arguments[0], arguments[1], arguments[2], arguments[3]);
	      default:
	        var args = [this];
	        for (var i = 0, l = arguments.length; i < l; ++i) {
	          args[i + 1] = arguments[i];
	        }return func.apply(null, args);
	    } else switch (arguments.length) {
	      case 0:
	        return func();
	      case 1:
	        return func(arguments[0]);
	      case 2:
	        return func(arguments[0], arguments[1]);
	      case 3:
	        return func(arguments[0], arguments[1], arguments[2]);
	      case 4:
	        return func(arguments[0], arguments[1], arguments[2], arguments[3]);
	      case 5:
	        return func(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
	      default:
	        var args = [];
	        for (var _i = 0, _l = arguments.length; _i < _l; ++_i) {
	          args[_i] = arguments[_i];
	        }return func.apply(null, args);
	    }
	  };
	  // ret.toString = ::func.toString
	  return ret;
	}
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isSync = exports.end = exports.push = exports.create = exports.from = undefined;
	exports.default = iterable;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _stream = __webpack_require__(322);

	var stream = _interopRequireWildcard(_stream);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	if (!Symbol.asyncIterator) Symbol.asyncIterator = Symbol("asyncIterator");

	var AGProto = Object.getPrototypeOf(regeneratorRuntime.mark(function _callee() {
	  return regeneratorRuntime.async(function _callee$(_context) {
	    while (1) switch (_context.prev = _context.next) {
	      case 0:
	      case "end":
	        return _context.stop();
	    }
	  }, _callee, this);
	})());
	if (!AGProto[Symbol.iterator]) Object.defineProperty(AGProto, Symbol.asyncIterator, { configurable: true, value: function value() {
	    return this;
	  } });

	if (!stream.Readable.prototype[Symbol.asyncIterator]) {
	  Object.defineProperty(stream.Readable.prototype, Symbol.asyncIterator, { configurable: true, value: function value() {

	      var s = this;
	      s.pause();

	      var waitForReadable = null,
	          done = false,
	          error = null;

	      var onreadable = function onreadable() {
	        if (waitForReadable != null) {
	          process.nextTick(waitForReadable);
	          waitForReadable = null;
	        }
	      };
	      var onend = function onend() {
	        done = true;
	        onreadable();
	      };
	      var onerror = function onerror(e) {
	        error = e;
	        onend();
	      };

	      s.on("error", onerror);
	      s.on("end", onend);
	      s.on("readable", onreadable);

	      return regeneratorRuntime.mark(function _callee2() {
	        var value;
	        return regeneratorRuntime.async(function _callee2$(_context2) {
	          while (1) switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.prev = 0;

	            case 1:
	              if (done) {
	                _context2.next = 12;
	                break;
	              }

	              value = s.read();

	              if (!(value != null)) {
	                _context2.next = 8;
	                break;
	              }

	              _context2.next = 6;
	              return value;

	            case 6:
	              _context2.next = 10;
	              break;

	            case 8:
	              _context2.next = 10;
	              return regeneratorRuntime.awrap(new _bluebird2.default(function (resolve) {
	                return waitForReadable = resolve;
	              }));

	            case 10:
	              _context2.next = 1;
	              break;

	            case 12:
	              _context2.prev = 12;

	              s.removeListener("error", onerror);
	              s.removeListener("end", onend);
	              s.removeListener("readable", onreadable);
	              return _context2.finish(12);

	            case 17:
	              if (!(error != null)) {
	                _context2.next = 19;
	                break;
	              }

	              throw error;

	            case 19:
	            case "end":
	              return _context2.stop();
	          }
	        }, _callee2, this, [[0,, 12, 17]]);
	      })();
	    }
	  });
	}

	var defIterator = {
	  throw: function _throw(value) {
	    throw value;
	  },
	  return: function _return(value) {
	    return { value: value, done: true };
	  }
	};

	function iterable(collection) {
	  if (typeof collection[Symbol.asyncIterator] == "function") return collection;
	  if (typeof collection[Symbol.iterator] == "function") return _defineProperty({}, Symbol.asyncIterator, function () {
	    return collection[Symbol.iterator]();
	  });
	  if (typeof collection.then == "function") return _defineProperty({}, Symbol.asyncIterator, function () {
	    var iterator = void 0;
	    var ret = {};
	    var get = function get(name, value) {
	      if (!iterator) iterator = _bluebird2.default.resolve(collection).then(function (collection) {
	        return iterable(collection)[Symbol.asyncIterator]();
	      });
	      return iterator.then(function (i) {
	        ret.next = function (v) {
	          return i.next(v);
	        };
	        ret.throw = i.throw && function (v) {
	          return i.throw(v);
	        };
	        ret.return = i.return && function (v) {
	          return i.return(v);
	        };
	        return (ret[name] || defIterator[name])(value);
	      });
	    };
	    var _arr = ["next", "throw", "return"];

	    var _loop = function _loop() {
	      var name = _arr[_i];
	      ret[name] = function (value) {
	        return get(name, value);
	      };
	    };

	    for (var _i = 0; _i < _arr.length; _i++) {
	      _loop();
	    }return ret;
	  });
	  throw new Error("non iterable");
	}

	exports.from = iterable;


	var throwStoppedIfNotEndFlag = function throwStoppedIfNotEndFlag(value) {
	  return value === end ? true : _bluebird2.default.reject(new Error("stopped"));
	};
	var pushAfterDone = function pushAfterDone(value) {
	  return _bluebird2.default.resolve(value).then(throwStoppedIfNotEndFlag);
	};

	function cleanup(writing) {
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = writing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var _step$value = _step.value;
	      var value = _step$value.value;
	      var resolve = _step$value.resolve;

	      resolve(pushAfterDone(value));
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	}

	var create = exports.create = iterable.create = function (proc) {
	  // returned value of push resolves when collection starts processing of argument
	  var reading = null;
	  var writing = [];
	  var done = false;
	  var ok = false;

	  try {
	    proc(function push(value) {
	      if (done) return pushAfterDone(value);else if (reading) {
	        process.nextTick(reading, value);
	        reading = null;
	        return _bluebird2.default.resolve(true);
	      } else return new _bluebird2.default(function (resolve) {
	        return writing.push({ value: value, resolve: resolve });
	      });
	    });
	    ok = true;
	  } finally {
	    if (!ok) {
	      done = true;
	      cleanup(writing);
	    }
	  }

	  return regeneratorRuntime.mark(function _callee3() {
	    var next, _writing$shift, value, resolve;

	    return regeneratorRuntime.async(function _callee3$(_context3) {
	      while (1) switch (_context3.prev = _context3.next) {
	        case 0:
	          _context3.prev = 0;

	        case 1:
	          next = void 0;

	          if (writing.length) {
	            _writing$shift = writing.shift();
	            value = _writing$shift.value;
	            resolve = _writing$shift.resolve;

	            process.nextTick(resolve, true);
	            next = value;
	          } else next = new _bluebird2.default(function (resolve) {
	            return reading = resolve;
	          });
	          _context3.next = 5;
	          return regeneratorRuntime.awrap(next);

	        case 5:
	          next = _context3.sent;

	          if (!(next === end)) {
	            _context3.next = 8;
	            break;
	          }

	          return _context3.abrupt("break", 12);

	        case 8:
	          _context3.next = 10;
	          return next;

	        case 10:
	          _context3.next = 1;
	          break;

	        case 12:
	          _context3.prev = 12;

	          done = true;
	          cleanup(writing);
	          return _context3.finish(12);

	        case 16:
	        case "end":
	          return _context3.stop();
	      }
	    }, _callee3, this, [[0,, 12, 16]]);
	  })();
	};

	var push = exports.push = iterable.push = function (push, value) {
	  return push(value);
	};

	var end = exports.end = iterable.end = function (push) {
	  return push(end);
	};

	var isSync = exports.isSync = iterable.isSync = function (iterator) {
	  return iterator != null && iterator[Symbol.iterator];
	};

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	var _iterable = __webpack_require__(339);

	var _iterable2 = _interopRequireDefault(_iterable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	exports.default = collections.transformer(regeneratorRuntime.mark(function _callee(raw) {
	  var index, _5, _4, _3, _2, _1, value;

	  return regeneratorRuntime.async(function _callee$(_context) {
	    while (1) switch (_context.prev = _context.next) {
	      case 0:
	        index = 0;
	        _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = (0, _iterable2.default)(raw)[Symbol.asyncIterator]();
	        _context.prev = 2;

	      case 3:
	        _3 = false;
	        _context.next = 6;
	        return regeneratorRuntime.awrap(_1.next());

	      case 6:
	        if ((_2 = _context.sent).done) {
	          _context.next = 13;
	          break;
	        }

	        _3 = true;
	        value = _2.value;
	        _context.next = 11;
	        return [++index, value];

	      case 11:
	        _context.next = 3;
	        break;

	      case 13:
	        _context.next = 19;
	        break;

	      case 15:
	        _context.prev = 15;
	        _context.t0 = _context["catch"](2);
	        _5 = true;
	        _4 = _context.t0;

	      case 19:
	        _context.prev = 19;
	        _context.prev = 20;

	        if (!(_3 && _1.return)) {
	          _context.next = 24;
	          break;
	        }

	        _context.next = 24;
	        return regeneratorRuntime.awrap(_1.return());

	      case 24:
	        _context.prev = 24;

	        if (!_5) {
	          _context.next = 27;
	          break;
	        }

	        throw _4;

	      case 27:
	        return _context.finish(24);

	      case 28:
	        return _context.finish(19);

	      case 29:
	      case "end":
	        return _context.stop();
	    }
	  }, _callee, this, [[2, 15, 19, 29], [20,, 24, 28]]);
	}), regeneratorRuntime.mark(function _callee2(encoded) {
	  var last, _10, _9, _8, _7, _6, _$value, index, value;

	  return regeneratorRuntime.async(function _callee2$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        last = -Infinity;
	        _10 = void 0, _9 = void 0, _8 = void 0, _7 = void 0, _6 = (0, _iterable2.default)(encoded)[Symbol.asyncIterator]();
	        _context2.prev = 2;

	      case 3:
	        _8 = false;
	        _context2.next = 6;
	        return regeneratorRuntime.awrap(_6.next());

	      case 6:
	        if ((_7 = _context2.sent).done) {
	          _context2.next = 17;
	          break;
	        }

	        _8 = true;
	        _$value = _slicedToArray(_7.value, 2);
	        index = _$value[0];
	        value = _$value[1];

	        if (!(last < index)) {
	          _context2.next = 15;
	          break;
	        }

	        last = index;
	        _context2.next = 15;
	        return value;

	      case 15:
	        _context2.next = 3;
	        break;

	      case 17:
	        _context2.next = 23;
	        break;

	      case 19:
	        _context2.prev = 19;
	        _context2.t0 = _context2["catch"](2);
	        _10 = true;
	        _9 = _context2.t0;

	      case 23:
	        _context2.prev = 23;
	        _context2.prev = 24;

	        if (!(_8 && _6.return)) {
	          _context2.next = 28;
	          break;
	        }

	        _context2.next = 28;
	        return regeneratorRuntime.awrap(_6.return());

	      case 28:
	        _context2.prev = 28;

	        if (!_10) {
	          _context2.next = 31;
	          break;
	        }

	        throw _9;

	      case 31:
	        return _context2.finish(28);

	      case 32:
	        return _context2.finish(23);

	      case 33:
	      case "end":
	        return _context2.stop();
	    }
	  }, _callee2, this, [[2, 19, 23, 33], [24,, 28, 32]]);
	}));
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.transformFirst = exports.readFirst = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // TODO: paste a bugreport that JSONStream.parse() returns not an instance of readable -- i mean, it has no read() method.
	// import * as JSONStream from "JSONStream"

	exports.buffer = buffer;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	var _iterable = __webpack_require__(339);

	var _iterable2 = _interopRequireDefault(_iterable);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var QUOTE = "\"".charCodeAt(0);
	var SLASH = "\\".charCodeAt(0);
	var OPEN_CURVE = "{".charCodeAt(0);
	var CLOSE_CURVE = "}".charCodeAt(0);
	var OPEN_SQUARE = "[".charCodeAt(0);
	var CLOSE_SQUARE = "]".charCodeAt(0);
	var COMMA = ",".charCodeAt(0);
	var COLON = ":".charCodeAt(0);
	var MINUS = "-".charCodeAt(0);
	var PLUS = "+".charCodeAt(0);

	function buffer() {
	  var last = 0;
	  var brackets = 0;
	  var slash = false;
	  var string = false;
	  var sign = false;
	  var rest = [];

	  function parse(buffer, index) {
	    var first = buffer.slice(Math.max(0, last), index);
	    var second = buffer.slice(index);
	    last = index;
	    if (rest.length) {
	      rest.push(first);
	      first = Buffer.concat(rest);
	      rest.length = 0;
	    }
	    return [JSON.parse(String(first)), second];
	  }

	  return regeneratorRuntime.mark(function _callee(data) {
	    var buffer, length, index, ch;
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) switch (_context.prev = _context.next) {
	        case 0:
	          last = rest.length ? -1 : 0;

	          if (!(data == null)) {
	            _context.next = 14;
	            break;
	          }

	          if (!string) {
	            _context.next = 6;
	            break;
	          }

	          throw new Error("unclosed string");

	        case 6:
	          if (!brackets) {
	            _context.next = 10;
	            break;
	          }

	          throw new Error("unclosed bracket");

	        case 10:
	          if (!rest.length) {
	            _context.next = 13;
	            break;
	          }

	          _context.next = 13;
	          return parse(new Buffer([]), 0);

	        case 13:
	          return _context.abrupt("return");

	        case 14:
	          buffer = typeof data == "string" ? new Buffer(data) : data;
	          length = buffer.length;
	          index = 0;

	        case 17:
	          if (!(index < length)) {
	            _context.next = 75;
	            break;
	          }

	          ch = buffer.readUInt8(index);

	          if (!slash) {
	            _context.next = 23;
	            break;
	          }

	          slash = false;
	          _context.next = 72;
	          break;

	        case 23:
	          if (!string) {
	            _context.next = 35;
	            break;
	          }

	          if (!(ch == SLASH)) {
	            _context.next = 28;
	            break;
	          }

	          slash = true;
	          _context.next = 33;
	          break;

	        case 28:
	          if (!(ch == QUOTE)) {
	            _context.next = 33;
	            break;
	          }

	          string = false;

	          if (!(brackets == 0)) {
	            _context.next = 33;
	            break;
	          }

	          _context.next = 33;
	          return parse(buffer, index + 1);

	        case 33:
	          _context.next = 72;
	          break;

	        case 35:
	          if (!(ch == QUOTE)) {
	            _context.next = 43;
	            break;
	          }

	          sign = false;

	          if (!(brackets == 0 && last < index)) {
	            _context.next = 40;
	            break;
	          }

	          _context.next = 40;
	          return parse(buffer, index + 0);

	        case 40:
	          string = true;
	          _context.next = 72;
	          break;

	        case 43:
	          if (!(ch == OPEN_CURVE || ch == OPEN_SQUARE)) {
	            _context.next = 51;
	            break;
	          }

	          sign = false;

	          if (!(brackets == 0 && last < index)) {
	            _context.next = 48;
	            break;
	          }

	          _context.next = 48;
	          return parse(buffer, index + 0);

	        case 48:
	          ++brackets;
	          _context.next = 72;
	          break;

	        case 51:
	          if (!(brackets > 0 && (ch == CLOSE_CURVE || ch == CLOSE_SQUARE))) {
	            _context.next = 59;
	            break;
	          }

	          sign = false;
	          --brackets;

	          if (!(brackets == 0)) {
	            _context.next = 57;
	            break;
	          }

	          _context.next = 57;
	          return parse(buffer, index + 1);

	        case 57:
	          _context.next = 72;
	          break;

	        case 59:
	          if (!sign) {
	            _context.next = 63;
	            break;
	          }

	          if (ch >= 33) sign = false;
	          _context.next = 72;
	          break;

	        case 63:
	          if (!(ch == MINUS || ch == PLUS)) {
	            _context.next = 67;
	            break;
	          }

	          sign = true;
	          _context.next = 72;
	          break;

	        case 67:
	          if (!(ch < 33 && !string && !sign && brackets == 0)) {
	            _context.next = 72;
	            break;
	          }

	          if (!(last < index)) {
	            _context.next = 71;
	            break;
	          }

	          _context.next = 71;
	          return parse(buffer, index + 0);

	        case 71:
	          ++last;

	        case 72:
	          ++index;
	          _context.next = 17;
	          break;

	        case 75:
	          if (length && last < length) if (last < 1) rest.push(buffer);else rest.push(buffer.slice(last));

	        case 76:
	        case "end":
	          return _context.stop();
	      }
	    }, _callee, this);
	  });
	}

	exports.default = collections.transformer(regeneratorRuntime.mark(function _callee2(raw) {
	  var _5, _4, _3, _2, _1, obj;

	  return regeneratorRuntime.async(function _callee2$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = (0, _iterable2.default)(raw)[Symbol.asyncIterator]();
	        _context2.prev = 1;

	      case 2:
	        _3 = false;
	        _context2.next = 5;
	        return regeneratorRuntime.awrap(_1.next());

	      case 5:
	        if ((_2 = _context2.sent).done) {
	          _context2.next = 12;
	          break;
	        }

	        _3 = true;
	        obj = _2.value;
	        _context2.next = 10;
	        return JSON.stringify(obj) + "\n";

	      case 10:
	        _context2.next = 2;
	        break;

	      case 12:
	        _context2.next = 18;
	        break;

	      case 14:
	        _context2.prev = 14;
	        _context2.t0 = _context2["catch"](1);
	        _5 = true;
	        _4 = _context2.t0;

	      case 18:
	        _context2.prev = 18;
	        _context2.prev = 19;

	        if (!(_3 && _1.return)) {
	          _context2.next = 23;
	          break;
	        }

	        _context2.next = 23;
	        return regeneratorRuntime.awrap(_1.return());

	      case 23:
	        _context2.prev = 23;

	        if (!_5) {
	          _context2.next = 26;
	          break;
	        }

	        throw _4;

	      case 26:
	        return _context2.finish(23);

	      case 27:
	        return _context2.finish(18);

	      case 28:
	      case "end":
	        return _context2.stop();
	    }
	  }, _callee2, this, [[1, 14, 18, 28], [19,, 23, 27]]);
	}), regeneratorRuntime.mark(function _callee3(encoded) {
	  var buf, _10, _9, _8, _7, _6, chunk, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, obj, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value;

	  return regeneratorRuntime.async(function _callee3$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	        buf = buffer();
	        _10 = void 0, _9 = void 0, _8 = void 0, _7 = void 0, _6 = (0, _iterable2.default)(encoded)[Symbol.asyncIterator]();
	        _context3.prev = 2;

	      case 3:
	        _8 = false;
	        _context3.next = 6;
	        return regeneratorRuntime.awrap(_6.next());

	      case 6:
	        if ((_7 = _context3.sent).done) {
	          _context3.next = 38;
	          break;
	        }

	        _8 = true;
	        chunk = _7.value;
	        _iteratorNormalCompletion = true;
	        _didIteratorError = false;
	        _iteratorError = undefined;
	        _context3.prev = 12;
	        _iterator = buf(chunk)[Symbol.iterator]();

	      case 14:
	        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	          _context3.next = 22;
	          break;
	        }

	        _step$value = _slicedToArray(_step.value, 1);
	        obj = _step$value[0];
	        _context3.next = 19;
	        return obj;

	      case 19:
	        _iteratorNormalCompletion = true;
	        _context3.next = 14;
	        break;

	      case 22:
	        _context3.next = 28;
	        break;

	      case 24:
	        _context3.prev = 24;
	        _context3.t0 = _context3["catch"](12);
	        _didIteratorError = true;
	        _iteratorError = _context3.t0;

	      case 28:
	        _context3.prev = 28;
	        _context3.prev = 29;

	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }

	      case 31:
	        _context3.prev = 31;

	        if (!_didIteratorError) {
	          _context3.next = 34;
	          break;
	        }

	        throw _iteratorError;

	      case 34:
	        return _context3.finish(31);

	      case 35:
	        return _context3.finish(28);

	      case 36:
	        _context3.next = 3;
	        break;

	      case 38:
	        _context3.next = 44;
	        break;

	      case 40:
	        _context3.prev = 40;
	        _context3.t1 = _context3["catch"](2);
	        _10 = true;
	        _9 = _context3.t1;

	      case 44:
	        _context3.prev = 44;
	        _context3.prev = 45;

	        if (!(_8 && _6.return)) {
	          _context3.next = 49;
	          break;
	        }

	        _context3.next = 49;
	        return regeneratorRuntime.awrap(_6.return());

	      case 49:
	        _context3.prev = 49;

	        if (!_10) {
	          _context3.next = 52;
	          break;
	        }

	        throw _9;

	      case 52:
	        return _context3.finish(49);

	      case 53:
	        return _context3.finish(44);

	      case 54:
	        _iteratorNormalCompletion2 = true;
	        _didIteratorError2 = false;
	        _iteratorError2 = undefined;
	        _context3.prev = 57;
	        _iterator2 = buf(null)[Symbol.iterator]();

	      case 59:
	        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	          _context3.next = 67;
	          break;
	        }

	        _step2$value = _slicedToArray(_step2.value, 1);
	        obj = _step2$value[0];
	        _context3.next = 64;
	        return obj;

	      case 64:
	        _iteratorNormalCompletion2 = true;
	        _context3.next = 59;
	        break;

	      case 67:
	        _context3.next = 73;
	        break;

	      case 69:
	        _context3.prev = 69;
	        _context3.t2 = _context3["catch"](57);
	        _didIteratorError2 = true;
	        _iteratorError2 = _context3.t2;

	      case 73:
	        _context3.prev = 73;
	        _context3.prev = 74;

	        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	          _iterator2.return();
	        }

	      case 76:
	        _context3.prev = 76;

	        if (!_didIteratorError2) {
	          _context3.next = 79;
	          break;
	        }

	        throw _iteratorError2;

	      case 79:
	        return _context3.finish(76);

	      case 80:
	        return _context3.finish(73);

	      case 81:
	      case "end":
	        return _context3.stop();
	    }
	  }, _callee3, this, [[2, 40, 44, 54], [12, 24, 28, 36], [29,, 31, 35], [45,, 49, 53], [57, 69, 73, 81], [74,, 76, 80]]);
	}));

	var readFirst = exports.readFirst = function readFirst(stream) {
	  return new _bluebird2.default(function (resolve) {
	    stream.pause();
	    var buf = buffer();
	    var events = function events() {
	      var what = arguments.length <= 0 || arguments[0] === undefined ? "removeListener" : arguments[0];

	      stream[what]("readable", onReadable);
	      stream[what]("error", onError);
	      stream[what]("end", onEnd);
	    };
	    var onReadable = function onReadable() {
	      for (var chunk; chunk = stream.read(), chunk != null;) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = buf(chunk)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var _step3$value = _slicedToArray(_step3.value, 2);

	            var obj = _step3$value[0];
	            var rest = _step3$value[1];

	            events();
	            if (rest.length) {
	              stream.unshift(rest);
	              stream.push("");
	            }
	            resolve(obj);
	            return;
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }
	      }
	    };
	    var onError = function onError(error) {
	      events();
	      resolve(_bluebird2.default.reject(error));
	    };
	    var onEnd = function onEnd() {
	      events();
	      resolve(_bluebird2.default.reject(new Error("unexpected end of stream")));
	    };
	    events("on");
	    onReadable();
	  });
	};

	var transformFirst = exports.transformFirst = collections.transformer(regeneratorRuntime.mark(function _callee4(raw) {
	  var sent, _15, _14, _13, _12, _11, obj;

	  return regeneratorRuntime.async(function _callee4$(_context4) {
	    while (1) switch (_context4.prev = _context4.next) {
	      case 0:
	        sent = false;
	        _15 = void 0, _14 = void 0, _13 = void 0, _12 = void 0, _11 = (0, _iterable2.default)(raw)[Symbol.asyncIterator]();
	        _context4.prev = 2;

	      case 3:
	        _13 = false;
	        _context4.next = 6;
	        return regeneratorRuntime.awrap(_11.next());

	      case 6:
	        if ((_12 = _context4.sent).done) {
	          _context4.next = 21;
	          break;
	        }

	        _13 = true;
	        obj = _12.value;

	        if (!sent) {
	          _context4.next = 14;
	          break;
	        }

	        _context4.next = 12;
	        return obj;

	      case 12:
	        _context4.next = 19;
	        break;

	      case 14:
	        if (!(obj == null || typeof obj == "boolean" || typeof obj == "number")) {
	          _context4.next = 16;
	          break;
	        }

	        throw new Error("first element must be an object or a string");

	      case 16:
	        sent = true;
	        _context4.next = 19;
	        return JSON.stringify(obj);

	      case 19:
	        _context4.next = 3;
	        break;

	      case 21:
	        _context4.next = 27;
	        break;

	      case 23:
	        _context4.prev = 23;
	        _context4.t0 = _context4["catch"](2);
	        _15 = true;
	        _14 = _context4.t0;

	      case 27:
	        _context4.prev = 27;
	        _context4.prev = 28;

	        if (!(_13 && _11.return)) {
	          _context4.next = 32;
	          break;
	        }

	        _context4.next = 32;
	        return regeneratorRuntime.awrap(_11.return());

	      case 32:
	        _context4.prev = 32;

	        if (!_15) {
	          _context4.next = 35;
	          break;
	        }

	        throw _14;

	      case 35:
	        return _context4.finish(32);

	      case 36:
	        return _context4.finish(27);

	      case 37:
	      case "end":
	        return _context4.stop();
	    }
	  }, _callee4, this, [[2, 23, 27, 37], [28,, 32, 36]]);
	}), regeneratorRuntime.mark(function _callee5(encoded) {
	  var buf, sent, _20, _19, _18, _17, _16, chunk, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, obj, rest;

	  return regeneratorRuntime.async(function _callee5$(_context5) {
	    while (1) switch (_context5.prev = _context5.next) {
	      case 0:
	        buf = buffer();
	        sent = false;
	        _20 = void 0, _19 = void 0, _18 = void 0, _17 = void 0, _16 = (0, _iterable2.default)(encoded)[Symbol.asyncIterator]();
	        _context5.prev = 3;

	      case 4:
	        _18 = false;
	        _context5.next = 7;
	        return regeneratorRuntime.awrap(_16.next());

	      case 7:
	        if ((_17 = _context5.sent).done) {
	          _context5.next = 50;
	          break;
	        }

	        _18 = true;
	        chunk = _17.value;

	        if (!sent) {
	          _context5.next = 15;
	          break;
	        }

	        _context5.next = 13;
	        return chunk;

	      case 13:
	        _context5.next = 48;
	        break;

	      case 15:
	        _iteratorNormalCompletion4 = true;
	        _didIteratorError4 = false;
	        _iteratorError4 = undefined;
	        _context5.prev = 18;
	        _iterator4 = buf(chunk)[Symbol.iterator]();

	      case 20:
	        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
	          _context5.next = 34;
	          break;
	        }

	        _step4$value = _slicedToArray(_step4.value, 2);
	        obj = _step4$value[0];
	        rest = _step4$value[1];

	        sent = true;
	        _context5.next = 27;
	        return obj;

	      case 27:
	        if (!(rest.length > 0)) {
	          _context5.next = 30;
	          break;
	        }

	        _context5.next = 30;
	        return rest;

	      case 30:
	        return _context5.abrupt("break", 34);

	      case 31:
	        _iteratorNormalCompletion4 = true;
	        _context5.next = 20;
	        break;

	      case 34:
	        _context5.next = 40;
	        break;

	      case 36:
	        _context5.prev = 36;
	        _context5.t0 = _context5["catch"](18);
	        _didIteratorError4 = true;
	        _iteratorError4 = _context5.t0;

	      case 40:
	        _context5.prev = 40;
	        _context5.prev = 41;

	        if (!_iteratorNormalCompletion4 && _iterator4.return) {
	          _iterator4.return();
	        }

	      case 43:
	        _context5.prev = 43;

	        if (!_didIteratorError4) {
	          _context5.next = 46;
	          break;
	        }

	        throw _iteratorError4;

	      case 46:
	        return _context5.finish(43);

	      case 47:
	        return _context5.finish(40);

	      case 48:
	        _context5.next = 4;
	        break;

	      case 50:
	        _context5.next = 56;
	        break;

	      case 52:
	        _context5.prev = 52;
	        _context5.t1 = _context5["catch"](3);
	        _20 = true;
	        _19 = _context5.t1;

	      case 56:
	        _context5.prev = 56;
	        _context5.prev = 57;

	        if (!(_18 && _16.return)) {
	          _context5.next = 61;
	          break;
	        }

	        _context5.next = 61;
	        return regeneratorRuntime.awrap(_16.return());

	      case 61:
	        _context5.prev = 61;

	        if (!_20) {
	          _context5.next = 64;
	          break;
	        }

	        throw _19;

	      case 64:
	        return _context5.finish(61);

	      case 65:
	        return _context5.finish(56);

	      case 66:
	      case "end":
	        return _context5.stop();
	    }
	  }, _callee5, this, [[3, 52, 56, 66], [18, 36, 40, 48], [41,, 43, 47], [57,, 61, 65]]);
	}));

	// if ( typeof Buffer == `undefined` ) {
	// 	window.Buffer = function ( s ) { this._s = s; this.length = s.length }
	// 	window.Buffer.prototype.readUInt8 = function ( index ) { return this._s.charCodeAt( index ) }
	// 	window.Buffer.prototype.slice = function ( begin, end ) { return new window.Buffer( this._s.slice( begin, end ) ) }
	// 	window.Buffer.prototype.toString = function () { return this._s }
	// 	window.Buffer.concat = function ( a ) { return a.map( s => s._s ).join( `` ) }
	// }
	// let b = buffer()
	// for ( const s of [ `"\\"\\`,`\\"null  1`,`2`,` 3 true  ""  {   }  [  ] t`,`r`,`u`,`e"  `,`  "{}[[],"\\`,`"\\\\",[[`,`[{"":""}]]]]`,null ] )
	// 	for ( const c of b( s ) )
	// 		console.log( JSON.stringify( c[ 0 ] ) )

/***/ },
/* 342 */
/***/ function(module, exports) {

	module.exports = require("child_process");

/***/ },
/* 343 */,
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Dumper, Parser, Utils, Yaml;

	Parser = __webpack_require__(345);

	Dumper = __webpack_require__(354);

	Utils = __webpack_require__(349);

	Yaml = (function() {
	  function Yaml() {}

	  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectDecoder == null) {
	      objectDecoder = null;
	    }
	    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);
	  };

	  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {
	    var input;
	    if (callback == null) {
	      callback = null;
	    }
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectDecoder == null) {
	      objectDecoder = null;
	    }
	    if (callback != null) {
	      return Utils.getStringFromFile(path, (function(_this) {
	        return function(input) {
	          var result;
	          result = null;
	          if (input != null) {
	            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);
	          }
	          callback(result);
	        };
	      })(this));
	    } else {
	      input = Utils.getStringFromFile(path);
	      if (input != null) {
	        return this.parse(input, exceptionOnInvalidType, objectDecoder);
	      }
	      return null;
	    }
	  };

	  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
	    var yaml;
	    if (inline == null) {
	      inline = 2;
	    }
	    if (indent == null) {
	      indent = 4;
	    }
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectEncoder == null) {
	      objectEncoder = null;
	    }
	    yaml = new Dumper();
	    yaml.indentation = indent;
	    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);
	  };

	  Yaml.register = function() {
	    var require_handler;
	    require_handler = function(module, filename) {
	      return module.exports = YAML.parseFile(filename);
	    };
	    if (("function" !== "undefined" && __webpack_require__(355) !== null ? (void 0) : void 0) != null) {
	      (void 0)['.yml'] = require_handler;
	      return (void 0)['.yaml'] = require_handler;
	    }
	  };

	  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
	    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);
	  };

	  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {
	    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);
	  };

	  return Yaml;

	})();

	if (typeof window !== "undefined" && window !== null) {
	  window.YAML = Yaml;
	}

	if (typeof window === "undefined" || window === null) {
	  this.YAML = Yaml;
	}

	module.exports = Yaml;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Inline, ParseException, Parser, Pattern, Utils;

	Inline = __webpack_require__(346);

	Pattern = __webpack_require__(347);

	Utils = __webpack_require__(349);

	ParseException = __webpack_require__(352);

	Parser = (function() {
	  Parser.prototype.PATTERN_FOLDED_SCALAR_ALL = new Pattern('^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

	  Parser.prototype.PATTERN_FOLDED_SCALAR_END = new Pattern('(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$');

	  Parser.prototype.PATTERN_SEQUENCE_ITEM = new Pattern('^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$');

	  Parser.prototype.PATTERN_ANCHOR_VALUE = new Pattern('^&(?<ref>[^ ]+) *(?<value>.*)');

	  Parser.prototype.PATTERN_COMPACT_NOTATION = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

	  Parser.prototype.PATTERN_MAPPING_ITEM = new Pattern('^(?<key>' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$');

	  Parser.prototype.PATTERN_DECIMAL = new Pattern('\\d+');

	  Parser.prototype.PATTERN_INDENT_SPACES = new Pattern('^ +');

	  Parser.prototype.PATTERN_TRAILING_LINES = new Pattern('(\n*)$');

	  Parser.prototype.PATTERN_YAML_HEADER = new Pattern('^\\%YAML[: ][\\d\\.]+.*\n');

	  Parser.prototype.PATTERN_LEADING_COMMENTS = new Pattern('^(\\#.*?\n)+');

	  Parser.prototype.PATTERN_DOCUMENT_MARKER_START = new Pattern('^\\-\\-\\-.*?\n');

	  Parser.prototype.PATTERN_DOCUMENT_MARKER_END = new Pattern('^\\.\\.\\.\\s*$');

	  Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION = {};

	  Parser.prototype.CONTEXT_NONE = 0;

	  Parser.prototype.CONTEXT_SEQUENCE = 1;

	  Parser.prototype.CONTEXT_MAPPING = 2;

	  function Parser(offset) {
	    this.offset = offset != null ? offset : 0;
	    this.lines = [];
	    this.currentLineNb = -1;
	    this.currentLine = '';
	    this.refs = {};
	  }

	  Parser.prototype.parse = function(value, exceptionOnInvalidType, objectDecoder) {
	    var alias, allowOverwrite, block, c, context, data, e, error, error1, error2, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectDecoder == null) {
	      objectDecoder = null;
	    }
	    this.currentLineNb = -1;
	    this.currentLine = '';
	    this.lines = this.cleanup(value).split("\n");
	    data = null;
	    context = this.CONTEXT_NONE;
	    allowOverwrite = false;
	    while (this.moveToNextLine()) {
	      if (this.isCurrentLineEmpty()) {
	        continue;
	      }
	      if ("\t" === this.currentLine[0]) {
	        throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);
	      }
	      isRef = mergeNode = false;
	      if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {
	        if (this.CONTEXT_MAPPING === context) {
	          throw new ParseException('You cannot define a sequence item when in a mapping');
	        }
	        context = this.CONTEXT_SEQUENCE;
	        if (data == null) {
	          data = [];
	        }
	        if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
	          isRef = matches.ref;
	          values.value = matches.value;
	        }
	        if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
	          if (this.currentLineNb < this.lines.length - 1 && !this.isNextLineUnIndentedCollection()) {
	            c = this.getRealCurrentLineNb() + 1;
	            parser = new Parser(c);
	            parser.refs = this.refs;
	            data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));
	          } else {
	            data.push(null);
	          }
	        } else {
	          if (((ref = values.leadspaces) != null ? ref.length : void 0) && (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {
	            c = this.getRealCurrentLineNb();
	            parser = new Parser(c);
	            parser.refs = this.refs;
	            block = values.value;
	            indent = this.getCurrentLineIndentation();
	            if (this.isNextLineIndented(false)) {
	              block += "\n" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);
	            }
	            data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));
	          } else {
	            data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));
	          }
	        }
	      } else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) && values.key.indexOf(' #') === -1) {
	        if (this.CONTEXT_SEQUENCE === context) {
	          throw new ParseException('You cannot define a mapping item when in a sequence');
	        }
	        context = this.CONTEXT_MAPPING;
	        if (data == null) {
	          data = {};
	        }
	        Inline.configure(exceptionOnInvalidType, objectDecoder);
	        try {
	          key = Inline.parseScalar(values.key);
	        } catch (error) {
	          e = error;
	          e.parsedLine = this.getRealCurrentLineNb() + 1;
	          e.snippet = this.currentLine;
	          throw e;
	        }
	        if ('<<' === key) {
	          mergeNode = true;
	          allowOverwrite = true;
	          if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {
	            refName = values.value.slice(1);
	            if (this.refs[refName] == null) {
	              throw new ParseException('Reference "' + refName + '" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);
	            }
	            refValue = this.refs[refName];
	            if (typeof refValue !== 'object') {
	              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
	            }
	            if (refValue instanceof Array) {
	              for (i = j = 0, len = refValue.length; j < len; i = ++j) {
	                value = refValue[i];
	                if (data[name = String(i)] == null) {
	                  data[name] = value;
	                }
	              }
	            } else {
	              for (key in refValue) {
	                value = refValue[key];
	                if (data[key] == null) {
	                  data[key] = value;
	                }
	              }
	            }
	          } else {
	            if ((values.value != null) && values.value !== '') {
	              value = values.value;
	            } else {
	              value = this.getNextEmbedBlock();
	            }
	            c = this.getRealCurrentLineNb() + 1;
	            parser = new Parser(c);
	            parser.refs = this.refs;
	            parsed = parser.parse(value, exceptionOnInvalidType);
	            if (typeof parsed !== 'object') {
	              throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
	            }
	            if (parsed instanceof Array) {
	              for (l = 0, len1 = parsed.length; l < len1; l++) {
	                parsedItem = parsed[l];
	                if (typeof parsedItem !== 'object') {
	                  throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);
	                }
	                if (parsedItem instanceof Array) {
	                  for (i = m = 0, len2 = parsedItem.length; m < len2; i = ++m) {
	                    value = parsedItem[i];
	                    k = String(i);
	                    if (!data.hasOwnProperty(k)) {
	                      data[k] = value;
	                    }
	                  }
	                } else {
	                  for (key in parsedItem) {
	                    value = parsedItem[key];
	                    if (!data.hasOwnProperty(key)) {
	                      data[key] = value;
	                    }
	                  }
	                }
	              }
	            } else {
	              for (key in parsed) {
	                value = parsed[key];
	                if (!data.hasOwnProperty(key)) {
	                  data[key] = value;
	                }
	              }
	            }
	          }
	        } else if ((values.value != null) && (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
	          isRef = matches.ref;
	          values.value = matches.value;
	        }
	        if (mergeNode) {

	        } else if (!(values.value != null) || '' === Utils.trim(values.value, ' ') || Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
	          if (!(this.isNextLineIndented()) && !(this.isNextLineUnIndentedCollection())) {
	            if (allowOverwrite || data[key] === void 0) {
	              data[key] = null;
	            }
	          } else {
	            c = this.getRealCurrentLineNb() + 1;
	            parser = new Parser(c);
	            parser.refs = this.refs;
	            val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);
	            if (allowOverwrite || data[key] === void 0) {
	              data[key] = val;
	            }
	          }
	        } else {
	          val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);
	          if (allowOverwrite || data[key] === void 0) {
	            data[key] = val;
	          }
	        }
	      } else {
	        lineCount = this.lines.length;
	        if (1 === lineCount || (2 === lineCount && Utils.isEmpty(this.lines[1]))) {
	          try {
	            value = Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);
	          } catch (error1) {
	            e = error1;
	            e.parsedLine = this.getRealCurrentLineNb() + 1;
	            e.snippet = this.currentLine;
	            throw e;
	          }
	          if (typeof value === 'object') {
	            if (value instanceof Array) {
	              first = value[0];
	            } else {
	              for (key in value) {
	                first = value[key];
	                break;
	              }
	            }
	            if (typeof first === 'string' && first.indexOf('*') === 0) {
	              data = [];
	              for (n = 0, len3 = value.length; n < len3; n++) {
	                alias = value[n];
	                data.push(this.refs[alias.slice(1)]);
	              }
	              value = data;
	            }
	          }
	          return value;
	        } else if ((ref2 = Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {
	          try {
	            return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
	          } catch (error2) {
	            e = error2;
	            e.parsedLine = this.getRealCurrentLineNb() + 1;
	            e.snippet = this.currentLine;
	            throw e;
	          }
	        }
	        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
	      }
	      if (isRef) {
	        if (data instanceof Array) {
	          this.refs[isRef] = data[data.length - 1];
	        } else {
	          lastKey = null;
	          for (key in data) {
	            lastKey = key;
	          }
	          this.refs[isRef] = data[lastKey];
	        }
	      }
	    }
	    if (Utils.isEmpty(data)) {
	      return null;
	    } else {
	      return data;
	    }
	  };

	  Parser.prototype.getRealCurrentLineNb = function() {
	    return this.currentLineNb + this.offset;
	  };

	  Parser.prototype.getCurrentLineIndentation = function() {
	    return this.currentLine.length - Utils.ltrim(this.currentLine, ' ').length;
	  };

	  Parser.prototype.getNextEmbedBlock = function(indentation, includeUnindentedCollection) {
	    var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;
	    if (indentation == null) {
	      indentation = null;
	    }
	    if (includeUnindentedCollection == null) {
	      includeUnindentedCollection = false;
	    }
	    this.moveToNextLine();
	    if (indentation == null) {
	      newIndent = this.getCurrentLineIndentation();
	      unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);
	      if (!(this.isCurrentLineEmpty()) && 0 === newIndent && !unindentedEmbedBlock) {
	        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
	      }
	    } else {
	      newIndent = indentation;
	    }
	    data = [this.currentLine.slice(newIndent)];
	    if (!includeUnindentedCollection) {
	      isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);
	    }
	    removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;
	    removeComments = !removeCommentsPattern.test(this.currentLine);
	    while (this.moveToNextLine()) {
	      indent = this.getCurrentLineIndentation();
	      if (indent === newIndent) {
	        removeComments = !removeCommentsPattern.test(this.currentLine);
	      }
	      if (isItUnindentedCollection && !this.isStringUnIndentedCollectionItem(this.currentLine) && indent === newIndent) {
	        this.moveToPreviousLine();
	        break;
	      }
	      if (this.isCurrentLineBlank()) {
	        data.push(this.currentLine.slice(newIndent));
	        continue;
	      }
	      if (removeComments && this.isCurrentLineComment()) {
	        if (indent === newIndent) {
	          continue;
	        }
	      }
	      if (indent >= newIndent) {
	        data.push(this.currentLine.slice(newIndent));
	      } else if (Utils.ltrim(this.currentLine).charAt(0) === '#') {

	      } else if (0 === indent) {
	        this.moveToPreviousLine();
	        break;
	      } else {
	        throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
	      }
	    }
	    return data.join("\n");
	  };

	  Parser.prototype.moveToNextLine = function() {
	    if (this.currentLineNb >= this.lines.length - 1) {
	      return false;
	    }
	    this.currentLine = this.lines[++this.currentLineNb];
	    return true;
	  };

	  Parser.prototype.moveToPreviousLine = function() {
	    this.currentLine = this.lines[--this.currentLineNb];
	  };

	  Parser.prototype.parseValue = function(value, exceptionOnInvalidType, objectDecoder) {
	    var e, error, error1, foldedIndent, matches, modifiers, pos, ref, ref1, val;
	    if (0 === value.indexOf('*')) {
	      pos = value.indexOf('#');
	      if (pos !== -1) {
	        value = value.substr(1, pos - 2);
	      } else {
	        value = value.slice(1);
	      }
	      if (this.refs[value] === void 0) {
	        throw new ParseException('Reference "' + value + '" does not exist.', this.currentLine);
	      }
	      return this.refs[value];
	    }
	    if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {
	      modifiers = (ref = matches.modifiers) != null ? ref : '';
	      foldedIndent = Math.abs(parseInt(modifiers));
	      if (isNaN(foldedIndent)) {
	        foldedIndent = 0;
	      }
	      val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);
	      if (matches.type != null) {
	        Inline.configure(exceptionOnInvalidType, objectDecoder);
	        return Inline.parseScalar(matches.type + ' ' + val);
	      } else {
	        return val;
	      }
	    }
	    try {
	      return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
	    } catch (error) {
	      e = error;
	      if (((ref1 = value.charAt(0)) === '[' || ref1 === '{') && e instanceof ParseException && this.isNextLineIndented()) {
	        value += "\n" + this.getNextEmbedBlock();
	        try {
	          return Inline.parse(value, exceptionOnInvalidType, objectDecoder);
	        } catch (error1) {
	          e = error1;
	          e.parsedLine = this.getRealCurrentLineNb() + 1;
	          e.snippet = this.currentLine;
	          throw e;
	        }
	      } else {
	        e.parsedLine = this.getRealCurrentLineNb() + 1;
	        e.snippet = this.currentLine;
	        throw e;
	      }
	    }
	  };

	  Parser.prototype.parseFoldedScalar = function(separator, indicator, indentation) {
	    var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;
	    if (indicator == null) {
	      indicator = '';
	    }
	    if (indentation == null) {
	      indentation = 0;
	    }
	    notEOF = this.moveToNextLine();
	    if (!notEOF) {
	      return '';
	    }
	    isCurrentLineBlank = this.isCurrentLineBlank();
	    text = '';
	    while (notEOF && isCurrentLineBlank) {
	      if (notEOF = this.moveToNextLine()) {
	        text += "\n";
	        isCurrentLineBlank = this.isCurrentLineBlank();
	      }
	    }
	    if (0 === indentation) {
	      if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {
	        indentation = matches[0].length;
	      }
	    }
	    if (indentation > 0) {
	      pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];
	      if (pattern == null) {
	        pattern = new Pattern('^ {' + indentation + '}(.*)$');
	        Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;
	      }
	      while (notEOF && (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {
	        if (isCurrentLineBlank) {
	          text += this.currentLine.slice(indentation);
	        } else {
	          text += matches[1];
	        }
	        if (notEOF = this.moveToNextLine()) {
	          text += "\n";
	          isCurrentLineBlank = this.isCurrentLineBlank();
	        }
	      }
	    } else if (notEOF) {
	      text += "\n";
	    }
	    if (notEOF) {
	      this.moveToPreviousLine();
	    }
	    if ('>' === separator) {
	      newText = '';
	      ref = text.split("\n");
	      for (j = 0, len = ref.length; j < len; j++) {
	        line = ref[j];
	        if (line.length === 0 || line.charAt(0) === ' ') {
	          newText = Utils.rtrim(newText, ' ') + line + "\n";
	        } else {
	          newText += line + ' ';
	        }
	      }
	      text = newText;
	    }
	    if ('+' !== indicator) {
	      text = Utils.rtrim(text);
	    }
	    if ('' === indicator) {
	      text = this.PATTERN_TRAILING_LINES.replace(text, "\n");
	    } else if ('-' === indicator) {
	      text = this.PATTERN_TRAILING_LINES.replace(text, '');
	    }
	    return text;
	  };

	  Parser.prototype.isNextLineIndented = function(ignoreComments) {
	    var EOF, currentIndentation, ret;
	    if (ignoreComments == null) {
	      ignoreComments = true;
	    }
	    currentIndentation = this.getCurrentLineIndentation();
	    EOF = !this.moveToNextLine();
	    if (ignoreComments) {
	      while (!EOF && this.isCurrentLineEmpty()) {
	        EOF = !this.moveToNextLine();
	      }
	    } else {
	      while (!EOF && this.isCurrentLineBlank()) {
	        EOF = !this.moveToNextLine();
	      }
	    }
	    if (EOF) {
	      return false;
	    }
	    ret = false;
	    if (this.getCurrentLineIndentation() > currentIndentation) {
	      ret = true;
	    }
	    this.moveToPreviousLine();
	    return ret;
	  };

	  Parser.prototype.isCurrentLineEmpty = function() {
	    var trimmedLine;
	    trimmedLine = Utils.trim(this.currentLine, ' ');
	    return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';
	  };

	  Parser.prototype.isCurrentLineBlank = function() {
	    return '' === Utils.trim(this.currentLine, ' ');
	  };

	  Parser.prototype.isCurrentLineComment = function() {
	    var ltrimmedLine;
	    ltrimmedLine = Utils.ltrim(this.currentLine, ' ');
	    return ltrimmedLine.charAt(0) === '#';
	  };

	  Parser.prototype.cleanup = function(value) {
	    var count, i, indent, j, l, len, len1, line, lines, ref, ref1, ref2, smallestIndent, trimmedValue;
	    if (value.indexOf("\r") !== -1) {
	      value = value.split("\r\n").join("\n").split("\r").join("\n");
	    }
	    count = 0;
	    ref = this.PATTERN_YAML_HEADER.replaceAll(value, ''), value = ref[0], count = ref[1];
	    this.offset += count;
	    ref1 = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1), trimmedValue = ref1[0], count = ref1[1];
	    if (count === 1) {
	      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
	      value = trimmedValue;
	    }
	    ref2 = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1), trimmedValue = ref2[0], count = ref2[1];
	    if (count === 1) {
	      this.offset += Utils.subStrCount(value, "\n") - Utils.subStrCount(trimmedValue, "\n");
	      value = trimmedValue;
	      value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');
	    }
	    lines = value.split("\n");
	    smallestIndent = -1;
	    for (j = 0, len = lines.length; j < len; j++) {
	      line = lines[j];
	      indent = line.length - Utils.ltrim(line).length;
	      if (smallestIndent === -1 || indent < smallestIndent) {
	        smallestIndent = indent;
	      }
	    }
	    if (smallestIndent > 0) {
	      for (i = l = 0, len1 = lines.length; l < len1; i = ++l) {
	        line = lines[i];
	        lines[i] = line.slice(smallestIndent);
	      }
	      value = lines.join("\n");
	    }
	    return value;
	  };

	  Parser.prototype.isNextLineUnIndentedCollection = function(currentIndentation) {
	    var notEOF, ret;
	    if (currentIndentation == null) {
	      currentIndentation = null;
	    }
	    if (currentIndentation == null) {
	      currentIndentation = this.getCurrentLineIndentation();
	    }
	    notEOF = this.moveToNextLine();
	    while (notEOF && this.isCurrentLineEmpty()) {
	      notEOF = this.moveToNextLine();
	    }
	    if (false === notEOF) {
	      return false;
	    }
	    ret = false;
	    if (this.getCurrentLineIndentation() === currentIndentation && this.isStringUnIndentedCollectionItem(this.currentLine)) {
	      ret = true;
	    }
	    this.moveToPreviousLine();
	    return ret;
	  };

	  Parser.prototype.isStringUnIndentedCollectionItem = function() {
	    return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';
	  };

	  return Parser;

	})();

	module.exports = Parser;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var DumpException, Escaper, Inline, ParseException, Pattern, Unescaper, Utils,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Pattern = __webpack_require__(347);

	Unescaper = __webpack_require__(348);

	Escaper = __webpack_require__(351);

	Utils = __webpack_require__(349);

	ParseException = __webpack_require__(352);

	DumpException = __webpack_require__(353);

	Inline = (function() {
	  function Inline() {}

	  Inline.REGEX_QUOTED_STRING = '(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\']*(?:\'\'[^\']*)*)\')';

	  Inline.PATTERN_TRAILING_COMMENTS = new Pattern('^\\s*#.*$');

	  Inline.PATTERN_QUOTED_SCALAR = new Pattern('^' + Inline.REGEX_QUOTED_STRING);

	  Inline.PATTERN_THOUSAND_NUMERIC_SCALAR = new Pattern('^(-|\\+)?[0-9,]+(\\.[0-9]+)?$');

	  Inline.PATTERN_SCALAR_BY_DELIMITERS = {};

	  Inline.settings = {};

	  Inline.configure = function(exceptionOnInvalidType, objectDecoder) {
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = null;
	    }
	    if (objectDecoder == null) {
	      objectDecoder = null;
	    }
	    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
	    this.settings.objectDecoder = objectDecoder;
	  };

	  Inline.parse = function(value, exceptionOnInvalidType, objectDecoder) {
	    var context, result;
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectDecoder == null) {
	      objectDecoder = null;
	    }
	    this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
	    this.settings.objectDecoder = objectDecoder;
	    if (value == null) {
	      return '';
	    }
	    value = Utils.trim(value);
	    if (0 === value.length) {
	      return '';
	    }
	    context = {
	      exceptionOnInvalidType: exceptionOnInvalidType,
	      objectDecoder: objectDecoder,
	      i: 0
	    };
	    switch (value.charAt(0)) {
	      case '[':
	        result = this.parseSequence(value, context);
	        ++context.i;
	        break;
	      case '{':
	        result = this.parseMapping(value, context);
	        ++context.i;
	        break;
	      default:
	        result = this.parseScalar(value, null, ['"', "'"], context);
	    }
	    if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {
	      throw new ParseException('Unexpected characters near "' + value.slice(context.i) + '".');
	    }
	    return result;
	  };

	  Inline.dump = function(value, exceptionOnInvalidType, objectEncoder) {
	    var ref, result, type;
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectEncoder == null) {
	      objectEncoder = null;
	    }
	    if (value == null) {
	      return 'null';
	    }
	    type = typeof value;
	    if (type === 'object') {
	      if (value instanceof Date) {
	        return value.toISOString();
	      } else if (objectEncoder != null) {
	        result = objectEncoder(value);
	        if (typeof result === 'string' || (result != null)) {
	          return result;
	        }
	      }
	      return this.dumpObject(value);
	    }
	    if (type === 'boolean') {
	      return (value ? 'true' : 'false');
	    }
	    if (Utils.isDigits(value)) {
	      return (type === 'string' ? "'" + value + "'" : String(parseInt(value)));
	    }
	    if (Utils.isNumeric(value)) {
	      return (type === 'string' ? "'" + value + "'" : String(parseFloat(value)));
	    }
	    if (type === 'number') {
	      return (value === Infinity ? '.Inf' : (value === -Infinity ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));
	    }
	    if (Escaper.requiresDoubleQuoting(value)) {
	      return Escaper.escapeWithDoubleQuotes(value);
	    }
	    if (Escaper.requiresSingleQuoting(value)) {
	      return Escaper.escapeWithSingleQuotes(value);
	    }
	    if ('' === value) {
	      return '""';
	    }
	    if (Utils.PATTERN_DATE.test(value)) {
	      return "'" + value + "'";
	    }
	    if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {
	      return "'" + value + "'";
	    }
	    return value;
	  };

	  Inline.dumpObject = function(value, exceptionOnInvalidType, objectSupport) {
	    var j, key, len1, output, val;
	    if (objectSupport == null) {
	      objectSupport = null;
	    }
	    if (value instanceof Array) {
	      output = [];
	      for (j = 0, len1 = value.length; j < len1; j++) {
	        val = value[j];
	        output.push(this.dump(val));
	      }
	      return '[' + output.join(', ') + ']';
	    } else {
	      output = [];
	      for (key in value) {
	        val = value[key];
	        output.push(this.dump(key) + ': ' + this.dump(val));
	      }
	      return '{' + output.join(', ') + '}';
	    }
	  };

	  Inline.parseScalar = function(scalar, delimiters, stringDelimiters, context, evaluate) {
	    var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;
	    if (delimiters == null) {
	      delimiters = null;
	    }
	    if (stringDelimiters == null) {
	      stringDelimiters = ['"', "'"];
	    }
	    if (context == null) {
	      context = null;
	    }
	    if (evaluate == null) {
	      evaluate = true;
	    }
	    if (context == null) {
	      context = {
	        exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
	        objectDecoder: this.settings.objectDecoder,
	        i: 0
	      };
	    }
	    i = context.i;
	    if (ref = scalar.charAt(i), indexOf.call(stringDelimiters, ref) >= 0) {
	      output = this.parseQuotedScalar(scalar, context);
	      i = context.i;
	      if (delimiters != null) {
	        tmp = Utils.ltrim(scalar.slice(i), ' ');
	        if (!(ref1 = tmp.charAt(0), indexOf.call(delimiters, ref1) >= 0)) {
	          throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');
	        }
	      }
	    } else {
	      if (!delimiters) {
	        output = scalar.slice(i);
	        i += output.length;
	        strpos = output.indexOf(' #');
	        if (strpos !== -1) {
	          output = Utils.rtrim(output.slice(0, strpos));
	        }
	      } else {
	        joinedDelimiters = delimiters.join('|');
	        pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];
	        if (pattern == null) {
	          pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');
	          this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;
	        }
	        if (match = pattern.exec(scalar.slice(i))) {
	          output = match[1];
	          i += output.length;
	        } else {
	          throw new ParseException('Malformed inline YAML string (' + scalar + ').');
	        }
	      }
	      if (evaluate) {
	        output = this.evaluateScalar(output, context);
	      }
	    }
	    context.i = i;
	    return output;
	  };

	  Inline.parseQuotedScalar = function(scalar, context) {
	    var i, match, output;
	    i = context.i;
	    if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {
	      throw new ParseException('Malformed inline YAML string (' + scalar.slice(i) + ').');
	    }
	    output = match[0].substr(1, match[0].length - 2);
	    if ('"' === scalar.charAt(i)) {
	      output = Unescaper.unescapeDoubleQuotedString(output);
	    } else {
	      output = Unescaper.unescapeSingleQuotedString(output);
	    }
	    i += match[0].length;
	    context.i = i;
	    return output;
	  };

	  Inline.parseSequence = function(sequence, context) {
	    var e, error, i, isQuoted, len, output, ref, value;
	    output = [];
	    len = sequence.length;
	    i = context.i;
	    i += 1;
	    while (i < len) {
	      context.i = i;
	      switch (sequence.charAt(i)) {
	        case '[':
	          output.push(this.parseSequence(sequence, context));
	          i = context.i;
	          break;
	        case '{':
	          output.push(this.parseMapping(sequence, context));
	          i = context.i;
	          break;
	        case ']':
	          return output;
	        case ',':
	        case ' ':
	        case "\n":
	          break;
	        default:
	          isQuoted = ((ref = sequence.charAt(i)) === '"' || ref === "'");
	          value = this.parseScalar(sequence, [',', ']'], ['"', "'"], context);
	          i = context.i;
	          if (!isQuoted && typeof value === 'string' && (value.indexOf(': ') !== -1 || value.indexOf(":\n") !== -1)) {
	            try {
	              value = this.parseMapping('{' + value + '}');
	            } catch (error) {
	              e = error;
	            }
	          }
	          output.push(value);
	          --i;
	      }
	      ++i;
	    }
	    throw new ParseException('Malformed inline YAML string ' + sequence);
	  };

	  Inline.parseMapping = function(mapping, context) {
	    var done, i, key, len, output, shouldContinueWhileLoop, value;
	    output = {};
	    len = mapping.length;
	    i = context.i;
	    i += 1;
	    shouldContinueWhileLoop = false;
	    while (i < len) {
	      context.i = i;
	      switch (mapping.charAt(i)) {
	        case ' ':
	        case ',':
	        case "\n":
	          ++i;
	          context.i = i;
	          shouldContinueWhileLoop = true;
	          break;
	        case '}':
	          return output;
	      }
	      if (shouldContinueWhileLoop) {
	        shouldContinueWhileLoop = false;
	        continue;
	      }
	      key = this.parseScalar(mapping, [':', ' ', "\n"], ['"', "'"], context, false);
	      i = context.i;
	      done = false;
	      while (i < len) {
	        context.i = i;
	        switch (mapping.charAt(i)) {
	          case '[':
	            value = this.parseSequence(mapping, context);
	            i = context.i;
	            if (output[key] === void 0) {
	              output[key] = value;
	            }
	            done = true;
	            break;
	          case '{':
	            value = this.parseMapping(mapping, context);
	            i = context.i;
	            if (output[key] === void 0) {
	              output[key] = value;
	            }
	            done = true;
	            break;
	          case ':':
	          case ' ':
	          case "\n":
	            break;
	          default:
	            value = this.parseScalar(mapping, [',', '}'], ['"', "'"], context);
	            i = context.i;
	            if (output[key] === void 0) {
	              output[key] = value;
	            }
	            done = true;
	            --i;
	        }
	        ++i;
	        if (done) {
	          break;
	        }
	      }
	    }
	    throw new ParseException('Malformed inline YAML string ' + mapping);
	  };

	  Inline.evaluateScalar = function(scalar, context) {
	    var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;
	    scalar = Utils.trim(scalar);
	    scalarLower = scalar.toLowerCase();
	    switch (scalarLower) {
	      case 'null':
	      case '':
	      case '~':
	        return null;
	      case 'true':
	        return true;
	      case 'false':
	        return false;
	      case '.inf':
	        return Infinity;
	      case '.nan':
	        return NaN;
	      case '-.inf':
	        return Infinity;
	      default:
	        firstChar = scalarLower.charAt(0);
	        switch (firstChar) {
	          case '!':
	            firstSpace = scalar.indexOf(' ');
	            if (firstSpace === -1) {
	              firstWord = scalarLower;
	            } else {
	              firstWord = scalarLower.slice(0, firstSpace);
	            }
	            switch (firstWord) {
	              case '!':
	                if (firstSpace !== -1) {
	                  return parseInt(this.parseScalar(scalar.slice(2)));
	                }
	                return null;
	              case '!str':
	                return Utils.ltrim(scalar.slice(4));
	              case '!!str':
	                return Utils.ltrim(scalar.slice(5));
	              case '!!int':
	                return parseInt(this.parseScalar(scalar.slice(5)));
	              case '!!bool':
	                return Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);
	              case '!!float':
	                return parseFloat(this.parseScalar(scalar.slice(7)));
	              case '!!timestamp':
	                return Utils.stringToDate(Utils.ltrim(scalar.slice(11)));
	              default:
	                if (context == null) {
	                  context = {
	                    exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
	                    objectDecoder: this.settings.objectDecoder,
	                    i: 0
	                  };
	                }
	                objectDecoder = context.objectDecoder, exceptionOnInvalidType = context.exceptionOnInvalidType;
	                if (objectDecoder) {
	                  trimmedScalar = Utils.rtrim(scalar);
	                  firstSpace = trimmedScalar.indexOf(' ');
	                  if (firstSpace === -1) {
	                    return objectDecoder(trimmedScalar, null);
	                  } else {
	                    subValue = Utils.ltrim(trimmedScalar.slice(firstSpace + 1));
	                    if (!(subValue.length > 0)) {
	                      subValue = null;
	                    }
	                    return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);
	                  }
	                }
	                if (exceptionOnInvalidType) {
	                  throw new ParseException('Custom object support when parsing a YAML file has been disabled.');
	                }
	                return null;
	            }
	            break;
	          case '0':
	            if ('0x' === scalar.slice(0, 2)) {
	              return Utils.hexDec(scalar);
	            } else if (Utils.isDigits(scalar)) {
	              return Utils.octDec(scalar);
	            } else if (Utils.isNumeric(scalar)) {
	              return parseFloat(scalar);
	            } else {
	              return scalar;
	            }
	            break;
	          case '+':
	            if (Utils.isDigits(scalar)) {
	              raw = scalar;
	              cast = parseInt(raw);
	              if (raw === String(cast)) {
	                return cast;
	              } else {
	                return raw;
	              }
	            } else if (Utils.isNumeric(scalar)) {
	              return parseFloat(scalar);
	            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
	              return parseFloat(scalar.replace(',', ''));
	            }
	            return scalar;
	          case '-':
	            if (Utils.isDigits(scalar.slice(1))) {
	              if ('0' === scalar.charAt(1)) {
	                return -Utils.octDec(scalar.slice(1));
	              } else {
	                raw = scalar.slice(1);
	                cast = parseInt(raw);
	                if (raw === String(cast)) {
	                  return -cast;
	                } else {
	                  return -raw;
	                }
	              }
	            } else if (Utils.isNumeric(scalar)) {
	              return parseFloat(scalar);
	            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
	              return parseFloat(scalar.replace(',', ''));
	            }
	            return scalar;
	          default:
	            if (date = Utils.stringToDate(scalar)) {
	              return date;
	            } else if (Utils.isNumeric(scalar)) {
	              return parseFloat(scalar);
	            } else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
	              return parseFloat(scalar.replace(',', ''));
	            }
	            return scalar;
	        }
	    }
	  };

	  return Inline;

	})();

	module.exports = Inline;


/***/ },
/* 347 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	var Pattern;

	Pattern = (function() {
	  Pattern.prototype.regex = null;

	  Pattern.prototype.rawRegex = null;

	  Pattern.prototype.cleanedRegex = null;

	  Pattern.prototype.mapping = null;

	  function Pattern(rawRegex, modifiers) {
	    var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;
	    if (modifiers == null) {
	      modifiers = '';
	    }
	    cleanedRegex = '';
	    len = rawRegex.length;
	    mapping = null;
	    capturingBracketNumber = 0;
	    i = 0;
	    while (i < len) {
	      _char = rawRegex.charAt(i);
	      if (_char === '\\') {
	        cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);
	        i++;
	      } else if (_char === '(') {
	        if (i < len - 2) {
	          part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);
	          if (part === '(?:') {
	            i += 2;
	            cleanedRegex += part;
	          } else if (part === '(?<') {
	            capturingBracketNumber++;
	            i += 2;
	            name = '';
	            while (i + 1 < len) {
	              subChar = rawRegex.charAt(i + 1);
	              if (subChar === '>') {
	                cleanedRegex += '(';
	                i++;
	                if (name.length > 0) {
	                  if (mapping == null) {
	                    mapping = {};
	                  }
	                  mapping[name] = capturingBracketNumber;
	                }
	                break;
	              } else {
	                name += subChar;
	              }
	              i++;
	            }
	          } else {
	            cleanedRegex += _char;
	            capturingBracketNumber++;
	          }
	        } else {
	          cleanedRegex += _char;
	        }
	      } else {
	        cleanedRegex += _char;
	      }
	      i++;
	    }
	    this.rawRegex = rawRegex;
	    this.cleanedRegex = cleanedRegex;
	    this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));
	    this.mapping = mapping;
	  }

	  Pattern.prototype.exec = function(str) {
	    var index, matches, name, ref;
	    this.regex.lastIndex = 0;
	    matches = this.regex.exec(str);
	    if (matches == null) {
	      return null;
	    }
	    if (this.mapping != null) {
	      ref = this.mapping;
	      for (name in ref) {
	        index = ref[name];
	        matches[name] = matches[index];
	      }
	    }
	    return matches;
	  };

	  Pattern.prototype.test = function(str) {
	    this.regex.lastIndex = 0;
	    return this.regex.test(str);
	  };

	  Pattern.prototype.replace = function(str, replacement) {
	    this.regex.lastIndex = 0;
	    return str.replace(this.regex, replacement);
	  };

	  Pattern.prototype.replaceAll = function(str, replacement, limit) {
	    var count;
	    if (limit == null) {
	      limit = 0;
	    }
	    this.regex.lastIndex = 0;
	    count = 0;
	    while (this.regex.test(str) && (limit === 0 || count < limit)) {
	      this.regex.lastIndex = 0;
	      str = str.replace(this.regex, '');
	      count++;
	    }
	    return [str, count];
	  };

	  return Pattern;

	})();

	module.exports = Pattern;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Pattern, Unescaper, Utils;

	Utils = __webpack_require__(349);

	Pattern = __webpack_require__(347);

	Unescaper = (function() {
	  function Unescaper() {}

	  Unescaper.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');

	  Unescaper.unescapeSingleQuotedString = function(value) {
	    return value.replace(/\'\'/g, '\'');
	  };

	  Unescaper.unescapeDoubleQuotedString = function(value) {
	    if (this._unescapeCallback == null) {
	      this._unescapeCallback = (function(_this) {
	        return function(str) {
	          return _this.unescapeCharacter(str);
	        };
	      })(this);
	    }
	    return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);
	  };

	  Unescaper.unescapeCharacter = function(value) {
	    var ch;
	    ch = String.fromCharCode;
	    switch (value.charAt(1)) {
	      case '0':
	        return ch(0);
	      case 'a':
	        return ch(7);
	      case 'b':
	        return ch(8);
	      case 't':
	        return "\t";
	      case "\t":
	        return "\t";
	      case 'n':
	        return "\n";
	      case 'v':
	        return ch(11);
	      case 'f':
	        return ch(12);
	      case 'r':
	        return ch(13);
	      case 'e':
	        return ch(27);
	      case ' ':
	        return ' ';
	      case '"':
	        return '"';
	      case '/':
	        return '/';
	      case '\\':
	        return '\\';
	      case 'N':
	        return ch(0x0085);
	      case '_':
	        return ch(0x00A0);
	      case 'L':
	        return ch(0x2028);
	      case 'P':
	        return ch(0x2029);
	      case 'x':
	        return Utils.utf8chr(Utils.hexDec(value.substr(2, 2)));
	      case 'u':
	        return Utils.utf8chr(Utils.hexDec(value.substr(2, 4)));
	      case 'U':
	        return Utils.utf8chr(Utils.hexDec(value.substr(2, 8)));
	      default:
	        return '';
	    }
	  };

	  return Unescaper;

	})();

	module.exports = Unescaper;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var require;// Generated by CoffeeScript 1.10.0
	var Pattern, Utils;

	Pattern = __webpack_require__(347);

	Utils = (function() {
	  function Utils() {}

	  Utils.REGEX_LEFT_TRIM_BY_CHAR = {};

	  Utils.REGEX_RIGHT_TRIM_BY_CHAR = {};

	  Utils.REGEX_SPACES = /\s+/g;

	  Utils.REGEX_DIGITS = /^\d+$/;

	  Utils.REGEX_OCTAL = /[^0-7]/gi;

	  Utils.REGEX_HEXADECIMAL = /[^a-f0-9]/gi;

	  Utils.PATTERN_DATE = new Pattern('^' + '(?<year>[0-9][0-9][0-9][0-9])' + '-(?<month>[0-9][0-9]?)' + '-(?<day>[0-9][0-9]?)' + '(?:(?:[Tt]|[ \t]+)' + '(?<hour>[0-9][0-9]?)' + ':(?<minute>[0-9][0-9])' + ':(?<second>[0-9][0-9])' + '(?:\.(?<fraction>[0-9]*))?' + '(?:[ \t]*(?<tz>Z|(?<tz_sign>[-+])(?<tz_hour>[0-9][0-9]?)' + '(?::(?<tz_minute>[0-9][0-9]))?))?)?' + '$', 'i');

	  Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;

	  Utils.trim = function(str, _char) {
	    var regexLeft, regexRight;
	    if (_char == null) {
	      _char = '\\s';
	    }
	    return str.trim();
	    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
	    if (regexLeft == null) {
	      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
	    }
	    regexLeft.lastIndex = 0;
	    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
	    if (regexRight == null) {
	      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
	    }
	    regexRight.lastIndex = 0;
	    return str.replace(regexLeft, '').replace(regexRight, '');
	  };

	  Utils.ltrim = function(str, _char) {
	    var regexLeft;
	    if (_char == null) {
	      _char = '\\s';
	    }
	    regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
	    if (regexLeft == null) {
	      this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
	    }
	    regexLeft.lastIndex = 0;
	    return str.replace(regexLeft, '');
	  };

	  Utils.rtrim = function(str, _char) {
	    var regexRight;
	    if (_char == null) {
	      _char = '\\s';
	    }
	    regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
	    if (regexRight == null) {
	      this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
	    }
	    regexRight.lastIndex = 0;
	    return str.replace(regexRight, '');
	  };

	  Utils.isEmpty = function(value) {
	    return !value || value === '' || value === '0' || (value instanceof Array && value.length === 0);
	  };

	  Utils.subStrCount = function(string, subString, start, length) {
	    var c, i, j, len, ref, sublen;
	    c = 0;
	    string = '' + string;
	    subString = '' + subString;
	    if (start != null) {
	      string = string.slice(start);
	    }
	    if (length != null) {
	      string = string.slice(0, length);
	    }
	    len = string.length;
	    sublen = subString.length;
	    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (subString === string.slice(i, sublen)) {
	        c++;
	        i += sublen - 1;
	      }
	    }
	    return c;
	  };

	  Utils.isDigits = function(input) {
	    this.REGEX_DIGITS.lastIndex = 0;
	    return this.REGEX_DIGITS.test(input);
	  };

	  Utils.octDec = function(input) {
	    this.REGEX_OCTAL.lastIndex = 0;
	    return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);
	  };

	  Utils.hexDec = function(input) {
	    this.REGEX_HEXADECIMAL.lastIndex = 0;
	    input = this.trim(input);
	    if ((input + '').slice(0, 2) === '0x') {
	      input = (input + '').slice(2);
	    }
	    return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);
	  };

	  Utils.utf8chr = function(c) {
	    var ch;
	    ch = String.fromCharCode;
	    if (0x80 > (c %= 0x200000)) {
	      return ch(c);
	    }
	    if (0x800 > c) {
	      return ch(0xC0 | c >> 6) + ch(0x80 | c & 0x3F);
	    }
	    if (0x10000 > c) {
	      return ch(0xE0 | c >> 12) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
	    }
	    return ch(0xF0 | c >> 18) + ch(0x80 | c >> 12 & 0x3F) + ch(0x80 | c >> 6 & 0x3F) + ch(0x80 | c & 0x3F);
	  };

	  Utils.parseBoolean = function(input, strict) {
	    var lowerInput;
	    if (strict == null) {
	      strict = true;
	    }
	    if (typeof input === 'string') {
	      lowerInput = input.toLowerCase();
	      if (!strict) {
	        if (lowerInput === 'no') {
	          return false;
	        }
	      }
	      if (lowerInput === '0') {
	        return false;
	      }
	      if (lowerInput === 'false') {
	        return false;
	      }
	      if (lowerInput === '') {
	        return false;
	      }
	      return true;
	    }
	    return !!input;
	  };

	  Utils.isNumeric = function(input) {
	    this.REGEX_SPACES.lastIndex = 0;
	    return typeof input === 'number' || typeof input === 'string' && !isNaN(input) && input.replace(this.REGEX_SPACES, '') !== '';
	  };

	  Utils.stringToDate = function(str) {
	    var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;
	    if (!(str != null ? str.length : void 0)) {
	      return null;
	    }
	    info = this.PATTERN_DATE.exec(str);
	    if (!info) {
	      return null;
	    }
	    year = parseInt(info.year, 10);
	    month = parseInt(info.month, 10) - 1;
	    day = parseInt(info.day, 10);
	    if (info.hour == null) {
	      date = new Date(Date.UTC(year, month, day));
	      return date;
	    }
	    hour = parseInt(info.hour, 10);
	    minute = parseInt(info.minute, 10);
	    second = parseInt(info.second, 10);
	    if (info.fraction != null) {
	      fraction = info.fraction.slice(0, 3);
	      while (fraction.length < 3) {
	        fraction += '0';
	      }
	      fraction = parseInt(fraction, 10);
	    } else {
	      fraction = 0;
	    }
	    if (info.tz != null) {
	      tz_hour = parseInt(info.tz_hour, 10);
	      if (info.tz_minute != null) {
	        tz_minute = parseInt(info.tz_minute, 10);
	      } else {
	        tz_minute = 0;
	      }
	      tz_offset = (tz_hour * 60 + tz_minute) * 60000;
	      if ('-' === info.tz_sign) {
	        tz_offset *= -1;
	      }
	    }
	    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
	    if (tz_offset) {
	      date.setTime(date.getTime() + tz_offset);
	    }
	    return date;
	  };

	  Utils.strRepeat = function(str, number) {
	    var i, res;
	    res = '';
	    i = 0;
	    while (i < number) {
	      res += str;
	      i++;
	    }
	    return res;
	  };

	  Utils.getStringFromFile = function(path, callback) {
	    var data, fs, j, len1, name, ref, req, xhr;
	    if (callback == null) {
	      callback = null;
	    }
	    xhr = null;
	    if (typeof window !== "undefined" && window !== null) {
	      if (window.XMLHttpRequest) {
	        xhr = new XMLHttpRequest();
	      } else if (window.ActiveXObject) {
	        ref = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
	        for (j = 0, len1 = ref.length; j < len1; j++) {
	          name = ref[j];
	          try {
	            xhr = new ActiveXObject(name);
	          } catch (undefined) {}
	        }
	      }
	    }
	    if (xhr != null) {
	      if (callback != null) {
	        xhr.onreadystatechange = function() {
	          if (xhr.readyState === 4) {
	            if (xhr.status === 200 || xhr.status === 0) {
	              return callback(xhr.responseText);
	            } else {
	              return callback(null);
	            }
	          }
	        };
	        xhr.open('GET', path, true);
	        return xhr.send(null);
	      } else {
	        xhr.open('GET', path, false);
	        xhr.send(null);
	        if (xhr.status === 200 || xhr.status === 0) {
	          return xhr.responseText;
	        }
	        return null;
	      }
	    } else {
	      req = require;
	      fs = __webpack_require__(350);
	      if (callback != null) {
	        return fs.readFile(path, function(err, data) {
	          if (err) {
	            return callback(null);
	          } else {
	            return callback(String(data));
	          }
	        });
	      } else {
	        data = fs.readFileSync(path);
	        if (data != null) {
	          return String(data);
	        }
	        return null;
	      }
	    }
	  };

	  return Utils;

	})();

	module.exports = Utils;


/***/ },
/* 350 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Escaper, Pattern;

	Pattern = __webpack_require__(347);

	Escaper = (function() {
	  var ch;

	  function Escaper() {}

	  Escaper.LIST_ESCAPEES = ['\\', '\\\\', '\\"', '"', "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];

	  Escaper.LIST_ESCAPED = ['\\\\', '\\"', '\\"', '\\"', "\\0", "\\x01", "\\x02", "\\x03", "\\x04", "\\x05", "\\x06", "\\a", "\\b", "\\t", "\\n", "\\v", "\\f", "\\r", "\\x0e", "\\x0f", "\\x10", "\\x11", "\\x12", "\\x13", "\\x14", "\\x15", "\\x16", "\\x17", "\\x18", "\\x19", "\\x1a", "\\e", "\\x1c", "\\x1d", "\\x1e", "\\x1f", "\\N", "\\_", "\\L", "\\P"];

	  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {
	    var i, j, mapping, ref;
	    mapping = {};
	    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];
	    }
	    return mapping;
	  })();

	  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\x00-\\x1f]|\xc2\x85|\xc2\xa0|\xe2\x80\xa8|\xe2\x80\xa9');

	  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\').join('\\\\'));

	  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\s\'":{}[\\],&*#?]|^[-?|<>=!%@`]');

	  Escaper.requiresDoubleQuoting = function(value) {
	    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);
	  };

	  Escaper.escapeWithDoubleQuotes = function(value) {
	    var result;
	    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {
	      return function(str) {
	        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];
	      };
	    })(this));
	    return '"' + result + '"';
	  };

	  Escaper.requiresSingleQuoting = function(value) {
	    return this.PATTERN_SINGLE_QUOTING.test(value);
	  };

	  Escaper.escapeWithSingleQuotes = function(value) {
	    return "'" + value.replace(/'/g, "''") + "'";
	  };

	  return Escaper;

	})();

	module.exports = Escaper;


/***/ },
/* 352 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	var ParseException,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ParseException = (function(superClass) {
	  extend(ParseException, superClass);

	  function ParseException(message, parsedLine, snippet) {
	    this.message = message;
	    this.parsedLine = parsedLine;
	    this.snippet = snippet;
	  }

	  ParseException.prototype.toString = function() {
	    if ((this.parsedLine != null) && (this.snippet != null)) {
	      return '<ParseException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
	    } else {
	      return '<ParseException> ' + this.message;
	    }
	  };

	  return ParseException;

	})(Error);

	module.exports = ParseException;


/***/ },
/* 353 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	var DumpException,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DumpException = (function(superClass) {
	  extend(DumpException, superClass);

	  function DumpException(message, parsedLine, snippet) {
	    this.message = message;
	    this.parsedLine = parsedLine;
	    this.snippet = snippet;
	  }

	  DumpException.prototype.toString = function() {
	    if ((this.parsedLine != null) && (this.snippet != null)) {
	      return '<DumpException> ' + this.message + ' (line ' + this.parsedLine + ': \'' + this.snippet + '\')';
	    } else {
	      return '<DumpException> ' + this.message;
	    }
	  };

	  return DumpException;

	})(Error);

	module.exports = DumpException;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Dumper, Inline, Utils;

	Utils = __webpack_require__(349);

	Inline = __webpack_require__(346);

	Dumper = (function() {
	  function Dumper() {}

	  Dumper.indentation = 4;

	  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {
	    var i, key, len, output, prefix, value, willBeInlined;
	    if (inline == null) {
	      inline = 0;
	    }
	    if (indent == null) {
	      indent = 0;
	    }
	    if (exceptionOnInvalidType == null) {
	      exceptionOnInvalidType = false;
	    }
	    if (objectEncoder == null) {
	      objectEncoder = null;
	    }
	    output = '';
	    prefix = (indent ? Utils.strRepeat(' ', indent) : '');
	    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {
	      output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder);
	    } else {
	      if (input instanceof Array) {
	        for (i = 0, len = input.length; i < len; i++) {
	          value = input[i];
	          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
	          output += prefix + '-' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
	        }
	      } else {
	        for (key in input) {
	          value = input[key];
	          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
	          output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder) + (willBeInlined ? "\n" : '');
	        }
	      }
	    }
	    return output;
	  };

	  return Dumper;

	})();

	module.exports = Dumper;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./Dumper": 354,
		"./Dumper.js": 354,
		"./Escaper": 351,
		"./Escaper.js": 351,
		"./Exception/DumpException": 353,
		"./Exception/DumpException.js": 353,
		"./Exception/ParseException": 352,
		"./Exception/ParseException.js": 352,
		"./Inline": 346,
		"./Inline.js": 346,
		"./Parser": 345,
		"./Parser.js": 345,
		"./Pattern": 347,
		"./Pattern.js": 347,
		"./Unescaper": 348,
		"./Unescaper.js": 348,
		"./Utils": 349,
		"./Utils.js": 349,
		"./Yaml": 344,
		"./Yaml.js": 344
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 355;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	__webpack_require__(357);

	var fs = __webpack_require__(350);
	var os = __webpack_require__(369);
	var pn = process.argv[1];
	watch(pn);

	function watch(fn) {
	  function restart() {
	    setTimeout(function () {
	      process.stderr.write("\n" + "Aborting process".red + " " + pn.yellow + ". Changed " + fn + "\n");
	      process.exit(1);
	    }, 300);
	  }
	  // let exceptionCatched = false
	  if (!os.platform().match(/^win/i)) // TODO: make it work on windows (it crashes on windows xp)
	    !function watch() {
	      try {
	        (function () {
	          var w = fs.watch(fn, restart);
	          w.on("error", function () {
	            return w.close();
	          });
	          process.stdin.on("end", function () {
	            return w.close();
	          });
	          // if ( exceptionCatched )
	          // 	restart()
	        })();
	      } catch (_) {
	        // exceptionCatched = true
	        setTimeout(watch, 10000);
	      }
	    }();
	  return module.exports;
	}

	module.exports = watch;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);
	module['exports'] = colors;

	// Remark: By default, colors will add style properties to String.prototype
	//
	// If you don't wish to extend String.prototype you can do this instead and native String will not be touched
	//
	//   var colors = require('colors/safe);
	//   colors.red("foo")
	//
	//
	__webpack_require__(364)();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*

	The MIT License (MIT)

	Original Library 
	  - Copyright (c) Marak Squires

	Additional functionality
	 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var colors = {};
	module['exports'] = colors;

	colors.themes = {};

	var ansiStyles = colors.styles = __webpack_require__(359);
	var defineProps = Object.defineProperties;

	colors.supportsColor = __webpack_require__(360);

	if (typeof colors.enabled === "undefined") {
	  colors.enabled = colors.supportsColor;
	}

	colors.stripColors = colors.strip = function(str){
	  return ("" + str).replace(/\x1B\[\d+m/g, '');
	};


	var stylize = colors.stylize = function stylize (str, style) {
	  if (!colors.enabled) {
	    return str+'';
	  }

	  return ansiStyles[style].open + str + ansiStyles[style].close;
	}

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
	var escapeStringRegexp = function (str) {
	  if (typeof str !== 'string') {
	    throw new TypeError('Expected a string');
	  }
	  return str.replace(matchOperatorsRe,  '\\$&');
	}

	function build(_styles) {
	  var builder = function builder() {
	    return applyStyle.apply(builder, arguments);
	  };
	  builder._styles = _styles;
	  // __proto__ is used because we must return a function, but there is
	  // no way to create a function with a different prototype.
	  builder.__proto__ = proto;
	  return builder;
	}

	var styles = (function () {
	  var ret = {};
	  ansiStyles.grey = ansiStyles.gray;
	  Object.keys(ansiStyles).forEach(function (key) {
	    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
	    ret[key] = {
	      get: function () {
	        return build(this._styles.concat(key));
	      }
	    };
	  });
	  return ret;
	})();

	var proto = defineProps(function colors() {}, styles);

	function applyStyle() {
	  var args = arguments;
	  var argsLen = args.length;
	  var str = argsLen !== 0 && String(arguments[0]);
	  if (argsLen > 1) {
	    for (var a = 1; a < argsLen; a++) {
	      str += ' ' + args[a];
	    }
	  }

	  if (!colors.enabled || !str) {
	    return str;
	  }

	  var nestedStyles = this._styles;

	  var i = nestedStyles.length;
	  while (i--) {
	    var code = ansiStyles[nestedStyles[i]];
	    str = code.open + str.replace(code.closeRe, code.open) + code.close;
	  }

	  return str;
	}

	function applyTheme (theme) {
	  for (var style in theme) {
	    (function(style){
	      colors[style] = function(str){
	        if (typeof theme[style] === 'object'){
	          var out = str;
	          for (var i in theme[style]){
	            out = colors[theme[style][i]](out);
	          }
	          return out;
	        }
	        return colors[theme[style]](str);
	      };
	    })(style)
	  }
	}

	colors.setTheme = function (theme) {
	  if (typeof theme === 'string') {
	    try {
	      colors.themes[theme] = __webpack_require__(361)(theme);
	      applyTheme(colors.themes[theme]);
	      return colors.themes[theme];
	    } catch (err) {
	      console.log(err);
	      return err;
	    }
	  } else {
	    applyTheme(theme);
	  }
	};

	function init() {
	  var ret = {};
	  Object.keys(styles).forEach(function (name) {
	    ret[name] = {
	      get: function () {
	        return build([name]);
	      }
	    };
	  });
	  return ret;
	}

	var sequencer = function sequencer (map, str) {
	  var exploded = str.split(""), i = 0;
	  exploded = exploded.map(map);
	  return exploded.join("");
	};

	// custom formatter methods
	colors.trap = __webpack_require__(362);
	colors.zalgo = __webpack_require__(363);

	// maps
	colors.maps = {};
	colors.maps.america = __webpack_require__(365);
	colors.maps.zebra = __webpack_require__(368);
	colors.maps.rainbow = __webpack_require__(366);
	colors.maps.random = __webpack_require__(367)

	for (var map in colors.maps) {
	  (function(map){
	    colors[map] = function (str) {
	      return sequencer(colors.maps[map], str);
	    }
	  })(map)
	}

	defineProps(colors, init());
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var styles = {};
	module['exports'] = styles;

	var codes = {
	  reset: [0, 0],

	  bold: [1, 22],
	  dim: [2, 22],
	  italic: [3, 23],
	  underline: [4, 24],
	  inverse: [7, 27],
	  hidden: [8, 28],
	  strikethrough: [9, 29],

	  black: [30, 39],
	  red: [31, 39],
	  green: [32, 39],
	  yellow: [33, 39],
	  blue: [34, 39],
	  magenta: [35, 39],
	  cyan: [36, 39],
	  white: [37, 39],
	  gray: [90, 39],
	  grey: [90, 39],

	  bgBlack: [40, 49],
	  bgRed: [41, 49],
	  bgGreen: [42, 49],
	  bgYellow: [43, 49],
	  bgBlue: [44, 49],
	  bgMagenta: [45, 49],
	  bgCyan: [46, 49],
	  bgWhite: [47, 49],

	  // legacy styles for colors pre v1.0.0
	  blackBG: [40, 49],
	  redBG: [41, 49],
	  greenBG: [42, 49],
	  yellowBG: [43, 49],
	  blueBG: [44, 49],
	  magentaBG: [45, 49],
	  cyanBG: [46, 49],
	  whiteBG: [47, 49]

	};

	Object.keys(codes).forEach(function (key) {
	  var val = codes[key];
	  var style = styles[key] = [];
	  style.open = '\u001b[' + val[0] + 'm';
	  style.close = '\u001b[' + val[1] + 'm';
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 360 */
/***/ function(module, exports) {

	/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var argv = process.argv;

	module.exports = (function () {
	  if (argv.indexOf('--no-color') !== -1 ||
	    argv.indexOf('--color=false') !== -1) {
	    return false;
	  }

	  if (argv.indexOf('--color') !== -1 ||
	    argv.indexOf('--color=true') !== -1 ||
	    argv.indexOf('--color=always') !== -1) {
	    return true;
	  }

	  if (process.stdout && !process.stdout.isTTY) {
	    return false;
	  }

	  if (process.platform === 'win32') {
	    return true;
	  }

	  if ('COLORTERM' in process.env) {
	    return true;
	  }

	  if (process.env.TERM === 'dumb') {
	    return false;
	  }

	  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
	    return true;
	  }

	  return false;
	})();

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./colors": 358,
		"./colors.js": 358,
		"./custom/trap": 362,
		"./custom/trap.js": 362,
		"./custom/zalgo": 363,
		"./custom/zalgo.js": 363,
		"./extendStringPrototype": 364,
		"./extendStringPrototype.js": 364,
		"./index": 357,
		"./index.js": 357,
		"./maps/america": 365,
		"./maps/america.js": 365,
		"./maps/rainbow": 366,
		"./maps/rainbow.js": 366,
		"./maps/random": 367,
		"./maps/random.js": 367,
		"./maps/zebra": 368,
		"./maps/zebra.js": 368,
		"./styles": 359,
		"./styles.js": 359,
		"./system/supports-colors": 360,
		"./system/supports-colors.js": 360
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 361;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module['exports'] = function runTheTrap (text, options) {
	  var result = "";
	  text = text || "Run the trap, drop the bass";
	  text = text.split('');
	  var trap = {
	    a: ["\u0040", "\u0104", "\u023a", "\u0245", "\u0394", "\u039b", "\u0414"],
	    b: ["\u00df", "\u0181", "\u0243", "\u026e", "\u03b2", "\u0e3f"],
	    c: ["\u00a9", "\u023b", "\u03fe"],
	    d: ["\u00d0", "\u018a", "\u0500" , "\u0501" ,"\u0502", "\u0503"],
	    e: ["\u00cb", "\u0115", "\u018e", "\u0258", "\u03a3", "\u03be", "\u04bc", "\u0a6c"],
	    f: ["\u04fa"],
	    g: ["\u0262"],
	    h: ["\u0126", "\u0195", "\u04a2", "\u04ba", "\u04c7", "\u050a"],
	    i: ["\u0f0f"],
	    j: ["\u0134"],
	    k: ["\u0138", "\u04a0", "\u04c3", "\u051e"],
	    l: ["\u0139"],
	    m: ["\u028d", "\u04cd", "\u04ce", "\u0520", "\u0521", "\u0d69"],
	    n: ["\u00d1", "\u014b", "\u019d", "\u0376", "\u03a0", "\u048a"],
	    o: ["\u00d8", "\u00f5", "\u00f8", "\u01fe", "\u0298", "\u047a", "\u05dd", "\u06dd", "\u0e4f"],
	    p: ["\u01f7", "\u048e"],
	    q: ["\u09cd"],
	    r: ["\u00ae", "\u01a6", "\u0210", "\u024c", "\u0280", "\u042f"],
	    s: ["\u00a7", "\u03de", "\u03df", "\u03e8"],
	    t: ["\u0141", "\u0166", "\u0373"],
	    u: ["\u01b1", "\u054d"],
	    v: ["\u05d8"],
	    w: ["\u0428", "\u0460", "\u047c", "\u0d70"],
	    x: ["\u04b2", "\u04fe", "\u04fc", "\u04fd"],
	    y: ["\u00a5", "\u04b0", "\u04cb"],
	    z: ["\u01b5", "\u0240"]
	  }
	  text.forEach(function(c){
	    c = c.toLowerCase();
	    var chars = trap[c] || [" "];
	    var rand = Math.floor(Math.random() * chars.length);
	    if (typeof trap[c] !== "undefined") {
	      result += trap[c][rand];
	    } else {
	      result += c;
	    }
	  });
	  return result;

	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// please no
	module['exports'] = function zalgo(text, options) {
	  text = text || "   he is here   ";
	  var soul = {
	    "up" : [
	      '̍', '̎', '̄', '̅',
	      '̿', '̑', '̆', '̐',
	      '͒', '͗', '͑', '̇',
	      '̈', '̊', '͂', '̓',
	      '̈', '͊', '͋', '͌',
	      '̃', '̂', '̌', '͐',
	      '̀', '́', '̋', '̏',
	      '̒', '̓', '̔', '̽',
	      '̉', 'ͣ', 'ͤ', 'ͥ',
	      'ͦ', 'ͧ', 'ͨ', 'ͩ',
	      'ͪ', 'ͫ', 'ͬ', 'ͭ',
	      'ͮ', 'ͯ', '̾', '͛',
	      '͆', '̚'
	    ],
	    "down" : [
	      '̖', '̗', '̘', '̙',
	      '̜', '̝', '̞', '̟',
	      '̠', '̤', '̥', '̦',
	      '̩', '̪', '̫', '̬',
	      '̭', '̮', '̯', '̰',
	      '̱', '̲', '̳', '̹',
	      '̺', '̻', '̼', 'ͅ',
	      '͇', '͈', '͉', '͍',
	      '͎', '͓', '͔', '͕',
	      '͖', '͙', '͚', '̣'
	    ],
	    "mid" : [
	      '̕', '̛', '̀', '́',
	      '͘', '̡', '̢', '̧',
	      '̨', '̴', '̵', '̶',
	      '͜', '͝', '͞',
	      '͟', '͠', '͢', '̸',
	      '̷', '͡', ' ҉'
	    ]
	  },
	  all = [].concat(soul.up, soul.down, soul.mid),
	  zalgo = {};

	  function randomNumber(range) {
	    var r = Math.floor(Math.random() * range);
	    return r;
	  }

	  function is_char(character) {
	    var bool = false;
	    all.filter(function (i) {
	      bool = (i === character);
	    });
	    return bool;
	  }
	  

	  function heComes(text, options) {
	    var result = '', counts, l;
	    options = options || {};
	    options["up"] =   typeof options["up"]   !== 'undefined' ? options["up"]   : true;
	    options["mid"] =  typeof options["mid"]  !== 'undefined' ? options["mid"]  : true;
	    options["down"] = typeof options["down"] !== 'undefined' ? options["down"] : true;
	    options["size"] = typeof options["size"] !== 'undefined' ? options["size"] : "maxi";
	    text = text.split('');
	    for (l in text) {
	      if (is_char(l)) {
	        continue;
	      }
	      result = result + text[l];
	      counts = {"up" : 0, "down" : 0, "mid" : 0};
	      switch (options.size) {
	      case 'mini':
	        counts.up = randomNumber(8);
	        counts.mid = randomNumber(2);
	        counts.down = randomNumber(8);
	        break;
	      case 'maxi':
	        counts.up = randomNumber(16) + 3;
	        counts.mid = randomNumber(4) + 1;
	        counts.down = randomNumber(64) + 3;
	        break;
	      default:
	        counts.up = randomNumber(8) + 1;
	        counts.mid = randomNumber(6) / 2;
	        counts.down = randomNumber(8) + 1;
	        break;
	      }

	      var arr = ["up", "mid", "down"];
	      for (var d in arr) {
	        var index = arr[d];
	        for (var i = 0 ; i <= counts[index]; i++) {
	          if (options[index]) {
	            result = result + soul[index][randomNumber(soul[index].length)];
	          }
	        }
	      }
	    }
	    return result;
	  }
	  // don't summon him
	  return heComes(text, options);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);

	module['exports'] = function () {

	  //
	  // Extends prototype of native string object to allow for "foo".red syntax
	  //
	  var addProperty = function (color, func) {
	    String.prototype.__defineGetter__(color, func);
	  };

	  var sequencer = function sequencer (map, str) {
	      return function () {
	        var exploded = this.split(""), i = 0;
	        exploded = exploded.map(map);
	        return exploded.join("");
	      }
	  };

	  addProperty('strip', function () {
	    return colors.strip(this);
	  });

	  addProperty('stripColors', function () {
	    return colors.strip(this);
	  });

	  addProperty("trap", function(){
	    return colors.trap(this);
	  });

	  addProperty("zalgo", function(){
	    return colors.zalgo(this);
	  });

	  addProperty("zebra", function(){
	    return colors.zebra(this);
	  });

	  addProperty("rainbow", function(){
	    return colors.rainbow(this);
	  });

	  addProperty("random", function(){
	    return colors.random(this);
	  });

	  addProperty("america", function(){
	    return colors.america(this);
	  });

	  //
	  // Iterate through all default styles and colors
	  //
	  var x = Object.keys(colors.styles);
	  x.forEach(function (style) {
	    addProperty(style, function () {
	      return colors.stylize(this, style);
	    });
	  });

	  function applyTheme(theme) {
	    //
	    // Remark: This is a list of methods that exist
	    // on String that you should not overwrite.
	    //
	    var stringPrototypeBlacklist = [
	      '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor',
	      'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt',
	      'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring',
	      'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'
	    ];

	    Object.keys(theme).forEach(function (prop) {
	      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
	        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\'t want to override. Ignoring style name');
	      }
	      else {
	        if (typeof(theme[prop]) === 'string') {
	          colors[prop] = colors[theme[prop]];
	          addProperty(prop, function () {
	            return colors[theme[prop]](this);
	          });
	        }
	        else {
	          addProperty(prop, function () {
	            var ret = this;
	            for (var t = 0; t < theme[prop].length; t++) {
	              ret = colors[theme[prop][t]](ret);
	            }
	            return ret;
	          });
	        }
	      }
	    });
	  }

	  colors.setTheme = function (theme) {
	    if (typeof theme === 'string') {
	      try {
	        colors.themes[theme] = __webpack_require__(361)(theme);
	        applyTheme(colors.themes[theme]);
	        return colors.themes[theme];
	      } catch (err) {
	        console.log(err);
	        return err;
	      }
	    } else {
	      applyTheme(theme);
	    }
	  };

	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);

	module['exports'] = (function() {
	  return function (letter, i, exploded) {
	    if(letter === " ") return letter;
	    switch(i%3) {
	      case 0: return colors.red(letter);
	      case 1: return colors.white(letter)
	      case 2: return colors.blue(letter)
	    }
	  }
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);

	module['exports'] = (function () {
	  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV
	  return function (letter, i, exploded) {
	    if (letter === " ") {
	      return letter;
	    } else {
	      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
	    }
	  };
	})();


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);

	module['exports'] = (function () {
	  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];
	  return function(letter, i, exploded) {
	    return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 1))]](letter);
	  };
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var colors = __webpack_require__(358);

	module['exports'] = function (letter, i, exploded) {
	  return i % 2 === 0 ? letter : colors.inverse(letter);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 369 */
/***/ function(module, exports) {

	module.exports = require("os");

/***/ },
/* 370 */,
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _this = this;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	__webpack_require__(357);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _os = __webpack_require__(369);

	var os = _interopRequireWildcard(_os);

	var _defun = __webpack_require__(333);

	var _defun2 = _interopRequireDefault(_defun);

	var _nativeDns = __webpack_require__(372);

	var dns = _interopRequireWildcard(_nativeDns);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var families = {
	  IPv4: "A",
	  IPv6: "AAAA"
	};

	var formatQuestion = function formatQuestion(question) {
	  var msg = question.length;
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = question[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var q = _step.value;

	      msg += " [ " + q.name + " " + (dns.consts.QTYPE_TO_NAME[q.type] || q.type) + " " + (dns.consts.QCLASS_TO_NAME[q.class] || q.class) + " ]";
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return msg;
	};

	var formatAddress = function formatAddress(a) {
	  var address = a.address;
	  if (address.match(/:/)) address = "[" + address + "]";
	  return address + ":" + a.port;
	};

	var onError = function onError(server, err, buff, req, res) {
	  return console.error(err.stack);
	};

	var onListening = function onListening(server) {
	  return console.log("listening".yellow, server.address());
	};

	var getInterfaces = function getInterfaces() {
	  var networkInterfaces = arguments.length <= 0 || arguments[0] === undefined ? os.networkInterfaces() : arguments[0];

	  var interfaces = Object.create(null);
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = lodash.toPairs(networkInterfaces)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var _step2$value = _slicedToArray(_step2.value, 2);

	      var name = _step2$value[0];
	      var intfs = _step2$value[1];
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = lodash.values(intfs)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var intf = _step3.value;

	          if (intf.internal) continue;
	          if (intf.scopeid) continue;
	          var f = families[intf.family];
	          if (!f) continue;
	          !(interfaces[f] || (interfaces[f] = [])).push(intf.address);
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	    }
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }

	  return interfaces;
	};

	var server = function server(config) {
	  var parse /*: ( name, from_address ) => null | true | { A: ..., AAAA: ... } */ = arguments.length <= 1 || arguments[1] === undefined ? function () {
	    return true;
	  } : arguments[1];


	  if (Number.isInteger(config)) config = { port: config };

	  config = Object.assign({
	    port: 53,
	    TTL: null
	  }, config);

	  var onRequest = (0, _defun2.default)(function _callee(defer, server, request, response) {
	    var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop, _iterator4, _step4, _ret;

	    return regeneratorRuntime.async(function _callee$(_context2) {
	      while (1) switch (_context2.prev = _context2.next) {
	        case 0:

	          defer(function () {
	            return response.send();
	          });

	          console.log(formatAddress(request.address).green, formatQuestion(request.question));

	          _iteratorNormalCompletion4 = true;
	          _didIteratorError4 = false;
	          _iteratorError4 = undefined;
	          _context2.prev = 5;

	          _loop = function _loop() {
	            var q, send, interfaces, type, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, _type, intf;

	            return regeneratorRuntime.async(function _loop$(_context) {
	              while (1) switch (_context.prev = _context.next) {
	                case 0:
	                  q = _step4.value;

	                  send = function send(intf, type) {
	                    var _iteratorNormalCompletion5 = true;
	                    var _didIteratorError5 = false;
	                    var _iteratorError5 = undefined;

	                    try {
	                      for (var _iterator5 = lodash.values(intf)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                        var address = _step5.value;

	                        var ret = dns[type]({
	                          name: q.name,
	                          address: address,
	                          ttl: config.TTL
	                        });
	                        response.answer.push(ret);
	                        console.log(lodash.values(ret).join("\t"));
	                      }
	                    } catch (err) {
	                      _didIteratorError5 = true;
	                      _iteratorError5 = err;
	                    } finally {
	                      try {
	                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                          _iterator5.return();
	                        }
	                      } finally {
	                        if (_didIteratorError5) {
	                          throw _iteratorError5;
	                        }
	                      }
	                    }
	                  };

	                  _context.next = 4;
	                  return regeneratorRuntime.awrap(parse(q.name, request.address));

	                case 4:
	                  interfaces = _context.sent;

	                  if (interfaces) {
	                    _context.next = 7;
	                    break;
	                  }

	                  return _context.abrupt("return", "continue");

	                case 7:
	                  if (typeof interfaces != "object") interfaces = getInterfaces();

	                  type = dns.consts.QTYPE_TO_NAME[q.type] || q.type;

	                  if (!(type == "ANY")) {
	                    _context.next = 31;
	                    break;
	                  }

	                  _iteratorNormalCompletion6 = true;
	                  _didIteratorError6 = false;
	                  _iteratorError6 = undefined;
	                  _context.prev = 13;

	                  for (_iterator6 = lodash.toPairs(interfaces)[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    _step6$value = _slicedToArray(_step6.value, 2);
	                    _type = _step6$value[0];
	                    intf = _step6$value[1];

	                    send(intf, _type);
	                  }_context.next = 21;
	                  break;

	                case 17:
	                  _context.prev = 17;
	                  _context.t0 = _context["catch"](13);
	                  _didIteratorError6 = true;
	                  _iteratorError6 = _context.t0;

	                case 21:
	                  _context.prev = 21;
	                  _context.prev = 22;

	                  if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                    _iterator6.return();
	                  }

	                case 24:
	                  _context.prev = 24;

	                  if (!_didIteratorError6) {
	                    _context.next = 27;
	                    break;
	                  }

	                  throw _iteratorError6;

	                case 27:
	                  return _context.finish(24);

	                case 28:
	                  return _context.finish(21);

	                case 29:
	                  _context.next = 32;
	                  break;

	                case 31:
	                  send(interfaces[type], type);

	                case 32:
	                case "end":
	                  return _context.stop();
	              }
	            }, null, _this, [[13, 17, 21, 29], [22,, 24, 28]]);
	          };

	          _iterator4 = request.question[Symbol.iterator]();

	        case 8:
	          if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
	            _context2.next = 17;
	            break;
	          }

	          _context2.next = 11;
	          return regeneratorRuntime.awrap(_loop());

	        case 11:
	          _ret = _context2.sent;

	          if (!(_ret === "continue")) {
	            _context2.next = 14;
	            break;
	          }

	          return _context2.abrupt("continue", 14);

	        case 14:
	          _iteratorNormalCompletion4 = true;
	          _context2.next = 8;
	          break;

	        case 17:
	          _context2.next = 23;
	          break;

	        case 19:
	          _context2.prev = 19;
	          _context2.t0 = _context2["catch"](5);
	          _didIteratorError4 = true;
	          _iteratorError4 = _context2.t0;

	        case 23:
	          _context2.prev = 23;
	          _context2.prev = 24;

	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }

	        case 26:
	          _context2.prev = 26;

	          if (!_didIteratorError4) {
	            _context2.next = 29;
	            break;
	          }

	          throw _iteratorError4;

	        case 29:
	          return _context2.finish(26);

	        case 30:
	          return _context2.finish(23);

	        case 31:
	        case "end":
	          return _context2.stop();
	      }
	    }, null, _this, [[5, 19, 23, 31], [24,, 26, 30]]);
	  });

	  var createServer = function createServer(dgram_type) {
	    var server = dns.createServer({ dgram_type: dgram_type });
	    server.on("request", onRequest.bind(null, server));
	    server.on("error", onError.bind(null, server));
	    server.on("listening", onListening.bind(null, server));
	    server.serve(config.port);
	    return server;
	  };

	  createServer("udp4");
	  createServer("udp6");
	};

	server.families = families;
	server.getInterfaces = getInterfaces;

	exports.default = server;
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	"use strict";

	exports.platform = __webpack_require__(373);

	exports.createServer = __webpack_require__(392).createServer;
	exports.createUDPServer = __webpack_require__(392).createUDPServer;
	exports.createTCPServer = __webpack_require__(392).createTCPServer;

	var client = __webpack_require__(394);
	exports.lookup = client.lookup;
	exports.resolve = client.resolve;
	exports.resolve4 = client.resolve4;
	exports.resolve6 = client.resolve6;
	exports.resolveMx = client.resolveMx;
	exports.resolveTxt = client.resolveTxt;
	exports.resolveSrv = client.resolveSrv;
	exports.resolveNs = client.resolveNs;
	exports.resolveCname = client.resolveCname;
	exports.reverse = client.reverse;

	var consts = __webpack_require__(380).consts;
	exports.BADNAME = consts.BADNAME;
	exports.BADRESP = consts.BADRESP;
	exports.CONNREFUSED = consts.CONNREFUSED;
	exports.DESTRUCTION = consts.DESTRUCTION;
	exports.REFUSED = consts.REFUSED;
	exports.FORMERR = consts.FORMERR;
	exports.NODATA = consts.NODATA;
	exports.NOMEM = consts.NOMEM;
	exports.NOTFOUND = consts.NOTFOUND;
	exports.NOTIMP = consts.NOTIMP;
	exports.SERVFAIL = consts.SERVFAIL;
	exports.TIMEOUT = consts.TIMEOUT;
	exports.consts = consts;

	var definedTypes = [
	  'A',
	  'AAAA',
	  'NS',
	  'CNAME',
	  'PTR',
	  'NAPTR',
	  'TXT',
	  'MX',
	  'SRV',
	  'SOA',
	  'TLSA',
	].forEach(function (type) {
	  exports[type] = function (opts) {
	    var obj = {};
	    opts = opts || {};
	    obj.type = consts.nameToQtype(type);
	    obj.class = consts.NAME_TO_QCLASS.IN;
	    Object.keys(opts).forEach(function (k) {
	      if (opts.hasOwnProperty(k) && ['type', 'class'].indexOf(k) == -1) {
	        obj[k] = opts[k];
	      }
	    });
	    return obj;
	  };
	});

	exports.Question = function (opts) {
	  var q = {}, qtype;

	  opts = opts || {};

	  q.name = opts.name;

	  qtype = opts.type || consts.NAME_TO_QTYPE.A;
	  if (typeof(qtype) === 'string' || qtype instanceof String)
	    qtype = consts.nameToQtype(qtype.toUpperCase());

	  if (!qtype || typeof(qtype) !== 'number')
	    throw new Error("Question type must be defined and be valid");

	  q.type = qtype;

	  q.class = opts.class || consts.NAME_TO_QCLASS.IN;

	  return q;
	};
	exports.Request = client.Request;


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var fs = __webpack_require__(350),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    net = __webpack_require__(323),
	    os = __webpack_require__(369),
	    util = __webpack_require__(325),
	    Cache = __webpack_require__(375),
	    consts = __webpack_require__(380).consts,
	    path = __webpack_require__(389),
	    utils = __webpack_require__(390);

	var A = consts.NAME_TO_QTYPE.A,
	    AAAA = consts.NAME_TO_QTYPE.AAAA,
	    PTR = consts.NAME_TO_QTYPE.PTR;

	var Platform = function() {
	  this._nsReady = false;
	  this._hostsReady = false;

	  Object.defineProperty(this, 'ready', {
	    get: function() {
	      return this._nsReady && this._hostsReady;
	    }
	  });

	  this._watches = {};

	  Object.defineProperty(this, 'watching', {
	    get: function() {
	      return Object.keys(this._watches).length > 0;
	    },
	    set: function(value) {
	      var k;
	      if (value)
	        this._watchFiles();
	      else {
	        for (k in this._watches) {
	          this._watches[k].close();
	          delete this._watches[k];
	        }
	      }
	    }
	  });

	  this.hosts = new Cache();

	  this._initNameServers();
	  this._initHostsFile();
	  this._populate();

	  this.cache = false; //new Cache();
	};
	util.inherits(Platform, EventEmitter);

	Platform.prototype.reload = function() {
	  this.emit('unready');
	  this._initNameServers();
	  this._initHostsFile();
	  this._populate();
	};

	Platform.prototype._initNameServers = function() {
	  this._nsReady = false;
	  this.name_servers = [];
	  this.search_path = [];
	  this.timeout = 5 * 1000;
	  this.attempts = 5;
	  this.edns = false;
	};

	Platform.prototype._initHostsFile = function() {
	  this._hostsReady = false;
	  this.hosts.purge();
	};

	Platform.prototype._populate = function() {
	  var hostsfile, self = this;

	  switch (os.platform()) {
	    case 'win32':
	      this.name_servers = [
	        {
	          address: '8.8.8.8',
	          port: 53
	        },
	        {
	          address: '8.8.4.4',
	          port: 53
	        }
	      ];
	      self._nsReady = true;
	      hostsfile = path.join(process.env.SystemRoot,
	                        '\\System32\\drivers\\etc\\hosts');
	      break;
	    default:
	      this.parseResolv();
	      hostsfile = '/etc/hosts';
	      break;
	  }

	  this._parseHosts(hostsfile);
	};

	Platform.prototype._watchFiles = function() {
	  var self = this, watchParams;

	  watchParams = {persistent: false};

	  switch (os.platform()) {
	    case 'win32':
	      //TODO XXX FIXME: it would be nice if this existed
	      break;
	    default:
	      this._watches.resolve = fs.watch('/etc/resolv.conf', watchParams,
	          function(event, filename) {
	            if (event === 'change') {
	              self.emit('unready');
	              self._initNameServers();
	              self.parseResolv();
	            }
	          });
	      this._watches.hosts = fs.watch('/etc/hosts', watchParams,
	          function(event, filename) {
	            if (event === 'change') {
	              self.emit('unready');
	              self._initHostsFile();
	              self._parseHosts(hostsfile);
	            }
	          });
	      break;
	  }
	};

	Platform.prototype._checkReady = function() {
	  if (this.ready) {
	    this.emit('ready');
	  }
	};

	Platform.prototype.parseResolv = function() {
	  var self = this;

	  fs.readFile('/etc/resolv.conf', 'ascii', function(err, file) {
	    if (err) {
	      throw err;
	    }

	    file.split(/\n/).forEach(function(line) {
	      var i, parts, subparts;
	      line = line.replace(/^\s+|\s+$/g, '');
	      if (!line.match(/^#/)) {
	        parts = line.split(/\s+/);
	        switch (parts[0]) {
	          case 'nameserver':
	            self.name_servers.push({
	              address: parts[1],
	              port: 53
	            });
	            break;
	          case 'domain':
	            self.search_path = [parts[1]];
	            break;
	          case 'search':
	            self.search_path = [parts.slice(1)];
	            break;
	          case 'options':
	            for (i = 1; i < parts.length; i++) {
	              subparts = parts[i].split(/:/);
	              switch (subparts[0]) {
	                case 'timeout':
	                  self.timeout = parseInt(subparts[1], 10) * 1000;
	                  break;
	                case 'attempts':
	                  self.attempts = parseInt(subparts[1], 10);
	                  break;
	                case 'edns0':
	                  self.edns = true;
	                  break;
	              }
	            }
	            break;
	        }
	      }
	    });

	    self._nsReady = true;
	    self._checkReady();
	  });
	};

	Platform.prototype._parseHosts = function(hostsfile) {
	  var self = this;

	  fs.readFile(hostsfile, 'ascii', function(err, file) {
	    var toStore = {};
	    if (err) {
	      throw err;
	    }

	    file.split(/\n/).forEach(function(line) {
	      var i, parts, ip, revip, kind;
	      line = line.replace(/^\s+|\s+$/g, '');
	      if (!line.match(/^#/)) {
	        parts = line.split(/\s+/);
	        ip = parts[0];
	        parts = parts.slice(1);
	        kind = net.isIP(ip);

	        if (parts.length && ip && kind) {
	          /* IP -> Domain */
	          revip = utils.reverseIP(ip);
	          parts.forEach(function(domain) {
	            var r = toStore[revip];
	            if (!r)
	              r = toStore[revip] = {};
	            var t = r[PTR];
	            if (!t)
	              t = r[PTR] = [];
	            t.push({
	              type: PTR,
	              class: 1,
	              name: revip,
	              data: domain,
	              ttl: Infinity
	            });
	          });

	          /* Domain -> IP */
	          parts.forEach(function(domain) {
	            var r = toStore[domain.toLowerCase()];
	            if (!r) {
	              r = toStore[domain.toLowerCase()] = {};
	            }
	            var type = kind === 4 ? A : AAAA;
	            var t = r[type];
	            if (!t)
	              t = r[type] = [];
	            t.push({
	              type: type,
	              name: domain.toLowerCase(),
	              address: ip,
	              ttl: Infinity
	            });
	          });
	        }
	      }
	    });

	    Object.keys(toStore).forEach(function (key) {
	      self.hosts._store.set(self.hosts._zone, key, toStore[key]);
	    });
	    self._hostsReady = true;
	    self._checkReady();
	  });
	};

	module.exports = new Platform();


/***/ },
/* 374 */
/***/ function(module, exports) {

	module.exports = require("events");

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(376);
	module.exports.MemoryStore = __webpack_require__(377).MemoryStore;
	module.exports.Lookup = __webpack_require__(378).Lookup;
	module.exports.is_absolute = __webpack_require__(378).is_absolute;
	module.exports.ensure_absolute = __webpack_require__(378).ensure_absolute;


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var MemoryStore = __webpack_require__(377).MemoryStore;
	var utils = __webpack_require__(378);
	var Lookup = utils.Lookup;
	var util = __webpack_require__(325);
	var Heap = __webpack_require__(388);

	var MemoryStoreExpire = function (store, zone, opts) {
	  opts = opts || {};
	  this._store = store;
	  this._zone = zone;
	  this._max_keys = opts.max_keys;
	  this._ttl = new Heap(true);
	};

	MemoryStoreExpire.prototype.get = function (domain, key, cb) {
	  var self = this;
	  this._store.get(domain, key, function (err, results) {
	    var i, j, type, record;
	    var nresults = {};
	    var now = Date.now();

	    for (i in results) {
	      type = results[i];
	      for (j in type) {
	        record = type[j];
	        record.ttl = Math.round((record._ttl_expires - now) / 1000)
	        if (record.ttl > 0) {
	          if (!nresults[i]) {
	            nresults[i] = [];
	          }
	          nresults[i].push(record);
	        } else {
	          self._ttl.remove(record);
	          self._store.delete(self._zone, record.name, record.type, function () {});
	        }
	      }
	    }

	    cb(err, nresults);
	  });
	};

	MemoryStoreExpire.prototype.set = function (domain, key, data, cb) {
	  var i, j, type, record, expires;
	  var self = this;
	  var now = Date.now();

	  key = utils.ensure_absolute(key);

	  for (i in data) {
	    type = data[i];
	    for (j in type) {
	      record = type[j];
	      expires = (record.ttl * 1000) + now;
	      record._ttl_expires = expires;
	      self._ttl.insert(record, expires);
	    }
	  }

	  while (this._ttl.length > this._max_keys) {
	    var record = this._ttl.pop();
	    this._store.delete(this._zone, record.name, record.type);
	  }

	  this._store.set(domain, key, data, function (err, results) {
	    if (cb)
	      cb(err, results);
	  });
	};

	MemoryStoreExpire.prototype.delete = function (domain, key, type, cb) {
	  if (!cb) {
	    cb = type;
	    type = undefined;
	  }

	  var self = this;

	  this._store.get(domain, utils.ensure_absolute(key), function (gerr, gresults) {
	    var i, j, ktype, record;

	    for (i in gresults) {
	      ktype = gresults[i];
	      for (j in ktype) {
	        record = ktype[j];
	        self._ttl.remove(record);
	      }
	    }

	    if (!gresults) {
	      if (cb)
	        cb(gerr, gresults);
	      return;
	    }

	    self._store.delete(domain, key, type, function (err, results) {
	      if (cb)
	        cb(err, results);
	    });
	  });
	};

	var Cache = module.exports = function (opts) {
	  opts = opts || {};
	  this._zone = '.' || opts.zone;
	  this._store = undefined;
	  this.purge = function () {
	    this._store = new MemoryStoreExpire(opts.store || new MemoryStore(), this._zone, opts);
	  }
	  this.purge();
	};

	Cache.prototype.store = function (packet) {
	  var self = this;
	  var c = {};

	  function each(record) {
	    var r = c[record.name.toLowerCase()];
	    var t;

	    if (!r)
	      r = c[record.name.toLowerCase()] = {};

	    t = r[record.type];

	    if (!t)
	      t = r[record.type] = [];

	    t.push(record);
	  }

	  packet.answer.forEach(each);
	  packet.authority.forEach(each);
	  packet.additional.forEach(each);  

	  Object.keys(c).forEach(function (key) {
	    self._store.set(self._zone, utils.ensure_absolute(key), c[key]);
	  });
	};

	Cache.prototype.lookup = function (question, cb) {
	  var self = this;
	  Lookup(this._store, this._zone, question, function (err, results) {
	    var i, record, found = false;

	    for (i in results) {
	      record = results[i];
	      if (record.type == question.type) {
	        found = true;
	        break;
	      }
	    }

	    if (results && !found) {
	      self._store.delete(self._zone, utils.ensure_absolute(question.name));
	      results.forEach(function (rr) {
	        self._store.delete(self._zone, utils.ensure_absolute(rr.name));
	      });
	      results = null;
	    }

	    cb(results);
	  });
	};


/***/ },
/* 377 */
/***/ function(module, exports) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	// 
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

	'use strict';

	var MemoryStore = exports.MemoryStore = function (opts) {
	  this._store = {};
	};

	MemoryStore.prototype.get = function (domain, key, cb) {
	  var d = domain.toLowerCase();
	  var k = key.toLowerCase();
	  var result = this._store[d];

	  if (result)
	    result = result[k];

	  process.nextTick(function () {
	    cb(null, result);
	  });
	};

	MemoryStore.prototype.set = function (domain, key, data, cb) {
	  var d = domain.toLowerCase();
	  var k = key.toLowerCase();
	  var result_domain = this._store[d];

	  if (!result_domain)
	    result_domain = this._store[d] = {};

	  result_domain[k] = data;

	  if (cb) {
	    process.nextTick(function () {
	      cb(null, data);
	    });
	  }
	};

	MemoryStore.prototype.delete = function (domain, key, type, cb) {
	  var d, k;

	  if (!cb) {
	    cb = type;
	    type = undefined;
	  }

	  if (!cb) {
	    cb = key;
	    type = undefined;
	  }

	  d = this._store[domain.toLowerCase()];

	  if (d && key)
	    k = d[key.toLowerCase()];

	  if (domain && key && type) {
	    if (d && k) {
	      delete k[type];
	    }
	  } else if (domain && key) {
	    if (d) {
	      delete d[k];
	    }
	  } else if (domain) {
	    if (d) {
	      delete this._store[domain.toLowerCase()];
	    }
	  }

	  if (cb) {
	    process.nextTick(function () {
	      cb(null, domain);
	    });
	  }
	};


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	var dgram = __webpack_require__(379),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    net = __webpack_require__(323),
	    util = __webpack_require__(325);

	var is_absolute = exports.is_absolute = function (f) {
	  return f && /\.$/.test(f);
	};

	var ensure_absolute = exports.ensure_absolute = function (f) {
	  if (!is_absolute(f))
	    return f += '.';
	  return f;
	};

	var CNAME = __webpack_require__(380).consts.NAME_TO_QTYPE.CNAME;

	var Lookup = exports.Lookup = function (store, zone, question, cb) {
	  if (!(this instanceof Lookup))
	    return new Lookup(store, zone, question, cb);

	  this.store = store;
	  this.zone = zone;
	  this.cb = cb;
	  this.question = question;
	  this.results = [];
	  this.wildcard = undefined;

	  this.name = ensure_absolute(question.name);

	  this.store.get(this.zone, this.name, this.lookup.bind(this));
	};

	Lookup.prototype.send = function (err) {
	  this.cb(err, this.results);
	};

	Lookup.prototype.lookup = function (err, results) {
	  var type, ret, name, self = this;

	  if (err)
	    return this.send(err);

	  if (!results) {
	    if (!this.wildcard)
	      this.wildcard = this.question.name;

	    if (this.wildcard.toLowerCase() == this.zone.toLowerCase())
	      return this.send();

	    name = this.wildcard = this.wildcard.split('.').splice(1).join('.');

	    // 'com.'.split('.').splice(1) will return empty string, we're at the end
	    if (!this.wildcard)
	      return this.send();

	    name = '*.' + name;
	  } else if (results[this.question.type]) {
	    type = this.question.type;
	    ret = results;
	  } else if (results[CNAME]) {
	    type = CNAME;
	    ret = results;
	    this.name = name = results[CNAME][0].data
	  }

	  if (ret) {
	    ret = ret[type];
	    ret.forEach(function (r) {
	      var rr, k;

	      if (self.wildcard && /^\*/.test(r.name)) {
	        rr = {};
	        for (k in r) {
	          rr[k] = r[k];
	        }
	        rr.name = self.name;
	      } else {
	        rr = r;
	      }

	      self.results.push(rr);
	    });
	  }

	  if (name)
	    this.store.get(this.zone, ensure_absolute(name), this.lookup.bind(this));
	  else
	    this.send();
	};


/***/ },
/* 379 */
/***/ function(module, exports) {

	module.exports = require("dgram");

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(381);
	module.exports.consts = __webpack_require__(382);


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	// TODO: change the default UDP packet size that node-dns sends
	//       from 4096 to conform to these:
	//       - [requestor's payload size](https://tools.ietf.org/html/rfc6891#section-6.2.3)
	//       - [responders's payload size](https://tools.ietf.org/html/rfc6891#section-6.2.4)

	'use strict';

	var consts = __webpack_require__(382),
	    BufferCursor = __webpack_require__(383),
	    BufferCursorOverflow = BufferCursor.BufferCursorOverflow,
	    ipaddr = __webpack_require__(387),
	    assert = __webpack_require__(385),
	    util = __webpack_require__(325);

	function assertUndefined(val, msg) {
	  assert(typeof val != 'undefined', msg);
	}

	var Packet = module.exports = function() {
	  this.header = {
	    id: 0,
	    qr: 0,
	    opcode: 0,
	    aa: 0,
	    tc: 0,
	    rd: 1,
	    ra: 0,
	    res1: 0,
	    res2: 0,
	    res3: 0,
	    rcode: 0
	  };
	  this.question = [];
	  this.answer = [];
	  this.authority = [];
	  this.additional = [];
	  this.edns_options = [];   // TODO: DEPRECATED! Use `.edns.options` instead!
	  this.payload = undefined; // TODO: DEPRECATED! Use `.edns.payload` instead!
	};

	var LABEL_POINTER = 0xC0;

	var isPointer = function(len) {
	  return (len & LABEL_POINTER) === LABEL_POINTER;
	};

	function nameUnpack(buff) {
	  var len, comp, end, pos, part, combine = '';

	  len = buff.readUInt8();
	  comp = false;
	  end = buff.tell();

	  while (len !== 0) {
	    if (isPointer(len)) {
	      len -= LABEL_POINTER;
	      len = len << 8;
	      pos = len + buff.readUInt8();
	      if (!comp)
	        end = buff.tell();
	      buff.seek(pos);
	      len = buff.readUInt8();
	      comp = true;
	      continue;
	    }

	    part = buff.toString('ascii', len);

	    if (combine.length)
	      combine = combine + '.' + part;
	    else
	      combine = part;

	    len = buff.readUInt8();

	    if (!comp)
	      end = buff.tell();
	  }

	  buff.seek(end);

	  return combine;
	}

	function namePack(str, buff, index) {
	  var offset, dot, part;

	  while (str) {
	    if (index[str]) {
	      offset = (LABEL_POINTER << 8) + index[str];
	      buff.writeUInt16BE(offset);
	      break;
	    } else {
	      index[str] = buff.tell();
	      dot = str.indexOf('.');
	      if (dot > -1) {
	        part = str.slice(0, dot);
	        str = str.slice(dot + 1);
	      } else {
	        part = str;
	        str = undefined;
	      }
	      buff.writeUInt8(part.length);
	      buff.write(part, part.length, 'ascii');
	    }
	  }

	  if (!str) {
	    buff.writeUInt8(0);
	  }
	}

	var
	  WRITE_HEADER              = 100001,
	  WRITE_TRUNCATE            = 100002,
	  WRITE_QUESTION            = 100003,
	  WRITE_RESOURCE_RECORD     = 100004,
	  WRITE_RESOURCE_WRITE      = 100005,
	  WRITE_RESOURCE_DONE       = 100006,
	  WRITE_RESOURCE_END        = 100007,
	  WRITE_EDNS                = 100008,
	  WRITE_END                 = 100009,
	  WRITE_A     = consts.NAME_TO_QTYPE.A,
	  WRITE_AAAA  = consts.NAME_TO_QTYPE.AAAA,
	  WRITE_NS    = consts.NAME_TO_QTYPE.NS,
	  WRITE_CNAME = consts.NAME_TO_QTYPE.CNAME,
	  WRITE_PTR   = consts.NAME_TO_QTYPE.PTR,
	  WRITE_SPF   = consts.NAME_TO_QTYPE.SPF,
	  WRITE_MX    = consts.NAME_TO_QTYPE.MX,
	  WRITE_SRV   = consts.NAME_TO_QTYPE.SRV,
	  WRITE_TXT   = consts.NAME_TO_QTYPE.TXT,
	  WRITE_SOA   = consts.NAME_TO_QTYPE.SOA,
	  WRITE_OPT   = consts.NAME_TO_QTYPE.OPT,
	  WRITE_NAPTR = consts.NAME_TO_QTYPE.NAPTR,
	  WRITE_TLSA  = consts.NAME_TO_QTYPE.TLSA;

	function writeHeader(buff, packet) {
	  assert(packet.header, 'Packet requires "header"');
	  buff.writeUInt16BE(packet.header.id & 0xFFFF);
	  var val = 0;
	  val += (packet.header.qr << 15) & 0x8000;
	  val += (packet.header.opcode << 11) & 0x7800;
	  val += (packet.header.aa << 10) & 0x400;
	  val += (packet.header.tc << 9) & 0x200;
	  val += (packet.header.rd << 8) & 0x100;
	  val += (packet.header.ra << 7) & 0x80;
	  val += (packet.header.res1 << 6) & 0x40;
	  val += (packet.header.res2 << 5) & 0x20;
	  val += (packet.header.res3 << 4) & 0x10;
	  val += packet.header.rcode & 0xF;
	  buff.writeUInt16BE(val & 0xFFFF);
	  assert(packet.question.length == 1, 'DNS requires one question');
	  // aren't used
	  buff.writeUInt16BE(1);
	  // answer offset 6
	  buff.writeUInt16BE(packet.answer.length & 0xFFFF);
	  // authority offset 8
	  buff.writeUInt16BE(packet.authority.length & 0xFFFF);
	  // additional offset 10
	  buff.writeUInt16BE(packet.additional.length & 0xFFFF);
	  return WRITE_QUESTION;
	}

	function writeTruncate(buff, packet, section, val) {
	  // XXX FIXME TODO truncation is currently done wrong.
	  // Quote rfc2181 section 9
	  // The TC bit should not be set merely because some extra information
	  // could have been included, but there was insufficient room.  This
	  // includes the results of additional section processing.  In such cases
	  // the entire RRSet that will not fit in the response should be omitted,
	  // and the reply sent as is, with the TC bit clear.  If the recipient of
	  // the reply needs the omitted data, it can construct a query for that
	  // data and send that separately.
	  //
	  // TODO IOW only set TC if we hit it in ANSWERS otherwise make sure an
	  // entire RRSet is removed during a truncation.
	  var pos;

	  buff.seek(2);
	  val = buff.readUInt16BE();
	  val |= (1 << 9) & 0x200;
	  buff.seek(2);
	  buff.writeUInt16BE(val);
	  switch (section) {
	    case 'answer':
	      pos = 6;
	      // seek to authority and clear it and additional out
	      buff.seek(8);
	      buff.writeUInt16BE(0);
	      buff.writeUInt16BE(0);
	      break;
	    case 'authority':
	      pos = 8;
	      // seek to additional and clear it out
	      buff.seek(10);
	      buff.writeUInt16BE(0);
	      break;
	    case 'additional':
	      pos = 10;
	      break;
	  }
	  buff.seek(pos);
	  buff.writeUInt16BE(count - 1); // TODO: count not defined!
	  buff.seek(last_resource);      // TODO: last_resource not defined!
	  return WRITE_END;
	}

	function writeQuestion(buff, val, label_index) {
	  assert(val, 'Packet requires a question');
	  assertUndefined(val.name, 'Question requires a "name"');
	  assertUndefined(val.type, 'Question requires a "type"');
	  assertUndefined(val.class, 'Questionn requires a "class"');
	  namePack(val.name, buff, label_index);
	  buff.writeUInt16BE(val.type & 0xFFFF);
	  buff.writeUInt16BE(val.class & 0xFFFF);
	  return WRITE_RESOURCE_RECORD;
	}

	function writeResource(buff, val, label_index, rdata) {
	  assert(val, 'Resource must be defined');
	  assertUndefined(val.name, 'Resource record requires "name"');
	  assertUndefined(val.type, 'Resource record requires "type"');
	  assertUndefined(val.class, 'Resource record requires "class"');
	  assertUndefined(val.ttl, 'Resource record requires "ttl"');
	  namePack(val.name, buff, label_index);
	  buff.writeUInt16BE(val.type & 0xFFFF);
	  buff.writeUInt16BE(val.class & 0xFFFF);
	  buff.writeUInt32BE(val.ttl & 0xFFFFFFFF);
	  rdata.pos = buff.tell();
	  buff.writeUInt16BE(0); // if there is rdata, then this value will be updated
	                         // to the correct value by 'writeResourceDone'
	  return val.type;
	}

	function writeResourceDone(buff, rdata) {
	  var pos = buff.tell();
	  buff.seek(rdata.pos);
	  buff.writeUInt16BE(pos - rdata.pos - 2);
	  buff.seek(pos);
	  return WRITE_RESOURCE_RECORD;
	}

	function writeIp(buff, val) {
	  //TODO XXX FIXME -- assert that address is of proper type
	  assertUndefined(val.address, 'A/AAAA record requires "address"');
	  val = ipaddr.parse(val.address).toByteArray();
	  val.forEach(function(b) {
	    buff.writeUInt8(b);
	  });
	  return WRITE_RESOURCE_DONE;
	}

	function writeCname(buff, val, label_index) {
	  assertUndefined(val.data, 'NS/CNAME/PTR record requires "data"');
	  namePack(val.data, buff, label_index);
	  return WRITE_RESOURCE_DONE;
	}

	// For <character-string> see: http://tools.ietf.org/html/rfc1035#section-3.3
	// For TXT: http://tools.ietf.org/html/rfc1035#section-3.3.14
	function writeTxt(buff, val) {
	  //TODO XXX FIXME -- split on max char string and loop
	  assertUndefined(val.data, 'TXT record requires "data"');
	  for (var i=0,len=val.data.length; i<len; i++) {
	    var dataLen = Buffer.byteLength(val.data[i], 'utf8');
	    buff.writeUInt8(dataLen);
	    buff.write(val.data[i], dataLen, 'utf8');
	  }
	  return WRITE_RESOURCE_DONE;
	}

	function writeMx(buff, val, label_index) {
	  assertUndefined(val.priority, 'MX record requires "priority"');
	  assertUndefined(val.exchange, 'MX record requires "exchange"');
	  buff.writeUInt16BE(val.priority & 0xFFFF);
	  namePack(val.exchange, buff, label_index);
	  return WRITE_RESOURCE_DONE;
	}

	// SRV: https://tools.ietf.org/html/rfc2782
	// TODO: SRV fixture failing for '_xmpp-server._tcp.gmail.com.srv.js'
	function writeSrv(buff, val, label_index) {
	  assertUndefined(val.priority, 'SRV record requires "priority"');
	  assertUndefined(val.weight, 'SRV record requires "weight"');
	  assertUndefined(val.port, 'SRV record requires "port"');
	  assertUndefined(val.target, 'SRV record requires "target"');
	  buff.writeUInt16BE(val.priority & 0xFFFF);
	  buff.writeUInt16BE(val.weight & 0xFFFF);
	  buff.writeUInt16BE(val.port & 0xFFFF);
	  namePack(val.target, buff, label_index);
	  return WRITE_RESOURCE_DONE;
	}

	function writeSoa(buff, val, label_index) {
	  assertUndefined(val.primary, 'SOA record requires "primary"');
	  assertUndefined(val.admin, 'SOA record requires "admin"');
	  assertUndefined(val.serial, 'SOA record requires "serial"');
	  assertUndefined(val.refresh, 'SOA record requires "refresh"');
	  assertUndefined(val.retry, 'SOA record requires "retry"');
	  assertUndefined(val.expiration, 'SOA record requires "expiration"');
	  assertUndefined(val.minimum, 'SOA record requires "minimum"');
	  namePack(val.primary, buff, label_index);
	  namePack(val.admin, buff, label_index);
	  buff.writeUInt32BE(val.serial & 0xFFFFFFFF);
	  buff.writeInt32BE(val.refresh & 0xFFFFFFFF);
	  buff.writeInt32BE(val.retry & 0xFFFFFFFF);
	  buff.writeInt32BE(val.expiration & 0xFFFFFFFF);
	  buff.writeInt32BE(val.minimum & 0xFFFFFFFF);
	  return WRITE_RESOURCE_DONE;
	}

	// http://tools.ietf.org/html/rfc3403#section-4.1
	function writeNaptr(buff, val, label_index) {
	  assertUndefined(val.order, 'NAPTR record requires "order"');
	  assertUndefined(val.preference, 'NAPTR record requires "preference"');
	  assertUndefined(val.flags, 'NAPTR record requires "flags"');
	  assertUndefined(val.service, 'NAPTR record requires "service"');
	  assertUndefined(val.regexp, 'NAPTR record requires "regexp"');
	  assertUndefined(val.replacement, 'NAPTR record requires "replacement"');
	  buff.writeUInt16BE(val.order & 0xFFFF);
	  buff.writeUInt16BE(val.preference & 0xFFFF);
	  buff.writeUInt8(val.flags.length);
	  buff.write(val.flags, val.flags.length, 'ascii');
	  buff.writeUInt8(val.service.length);
	  buff.write(val.service, val.service.length, 'ascii');
	  buff.writeUInt8(val.regexp.length);
	  buff.write(val.regexp, val.regexp.length, 'ascii');
	  namePack(val.replacement, buff, label_index);
	  return WRITE_RESOURCE_DONE;
	}

	// https://tools.ietf.org/html/rfc6698
	function writeTlsa(buff, val) {
	  assertUndefined(val.usage, 'TLSA record requires "usage"');
	  assertUndefined(val.selector, 'TLSA record requires "selector"');
	  assertUndefined(val.matchingtype, 'TLSA record requires "matchingtype"');
	  assertUndefined(val.buff, 'TLSA record requires "buff"');
	  buff.writeUInt8(val.usage);
	  buff.writeUInt8(val.selector);
	  buff.writeUInt8(val.matchingtype);
	  buff.copy(val.buff);
	  return WRITE_RESOURCE_DONE;
	}

	function makeEdns(packet) {
	  packet.edns = {
	    name: '',
	    type: consts.NAME_TO_QTYPE.OPT,
	    class: packet.payload,
	    options: [],
	    ttl: 0
	  };
	  packet.edns_options = packet.edns.options; // TODO: 'edns_options' is DEPRECATED!
	  packet.additional.push(packet.edns);
	  return WRITE_HEADER;
	}

	function writeOpt(buff, val) {
	  var opt;
	  for (var i=0, len=val.options.length; i<len; i++) {
	    opt = val.options[i];
	    buff.writeUInt16BE(opt.code);
	    buff.writeUInt16BE(opt.data.length);
	    buff.copy(opt.data);
	  }
	  return WRITE_RESOURCE_DONE;
	}

	Packet.write = function(buff, packet) {
	  var state = WRITE_HEADER,
	      val,
	      section,
	      count,
	      rdata,
	      last_resource,
	      label_index = {};

	  buff = new BufferCursor(buff);

	  // the existence of 'edns' in a packet indicates that a proper OPT record exists
	  // in 'additional' and that all of the other fields in packet (that are parsed by
	  // 'parseOpt') are properly set. If it does not exist, we assume that the user
	  // is requesting that we create one for them.
	  if (typeof packet.edns_version !== 'undefined' && typeof packet.edns === "undefined")
	    state = makeEdns(packet);

	  // TODO: this is unnecessarily inefficient. rewrite this using a
	  //       function table instead. (same for Packet.parse too).
	  while (true) {
	    try {
	      switch (state) {
	        case WRITE_HEADER:
	          state = writeHeader(buff, packet);
	          break;
	        case WRITE_TRUNCATE:
	          state = writeTruncate(buff, packet, section, last_resource);
	          break;
	        case WRITE_QUESTION:
	          state = writeQuestion(buff, packet.question[0], label_index);
	          section = 'answer';
	          count = 0;
	          break;
	        case WRITE_RESOURCE_RECORD:
	          last_resource = buff.tell();
	          if (packet[section].length == count) {
	            switch (section) {
	              case 'answer':
	                section = 'authority';
	                state = WRITE_RESOURCE_RECORD;
	                break;
	              case 'authority':
	                section = 'additional';
	                state = WRITE_RESOURCE_RECORD;
	                break;
	              case 'additional':
	                state = WRITE_END;
	                break;
	            }
	            count = 0;
	          } else {
	            state = WRITE_RESOURCE_WRITE;
	          }
	          break;
	        case WRITE_RESOURCE_WRITE:
	          rdata = {};
	          val = packet[section][count];
	          state = writeResource(buff, val, label_index, rdata);
	          break;
	        case WRITE_RESOURCE_DONE:
	          count += 1;
	          state = writeResourceDone(buff, rdata);
	          break;
	        case WRITE_A:
	        case WRITE_AAAA:
	          state = writeIp(buff, val);
	          break;
	        case WRITE_NS:
	        case WRITE_CNAME:
	        case WRITE_PTR:
	          state = writeCname(buff, val, label_index);
	          break;
	        case WRITE_SPF:
	        case WRITE_TXT:
	          state = writeTxt(buff, val);
	          break;
	        case WRITE_MX:
	          state = writeMx(buff, val, label_index);
	          break;
	        case WRITE_SRV:
	          state = writeSrv(buff, val, label_index);
	          break;
	        case WRITE_SOA:
	          state = writeSoa(buff, val, label_index);
	          break;
	        case WRITE_OPT:
	          state = writeOpt(buff, val);
	          break;
	        case WRITE_NAPTR:
	          state = writeNaptr(buff, val, label_index);
	          break;
	        case WRITE_TLSA:
	          state = writeTlsa(buff, val);
	          break;
	        case WRITE_END:
	          return buff.tell();
	        default:
	          if (typeof val.data !== 'object')
	            throw new Error('Packet.write Unknown State: ' + state);
	          // write unhandled RR type
	          buff.copy(val.data);
	          state = WRITE_RESOURCE_DONE;
	      }
	    } catch (e) {
	      if (e instanceof BufferCursorOverflow) {
	        state = WRITE_TRUNCATE;
	      } else {
	        throw e;
	      }
	    }
	  }
	};

	function parseHeader(msg, packet) {
	  packet.header.id = msg.readUInt16BE();
	  var val = msg.readUInt16BE();
	  packet.header.qr = (val & 0x8000) >> 15;
	  packet.header.opcode = (val & 0x7800) >> 11;
	  packet.header.aa = (val & 0x400) >> 10;
	  packet.header.tc = (val & 0x200) >> 9;
	  packet.header.rd = (val & 0x100) >> 8;
	  packet.header.ra = (val & 0x80) >> 7;
	  packet.header.res1 = (val & 0x40) >> 6;
	  packet.header.res2 = (val & 0x20) >> 5;
	  packet.header.res3 = (val & 0x10) >> 4;
	  packet.header.rcode = (val & 0xF);
	  packet.question = new Array(msg.readUInt16BE());
	  packet.answer = new Array(msg.readUInt16BE());
	  packet.authority = new Array(msg.readUInt16BE());
	  packet.additional = new Array(msg.readUInt16BE());
	  return PARSE_QUESTION;
	}

	function parseQuestion(msg, packet) {
	  var val = {};
	  val.name = nameUnpack(msg);
	  val.type = msg.readUInt16BE();
	  val.class = msg.readUInt16BE();
	  packet.question[0] = val;
	  assert(packet.question.length === 1);
	  // TODO handle qdcount > 1 in practice no one sends this
	  return PARSE_RESOURCE_RECORD;
	}

	function parseRR(msg, val, rdata) {
	  val.name = nameUnpack(msg);
	  val.type = msg.readUInt16BE();
	  val.class = msg.readUInt16BE();
	  val.ttl = msg.readUInt32BE();
	  rdata.len = msg.readUInt16BE();
	  return val.type;
	}

	function parseA(val, msg) {
	  var address = '' +
	    msg.readUInt8() +
	    '.' + msg.readUInt8() +
	    '.' + msg.readUInt8() +
	    '.' + msg.readUInt8();
	  val.address = address;
	  return PARSE_RESOURCE_DONE;
	}

	function parseAAAA(val, msg) {
	  var address = '';
	  var compressed = false;

	  for (var i = 0; i < 8; i++) {
	    if (i > 0) address += ':';
	    // TODO zero compression
	    address += msg.readUInt16BE().toString(16);
	  }
	  val.address = address;
	  return PARSE_RESOURCE_DONE;
	}

	function parseCname(val, msg) {
	  val.data = nameUnpack(msg);
	  return PARSE_RESOURCE_DONE;
	}

	function parseTxt(val, msg, rdata) {
	  val.data = [];
	  var end = msg.tell() + rdata.len;
	  while (msg.tell() != end) {
	    var len = msg.readUInt8();
	    val.data.push(msg.toString('utf8', len));
	  }
	  return PARSE_RESOURCE_DONE;
	}

	function parseMx(val, msg, rdata) {
	  val.priority = msg.readUInt16BE();
	  val.exchange = nameUnpack(msg);
	  return PARSE_RESOURCE_DONE;
	}

	// TODO: SRV fixture failing for '_xmpp-server._tcp.gmail.com.srv.js'
	//       https://tools.ietf.org/html/rfc2782
	function parseSrv(val, msg) {
	  val.priority = msg.readUInt16BE();
	  val.weight = msg.readUInt16BE();
	  val.port = msg.readUInt16BE();
	  val.target = nameUnpack(msg);
	  return PARSE_RESOURCE_DONE;
	}

	function parseSoa(val, msg) {
	  val.primary = nameUnpack(msg);
	  val.admin = nameUnpack(msg);
	  val.serial = msg.readUInt32BE();
	  val.refresh = msg.readInt32BE();
	  val.retry = msg.readInt32BE();
	  val.expiration = msg.readInt32BE();
	  val.minimum = msg.readInt32BE();
	  return PARSE_RESOURCE_DONE;
	}

	// http://tools.ietf.org/html/rfc3403#section-4.1
	function parseNaptr(val, msg) {
	  val.order = msg.readUInt16BE();
	  val.preference = msg.readUInt16BE();
	  var len = msg.readUInt8();
	  val.flags = msg.toString('ascii', len);
	  len = msg.readUInt8();
	  val.service = msg.toString('ascii', len);
	  len = msg.readUInt8();
	  val.regexp = msg.toString('ascii', len);
	  val.replacement = nameUnpack(msg);
	  return PARSE_RESOURCE_DONE;
	}

	function parseTlsa(val, msg, rdata) {
	  val.usage = msg.readUInt8();
	  val.selector = msg.readUInt8();
	  val.matchingtype = msg.readUInt8();
	  val.buff = msg.slice(rdata.len - 3).buffer; // 3 because of the 3 UInt8s above.
	  return PARSE_RESOURCE_DONE;
	}

	// https://tools.ietf.org/html/rfc6891#section-6.1.2
	// https://tools.ietf.org/html/rfc2671#section-4.4
	//       - [payload size selection](https://tools.ietf.org/html/rfc6891#section-6.2.5)
	function parseOpt(val, msg, rdata, packet) {
	  // assert first entry in additional
	  rdata.buf = msg.slice(rdata.len);

	  val.rcode = ((val.ttl & 0xFF000000) >> 20) + packet.header.rcode;
	  val.version = (val.ttl >> 16) & 0xFF;
	  val.do = (val.ttl >> 15) & 1;
	  val.z = val.ttl & 0x7F;
	  val.options = [];

	  packet.edns = val;
	  packet.edns_version = val.version; // TODO: return BADVERS for unsupported version! (Section 6.1.3)

	  // !! BEGIN DEPRECATION NOTICE !!
	  // THESE FIELDS MAY BE REMOVED IN THE FUTURE!
	  packet.edns_options = val.options;
	  packet.payload = val.class;
	  // !! END DEPRECATION NOTICE !!

	  while (!rdata.buf.eof()) {
	    val.options.push({
	      code: rdata.buf.readUInt16BE(),
	      data: rdata.buf.slice(rdata.buf.readUInt16BE()).buffer
	    });
	  }
	  return PARSE_RESOURCE_DONE;
	}

	var
	  PARSE_HEADER          = 100000,
	  PARSE_QUESTION        = 100001,
	  PARSE_RESOURCE_RECORD = 100002,
	  PARSE_RR_UNPACK       = 100003,
	  PARSE_RESOURCE_DONE   = 100004,
	  PARSE_END             = 100005,
	  PARSE_A     = consts.NAME_TO_QTYPE.A,
	  PARSE_NS    = consts.NAME_TO_QTYPE.NS,
	  PARSE_CNAME = consts.NAME_TO_QTYPE.CNAME,
	  PARSE_SOA   = consts.NAME_TO_QTYPE.SOA,
	  PARSE_PTR   = consts.NAME_TO_QTYPE.PTR,
	  PARSE_MX    = consts.NAME_TO_QTYPE.MX,
	  PARSE_TXT   = consts.NAME_TO_QTYPE.TXT,
	  PARSE_AAAA  = consts.NAME_TO_QTYPE.AAAA,
	  PARSE_SRV   = consts.NAME_TO_QTYPE.SRV,
	  PARSE_NAPTR = consts.NAME_TO_QTYPE.NAPTR,
	  PARSE_OPT   = consts.NAME_TO_QTYPE.OPT,
	  PARSE_SPF   = consts.NAME_TO_QTYPE.SPF,
	  PARSE_TLSA  = consts.NAME_TO_QTYPE.TLSA;
	  

	Packet.parse = function(msg) {
	  var state,
	      pos,
	      val,
	      rdata,
	      section,
	      count;

	  var packet = new Packet();

	  pos = 0;
	  state = PARSE_HEADER;

	  msg = new BufferCursor(msg);

	  while (true) {
	    switch (state) {
	      case PARSE_HEADER:
	        state = parseHeader(msg, packet);
	        break;
	      case PARSE_QUESTION:
	        state = parseQuestion(msg, packet);
	        section = 'answer';
	        count = 0;
	        break;
	      case PARSE_RESOURCE_RECORD:
	        // console.log('PARSE_RESOURCE_RECORD: count = %d, %s.len = %d', count, section, packet[section].length);
	        if (count === packet[section].length) {
	          switch (section) {
	            case 'answer':
	              section = 'authority';
	              count = 0;
	              break;
	            case 'authority':
	              section = 'additional';
	              count = 0;
	              break;
	            case 'additional':
	              state = PARSE_END;
	              break;
	          }
	        } else {
	          state = PARSE_RR_UNPACK;
	        }
	        break;
	      case PARSE_RR_UNPACK:
	        val = {};
	        rdata = {};
	        state = parseRR(msg, val, rdata);
	        break;
	      case PARSE_RESOURCE_DONE:
	        packet[section][count++] = val;
	        state = PARSE_RESOURCE_RECORD;
	        break;
	      case PARSE_A:
	        state = parseA(val, msg);
	        break;
	      case PARSE_AAAA:
	        state = parseAAAA(val, msg);
	        break;
	      case PARSE_NS:
	      case PARSE_CNAME:
	      case PARSE_PTR:
	        state = parseCname(val, msg);
	        break;
	      case PARSE_SPF:
	      case PARSE_TXT:
	        state = parseTxt(val, msg, rdata);
	        break;
	      case PARSE_MX:
	        state = parseMx(val, msg);
	        break;
	      case PARSE_SRV:
	        state = parseSrv(val, msg);
	        break;
	      case PARSE_SOA:
	        state = parseSoa(val, msg);
	        break;
	      case PARSE_OPT:
	        state = parseOpt(val, msg, rdata, packet);
	        break;
	      case PARSE_NAPTR:
	        state = parseNaptr(val, msg);
	        break;
	      case PARSE_TLSA:
	        state = parseTlsa(val, msg, rdata);
	        break;
	      case PARSE_END:
	        return packet;
	      default:
	        //console.log(state, val);
	        val.data = msg.slice(rdata.len);
	        state = PARSE_RESOURCE_DONE;
	        break;
	    }
	  }
	};


/***/ },
/* 382 */
/***/ function(module, exports) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	function reverse_map(src) {
	  var dst = {},
	      k;

	  for (k in src) {
	    if (src.hasOwnProperty(k)) {
	      dst[src[k]] = k;
	    }
	  }
	  return dst;
	}

	/* http://www.iana.org/assignments/dns-parameters */
	var NAME_TO_QTYPE = exports.NAME_TO_QTYPE = {
	  A: 1,
	  NS: 2,
	  MD: 3,
	  MF: 4,
	  CNAME: 5,
	  SOA: 6,
	  MB: 7,
	  MG: 8,
	  MR: 9,
	  'NULL': 10,
	  WKS: 11,
	  PTR: 12,
	  HINFO: 13,
	  MINFO: 14,
	  MX: 15,
	  TXT: 16,
	  RP: 17,
	  AFSDB: 18,
	  X25: 19,
	  ISDN: 20,
	  RT: 21,
	  NSAP: 22,
	  'NSAP-PTR': 23,
	  SIG: 24,
	  KEY: 25,
	  PX: 26,
	  GPOS: 27,
	  AAAA: 28,
	  LOC: 29,
	  NXT: 30,
	  EID: 31,
	  NIMLOC: 32,
	  SRV: 33,
	  ATMA: 34,
	  NAPTR: 35,
	  KX: 36,
	  CERT: 37,
	  A6: 38,
	  DNAME: 39,
	  SINK: 40,
	  OPT: 41,
	  APL: 42,
	  DS: 43,
	  SSHFP: 44,
	  IPSECKEY: 45,
	  RRSIG: 46,
	  NSEC: 47,
	  DNSKEY: 48,
	  DHCID: 49,
	  NSEC3: 50,
	  NSEC3PARAM: 51,
	  TLSA: 52,
	  HIP: 55,
	  NINFO: 56,
	  RKEY: 57,
	  TALINK: 58,
	  CDS: 59,
	  SPF: 99,
	  UINFO: 100,
	  UID: 101,
	  GID: 102,
	  UNSPEC: 103,
	  TKEY: 249,
	  TSIG: 250,
	  IXFR: 251,
	  AXFR: 252,
	  MAILB: 253,
	  MAILA: 254,
	  ANY: 255,
	  URI: 256,
	  CAA: 257,
	  TA: 32768,
	  DLV: 32769
	};
	exports.QTYPE_TO_NAME = reverse_map(NAME_TO_QTYPE);

	exports.nameToQtype = function(n) {
	  return NAME_TO_QTYPE[n.toUpperCase()];
	};

	exports.qtypeToName = function(t) {
	  return exports.QTYPE_TO_NAME[t];
	};

	var NAME_TO_QCLASS = exports.NAME_TO_QCLASS = {
	  IN: 1
	};
	exports.QCLASS_TO_NAME = reverse_map(NAME_TO_QCLASS);

	exports.FAMILY_TO_QTYPE = {
	  4: NAME_TO_QTYPE.A,
	  6: NAME_TO_QTYPE.AAAA
	};
	exports.QTYPE_TO_FAMILY = {};
	exports.QTYPE_TO_FAMILY[exports.NAME_TO_QTYPE.A] = 4;
	exports.QTYPE_TO_FAMILY[exports.NAME_TO_QTYPE.AAAA] = 6;

	exports.NAME_TO_RCODE = {
	  NOERROR: 0,
	  FORMERR: 1,
	  SERVFAIL: 2,
	  NOTFOUND: 3,
	  NOTIMP: 4,
	  REFUSED: 5,
	  YXDOMAIN: 6, //Name Exists when it should not
	  YXRRSET: 7, //RR Set Exists when it should not
	  NXRRSET: 8, //RR Set that should exist does not
	  NOTAUTH: 9,
	  NOTZONE: 10,
	  BADVERS: 16,
	  BADSIG: 16, // really?
	  BADKEY: 17,
	  BADTIME: 18,
	  BADMODE: 19,
	  BADNAME: 20,
	  BADALG: 21,
	  BADTRUNC: 22
	};
	exports.RCODE_TO_NAME = reverse_map(exports.NAME_TO_RCODE);

	exports.BADNAME = 'EBADNAME';
	exports.BADRESP = 'EBADRESP';
	exports.CONNREFUSED = 'ECONNREFUSED';
	exports.DESTRUCTION = 'EDESTRUCTION';
	exports.REFUSED = 'EREFUSED';
	exports.FORMERR = 'EFORMERR';
	exports.NODATA = 'ENODATA';
	exports.NOMEM = 'ENOMEM';
	exports.NOTFOUND = 'ENOTFOUND';
	exports.NOTIMP = 'ENOTIMP';
	exports.SERVFAIL = 'ESERVFAIL';
	exports.TIMEOUT = 'ETIMEOUT';


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	var util = __webpack_require__(325);
	var VError = __webpack_require__(384);

	var BufferCursor = module.exports = function(buff, noAssert) {
	  if (!(this instanceof BufferCursor))
	    return new BufferCursor(buff, noAssert);

	  this._pos = 0;

	  this._noAssert = noAssert;

	  if (this._noAssert === undefined)
	    this._noAssert = true;

	  this.buffer = buff;
	  this.length = buff.length;
	};

	var BCO = BufferCursor.BufferCursorOverflow = function(length, pos, size) {
	  this.kind = 'BufferCursorOverflow';
	  this.length = length;
	  this.position = pos;
	  this.size = size;
	  VError.call(this,
	              'BufferCursorOverflow: length %d, position %d, size %d',
	              length,
	              pos,
	              size);
	};
	util.inherits(BCO, VError);

	BufferCursor.prototype._move = function(step) {
	  this._checkWrite(step);
	  this._pos += step;
	};

	BufferCursor.prototype._checkWrite = function(size) {
	  var shouldThrow = false;

	  var length = this.length;
	  var pos = this._pos;

	  if (size > length)
	    shouldThrow = true;

	  if (length - pos < size)
	    shouldThrow = true;

	  if (shouldThrow) {
	    var bco = new BCO(length,
	                      pos,
	                      size);
	    throw bco;
	  }
	}

	BufferCursor.prototype.seek = function(pos) {
	  if (pos < 0)
	    throw new VError(new RangeError('Cannot seek before start of buffer'),
	                     'Negative seek values not allowed: %d', pos);

	  if (pos > this.length)
	    throw new VError(new RangeError('Trying to seek beyond buffer'),
	                     'Requested %d position is beyond length %d',
	                     pos, this.length);

	  this._pos = pos;
	  return this;
	};

	BufferCursor.prototype.eof = function() {
	  return this._pos == this.length;
	};

	BufferCursor.prototype.toByteArray = function(method) {
	  var arr = [], i, part, count;

	  if (!method) {
	    method = 'readUInt8';
	    part = 1;
	  }

	  if (method.indexOf('16') > 0)
	    part = 2;
	  else if (method.indexOf('32') > 0)
	    part = 4;

	  count = this.length / part;

	  for (i = 0; i < this.buffer.length; i += part) {
	    arr.push(this.buffer[method](i));
	  }
	  return arr;
	};

	BufferCursor.prototype.tell = function() {
	  return this._pos;
	};

	BufferCursor.prototype.slice = function(length) {
	  var end, b;

	  if (length === undefined) {
	    end = this.length;
	  } else {
	    end = this._pos + length;
	  }

	  b = new BufferCursor(this.buffer.slice(this._pos, end));
	  this.seek(end);

	  return b;
	};

	BufferCursor.prototype.toString = function(encoding, length) {
	  var end, ret;

	  if (length === undefined) {
	    end = this.length;
	  } else {
	    end = this._pos + length;
	  }

	  if (!encoding) {
	    encoding = 'utf8';
	  }

	  ret = this.buffer.toString(encoding, this._pos, end);
	  this.seek(end);
	  return ret;
	};

	// This method doesn't need to _checkWrite because Buffer implicitly truncates
	// to the length of the buffer, it's the only method in Node core that behaves
	// this way by default
	BufferCursor.prototype.write = function(value, length, encoding) {
	  var end, ret;

	  ret = this.buffer.write(value, this._pos, length, encoding);
	  this._move(ret);
	  return this;
	};

	BufferCursor.prototype.fill = function(value, length) {
	  var end;

	  if (length === undefined) {
	    end = this.length;
	  } else {
	    end = this._pos + length;
	  }

	  this._checkWrite(end - this._pos);

	  this.buffer.fill(value, this._pos, end);
	  this.seek(end);
	  return this;
	};

	// This prototype is not entirely like the upstream Buffer.copy, instead it
	// is the target buffer, and accepts the source buffer -- since the target
	// buffer knows its starting position
	BufferCursor.prototype.copy = function copy(source, sourceStart, sourceEnd) {
	  var sBC = source instanceof BufferCursor;

	  if (isNaN(sourceEnd))
	    sourceEnd = source.length;

	  if (isNaN(sourceStart)) {
	    if (sBC)
	      sourceStart = source._pos;
	    else
	      sourceStart = 0;
	  }

	  var length = sourceEnd - sourceStart;

	  this._checkWrite(length);

	  var buf = sBC ? source.buffer : source;

	  buf.copy(this.buffer, this._pos, sourceStart, sourceEnd);

	  this._move(length);
	  return this;
	};

	BufferCursor.prototype.readUInt8 = function() {
	  var ret = this.buffer.readUInt8(this._pos, this._noAssert);
	  this._move(1);
	  return ret;
	};

	BufferCursor.prototype.readInt8 = function() {
	  var ret = this.buffer.readInt8(this._pos, this._noAssert);
	  this._move(1);
	  return ret;
	};

	BufferCursor.prototype.readInt16BE = function() {
	  var ret = this.buffer.readInt16BE(this._pos, this._noAssert);
	  this._move(2);
	  return ret;
	};

	BufferCursor.prototype.readInt16LE = function() {
	  var ret = this.buffer.readInt16LE(this._pos, this._noAssert);
	  this._move(2);
	  return ret;
	};

	BufferCursor.prototype.readUInt16BE = function() {
	  var ret = this.buffer.readUInt16BE(this._pos, this._noAssert);
	  this._move(2);
	  return ret;
	};

	BufferCursor.prototype.readUInt16LE = function() {
	  var ret = this.buffer.readUInt16LE(this._pos, this._noAssert);
	  this._move(2);
	  return ret;
	};

	BufferCursor.prototype.readUInt32LE = function() {
	  var ret = this.buffer.readUInt32LE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readUInt32BE = function() {
	  var ret = this.buffer.readUInt32BE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readInt32LE = function() {
	  var ret = this.buffer.readInt32LE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readInt32BE = function() {
	  var ret = this.buffer.readInt32BE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readFloatBE = function() {
	  var ret = this.buffer.readFloatBE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readFloatLE = function() {
	  var ret = this.buffer.readFloatLE(this._pos, this._noAssert);
	  this._move(4);
	  return ret;
	};

	BufferCursor.prototype.readDoubleBE = function() {
	  var ret = this.buffer.readDoubleBE(this._pos, this._noAssert);
	  this._move(8);
	  return ret;
	};

	BufferCursor.prototype.readDoubleLE = function() {
	  var ret = this.buffer.readDoubleLE(this._pos, this._noAssert);
	  this._move(8);
	  return ret;
	};

	BufferCursor.prototype.writeUInt8 = function(value) {
	  this._checkWrite(1);
	  this.buffer.writeUInt8(value, this._pos, this._noAssert);
	  this._move(1);
	  return this;
	};

	BufferCursor.prototype.writeInt8 = function(value) {
	  this._checkWrite(1);
	  this.buffer.writeInt8(value, this._pos, this._noAssert);
	  this._move(1);
	  return this;
	};

	BufferCursor.prototype.writeUInt16BE = function(value) {
	  this._checkWrite(2);
	  this.buffer.writeUInt16BE(value, this._pos, this._noAssert);
	  this._move(2);
	  return this;
	};

	BufferCursor.prototype.writeUInt16LE = function(value) {
	  this._checkWrite(2);
	  this.buffer.writeUInt16LE(value, this._pos, this._noAssert);
	  this._move(2);
	  return this;
	};

	BufferCursor.prototype.writeInt16BE = function(value) {
	  this._checkWrite(2);
	  this.buffer.writeInt16BE(value, this._pos, this._noAssert);
	  this._move(2);
	  return this;
	};

	BufferCursor.prototype.writeInt16LE = function(value) {
	  this._checkWrite(2);
	  this.buffer.writeInt16LE(value, this._pos, this._noAssert);
	  this._move(2);
	  return this;
	};

	BufferCursor.prototype.writeUInt32BE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeUInt32BE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeUInt32LE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeUInt32LE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeInt32BE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeInt32BE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeInt32LE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeInt32LE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeFloatBE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeFloatBE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeFloatLE = function(value) {
	  this._checkWrite(4);
	  this.buffer.writeFloatLE(value, this._pos, this._noAssert);
	  this._move(4);
	  return this;
	};

	BufferCursor.prototype.writeDoubleBE = function(value) {
	  this._checkWrite(8);
	  this.buffer.writeDoubleBE(value, this._pos, this._noAssert);
	  this._move(8);
	  return this;
	};

	BufferCursor.prototype.writeDoubleLE = function(value) {
	  this._checkWrite(8);
	  this.buffer.writeDoubleLE(value, this._pos, this._noAssert);
	  this._move(8);
	  return this;
	};


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * verror.js: richer JavaScript errors
	 */

	var mod_assert = __webpack_require__(385);
	var mod_util = __webpack_require__(325);

	var mod_extsprintf = __webpack_require__(386);

	/*
	 * Public interface
	 */

	/* So you can 'var VError = require('verror')' */
	module.exports = VError;
	/* For compatibility */
	VError.VError = VError;
	/* Other exported classes */
	VError.SError = SError;
	VError.WError = WError;
	VError.MultiError = MultiError;

	/*
	 * VError([cause], fmt[, arg...]): Like JavaScript's built-in Error class, but
	 * supports a "cause" argument (another error) and a printf-style message.  The
	 * cause argument can be null or omitted entirely.
	 *
	 * Examples:
	 *
	 * CODE                                    MESSAGE
	 * new VError('something bad happened')    "something bad happened"
	 * new VError('missing file: "%s"', file)  "missing file: "/etc/passwd"
	 *   with file = '/etc/passwd'
	 * new VError(err, 'open failed')          "open failed: file not found"
	 *   with err.message = 'file not found'
	 */
	function VError(options)
	{
		var args, obj, causedBy, ctor, tailmsg;

		/*
		 * This is a regrettable pattern, but JavaScript's built-in Error class
		 * is defined to work this way, so we allow the constructor to be called
		 * without "new".
		 */
		if (!(this instanceof VError)) {
			args = Array.prototype.slice.call(arguments, 0);
			obj = Object.create(VError.prototype);
			VError.apply(obj, arguments);
			return (obj);
		}

		if (options instanceof Error || typeof (options) === 'object') {
			args = Array.prototype.slice.call(arguments, 1);
		} else {
			args = Array.prototype.slice.call(arguments, 0);
			options = undefined;
		}

		/*
		 * extsprintf (which we invoke here with our caller's arguments in order
		 * to construct this Error's message) is strict in its interpretation of
		 * values to be processed by the "%s" specifier.  The value passed to
		 * extsprintf must actually be a string or something convertible to a
		 * String using .toString().  Passing other values (notably "null" and
		 * "undefined") is considered a programmer error.  The assumption is
		 * that if you actually want to print the string "null" or "undefined",
		 * then that's easy to do that when you're calling extsprintf; on the
		 * other hand, if you did NOT want that (i.e., there's actually a bug
		 * where the program assumes some variable is non-null and tries to
		 * print it, which might happen when constructing a packet or file in
		 * some specific format), then it's better to stop immediately than
		 * produce bogus output.
		 *
		 * However, sometimes the bug is only in the code calling VError, and a
		 * programmer might prefer to have the error message contain "null" or
		 * "undefined" rather than have the bug in the error path crash the
		 * program (making the first bug harder to identify).  For that reason,
		 * by default VError converts "null" or "undefined" arguments to their
		 * string representations and passes those to extsprintf.  Programmers
		 * desiring the strict behavior can use the SError class or pass the
		 * "strict" option to the VError constructor.
		 */
		if (!options || !options.strict) {
			args = args.map(function (a) {
				return (a === null ? 'null' :
				    a === undefined ? 'undefined' : a);
			});
		}

		tailmsg = args.length > 0 ?
		    mod_extsprintf.sprintf.apply(null, args) : '';
		this.jse_shortmsg = tailmsg;
		this.jse_summary = tailmsg;

		if (options) {
			causedBy = options.cause;

			if (!causedBy || !(options.cause instanceof Error))
				causedBy = options;

			if (causedBy && (causedBy instanceof Error)) {
				this.jse_cause = causedBy;
				this.jse_summary += ': ' + causedBy.message;
			}
		}

		this.message = this.jse_summary;
		Error.call(this, this.jse_summary);

		if (Error.captureStackTrace) {
			ctor = options ? options.constructorOpt : undefined;
			ctor = ctor || arguments.callee;
			Error.captureStackTrace(this, ctor);
		}

		return (this);
	}

	mod_util.inherits(VError, Error);
	VError.prototype.name = 'VError';

	VError.prototype.toString = function ve_toString()
	{
		var str = (this.hasOwnProperty('name') && this.name ||
			this.constructor.name || this.constructor.prototype.name);
		if (this.message)
			str += ': ' + this.message;

		return (str);
	};

	VError.prototype.cause = function ve_cause()
	{
		return (this.jse_cause);
	};


	/*
	 * SError is like VError, but stricter about types.  You cannot pass "null" or
	 * "undefined" as string arguments to the formatter.  Since SError is only a
	 * different function, not really a different class, we don't set
	 * SError.prototype.name.
	 */
	function SError()
	{
		var fmtargs, opts, key, args;

		opts = {};
		opts.constructorOpt = SError;

		if (arguments[0] instanceof Error) {
			opts.cause = arguments[0];
			fmtargs = Array.prototype.slice.call(arguments, 1);
		} else if (typeof (arguments[0]) == 'object') {
			for (key in arguments[0])
				opts[key] = arguments[0][key];
			fmtargs = Array.prototype.slice.call(arguments, 1);
		} else {
			fmtargs = Array.prototype.slice.call(arguments, 0);
		}

		opts.strict = true;
		args = [ opts ].concat(fmtargs);
		VError.apply(this, args);
	}

	mod_util.inherits(SError, VError);


	/*
	 * Represents a collection of errors for the purpose of consumers that generally
	 * only deal with one error.  Callers can extract the individual errors
	 * contained in this object, but may also just treat it as a normal single
	 * error, in which case a summary message will be printed.
	 */
	function MultiError(errors)
	{
		mod_assert.ok(errors.length > 0);
		this.ase_errors = errors;

		VError.call(this, errors[0], 'first of %d error%s',
		    errors.length, errors.length == 1 ? '' : 's');
	}

	mod_util.inherits(MultiError, VError);


	/*
	 * Like JavaScript's built-in Error class, but supports a "cause" argument which
	 * is wrapped, not "folded in" as with VError.	Accepts a printf-style message.
	 * The cause argument can be null.
	 */
	function WError(options)
	{
		Error.call(this);

		var args, cause, ctor;
		if (typeof (options) === 'object') {
			args = Array.prototype.slice.call(arguments, 1);
		} else {
			args = Array.prototype.slice.call(arguments, 0);
			options = undefined;
		}

		if (args.length > 0) {
			this.message = mod_extsprintf.sprintf.apply(null, args);
		} else {
			this.message = '';
		}

		if (options) {
			if (options instanceof Error) {
				cause = options;
			} else {
				cause = options.cause;
				ctor = options.constructorOpt;
			}
		}

		Error.captureStackTrace(this, ctor || this.constructor);
		if (cause)
			this.cause(cause);

	}

	mod_util.inherits(WError, Error);
	WError.prototype.name = 'WError';


	WError.prototype.toString = function we_toString()
	{
		var str = (this.hasOwnProperty('name') && this.name ||
			this.constructor.name || this.constructor.prototype.name);
		if (this.message)
			str += ': ' + this.message;
		if (this.we_cause && this.we_cause.message)
			str += '; caused by ' + this.we_cause.toString();

		return (str);
	};

	WError.prototype.cause = function we_cause(c)
	{
		if (c instanceof Error)
			this.we_cause = c;

		return (this.we_cause);
	};


/***/ },
/* 385 */
/***/ function(module, exports) {

	module.exports = require("assert");

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * extsprintf.js: extended POSIX-style sprintf
	 */

	var mod_assert = __webpack_require__(385);
	var mod_util = __webpack_require__(325);

	/*
	 * Public interface
	 */
	exports.sprintf = jsSprintf;
	exports.printf = jsPrintf;

	/*
	 * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
	 * exception when given a format string we don't understand, rather than
	 * ignoring it, so that we won't break existing programs if/when we go implement
	 * the rest of this.
	 *
	 * This implementation currently supports specifying
	 *	- field alignment ('-' flag),
	 * 	- zero-pad ('0' flag)
	 *	- always show numeric sign ('+' flag),
	 *	- field width
	 *	- conversions for strings, decimal integers, and floats (numbers).
	 *	- argument size specifiers.  These are all accepted but ignored, since
	 *	  Javascript has no notion of the physical size of an argument.
	 *
	 * Everything else is currently unsupported, most notably precision, unsigned
	 * numbers, non-decimal numbers, and characters.
	 */
	function jsSprintf(fmt)
	{
		var regex = [
		    '([^%]*)',				/* normal text */
		    '%',				/* start of format */
		    '([\'\\-+ #0]*?)',			/* flags (optional) */
		    '([1-9]\\d*)?',			/* width (optional) */
		    '(\\.([1-9]\\d*))?',		/* precision (optional) */
		    '[lhjztL]*?',			/* length mods (ignored) */
		    '([diouxXfFeEgGaAcCsSp%jr])'	/* conversion */
		].join('');

		var re = new RegExp(regex);
		var args = Array.prototype.slice.call(arguments, 1);
		var flags, width, precision, conversion;
		var left, pad, sign, arg, match;
		var ret = '';
		var argn = 1;

		mod_assert.equal('string', typeof (fmt));

		while ((match = re.exec(fmt)) !== null) {
			ret += match[1];
			fmt = fmt.substring(match[0].length);

			flags = match[2] || '';
			width = match[3] || 0;
			precision = match[4] || '';
			conversion = match[6];
			left = false;
			sign = false;
			pad = ' ';

			if (conversion == '%') {
				ret += '%';
				continue;
			}

			if (args.length === 0)
				throw (new Error('too few args to sprintf'));

			arg = args.shift();
			argn++;

			if (flags.match(/[\' #]/))
				throw (new Error(
				    'unsupported flags: ' + flags));

			if (precision.length > 0)
				throw (new Error(
				    'non-zero precision not supported'));

			if (flags.match(/-/))
				left = true;

			if (flags.match(/0/))
				pad = '0';

			if (flags.match(/\+/))
				sign = true;

			switch (conversion) {
			case 's':
				if (arg === undefined || arg === null)
					throw (new Error('argument ' + argn +
					    ': attempted to print undefined or null ' +
					    'as a string'));
				ret += doPad(pad, width, left, arg.toString());
				break;

			case 'd':
				arg = Math.floor(arg);
				/*jsl:fallthru*/
			case 'f':
				sign = sign && arg > 0 ? '+' : '';
				ret += sign + doPad(pad, width, left,
				    arg.toString());
				break;

			case 'x':
				ret += doPad(pad, width, left, arg.toString(16));
				break;

			case 'j': /* non-standard */
				if (width === 0)
					width = 10;
				ret += mod_util.inspect(arg, false, width);
				break;

			case 'r': /* non-standard */
				ret += dumpException(arg);
				break;

			default:
				throw (new Error('unsupported conversion: ' +
				    conversion));
			}
		}

		ret += fmt;
		return (ret);
	}

	function jsPrintf() {
		process.stdout.write(jsSprintf.apply(this, arguments));
	}

	function doPad(chr, width, left, str)
	{
		var ret = str;

		while (ret.length < width) {
			if (left)
				ret += chr;
			else
				ret = chr + ret;
		}

		return (ret);
	}

	/*
	 * This function dumps long stack traces for exceptions having a cause() method.
	 * See node-verror for an example.
	 */
	function dumpException(ex)
	{
		var ret;

		if (!(ex instanceof Error))
			throw (new Error(jsSprintf('invalid type for %%r: %j', ex)));

		/* Note that V8 prepends "ex.stack" with ex.toString(). */
		ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;

		if (ex.cause && typeof (ex.cause) === 'function') {
			var cex = ex.cause();
			if (cex) {
				ret += '\nCaused by: ' + dumpException(cex);
			}
		}

		return (ret);
	}


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root;

	  ipaddr = {};

	  root = this;

	  if ((typeof module !== "undefined" && module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }

	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };

	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var rangeName, rangeSubnets, subnet, _i, _len;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) {
	        subnet = rangeSubnets[_i];
	        if (address.match.apply(address, subnet)) {
	          return rangeName;
	        }
	      }
	    }
	    return defaultName;
	  };

	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var octet, _i, _len;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (_i = 0, _len = octets.length; _i < _len; _i++) {
	        octet = octets[_i];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet is a byte");
	        }
	      }
	      this.octets = octets;
	    }

	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };

	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };

	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };

	    IPv4.prototype.match = function(other, cidrRange) {
	      var _ref;
	      if (cidrRange === void 0) {
	        _ref = other, other = _ref[0], cidrRange = _ref[1];
	      }
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };

	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };

	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };

	    return IPv4;

	  })();

	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };

	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var _i, _len, _ref, _results;
	        _ref = match.slice(1, 6);
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(parseIntAuto(part));
	        }
	        return _results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var _i, _results;
	        _results = [];
	        for (shift = _i = 0; _i <= 24; shift = _i += 8) {
	          _results.push((value >> shift) & 0xff);
	        }
	        return _results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };

	  ipaddr.IPv6 = (function() {
	    function IPv6(parts) {
	      var part, _i, _len;
	      if (parts.length !== 8) {
	        throw new Error("ipaddr: ipv6 part count should be 8");
	      }
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit to two octets");
	        }
	      }
	      this.parts = parts;
	    }

	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };

	    IPv6.prototype.toString = function() {
	      var compactStringParts, part, pushPart, state, stringParts, _i, _len;
	      stringParts = (function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this);
	      compactStringParts = [];
	      pushPart = function(part) {
	        return compactStringParts.push(part);
	      };
	      state = 0;
	      for (_i = 0, _len = stringParts.length; _i < _len; _i++) {
	        part = stringParts[_i];
	        switch (state) {
	          case 0:
	            if (part === '0') {
	              pushPart('');
	            } else {
	              pushPart(part);
	            }
	            state = 1;
	            break;
	          case 1:
	            if (part === '0') {
	              state = 2;
	            } else {
	              pushPart(part);
	            }
	            break;
	          case 2:
	            if (part !== '0') {
	              pushPart('');
	              pushPart(part);
	              state = 3;
	            }
	            break;
	          case 3:
	            pushPart(part);
	        }
	      }
	      if (state === 2) {
	        pushPart('');
	        pushPart('');
	      }
	      return compactStringParts.join(":");
	    };

	    IPv6.prototype.toByteArray = function() {
	      var bytes, part, _i, _len, _ref;
	      bytes = [];
	      _ref = this.parts;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };

	    IPv6.prototype.toNormalizedString = function() {
	      var part;
	      return ((function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this)).join(":");
	    };

	    IPv6.prototype.match = function(other, cidrRange) {
	      var _ref;
	      if (cidrRange === void 0) {
	        _ref = other, other = _ref[0], cidrRange = _ref[1];
	      }
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };

	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };

	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };

	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, _ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };

	    return IPv6;

	  })();

	  ipv6Part = "(?:[0-9a-f]+::?)+";

	  ipv6Regexes = {
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + ("" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$"), 'i')
	  };

	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string.substr(0, 2) === '::') {
	      colonCount--;
	    }
	    if (string.substr(-2, 2) === '::') {
	      colonCount--;
	    }
	    if (colonCount > parts) {
	      return null;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    return (function() {
	      var _i, _len, _ref, _results;
	      _ref = string.split(":");
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        _results.push(parseInt(part, 16));
	      }
	      return _results;
	    })();
	  };

	  ipaddr.IPv6.parser = function(string) {
	    var match, parts;
	    if (string.match(ipv6Regexes['native'])) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      parts = expandIPv6(match[1].slice(0, -1), 6);
	      if (parts) {
	        parts.push(parseInt(match[2]) << 8 | parseInt(match[3]));
	        parts.push(parseInt(match[4]) << 8 | parseInt(match[5]));
	        return parts;
	      }
	    }
	    return null;
	  };

	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };

	  ipaddr.IPv4.isValid = function(string) {
	    var e;
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };

	  ipaddr.IPv6.isValid = function(string) {
	    var e;
	    if (typeof string === "string" && string.indexOf(":") === -1) {
	      return false;
	    }
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };

	  ipaddr.IPv4.parse = ipaddr.IPv6.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };

	  ipaddr.IPv4.parseCIDR = function(string) {
	    var maskLength, match;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 32) {
	        return [this.parse(match[1]), maskLength];
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
	  };

	  ipaddr.IPv6.parseCIDR = function(string) {
	    var maskLength, match;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 128) {
	        return [this.parse(match[1]), maskLength];
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
	  };

	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };

	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };

	  ipaddr.parseCIDR = function(string) {
	    var e;
	    try {
	      return ipaddr.IPv6.parseCIDR(string);
	    } catch (_error) {
	      e = _error;
	      try {
	        return ipaddr.IPv4.parseCIDR(string);
	      } catch (_error) {
	        e = _error;
	        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
	      }
	    }
	  };

	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var assert = __webpack_require__(385);

	var Heap = function(min) {
	  this.length = 0;
	  this.root = undefined;
	  if (min) {
	    this._comparator = this._smallest;
	  } else {
	    this._comparator = this._largest;
	  }
	};

	Heap.init = function(obj, key) {
	  obj._parent = null;
	  obj._left = null;
	  obj._right = null;
	  obj._key = key;
	  return obj;
	};

	Heap.prototype.count = function (node) {
	  if (!node) return 0;

	  var c = 1;

	  c += this.count(node._left);
	  c += this.count(node._right);

	  return c;
	};

	Heap.prototype.insert = function(obj, key) {
	  var insert, node;

	  this.length += 1;

	  node = Heap.init(obj, key);

	  if (!this.root) {
	    this.root = node;
	  } else {
	    insert = this._last();

	    node._parent = insert;

	    if (!insert._left)
	      insert._left = node;
	    else
	      insert._right = node;

	    this._up(node);
	  }

	  this._head();

	  return node;
	};

	Heap.prototype.pop = function() {
	  var ret, last;

	  if (!this.root)
	    return null;

	  return this.remove(this.root);
	};

	Heap.prototype.remove = function(node) {
	  var ret, last;

	  ret = node;
	  last = this._last();

	  if (last._right)
	    last = last._right;
	  else
	    last = last._left;

	  this.length -= 1;

	  if (!last) {
	    if (ret == this.root)
	      this.root = null;
	    return ret;
	  }

	  if (ret == last) {
	    if (ret._parent._left == node)
	      ret._parent._left = null;
	    else
	      ret._parent._right = null;
	    last = ret._parent;
	    ret._parent = null;
	  } else if (!ret._left && !ret._right) {
	    // we're trying to remove an element without any children and its not the last
	    // move the last under its parent and heap-up
	    if (last._parent._left == last) last._parent._left = null;
	    else last._parent._right = null;

	    if (ret._parent._left == ret) ret._parent._left = last;
	    else ret._parent._right = last;

	    last._parent = ret._parent;

	    ret._parent = null;

	    // TODO in this case we shouldn't later also do a down, but it should only visit once
	    this._up(last);
	  } else {
	    this._delete_swap(ret, last);
	  }

	  if (ret == this.root)
	    this.root = last;

	  this._down(last);
	  this._head();

	  return ret;
	};

	// TODO this probably isn't the most efficient way to ensure that we're always
	// at the root of the tree, but it works for now
	Heap.prototype._head = function() {
	  if (!this.root)
	    return;

	  var tmp = this.root;
	  while (tmp._parent) {
	    tmp = tmp._parent;
	  }

	  this.root = tmp;
	};

	// TODO is there a more efficient way to store this instead of an array?
	Heap.prototype._last = function() {
	  var path, pos, mod, insert;

	  pos = this.length;
	  path = [];
	  while (pos > 1) {
	    mod = pos % 2;
	    pos = Math.floor(pos / 2);
	    path.push(mod);
	  }

	  insert = this.root;

	  while (path.length > 1) {
	    pos = path.pop();
	    if (pos === 0)
	      insert = insert._left;
	    else
	      insert = insert._right;
	  }

	  return insert;
	};

	Heap.prototype._swap = function(a, b) {
	  var cleft, cright, tparent;

	  cleft = b._left;
	  cright = b._right;

	  if (a._parent) {
	    if (a._parent._left == a) a._parent._left = b;
	    else a._parent._right = b;
	  }

	  b._parent = a._parent;
	  a._parent = b;

	  // This assumes direct descendents
	  if (a._left == b) {
	    b._left = a;
	    b._right = a._right;
	    if (b._right) b._right._parent = b;
	  } else {
	    b._right = a;
	    b._left = a._left;
	    if (b._left) b._left._parent = b;
	  }

	  a._left = cleft;
	  a._right = cright;

	  if (a._left) a._left._parent = a;
	  if (a._right) a._right._parent = a;

	  assert.notEqual(a._parent, a, "A shouldn't refer to itself");
	  assert.notEqual(b._parent, b, "B shouldn't refer to itself");
	};

	Heap.prototype._delete_swap = function(a, b) {
	  if (a._left != b) b._left = a._left;
	  if (a._right != b) b._right = a._right;

	  if (b._parent._left == b) b._parent._left = null;
	  else b._parent._right = null;

	  if (a._parent) {
	    if (a._parent._left == a) a._parent._left = b;
	    else a._parent._right = b;
	  }

	  b._parent = a._parent;

	  if (b._left) b._left._parent = b;
	  if (b._right) b._right._parent = b;

	  a._parent = null;
	  a._left = null;
	  a._right = null;
	};

	Heap.prototype._smallest = function(heap) {
	  var small = heap;

	  if (heap._left && heap._key > heap._left._key) {
	    small = heap._left;
	  }

	  if (heap._right && small._key > heap._right._key) {
	    small = heap._right;
	  }

	  return small;
	};

	Heap.prototype._largest = function(heap) {
	  var large = heap;

	  if (heap._left && heap._key < heap._left._key) {
	    large = heap._left;
	  }

	  if (heap._right && large._key < heap._right._key) {
	    large = heap._right;
	  }

	  return large;
	};

	Heap.prototype._up = function(node) {
	  if (!node || !node._parent)
	    return;

	  var next = this._comparator(node._parent);

	  if (next != node._parent) {
	    this._swap(node._parent, node);
	    this._up(node);
	  }
	};

	Heap.prototype._down = function(node) {
	  if (!node)
	    return;

	  var next = this._comparator(node);
	  if (next != node) {
	    this._swap(node, next);
	    this._down(node);
	  }
	};

	var util = __webpack_require__(325);

	Heap.prototype.print = function(stream) {
	  stream.write('digraph {\n');
	  Heap._print(this.root, stream);
	  stream.write('}\n');
	};

	Heap._print = function(heap, stream) {
	  if (!heap) return;

	  if (heap._left) {
	    stream.write(util.format('' + heap._key, '->', heap._left._key, '\n'));
	    Heap._print(heap._left, stream);
	  }

	  if (heap._right) {
	    stream.write(util.format('' + heap._key, '->', heap._right._key, '\n'));
	    Heap._print(heap._right, stream);
	  }
	};

	module.exports = Heap;


/***/ },
/* 389 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	var dgram = __webpack_require__(379),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    ipaddr = __webpack_require__(391),
	    net = __webpack_require__(323),
	    util = __webpack_require__(325);

	var UDPSocket = exports.UDPSocket = function(socket, remote) {
	  this._socket = socket;
	  this._remote = remote;
	  this._buff = undefined;
	  this.base_size = 512;
	  this.bound = false;
	  this.unref = undefined;
	  this.ref = undefined;
	};
	util.inherits(UDPSocket, EventEmitter);

	UDPSocket.prototype.buffer = function(size) {
	  this._buff = new Buffer(size);
	  return this._buff;
	};

	UDPSocket.prototype.send = function(len) {
	  this._socket.send(this._buff, 0, len, this._remote.port,
	                    this._remote.address);
	};

	UDPSocket.prototype.bind = function(type) {
	  var self = this;

	  if (this.bound) {
	    this.emit('ready');
	  } else {
	    this._socket = dgram.createSocket(type);
	    this._socket.on('listening', function() {
	      self.bound = true;
	      if (self._socket.unref) {
	        self.unref = function() {
	          self._socket.unref();
	        }
	        self.ref = function() {
	          self._socket.ref();
	        }
	      }
	      self.emit('ready');
	    });

	    this._socket.on('message', this.emit.bind(this, 'message'));

	    this._socket.on('close', function() {
	      self.bound = false;
	      self.emit('close');
	    });

	    this._socket.bind();
	  }
	};

	UDPSocket.prototype.close = function() {
	  this._socket.close();
	};

	UDPSocket.prototype.remote = function(remote) {
	  return new UDPSocket(this._socket, remote);
	};

	var TCPSocket = exports.TCPSocket = function(socket) {
	  UDPSocket.call(this, socket);
	  this.base_size = 4096;
	  this._rest = undefined;
	};
	util.inherits(TCPSocket, UDPSocket);

	TCPSocket.prototype.buffer = function(size) {
	  this._buff = new Buffer(size + 2);
	  return this._buff.slice(2);
	};

	TCPSocket.prototype.send = function(len) {
	  this._buff.writeUInt16BE(len, 0);
	  this._socket.write(this._buff.slice(0, len + 2));
	};

	TCPSocket.prototype.bind = function(server) {
	  var self = this;

	  if (this.bound) {
	    this.emit('ready');
	  } else {
	    this._socket = net.connect(server.port, server.address);

	    this._socket.on('connect', function() {
	      self.bound = true;
	      if (self._socket.unref) {
	        self.unref = function() {
	          self._socket.unref();
	        }
	        self.ref = function() {
	          self._socket.ref();
	        }
	      }
	      self.emit('ready');
	    });

	    this._socket.on('timeout', function() {
	      self.bound = false;
	      self.emit('close');
	    });

	    this._socket.on('close', function() {
	      self.bound = false;
	      self.emit('close');
	    });

	    this.catchMessages();
	  }
	};

	TCPSocket.prototype.catchMessages = function() {
	  var self = this;
	  this._socket.on('data', function(data) {
	    var len, tmp;
	    if (!self._rest) {
	      self._rest = data;
	    } else {
	      tmp = new Buffer(self._rest.length + data.length);
	      self._rest.copy(tmp, 0);
	      data.copy(tmp, self._rest.length);
	      self._rest = tmp;
	    }
	    while (self._rest && self._rest.length > 2) {
	      len = self._rest.readUInt16BE(0);
	      if (self._rest.length >= len + 2) {
	        self.emit('message', self._rest.slice(2, len + 2), self);
	        self._rest = self._rest.slice(len + 2);
	      } else {
	        break;
	      }
	    }
	  });
	};

	TCPSocket.prototype.close = function() {
	  this._socket.end();
	};

	TCPSocket.prototype.remote = function() {
	  return this;
	};

	exports.reverseIP = function(ip) {
	  var address, kind, reverseip, parts;
	  address = ipaddr.parse(ip.split(/%/)[0]);
	  kind = address.kind();

	  switch (kind) {
	    case 'ipv4':
	      address = address.toByteArray();
	      address.reverse();
	      reverseip = address.join('.') + '.IN-ADDR.ARPA';
	      break;
	    case 'ipv6':
	      parts = [];
	      address.toNormalizedString().split(':').forEach(function(part) {
	        var i, pad = 4 - part.length;
	        for (i = 0; i < pad; i++) {
	          part = '0' + part;
	        }
	        part.split('').forEach(function(p) {
	          parts.push(p);
	        });
	      });
	      parts.reverse();
	      reverseip = parts.join('.') + '.IP6.ARPA';
	      break;
	  }

	  return reverseip;
	};


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root;

	  ipaddr = {};

	  root = this;

	  if ((typeof module !== "undefined" && module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }

	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };

	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var rangeName, rangeSubnets, subnet, _i, _len;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (toString.call(rangeSubnets[0]) !== '[object Array]') {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) {
	        subnet = rangeSubnets[_i];
	        if (address.match.apply(address, subnet)) {
	          return rangeName;
	        }
	      }
	    }
	    return defaultName;
	  };

	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var octet, _i, _len;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (_i = 0, _len = octets.length; _i < _len; _i++) {
	        octet = octets[_i];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet is a byte");
	        }
	      }
	      this.octets = octets;
	    }

	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };

	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };

	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };

	    IPv4.prototype.match = function(other, cidrRange) {
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };

	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };

	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };

	    return IPv4;

	  })();

	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };

	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var _i, _len, _ref, _results;
	        _ref = match.slice(1, 6);
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(parseIntAuto(part));
	        }
	        return _results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var _i, _results;
	        _results = [];
	        for (shift = _i = 0; _i <= 24; shift = _i += 8) {
	          _results.push((value >> shift) & 0xff);
	        }
	        return _results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };

	  ipaddr.IPv6 = (function() {
	    function IPv6(parts) {
	      var part, _i, _len;
	      if (parts.length !== 8) {
	        throw new Error("ipaddr: ipv6 part count should be 8");
	      }
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit to two octets");
	        }
	      }
	      this.parts = parts;
	    }

	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };

	    IPv6.prototype.toString = function() {
	      var compactStringParts, part, pushPart, state, stringParts, _i, _len;
	      stringParts = (function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this);
	      compactStringParts = [];
	      pushPart = function(part) {
	        return compactStringParts.push(part);
	      };
	      state = 0;
	      for (_i = 0, _len = stringParts.length; _i < _len; _i++) {
	        part = stringParts[_i];
	        switch (state) {
	          case 0:
	            if (part === '0') {
	              pushPart('');
	            } else {
	              pushPart(part);
	            }
	            state = 1;
	            break;
	          case 1:
	            if (part === '0') {
	              state = 2;
	            } else {
	              pushPart(part);
	            }
	            break;
	          case 2:
	            if (part !== '0') {
	              pushPart('');
	              pushPart(part);
	              state = 3;
	            }
	            break;
	          case 3:
	            pushPart(part);
	        }
	      }
	      if (state === 2) {
	        pushPart('');
	        pushPart('');
	      }
	      return compactStringParts.join(":");
	    };

	    IPv6.prototype.toByteArray = function() {
	      var bytes, part, _i, _len, _ref;
	      bytes = [];
	      _ref = this.parts;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };

	    IPv6.prototype.toNormalizedString = function() {
	      var part;
	      return ((function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this)).join(":");
	    };

	    IPv6.prototype.match = function(other, cidrRange) {
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };

	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };

	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };

	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, _ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };

	    return IPv6;

	  })();

	  ipv6Part = "(?:[0-9a-f]+::?)+";

	  ipv6Regexes = {
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + ("" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$"), 'i')
	  };

	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string[0] === ':') {
	      colonCount--;
	    }
	    if (string[string.length - 1] === ':') {
	      colonCount--;
	    }
	    if (colonCount > parts) {
	      return null;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    return (function() {
	      var _i, _len, _ref, _results;
	      _ref = string.split(":");
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        _results.push(parseInt(part, 16));
	      }
	      return _results;
	    })();
	  };

	  ipaddr.IPv6.parser = function(string) {
	    var match, parts;
	    if (string.match(ipv6Regexes['native'])) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      parts = expandIPv6(match[1].slice(0, -1), 6);
	      if (parts) {
	        parts.push(parseInt(match[2]) << 8 | parseInt(match[3]));
	        parts.push(parseInt(match[4]) << 8 | parseInt(match[5]));
	        return parts;
	      }
	    }
	    return null;
	  };

	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };

	  ipaddr.IPv4.isValid = ipaddr.IPv6.isValid = function(string) {
	    var e;
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };

	  ipaddr.IPv4.parse = ipaddr.IPv6.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };

	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };

	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };

	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(330)(module)))

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var dgram = __webpack_require__(379),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    net = __webpack_require__(323),
	    util = __webpack_require__(325),
	    UDPSocket = __webpack_require__(390).UDPSocket,
	    TCPSocket = __webpack_require__(390).TCPSocket,
	    Packet = __webpack_require__(393);

	var Server = function(opts) {
	  var self = this;

	  this._socket.on('listening', function() {
	    self.emit('listening');
	  });

	  this._socket.on('close', function() {
	    self.emit('close');
	  });

	  this._socket.on('error', function(err) {
	    self.emit('socketError', err, self._socket);
	  });
	};
	util.inherits(Server, EventEmitter);

	Server.prototype.close = function() {
	  this._socket.close();
	};

	Server.prototype.address = function() {
	  return this._socket.address();
	};

	Server.prototype.handleMessage = function(msg, remote, address) {
	  var request, response = new Packet(remote);

	  try {
	    request = Packet.parse(msg, remote);

	    request.address = address;

	    response.header.id = request.header.id;
	    response.header.qr = 1;
	    response.question = request.question;

	    this.emit('request', request, response);
	  } catch (e) {
	    this.emit('error', e, msg, response);
	  }
	};

	var UDPServer = function(opts) {
	  var self = this;

	  this._socket = dgram.createSocket(opts.dgram_type || 'udp4');

	  this._socket.on('message', function(msg, remote) {
	    self.handleMessage(msg, new UDPSocket(self._socket, remote), remote);
	  });

	  Server.call(this, opts);
	};
	util.inherits(UDPServer, Server);

	UDPServer.prototype.serve = function(port, address) {
	  this._socket.bind(port, address);
	};

	var TCPServer = function(opts) {
	  var self = this;

	  this._socket = net.createServer(function(client) {
	    var tcp = new TCPSocket(client);
	    var address = client.address();
	    tcp.on('message', function(msg, remote) {
	      self.handleMessage(msg, tcp, address);
	    });
	    tcp.catchMessages();
	  });

	  Server.call(this, opts);
	};
	util.inherits(TCPServer, Server);

	TCPServer.prototype.serve = function(port, address) {
	  this._socket.listen(port, address);
	};

	exports.createServer = function(opts) {
	  return new UDPServer(opts || {});
	};

	exports.createUDPServer = function(opts) {
	  return exports.createServer(opts);
	};

	exports.createTCPServer = function(opts) {
	  return new TCPServer(opts || {});
	};


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var NDP = __webpack_require__(380),
	    util = __webpack_require__(325);

	var Packet = module.exports = function(socket) {
	  NDP.call(this);
	  this.address = undefined;
	  this._socket = socket;
	};
	util.inherits(Packet, NDP);

	Packet.prototype.send = function() {
	  var buff, len, size;

	  if (typeof(this.edns_version) !== 'undefined') {
	    size = 4096;
	  }

	  this.payload = size = size || this._socket.base_size;

	  buff = this._socket.buffer(size);
	  len = Packet.write(buff, this);
	  this._socket.send(len);
	};

	Packet.parse = function (msg, socket) {
	  var p = NDP.parse(msg);
	  p._socket = socket;
	  return p;
	};

	Packet.write = NDP.write;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var ipaddr = __webpack_require__(391),
	    net = __webpack_require__(323),
	    util = __webpack_require__(325),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    PendingRequests = __webpack_require__(395),
	    Packet = __webpack_require__(393),
	    consts = __webpack_require__(380).consts,
	    utils = __webpack_require__(390),
	    platform = __webpack_require__(373);

	var A = consts.NAME_TO_QTYPE.A,
	    AAAA = consts.NAME_TO_QTYPE.AAAA,
	    MX = consts.NAME_TO_QTYPE.MX,
	    TXT = consts.NAME_TO_QTYPE.TXT,
	    NS = consts.NAME_TO_QTYPE.NS,
	    CNAME = consts.NAME_TO_QTYPE.CNAME,
	    SRV = consts.NAME_TO_QTYPE.SRV,
	    PTR = consts.NAME_TO_QTYPE.PTR,
	    TLSA = consts.NAME_TO_QTYPE.TLSA;

	var debug = function() {};

	if (process.env.NODE_DEBUG && process.env.NODE_DEBUG.match(/dns/)) {
	debug = function debug() {
	  var args = Array.prototype.slice.call(arguments);
	  console.error.apply(this, ['client', Date.now().toString()].concat(args));
	};
	}

	var Request = exports.Request = function(opts) {
	  if (!(this instanceof Request)) return new Request(opts);

	  this.question = opts.question;
	  this.server = opts.server;

	  if (typeof(this.server) === 'string' || this.server instanceof String)
	    this.server = { address: this.server, port: 53, type: 'udp'};

	  if (!this.server || !this.server.address || !net.isIP(this.server.address))
	    throw new Error('Server object must be supplied with at least address');

	  if (!this.server.type || ['udp', 'tcp'].indexOf(this.server.type) === -1)
	    this.server.type = 'udp';

	  if (!this.server.port)
	    this.server.port = 53;

	  this.timeout = opts.timeout || 4 * 1000;
	  this.try_edns = opts.try_edns || false;

	  this.fired = false;
	  this.id = undefined;

	  if (opts.cache || opts.cache === false) {
	    this.cache = opts.cache;
	  } else {
	    this.cache = platform.cache;
	  }
	  debug('request created', this.question);
	};
	util.inherits(Request, EventEmitter);

	Request.prototype.handle = function(err, answer, cached) {
	  if (!this.fired) {
	    debug('request handled', this.id, this.question);

	    if (!cached && this.cache && this.cache.store && answer) {
	      this.cache.store(answer);
	    }

	    this.emit('message', err, answer);
	    this.done();
	  }
	};

	Request.prototype.done = function() {
	  debug('request finished', this.id, this.question);
	  this.fired = true;
	  clearTimeout(this.timer_);
	  PendingRequests.remove(this);
	  this.emit('end');
	  this.id = undefined;
	};

	Request.prototype.handleTimeout = function() {
	  if (!this.fired) {
	    debug('request timedout', this.id, this.question);
	    this.emit('timeout');
	    this.done();
	  }
	};

	Request.prototype.error = function(err) {
	  if (!this.fired) {
	    debug('request error', err, this.id, this.question);
	    this.emit('error', err);
	    this.done();
	  }
	};

	Request.prototype.send = function() {
	  debug('request starting', this.question);
	  var self = this;

	  if (this.cache && this.cache.lookup) {
	    this.cache.lookup(this.question, function(results) {
	      var packet;

	      if (!results) {
	        self._send();
	      } else {
	        packet = new Packet();
	        packet.answer = results.slice();
	        self.handle(null, packet, true);
	      }
	    });
	  } else {
	    this._send();
	  }
	};

	Request.prototype._send = function() {
	  debug('request not in cache', this.question);
	  var self = this;

	  this.timer_ = setTimeout(function() {
	    self.handleTimeout();
	  }, this.timeout);

	  PendingRequests.send(self);
	};

	Request.prototype.cancel = function() {
	  debug('request cancelled', this.id, this.question);
	  this.emit('cancelled');
	  this.done();
	};

	var _queue = [];

	var sendQueued = function() {
	  debug('platform ready sending queued requests');
	  _queue.forEach(function(request) {
	    request.start();
	  });
	  _queue = [];
	};

	platform.on('ready', function() {
	  sendQueued();
	});

	if (platform.ready) {
	  sendQueued();
	}

	var Resolve = function Resolve(opts, cb) {
	  if (!(this instanceof Resolve)) return new Resolve(opts, cb);

	  this.opts = util._extend({
	    retryOnTruncate: true,
	  }, opts);

	  this._domain = opts.domain;
	  this._rrtype = opts.rrtype;

	  this._buildQuestion(this._domain);

	  this._started = false;
	  this._current_server = undefined;

	  this._server_list = [];

	  if (opts.remote) {
	    this._server_list.push({
	      address: opts.remote,
	      port: 53,
	      type: 'tcp',
	    });
	    this._server_list.push({
	      address: opts.remote,
	      port: 53,
	      type: 'udp',
	    });
	  }

	  this._request = undefined;
	  this._type = 'getHostByName';
	  this._cb = cb;

	  if (!platform.ready) {
	    _queue.push(this);
	  } else {
	    this.start();
	  }
	};
	util.inherits(Resolve, EventEmitter);

	Resolve.prototype.cancel = function() {
	  if (this._request) {
	    this._request.cancel();
	  }
	};

	Resolve.prototype._buildQuestion = function(name) {
	  debug('building question', name);
	  this.question = {
	    type: this._rrtype,
	    class: consts.NAME_TO_QCLASS.IN,
	    name: name
	  };
	};
	exports.Resolve = Resolve;

	Resolve.prototype._emit = function(err, answer) {
	  debug('resolve end', this._domain);
	  var self = this;
	  process.nextTick(function() {
	    if (err) {
	      err.syscall = self._type;
	    }
	    self._cb(err, answer);
	  });
	};

	Resolve.prototype._fillServers = function() {
	  debug('resolve filling servers', this._domain);
	  var tries = 0, s, t, u, slist;

	  slist = platform.name_servers;

	  while (this._server_list.length < platform.attempts) {
	    s = slist[tries % slist.length];

	    u = {
	      address: s.address,
	      port: s.port,
	      type: 'udp'
	    };

	    t = {
	      address: s.address,
	      port: s.port,
	      type: 'tcp'
	    };

	    this._server_list.push(u);
	    this._server_list.push(t);

	    tries += 1;
	  }

	  this._server_list.reverse();
	};

	Resolve.prototype._popServer = function() {
	  debug('resolve pop server', this._current_server, this._domain);
	  this._server_list.splice(0, 1, this._current_server);
	};

	Resolve.prototype._preStart = function() {
	  if (!this._started) {
	    this._started = new Date().getTime();
	    this.try_edns = platform.edns;

	    if (!this._server_list.length)
	      this._fillServers();
	  }
	};

	Resolve.prototype._shouldContinue = function() {
	  debug('resolve should continue', this._server_list.length, this._domain);
	  return this._server_list.length;
	};

	Resolve.prototype._nextQuestion = function() {
	  debug('resolve next question', this._domain);
	};

	Resolve.prototype.start = function() {
	  if (!this._started) {
	    this._preStart();
	  }

	  if (this._server_list.length === 0) {
	    debug('resolve no more servers', this._domain);
	    this.handleTimeout();
	  } else {
	    this._current_server = this._server_list.pop();
	    debug('resolve start', this._current_server, this._domain);

	    this._request = Request({
	      question: this.question,
	      server: this._current_server,
	      timeout: platform.timeout,
	      try_edns: this.try_edns
	    });

	    this._request.on('timeout', this._handleTimeout.bind(this));
	    this._request.on('message', this._handle.bind(this));
	    this._request.on('error', this._handle.bind(this));

	    this._request.send();
	  }
	};

	var NOERROR = consts.NAME_TO_RCODE.NOERROR,
	    SERVFAIL = consts.NAME_TO_RCODE.SERVFAIL,
	    NOTFOUND = consts.NAME_TO_RCODE.NOTFOUND,
	    FORMERR = consts.NAME_TO_RCODE.FORMERR;

	Resolve.prototype._handle = function(err, answer) {
	  var rcode, errno;

	  if (answer) {
	    rcode = answer.header.rcode;
	  }

	  debug('resolve handle', rcode, this._domain);

	  switch (rcode) {
	    case NOERROR:
	      // answer trucated retry with tcp
	      //console.log(answer);
	      if (answer.header.tc &&
	          this.opts.retryOnTruncate &&
	          this._shouldContinue()) {
	        debug('truncated', this._domain, answer);
	        this.emit('truncated', err, answer);
	        
	        // remove udp servers
	        this._server_list = this._server_list.filter(function(server) {
	          return server.type === 'tcp';
	        });
	        answer = undefined;
	      }
	      break;
	    case SERVFAIL:
	      if (this._shouldContinue()) {
	        this._nextQuestion();
	        //this._popServer();
	      } else {
	        errno = consts.SERVFAIL;
	      }
	      answer = undefined;
	      break;
	    case NOTFOUND:
	      if (this._shouldContinue()) {
	        this._nextQuestion();
	      } else {
	        errno = consts.NOTFOUND;
	      }
	      answer = undefined;
	      break;
	    case FORMERR:
	      if (this.try_edns) {
	        this.try_edns = false;
	        //this._popServer();
	      } else {
	        errno = consts.FORMERR;
	      }
	      answer = undefined;
	      break;
	    default:
	      if (!err) {
	        errno = consts.RCODE_TO_NAME[rcode];
	        answer = undefined;
	      } else {
	        errno = consts.NOTFOUND;
	      }
	      break;
	  }

	  if (errno || answer) {
	    if (errno) {
	      err = new Error(this._type + ' ' + errno);
	      err.errno = err.code = errno;
	    }
	    this._emit(err, answer);
	  } else {
	    this.start();
	  }
	};

	Resolve.prototype._handleTimeout = function() {
	  var err;

	  if (this._server_list.length === 0) {
	    debug('resolve timeout no more servers', this._domain);
	    err = new Error(this._type + ' ' + consts.TIMEOUT);
	    err.errno = consts.TIMEOUT;
	    this._emit(err, undefined);
	  } else {
	    debug('resolve timeout continue', this._domain);
	    this.start();
	  }
	};

	var resolve = function(domain, rrtype, ip, callback) {
	  var res;

	  if (!callback) {
	    callback = ip;
	    ip = undefined;
	  }

	  if (!callback) {
	    callback = rrtype;
	    rrtype = undefined;
	  }

	  rrtype = consts.NAME_TO_QTYPE[rrtype || 'A'];

	  if (rrtype === PTR) {
	    return reverse(domain, callback);
	  }

	  var opts = {
	    domain: domain,
	    rrtype: rrtype,
	    remote: ip,
	  };

	  res = new Resolve(opts);

	  res._cb = function(err, response) {
	    var ret = [], i, a;

	    if (err) {
	      callback(err, response);
	      return;
	    }

	    for (i = 0; i < response.answer.length; i++) {
	      a = response.answer[i];
	      if (a.type === rrtype) {
	        switch (rrtype) {
	          case A:
	          case AAAA:
	            ret.push(a.address);
	            break;
	          case consts.NAME_TO_QTYPE.MX:
	            ret.push({
	              priority: a.priority,
	              exchange: a.exchange
	            });
	            break;
	          case TXT:
	          case NS:
	          case CNAME:
	          case PTR:
	            ret.push(a.data);
	            break;
	          case SRV:
	            ret.push({
	              priority: a.priority,
	              weight: a.weight,
	              port: a.port,
	              name: a.target
	            });
	            break;
	          default:
	            ret.push(a);
	            break;
	        }
	      }
	    }

	    if (ret.length === 0) {
	      ret = undefined;
	    }

	    callback(err, ret);
	  };

	  return res;
	};
	exports.resolve = resolve;

	var resolve4 = function(domain, callback) {
	  return resolve(domain, 'A', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolve4 = resolve4;

	var resolve6 = function(domain, callback) {
	  return resolve(domain, 'AAAA', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolve6 = resolve6;

	var resolveMx = function(domain, callback) {
	  return resolve(domain, 'MX', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveMx = resolveMx;

	var resolveTxt = function(domain, callback) {
	  return resolve(domain, 'TXT', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveTxt = resolveTxt;

	var resolveSrv = function(domain, callback) {
	  return resolve(domain, 'SRV', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveSrv = resolveSrv;

	var resolveNs = function(domain, callback) {
	  return resolve(domain, 'NS', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveNs = resolveNs;

	var resolveCname = function(domain, callback) {
	  return resolve(domain, 'CNAME', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveCname = resolveCname;

	var resolveTlsa = function(domain, callback) {
	  return resolve(domain, 'TLSA', function(err, results) {
	    callback(err, results);
	  });
	};
	exports.resolveTlsa = resolveTlsa;

	var reverse = function(ip, callback) {
	  var error, opts, res;

	  if (!net.isIP(ip)) {
	    error = new Error('getHostByAddr ENOTIMP');
	    error.errno = error.code = 'ENOTIMP';
	    throw error;
	  }

	  opts = {
	    domain: utils.reverseIP(ip),
	    rrtype: PTR
	  };

	  res = new Lookup(opts);

	  res._cb = function(err, response) {
	    var results = [];

	    if (response) {
	      response.answer.forEach(function(a) {
	        if (a.type === PTR) {
	          results.push(a.data);
	        }
	      });
	    }

	    if (results.length === 0) {
	      results = undefined;
	    }

	    callback(err, results);
	  };

	  return res;
	};
	exports.reverse = reverse;

	var Lookup = function(opts) {
	  Resolve.call(this, opts);
	  this._type = 'getaddrinfo';
	};
	util.inherits(Lookup, Resolve);

	Lookup.prototype.start = function() {
	  var self = this;

	  if (!this._started) {
	    this._search_path = platform.search_path.slice(0);
	    this._preStart();
	  }

	  platform.hosts.lookup(this.question, function(results) {
	    var packet;
	    if (results && results.length) {
	      debug('Lookup in hosts', results);
	      packet = new Packet();
	      packet.answer = results.slice();
	      self._emit(null, packet);
	    } else {
	      debug('Lookup not in hosts');
	      Resolve.prototype.start.call(self);
	    }
	  });
	};

	Lookup.prototype._shouldContinue = function() {
	  debug('Lookup should continue', this._server_list.length,
	        this._search_path.length);
	  return this._server_list.length && this._search_path.length;
	};

	Lookup.prototype._nextQuestion = function() {
	  debug('Lookup next question');
	  this._buildQuestion([this._domain, this._search_path.pop()].join('.'));
	};

	var lookup = function(domain, family, callback) {
	  var rrtype, revip, res;

	  if (!callback) {
	    callback = family;
	    family = undefined;
	  }

	  if (!family) {
	    family = 4;
	  }

	  revip = net.isIP(domain);

	  if (revip === 4 || revip === 6) {
	    process.nextTick(function() {
	      callback(null, domain, revip);
	    });
	    return {};
	  }

	  if (!domain) {
	    process.nextTick(function() {
	      callback(null, null, family);
	    });
	    return {};
	  }

	  rrtype = consts.FAMILY_TO_QTYPE[family];

	  var opts = {
	    domain: domain,
	    rrtype: rrtype
	  };

	  res = new Lookup(opts);

	  res._cb = function(err, response) {
	    var i, afamily, address, a, all;

	    if (err) {
	      callback(err, undefined, undefined);
	      return;
	    }

	    all = response.answer.concat(response.additional);

	    for (i = 0; i < all.length; i++) {
	      a = all[i];

	      if (a.type === A || a.type === AAAA) {
	        afamily = consts.QTYPE_TO_FAMILY[a.type];
	        address = a.address;
	        break;
	      }
	    }

	    callback(err, address, afamily);
	  };

	  return res;
	};
	exports.lookup = lookup;


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE

	'use strict';

	var net = __webpack_require__(323),
	    util = __webpack_require__(325),
	    EventEmitter = __webpack_require__(374).EventEmitter,
	    Packet = __webpack_require__(393),
	    consts = __webpack_require__(380).consts,
	    UDPSocket = __webpack_require__(390).UDPSocket,
	    TCPSocket = __webpack_require__(390).TCPSocket;

	var debug = function() {
	  //var args = Array.prototype.slice.call(arguments);
	  //console.log.apply(this, ['pending', Date.now().toString()].concat(args));
	};

	var SocketQueue = function(socket, server) {
	  this._active = {};
	  this._active_count = 0;
	  this._pending = [];

	  debug('created', server);

	  this._server = server;

	  this._socket = socket;
	  this._socket.on('ready', this._onlisten.bind(this));
	  this._socket.on('message', this._onmessage.bind(this));
	  this._socket.on('close', this._onclose.bind(this));
	  this._socket.bind(server);

	  this._refd = true;
	};
	util.inherits(SocketQueue, EventEmitter);

	SocketQueue.prototype.send = function(request) {
	  debug('added', request.question);
	  this._pending.push(request);
	  this._fill();
	};

	SocketQueue.prototype.remove = function(request) {
	  var req = this._active[request.id];
	  var idx = this._pending.indexOf(request);

	  if (req) {
	    delete this._active[request.id];
	    this._active_count -= 1;
	    this._fill();
	  }

	  if (idx > -1)
	    this._pending.splice(idx, 1);

	  this._unref();
	};

	SocketQueue.prototype.close = function() {
	  debug('closing', this._server);
	  this._socket.close();
	  this._socket = undefined;
	  this.emit('close');
	};

	SocketQueue.prototype._fill = function() {
	  debug('pre fill, active:', this._active_count, 'pending:',
	        this._pending.length);

	  while (this._listening && this._pending.length &&
	         this._active_count < 100) {
	    this._dequeue();
	  }

	  debug('post fill, active:', this._active_count, 'pending:',
	        this._pending.length);
	};

	var random_integer = function() {
	  return Math.floor(Math.random() * 50000 + 1);
	};

	SocketQueue.prototype._dequeue = function() {
	  var req = this._pending.pop();
	  var id, packet, dnssocket;

	  if (req) {
	    id = random_integer();

	    while (this._active[id])
	      id = random_integer();

	    debug('sending', req.question, id);

	    req.id = id;
	    this._active[id] = req;
	    this._active_count += 1;

	    try {
	      packet = new Packet(this._socket.remote(req.server));
	      packet.header.id = id;
	      packet.header.rd = 1;

	      if (req.try_edns) {
	        packet.edns_version = 0;
	        //TODO when we support dnssec
	        //packet.do = 1
	      }

	      packet.question.push(req.question);
	      packet.send();

	      this._ref();
	    } catch (e) {
	      req.error(e);
	    }
	  }
	};

	SocketQueue.prototype._onmessage = function(msg, remote) {
	  var req, packet;

	  debug('got a message', this._server);

	  try {
	    packet = Packet.parse(msg, remote);
	    req = this._active[packet.header.id];
	    debug('associated message', packet.header.id);
	  } catch (e) {
	    debug('error parsing packet', e);
	  }

	  if (req) {
	    delete this._active[packet.header.id];
	    this._active_count -= 1;
	    req.handle(null, packet);
	    this._fill();
	  }

	  this._unref();
	};

	SocketQueue.prototype._unref = function() {
	  var self = this;
	  this._refd = false;

	  if (this._active_count <= 0) {
	    if (this._socket.unref) {
	      debug('unrefd socket');
	      this._socket.unref();
	    } else if (!this._timer) {
	      this._timer = setTimeout(function() {
	        self.close();
	      }, 300);
	    }
	  }
	};

	SocketQueue.prototype._ref = function() {
	  this._refd = true;
	  if (this._socket.ref) {
	    debug('refd socket');
	    this._socket.ref();
	  } else if (this._timer) {
	    clearTimeout(this._timer);
	    this._timer = null;
	  }
	};

	SocketQueue.prototype._onlisten = function() {
	  this._unref();
	  this._listening = true;
	  this._fill();
	};

	SocketQueue.prototype._onclose = function() {
	  var req, err, self = this;

	  debug('socket closed', this);

	  this._listening = false;

	  err = new Error('getHostByName ' + consts.TIMEOUT);
	  err.errno = consts.TIMEOUT;

	  while (this._pending.length) {
	    req = this._pending.pop();
	    req.error(err);
	  }

	  Object.keys(this._active).forEach(function(key) {
	    var req = self._active[key];
	    req.error(err);
	    delete self._active[key];
	    self._active_count -= 1;
	  });
	};

	var serverHash = function(server) {
	  if (server.type === 'tcp')
	    return server.address + ':' + server.port;
	  else
	    return 'udp' + net.isIP(server.address);
	};

	var _sockets = {};

	exports.send = function(request) {
	  var hash = serverHash(request.server);
	  var socket = _sockets[hash];

	  if (!socket) {
	    switch (hash) {
	      case 'udp4':
	      case 'udp6':
	        socket = new SocketQueue(new UDPSocket(), hash);
	        break;
	      default:
	        socket = new SocketQueue(new TCPSocket(), request.server);
	        break;
	    }

	    socket.on('close', function() {
	      delete _sockets[hash];
	    });

	    _sockets[hash] = socket;
	  }

	  socket.send(request);
	};

	exports.remove = function(request) {
	  var hash = serverHash(request.server);
	  var socket = _sockets[hash];
	  if (socket) {
	    socket.remove(request);
	  }
	};


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = function (router) {

	  var app = express();

	  app.set("views", "./www");

	  app.use(__webpack_require__(397)());

	  // .post( `/cookie`, ( request, response, next ) => {
	  // 	response.status( 200 )
	  // 	for ( let q in request.query ) if ( Object.prototype.hasOwnProperty.call( request.query, q ) ) {
	  // 		let value = request.query[ q ]
	  // 		if ( value )
	  // 			response.cookie( q, value, cookieInfinite )
	  // 		else
	  // 			response.clearCookie( q )
	  // 	}
	  // 	response.end()
	  // } )

	  app.post("/log", function (request, response, next) {
	    log.fatal("client", global.decodeURIComponent(request.url.slice(5)).replace(/<span\s+style\=`color\:(\w+);`>(.*?)<\/span>/g, function (_, color, text) {
	      return text[color];
	    }) + (" " + getUserAgentName(request.headers["user-agent"])));
	    response.status(200).end();
	  });

	  app.use(_http_log2.default);

	  app.post("/info", function () {
	    var fn = path.resolve("./log/clients.json");
	    var clients = (0, _ra2.default)({
	      uid: "",
	      json: null,
	      get updateFile() {
	        return regeneratorRuntime.mark(function _callee() {
	          var file, obj, i;
	          return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) switch (_context.prev = _context.next) {
	              case 0:
	                clients.uid;
	                file = void 0;
	                _context.prev = 2;
	                _context.next = 5;
	                return fs.mkdirAsync(path.dirname(fn));

	              case 5:
	                _context.next = 9;
	                break;

	              case 7:
	                _context.prev = 7;
	                _context.t0 = _context["catch"](2);

	              case 9:
	                _context.prev = 9;
	                _context.t1 = JSON;
	                _context.next = 13;
	                return fs.readFileAsync(fn);

	              case 13:
	                _context.t2 = _context.sent;
	                _context.t3 = String(_context.t2);
	                file = _context.t1.parse.call(_context.t1, _context.t3);
	                _context.next = 20;
	                break;

	              case 18:
	                _context.prev = 18;
	                _context.t4 = _context["catch"](9);

	              case 20:
	                if (!file) file = {};
	                obj = clients.json;

	                clients.json = {};
	                for (i in obj) {
	                  if (Object.prototype.hasOwnProperty.call(obj, i)) file[i] = obj[i];
	                }_context.prev = 24;
	                _context.next = 27;
	                return fs.writeFileAsync(fn, JSON.stringify(file, null, "   "));

	              case 27:
	                _context.next = 31;
	                break;

	              case 29:
	                _context.prev = 29;
	                _context.t5 = _context["catch"](24);

	              case 31:
	              case "end":
	                return _context.stop();
	            }
	          }, _callee, this, [[2, 7], [9, 18], [24, 29]]);
	        }).call(this);
	      }
	    });
	    clients.json = {};

	    return function (request, response, next) {
	      var info = global.decodeURIComponent(request.url.slice(6));
	      clients.json[info] = String(new Date());
	      clients.uid = (0, _uid2.default)();
	      response.status(200).end();
	    };
	  }());

	  app.use(__webpack_require__(401)({ threshold: 0 }));

	  if (router) router(app);

	  app.rewrite(/^\/index\d+\.html/, function (_) {
	    return "/index.html";
	  }); // debugger

	  (0, _http_static2.default)(app);

	  return app;
	};

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _path = __webpack_require__(389);

	var path = _interopRequireWildcard(_path);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _fs = __webpack_require__(350);

	var fs = _interopRequireWildcard(_fs);

	var _ra = __webpack_require__(420);

	var _ra2 = _interopRequireDefault(_ra);

	var _localUtils = __webpack_require__(332);

	var lu = _interopRequireWildcard(_localUtils);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _http_static = __webpack_require__(423);

	var _http_static2 = _interopRequireDefault(_http_static);

	var _http_log = __webpack_require__(502);

	var _http_log2 = _interopRequireDefault(_http_log);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_bluebird2.default.promisifyAll(fs);

	var express = __webpack_require__(431);
	var log = __webpack_require__(498);
	__webpack_require__(492);

	var userAgents = [/\((iPhone);/, /\s(Android)\s([\d\.]+).*\s(Chrome\/\d+)/, /\s(Chrome\/\d+)/];

	function getUserAgentName(ua) {
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = userAgents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var test = _step.value;

	      var match = ua.match(test);
	      if (match) {
	        var ret = [];
	        for (var i = 1; i in match; ++i) {
	          if (match[i]) ret.push(match[i]);
	        }if (ret.length) return ret.join(" ");else if (ret[0]) return ret[0];
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return ua;
	}

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * cookie-parser
	 * Copyright(c) 2014 TJ Holowaychuk
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var cookie = __webpack_require__(398);
	var signature = __webpack_require__(399);

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = cookieParser;
	module.exports.JSONCookie = JSONCookie;
	module.exports.JSONCookies = JSONCookies;
	module.exports.signedCookie = signedCookie;
	module.exports.signedCookies = signedCookies;

	/**
	 * Parse Cookie header and populate `req.cookies`
	 * with an object keyed by the cookie names.
	 *
	 * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).
	 * @param {Object} [options]
	 * @return {Function}
	 * @public
	 */

	function cookieParser(secret, options) {
	  return function cookieParser(req, res, next) {
	    if (req.cookies) {
	      return next();
	    }

	    var cookies = req.headers.cookie;
	    var secrets = !secret || Array.isArray(secret)
	      ? (secret || [])
	      : [secret];

	    req.secret = secrets[0];
	    req.cookies = Object.create(null);
	    req.signedCookies = Object.create(null);

	    // no cookies
	    if (!cookies) {
	      return next();
	    }

	    req.cookies = cookie.parse(cookies, options);

	    // parse signed cookies
	    if (secrets.length !== 0) {
	      req.signedCookies = signedCookies(req.cookies, secrets);
	      req.signedCookies = JSONCookies(req.signedCookies);
	    }

	    // parse JSON cookies
	    req.cookies = JSONCookies(req.cookies);

	    next();
	  };
	}

	/**
	 * Parse JSON cookie string.
	 *
	 * @param {String} str
	 * @return {Object} Parsed object or undefined if not json cookie
	 * @public
	 */

	function JSONCookie(str) {
	  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {
	    return undefined;
	  }

	  try {
	    return JSON.parse(str.slice(2));
	  } catch (err) {
	    return undefined;
	  }
	}

	/**
	 * Parse JSON cookies.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @public
	 */

	function JSONCookies(obj) {
	  var cookies = Object.keys(obj);
	  var key;
	  var val;

	  for (var i = 0; i < cookies.length; i++) {
	    key = cookies[i];
	    val = JSONCookie(obj[key]);

	    if (val) {
	      obj[key] = val;
	    }
	  }

	  return obj;
	}

	/**
	 * Parse a signed cookie string, return the decoded value.
	 *
	 * @param {String} str signed cookie string
	 * @param {string|array} secret
	 * @return {String} decoded value
	 * @public
	 */

	function signedCookie(str, secret) {
	  if (typeof str !== 'string') {
	    return undefined;
	  }

	  if (str.substr(0, 2) !== 's:') {
	    return str;
	  }

	  var secrets = !secret || Array.isArray(secret)
	    ? (secret || [])
	    : [secret];

	  for (var i = 0; i < secrets.length; i++) {
	    var val = signature.unsign(str.slice(2), secrets[i]);

	    if (val !== false) {
	      return val;
	    }
	  }

	  return false;
	}

	/**
	 * Parse signed cookies, returning an object containing the decoded key/value
	 * pairs, while removing the signed key from obj.
	 *
	 * @param {Object} obj
	 * @param {string|array} secret
	 * @return {Object}
	 * @public
	 */

	function signedCookies(obj, secret) {
	  var cookies = Object.keys(obj);
	  var dec;
	  var key;
	  var ret = Object.create(null);
	  var val;

	  for (var i = 0; i < cookies.length; i++) {
	    key = cookies[i];
	    val = obj[key];
	    dec = signedCookie(val, secret);

	    if (val !== dec) {
	      ret[key] = dec;
	      delete obj[key];
	    }
	  }

	  return ret;
	}


/***/ },
/* 398 */
/***/ function(module, exports) {

	/*!
	 * cookie
	 * Copyright(c) 2012-2014 Roman Shtylman
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 * @public
	 */

	exports.parse = parse;
	exports.serialize = serialize;

	/**
	 * Module variables.
	 * @private
	 */

	var decode = decodeURIComponent;
	var encode = encodeURIComponent;
	var pairSplitRegExp = /; */;

	/**
	 * RegExp to match field-content in RFC 7230 sec 3.2
	 *
	 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	 * field-vchar   = VCHAR / obs-text
	 * obs-text      = %x80-FF
	 */

	var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

	/**
	 * Parse a cookie header.
	 *
	 * Parse the given cookie header string into an object
	 * The object has the various cookies as keys(names) => values
	 *
	 * @param {string} str
	 * @param {object} [options]
	 * @return {object}
	 * @public
	 */

	function parse(str, options) {
	  if (typeof str !== 'string') {
	    throw new TypeError('argument str must be a string');
	  }

	  var obj = {}
	  var opt = options || {};
	  var pairs = str.split(pairSplitRegExp);
	  var dec = opt.decode || decode;

	  pairs.forEach(function(pair) {
	    var eq_idx = pair.indexOf('=')

	    // skip things that don't look like key=value
	    if (eq_idx < 0) {
	      return;
	    }

	    var key = pair.substr(0, eq_idx).trim()
	    var val = pair.substr(++eq_idx, pair.length).trim();

	    // quoted values
	    if ('"' == val[0]) {
	      val = val.slice(1, -1);
	    }

	    // only assign once
	    if (undefined == obj[key]) {
	      obj[key] = tryDecode(val, dec);
	    }
	  });

	  return obj;
	}

	/**
	 * Serialize data into a cookie header.
	 *
	 * Serialize the a name value pair into a cookie string suitable for
	 * http headers. An optional options object specified cookie parameters.
	 *
	 * serialize('foo', 'bar', { httpOnly: true })
	 *   => "foo=bar; httpOnly"
	 *
	 * @param {string} name
	 * @param {string} val
	 * @param {object} [options]
	 * @return {string}
	 * @public
	 */

	function serialize(name, val, options) {
	  var opt = options || {};
	  var enc = opt.encode || encode;

	  if (!fieldContentRegExp.test(name)) {
	    throw new TypeError('argument name is invalid');
	  }

	  var value = enc(val);

	  if (value && !fieldContentRegExp.test(value)) {
	    throw new TypeError('argument val is invalid');
	  }

	  var pairs = [name + '=' + value];

	  if (null != opt.maxAge) {
	    var maxAge = opt.maxAge - 0;
	    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
	    pairs.push('Max-Age=' + Math.floor(maxAge));
	  }

	  if (opt.domain) {
	    if (!fieldContentRegExp.test(opt.domain)) {
	      throw new TypeError('option domain is invalid');
	    }

	    pairs.push('Domain=' + opt.domain);
	  }

	  if (opt.path) {
	    if (!fieldContentRegExp.test(opt.path)) {
	      throw new TypeError('option path is invalid');
	    }

	    pairs.push('Path=' + opt.path);
	  }

	  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());
	  if (opt.httpOnly) pairs.push('HttpOnly');
	  if (opt.secure) pairs.push('Secure');
	  if (opt.firstPartyOnly) pairs.push('First-Party-Only');

	  return pairs.join('; ');
	}

	/**
	 * Try decoding a string using a decoding function.
	 *
	 * @param {string} str
	 * @param {function} decode
	 * @private
	 */

	function tryDecode(str, decode) {
	  try {
	    return decode(str);
	  } catch (e) {
	    return str;
	  }
	}


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var crypto = __webpack_require__(400);

	/**
	 * Sign the given `val` with `secret`.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String}
	 * @api private
	 */

	exports.sign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  return val + '.' + crypto
	    .createHmac('sha256', secret)
	    .update(val)
	    .digest('base64')
	    .replace(/\=+$/, '');
	};

	/**
	 * Unsign and decode the given `val` with `secret`,
	 * returning `false` if the signature is invalid.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String|Boolean}
	 * @api private
	 */

	exports.unsign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  var str = val.slice(0, val.lastIndexOf('.'))
	    , mac = exports.sign(str, secret);
	  
	  return sha1(mac) == sha1(val) ? str : false;
	};

	/**
	 * Private
	 */

	function sha1(str){
	  return crypto.createHash('sha1').update(str).digest('hex');
	}


/***/ },
/* 400 */
/***/ function(module, exports) {

	module.exports = require("crypto");

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * compression
	 * Copyright(c) 2010 Sencha Inc.
	 * Copyright(c) 2011 TJ Holowaychuk
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var accepts = __webpack_require__(402)
	var bytes = __webpack_require__(411)
	var compressible = __webpack_require__(412)
	var debug = __webpack_require__(413)('compression')
	var onHeaders = __webpack_require__(417)
	var vary = __webpack_require__(418)
	var zlib = __webpack_require__(419)

	/**
	 * Module exports.
	 */

	module.exports = compression
	module.exports.filter = shouldCompress

	/**
	 * Module variables.
	 * @private
	 */

	var cacheControlNoTransformRegExp = /(?:^|,)\s*?no-transform\s*?(?:,|$)/

	/**
	 * Compress response data with gzip / deflate.
	 *
	 * @param {Object} options
	 * @return {Function} middleware
	 * @public
	 */

	function compression(options) {
	  var opts = options || {}

	  // options
	  var filter = opts.filter || shouldCompress
	  var threshold = bytes.parse(opts.threshold)

	  if (threshold == null) {
	    threshold = 1024
	  }

	  return function compression(req, res, next){
	    var ended = false
	    var length
	    var listeners = []
	    var write = res.write
	    var on = res.on
	    var end = res.end
	    var stream

	    // flush
	    res.flush = function flush() {
	      if (stream) {
	        stream.flush()
	      }
	    }

	    // proxy

	    res.write = function(chunk, encoding){
	      if (ended) {
	        return false
	      }

	      if (!this._header) {
	        this._implicitHeader()
	      }

	      return stream
	        ? stream.write(new Buffer(chunk, encoding))
	        : write.call(this, chunk, encoding)
	    };

	    res.end = function(chunk, encoding){
	      if (ended) {
	        return false
	      }

	      if (!this._header) {
	        // estimate the length
	        if (!this.getHeader('Content-Length')) {
	          length = chunkLength(chunk, encoding)
	        }

	        this._implicitHeader()
	      }

	      if (!stream) {
	        return end.call(this, chunk, encoding)
	      }

	      // mark ended
	      ended = true

	      // write Buffer for Node.js 0.8
	      return chunk
	        ? stream.end(new Buffer(chunk, encoding))
	        : stream.end()
	    };

	    res.on = function(type, listener){
	      if (!listeners || type !== 'drain') {
	        return on.call(this, type, listener)
	      }

	      if (stream) {
	        return stream.on(type, listener)
	      }

	      // buffer listeners for future stream
	      listeners.push([type, listener])

	      return this
	    }

	    function nocompress(msg) {
	      debug('no compression: %s', msg)
	      addListeners(res, on, listeners)
	      listeners = null
	    }

	    onHeaders(res, function(){
	      // determine if request is filtered
	      if (!filter(req, res)) {
	        nocompress('filtered')
	        return
	      }

	      // determine if the entity should be transformed
	      if (!shouldTransform(req, res)) {
	        nocompress('no transform')
	        return
	      }

	      // vary
	      vary(res, 'Accept-Encoding')

	      // content-length below threshold
	      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {
	        nocompress('size below threshold')
	        return
	      }

	      var encoding = res.getHeader('Content-Encoding') || 'identity';

	      // already encoded
	      if ('identity' !== encoding) {
	        nocompress('already encoded')
	        return
	      }

	      // head
	      if ('HEAD' === req.method) {
	        nocompress('HEAD request')
	        return
	      }

	      // compression method
	      var accept = accepts(req)
	      var method = accept.encoding(['gzip', 'deflate', 'identity'])

	      // we really don't prefer deflate
	      if (method === 'deflate' && accept.encoding(['gzip'])) {
	        method = accept.encoding(['gzip', 'identity'])
	      }

	      // negotiation failed
	      if (!method || method === 'identity') {
	        nocompress('not acceptable')
	        return
	      }

	      // compression stream
	      debug('%s compression', method)
	      stream = method === 'gzip'
	        ? zlib.createGzip(opts)
	        : zlib.createDeflate(opts)

	      // add buffered listeners to stream
	      addListeners(stream, stream.on, listeners)

	      // header fields
	      res.setHeader('Content-Encoding', method);
	      res.removeHeader('Content-Length');

	      // compression
	      stream.on('data', function(chunk){
	        if (write.call(res, chunk) === false) {
	          stream.pause()
	        }
	      });

	      stream.on('end', function(){
	        end.call(res);
	      });

	      on.call(res, 'drain', function() {
	        stream.resume()
	      });
	    });

	    next();
	  };
	}

	/**
	 * Add bufferred listeners to stream
	 * @private
	 */

	function addListeners(stream, on, listeners) {
	  for (var i = 0; i < listeners.length; i++) {
	    on.apply(stream, listeners[i])
	  }
	}

	/**
	 * Get the length of a given chunk
	 */

	function chunkLength(chunk, encoding) {
	  if (!chunk) {
	    return 0
	  }

	  return !Buffer.isBuffer(chunk)
	    ? Buffer.byteLength(chunk, encoding)
	    : chunk.length
	}

	/**
	 * Default filter function.
	 * @private
	 */

	function shouldCompress(req, res) {
	  var type = res.getHeader('Content-Type')

	  if (type === undefined || !compressible(type)) {
	    debug('%s not compressible', type)
	    return false
	  }

	  return true
	}

	/**
	 * Determine if the entity should be transformed.
	 * @private
	 */

	function shouldTransform(req, res) {
	  var cacheControl = res.getHeader('Cache-Control')

	  // Don't compress for Cache-Control: no-transform
	  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4
	  return !cacheControl
	    || !cacheControlNoTransformRegExp.test(cacheControl)
	}


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * accepts
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var Negotiator = __webpack_require__(403)
	var mime = __webpack_require__(408)

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = Accepts

	/**
	 * Create a new Accepts object for the given req.
	 *
	 * @param {object} req
	 * @public
	 */

	function Accepts(req) {
	  if (!(this instanceof Accepts))
	    return new Accepts(req)

	  this.headers = req.headers
	  this.negotiator = new Negotiator(req)
	}

	/**
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single mime type string
	 * such as "application/json", the extension name
	 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     this.types('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('html');
	 *     // => "html"
	 *     this.types('text/html');
	 *     // => "text/html"
	 *     this.types('json', 'text');
	 *     // => "json"
	 *     this.types('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('image/png');
	 *     this.types('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     this.types(['html', 'json']);
	 *     this.types('html', 'json');
	 *     // => "json"
	 *
	 * @param {String|Array} types...
	 * @return {String|Array|Boolean}
	 * @public
	 */

	Accepts.prototype.type =
	Accepts.prototype.types = function (types_) {
	  var types = types_

	  // support flattened arguments
	  if (types && !Array.isArray(types)) {
	    types = new Array(arguments.length)
	    for (var i = 0; i < types.length; i++) {
	      types[i] = arguments[i]
	    }
	  }

	  // no types, return all requested types
	  if (!types || types.length === 0) {
	    return this.negotiator.mediaTypes()
	  }

	  if (!this.headers.accept) return types[0];
	  var mimes = types.map(extToMime);
	  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
	  var first = accepts[0];
	  if (!first) return false;
	  return types[mimes.indexOf(first)];
	}

	/**
	 * Return accepted encodings or best fit based on `encodings`.
	 *
	 * Given `Accept-Encoding: gzip, deflate`
	 * an array sorted by quality is returned:
	 *
	 *     ['gzip', 'deflate']
	 *
	 * @param {String|Array} encodings...
	 * @return {String|Array}
	 * @public
	 */

	Accepts.prototype.encoding =
	Accepts.prototype.encodings = function (encodings_) {
	  var encodings = encodings_

	  // support flattened arguments
	  if (encodings && !Array.isArray(encodings)) {
	    encodings = new Array(arguments.length)
	    for (var i = 0; i < encodings.length; i++) {
	      encodings[i] = arguments[i]
	    }
	  }

	  // no encodings, return all requested encodings
	  if (!encodings || encodings.length === 0) {
	    return this.negotiator.encodings()
	  }

	  return this.negotiator.encodings(encodings)[0] || false
	}

	/**
	 * Return accepted charsets or best fit based on `charsets`.
	 *
	 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
	 * an array sorted by quality is returned:
	 *
	 *     ['utf-8', 'utf-7', 'iso-8859-1']
	 *
	 * @param {String|Array} charsets...
	 * @return {String|Array}
	 * @public
	 */

	Accepts.prototype.charset =
	Accepts.prototype.charsets = function (charsets_) {
	  var charsets = charsets_

	  // support flattened arguments
	  if (charsets && !Array.isArray(charsets)) {
	    charsets = new Array(arguments.length)
	    for (var i = 0; i < charsets.length; i++) {
	      charsets[i] = arguments[i]
	    }
	  }

	  // no charsets, return all requested charsets
	  if (!charsets || charsets.length === 0) {
	    return this.negotiator.charsets()
	  }

	  return this.negotiator.charsets(charsets)[0] || false
	}

	/**
	 * Return accepted languages or best fit based on `langs`.
	 *
	 * Given `Accept-Language: en;q=0.8, es, pt`
	 * an array sorted by quality is returned:
	 *
	 *     ['es', 'pt', 'en']
	 *
	 * @param {String|Array} langs...
	 * @return {Array|String}
	 * @public
	 */

	Accepts.prototype.lang =
	Accepts.prototype.langs =
	Accepts.prototype.language =
	Accepts.prototype.languages = function (languages_) {
	  var languages = languages_

	  // support flattened arguments
	  if (languages && !Array.isArray(languages)) {
	    languages = new Array(arguments.length)
	    for (var i = 0; i < languages.length; i++) {
	      languages[i] = arguments[i]
	    }
	  }

	  // no languages, return all requested languages
	  if (!languages || languages.length === 0) {
	    return this.negotiator.languages()
	  }

	  return this.negotiator.languages(languages)[0] || false
	}

	/**
	 * Convert extnames to mime.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */

	function extToMime(type) {
	  return type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type
	}

	/**
	 * Check if mime is valid.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */

	function validMime(type) {
	  return typeof type === 'string';
	}


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * negotiator
	 * Copyright(c) 2012 Federico Romero
	 * Copyright(c) 2012-2014 Isaac Z. Schlueter
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Cached loaded submodules.
	 * @private
	 */

	var modules = Object.create(null);

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = Negotiator;
	module.exports.Negotiator = Negotiator;

	/**
	 * Create a Negotiator instance from a request.
	 * @param {object} request
	 * @public
	 */

	function Negotiator(request) {
	  if (!(this instanceof Negotiator)) {
	    return new Negotiator(request);
	  }

	  this.request = request;
	}

	Negotiator.prototype.charset = function charset(available) {
	  var set = this.charsets(available);
	  return set && set[0];
	};

	Negotiator.prototype.charsets = function charsets(available) {
	  var preferredCharsets = loadModule('charset').preferredCharsets;
	  return preferredCharsets(this.request.headers['accept-charset'], available);
	};

	Negotiator.prototype.encoding = function encoding(available) {
	  var set = this.encodings(available);
	  return set && set[0];
	};

	Negotiator.prototype.encodings = function encodings(available) {
	  var preferredEncodings = loadModule('encoding').preferredEncodings;
	  return preferredEncodings(this.request.headers['accept-encoding'], available);
	};

	Negotiator.prototype.language = function language(available) {
	  var set = this.languages(available);
	  return set && set[0];
	};

	Negotiator.prototype.languages = function languages(available) {
	  var preferredLanguages = loadModule('language').preferredLanguages;
	  return preferredLanguages(this.request.headers['accept-language'], available);
	};

	Negotiator.prototype.mediaType = function mediaType(available) {
	  var set = this.mediaTypes(available);
	  return set && set[0];
	};

	Negotiator.prototype.mediaTypes = function mediaTypes(available) {
	  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
	  return preferredMediaTypes(this.request.headers.accept, available);
	};

	// Backwards compatibility
	Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
	Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
	Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
	Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
	Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
	Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
	Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
	Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

	/**
	 * Load the given module.
	 * @private
	 */

	function loadModule(moduleName) {
	  var module = modules[moduleName];

	  if (module !== undefined) {
	    return module;
	  }

	  // This uses a switch for static require analysis
	  switch (moduleName) {
	    case 'charset':
	      module = __webpack_require__(404);
	      break;
	    case 'encoding':
	      module = __webpack_require__(405);
	      break;
	    case 'language':
	      module = __webpack_require__(406);
	      break;
	    case 'mediaType':
	      module = __webpack_require__(407);
	      break;
	    default:
	      throw new Error('Cannot find module \'' + moduleName + '\'');
	  }

	  // Store to prevent invoking require()
	  modules[moduleName] = module;

	  return module;
	}


/***/ },
/* 404 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = preferredCharsets;
	module.exports.preferredCharsets = preferredCharsets;

	/**
	 * Module variables.
	 * @private
	 */

	var simpleCharsetRegExp = /^\s*(\S+?)\s*(?:;(.*))?$/;

	/**
	 * Parse the Accept-Charset header.
	 * @private
	 */

	function parseAcceptCharset(accept) {
	  var accepts = accept.split(',');

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var charset = parseCharset(accepts[i].trim(), i);

	    if (charset) {
	      accepts[j++] = charset;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	/**
	 * Parse a charset from the Accept-Charset header.
	 * @private
	 */

	function parseCharset(str, i) {
	  var match = simpleCharsetRegExp.exec(str);
	  if (!match) return null;

	  var charset = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }

	  return {
	    charset: charset,
	    q: q,
	    i: i
	  };
	}

	/**
	 * Get the priority of a charset.
	 * @private
	 */

	function getCharsetPriority(charset, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(charset, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	/**
	 * Get the specificity of the charset.
	 * @private
	 */

	function specify(charset, spec, index) {
	  var s = 0;
	  if(spec.charset.toLowerCase() === charset.toLowerCase()){
	    s |= 1;
	  } else if (spec.charset !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	}

	/**
	 * Get the preferred charsets from an Accept-Charset header.
	 * @public
	 */

	function preferredCharsets(accept, provided) {
	  // RFC 2616 sec 14.2: no header = *
	  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

	  if (!provided) {
	    // sorted list of all charsets
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullCharset);
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getCharsetPriority(type, accepts, index);
	  });

	  // sorted list of accepted charsets
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	/**
	 * Compare two specs.
	 * @private
	 */

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	/**
	 * Get full charset string.
	 * @private
	 */

	function getFullCharset(spec) {
	  return spec.charset;
	}

	/**
	 * Check if a spec has any quality.
	 * @private
	 */

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 405 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = preferredEncodings;
	module.exports.preferredEncodings = preferredEncodings;

	/**
	 * Module variables.
	 * @private
	 */

	var simpleEncodingRegExp = /^\s*(\S+?)\s*(?:;(.*))?$/;

	/**
	 * Parse the Accept-Encoding header.
	 * @private
	 */

	function parseAcceptEncoding(accept) {
	  var accepts = accept.split(',');
	  var hasIdentity = false;
	  var minQuality = 1;

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var encoding = parseEncoding(accepts[i].trim(), i);

	    if (encoding) {
	      accepts[j++] = encoding;
	      hasIdentity = hasIdentity || specify('identity', encoding);
	      minQuality = Math.min(minQuality, encoding.q || 1);
	    }
	  }

	  if (!hasIdentity) {
	    /*
	     * If identity doesn't explicitly appear in the accept-encoding header,
	     * it's added to the list of acceptable encoding with the lowest q
	     */
	    accepts[j++] = {
	      encoding: 'identity',
	      q: minQuality,
	      i: i
	    };
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	/**
	 * Parse an encoding from the Accept-Encoding header.
	 * @private
	 */

	function parseEncoding(str, i) {
	  var match = simpleEncodingRegExp.exec(str);
	  if (!match) return null;

	  var encoding = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';');
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }

	  return {
	    encoding: encoding,
	    q: q,
	    i: i
	  };
	}

	/**
	 * Get the priority of an encoding.
	 * @private
	 */

	function getEncodingPriority(encoding, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(encoding, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	/**
	 * Get the specificity of the encoding.
	 * @private
	 */

	function specify(encoding, spec, index) {
	  var s = 0;
	  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
	    s |= 1;
	  } else if (spec.encoding !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};

	/**
	 * Get the preferred encodings from an Accept-Encoding header.
	 * @public
	 */

	function preferredEncodings(accept, provided) {
	  var accepts = parseAcceptEncoding(accept || '');

	  if (!provided) {
	    // sorted list of all encodings
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullEncoding);
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getEncodingPriority(type, accepts, index);
	  });

	  // sorted list of accepted encodings
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	/**
	 * Compare two specs.
	 * @private
	 */

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	/**
	 * Get full encoding string.
	 * @private
	 */

	function getFullEncoding(spec) {
	  return spec.encoding;
	}

	/**
	 * Check if a spec has any quality.
	 * @private
	 */

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 406 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = preferredLanguages;
	module.exports.preferredLanguages = preferredLanguages;

	/**
	 * Module variables.
	 * @private
	 */

	var simpleLanguageRegExp = /^\s*(\S+?)(?:-(\S+?))?\s*(?:;(.*))?$/;

	/**
	 * Parse the Accept-Language header.
	 * @private
	 */

	function parseAcceptLanguage(accept) {
	  var accepts = accept.split(',');

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var langauge = parseLanguage(accepts[i].trim(), i);

	    if (langauge) {
	      accepts[j++] = langauge;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	/**
	 * Parse a language from the Accept-Language header.
	 * @private
	 */

	function parseLanguage(str, i) {
	  var match = simpleLanguageRegExp.exec(str);
	  if (!match) return null;

	  var prefix = match[1],
	      suffix = match[2],
	      full = prefix;

	  if (suffix) full += "-" + suffix;

	  var q = 1;
	  if (match[3]) {
	    var params = match[3].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].split('=');
	      if (p[0] === 'q') q = parseFloat(p[1]);
	    }
	  }

	  return {
	    prefix: prefix,
	    suffix: suffix,
	    q: q,
	    i: i,
	    full: full
	  };
	}

	/**
	 * Get the priority of a language.
	 * @private
	 */

	function getLanguagePriority(language, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(language, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	/**
	 * Get the specificity of the language.
	 * @private
	 */

	function specify(language, spec, index) {
	  var p = parseLanguage(language)
	  if (!p) return null;
	  var s = 0;
	  if(spec.full.toLowerCase() === p.full.toLowerCase()){
	    s |= 4;
	  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
	    s |= 2;
	  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
	    s |= 1;
	  } else if (spec.full !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};

	/**
	 * Get the preferred languages from an Accept-Language header.
	 * @public
	 */

	function preferredLanguages(accept, provided) {
	  // RFC 2616 sec 14.4: no header = *
	  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

	  if (!provided) {
	    // sorted list of all languages
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullLanguage);
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getLanguagePriority(type, accepts, index);
	  });

	  // sorted list of accepted languages
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	/**
	 * Compare two specs.
	 * @private
	 */

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	/**
	 * Get full language string.
	 * @private
	 */

	function getFullLanguage(spec) {
	  return spec.full;
	}

	/**
	 * Check if a spec has any quality.
	 * @private
	 */

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 407 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = preferredMediaTypes;
	module.exports.preferredMediaTypes = preferredMediaTypes;

	/**
	 * Module variables.
	 * @private
	 */

	var simpleMediaTypeRegExp = /^\s*(\S+?)\/([^;\s]+)\s*(?:;(.*))?$/;

	/**
	 * Parse the Accept header.
	 * @private
	 */

	function parseAccept(accept) {
	  var accepts = splitMediaTypes(accept);

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var mediaType = parseMediaType(accepts[i].trim(), i);

	    if (mediaType) {
	      accepts[j++] = mediaType;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	/**
	 * Parse a media type from the Accept header.
	 * @private
	 */

	function parseMediaType(str, i) {
	  var match = simpleMediaTypeRegExp.exec(str);
	  if (!match) return null;

	  var params = Object.create(null);
	  var q = 1;
	  var subtype = match[2];
	  var type = match[1];

	  if (match[3]) {
	    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

	    for (var j = 0; j < kvps.length; j++) {
	      var pair = kvps[j];
	      var key = pair[0].toLowerCase();
	      var val = pair[1];

	      // get the value, unwrapping quotes
	      var value = val && val[0] === '"' && val[val.length - 1] === '"'
	        ? val.substr(1, val.length - 2)
	        : val;

	      if (key === 'q') {
	        q = parseFloat(value);
	        break;
	      }

	      // store parameter
	      params[key] = value;
	    }
	  }

	  return {
	    type: type,
	    subtype: subtype,
	    params: params,
	    q: q,
	    i: i
	  };
	}

	/**
	 * Get the priority of a media type.
	 * @private
	 */

	function getMediaTypePriority(type, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(type, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	/**
	 * Get the specificity of the media type.
	 * @private
	 */

	function specify(type, spec, index) {
	  var p = parseMediaType(type);
	  var s = 0;

	  if (!p) {
	    return null;
	  }

	  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
	    s |= 4
	  } else if(spec.type != '*') {
	    return null;
	  }

	  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
	    s |= 2
	  } else if(spec.subtype != '*') {
	    return null;
	  }

	  var keys = Object.keys(spec.params);
	  if (keys.length > 0) {
	    if (keys.every(function (k) {
	      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
	    })) {
	      s |= 1
	    } else {
	      return null
	    }
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s,
	  }
	}

	/**
	 * Get the preferred media types from an Accept header.
	 * @public
	 */

	function preferredMediaTypes(accept, provided) {
	  // RFC 2616 sec 14.2: no header = */*
	  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

	  if (!provided) {
	    // sorted list of all types
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullType);
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getMediaTypePriority(type, accepts, index);
	  });

	  // sorted list of accepted types
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	/**
	 * Compare two specs.
	 * @private
	 */

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	/**
	 * Get full type string.
	 * @private
	 */

	function getFullType(spec) {
	  return spec.type + '/' + spec.subtype;
	}

	/**
	 * Check if a spec has any quality.
	 * @private
	 */

	function isQuality(spec) {
	  return spec.q > 0;
	}

	/**
	 * Count the number of quotes in a string.
	 * @private
	 */

	function quoteCount(string) {
	  var count = 0;
	  var index = 0;

	  while ((index = string.indexOf('"', index)) !== -1) {
	    count++;
	    index++;
	  }

	  return count;
	}

	/**
	 * Split a key value pair.
	 * @private
	 */

	function splitKeyValuePair(str) {
	  var index = str.indexOf('=');
	  var key;
	  var val;

	  if (index === -1) {
	    key = str;
	  } else {
	    key = str.substr(0, index);
	    val = str.substr(index + 1);
	  }

	  return [key, val];
	}

	/**
	 * Split an Accept header into media types.
	 * @private
	 */

	function splitMediaTypes(accept) {
	  var accepts = accept.split(',');

	  for (var i = 1, j = 0; i < accepts.length; i++) {
	    if (quoteCount(accepts[j]) % 2 == 0) {
	      accepts[++j] = accepts[i];
	    } else {
	      accepts[j] += ',' + accepts[i];
	    }
	  }

	  // trim accepts
	  accepts.length = j + 1;

	  return accepts;
	}

	/**
	 * Split a string of parameters.
	 * @private
	 */

	function splitParameters(str) {
	  var parameters = str.split(';');

	  for (var i = 1, j = 0; i < parameters.length; i++) {
	    if (quoteCount(parameters[j]) % 2 == 0) {
	      parameters[++j] = parameters[i];
	    } else {
	      parameters[j] += ';' + parameters[i];
	    }
	  }

	  // trim parameters
	  parameters.length = j + 1;

	  for (var i = 0; i < parameters.length; i++) {
	    parameters[i] = parameters[i].trim();
	  }

	  return parameters;
	}


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var db = __webpack_require__(409)
	var extname = __webpack_require__(389).extname

	/**
	 * Module variables.
	 * @private
	 */

	var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/
	var textTypeRegExp = /^text\//i

	/**
	 * Module exports.
	 * @public
	 */

	exports.charset = charset
	exports.charsets = { lookup: charset }
	exports.contentType = contentType
	exports.extension = extension
	exports.extensions = Object.create(null)
	exports.lookup = lookup
	exports.types = Object.create(null)

	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types)

	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function charset(type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)
	  var mime = match && db[match[1].toLowerCase()]

	  if (mime && mime.charset) {
	    return mime.charset
	  }

	  // default text/* to utf-8
	  if (match && textTypeRegExp.test(match[1])) {
	    return 'UTF-8'
	  }

	  return false
	}

	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */

	function contentType(str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }

	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str

	  if (!mime) {
	    return false
	  }

	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime)
	    if (charset) mime += '; charset=' + charset.toLowerCase()
	  }

	  return mime
	}

	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function extension(type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)

	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()]

	  if (!exts || !exts.length) {
	    return false
	  }

	  return exts[0]
	}

	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */

	function lookup(path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }

	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1)

	  if (!extension) {
	    return false
	  }

	  return exports.types[extension] || false
	}

	/**
	 * Populate the extensions and types maps.
	 * @private
	 */

	function populateMaps(extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana']

	  Object.keys(db).forEach(function forEachMimeType(type) {
	    var mime = db[type]
	    var exts = mime.extensions

	    if (!exts || !exts.length) {
	      return
	    }

	    // mime -> extensions
	    extensions[type] = exts

	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i]

	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source)
	        var to = preference.indexOf(mime.source)

	        if (types[extension] !== 'application/octet-stream'
	          && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
	          // skip the remapping
	          continue
	        }
	      }

	      // set the extension -> mime
	      types[extension] = type
	    }
	  })
	}


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 */

	module.exports = __webpack_require__(410)


/***/ },
/* 410 */
/***/ function(module, exports) {

	module.exports = {
		"application/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"application/3gpdash-qoe-report+xml": {
			"source": "iana"
		},
		"application/3gpp-ims+xml": {
			"source": "iana"
		},
		"application/a2l": {
			"source": "iana"
		},
		"application/activemessage": {
			"source": "iana"
		},
		"application/alto-costmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-costmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-directory+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcost+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcostparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointprop+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointpropparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-error+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/aml": {
			"source": "iana"
		},
		"application/andrew-inset": {
			"source": "iana",
			"extensions": [
				"ez"
			]
		},
		"application/applefile": {
			"source": "iana"
		},
		"application/applixware": {
			"source": "apache",
			"extensions": [
				"aw"
			]
		},
		"application/atf": {
			"source": "iana"
		},
		"application/atfx": {
			"source": "iana"
		},
		"application/atom+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"atom"
			]
		},
		"application/atomcat+xml": {
			"source": "iana",
			"extensions": [
				"atomcat"
			]
		},
		"application/atomdeleted+xml": {
			"source": "iana"
		},
		"application/atomicmail": {
			"source": "iana"
		},
		"application/atomsvc+xml": {
			"source": "iana",
			"extensions": [
				"atomsvc"
			]
		},
		"application/atxml": {
			"source": "iana"
		},
		"application/auth-policy+xml": {
			"source": "iana"
		},
		"application/bacnet-xdd+zip": {
			"source": "iana"
		},
		"application/batch-smtp": {
			"source": "iana"
		},
		"application/bdoc": {
			"compressible": false,
			"extensions": [
				"bdoc"
			]
		},
		"application/beep+xml": {
			"source": "iana"
		},
		"application/calendar+json": {
			"source": "iana",
			"compressible": true
		},
		"application/calendar+xml": {
			"source": "iana"
		},
		"application/call-completion": {
			"source": "iana"
		},
		"application/cals-1840": {
			"source": "iana"
		},
		"application/cbor": {
			"source": "iana"
		},
		"application/ccmp+xml": {
			"source": "iana"
		},
		"application/ccxml+xml": {
			"source": "iana",
			"extensions": [
				"ccxml"
			]
		},
		"application/cdfx+xml": {
			"source": "iana"
		},
		"application/cdmi-capability": {
			"source": "iana",
			"extensions": [
				"cdmia"
			]
		},
		"application/cdmi-container": {
			"source": "iana",
			"extensions": [
				"cdmic"
			]
		},
		"application/cdmi-domain": {
			"source": "iana",
			"extensions": [
				"cdmid"
			]
		},
		"application/cdmi-object": {
			"source": "iana",
			"extensions": [
				"cdmio"
			]
		},
		"application/cdmi-queue": {
			"source": "iana",
			"extensions": [
				"cdmiq"
			]
		},
		"application/cdni": {
			"source": "iana"
		},
		"application/cea": {
			"source": "iana"
		},
		"application/cea-2018+xml": {
			"source": "iana"
		},
		"application/cellml+xml": {
			"source": "iana"
		},
		"application/cfw": {
			"source": "iana"
		},
		"application/cms": {
			"source": "iana"
		},
		"application/cnrp+xml": {
			"source": "iana"
		},
		"application/coap-group+json": {
			"source": "iana",
			"compressible": true
		},
		"application/commonground": {
			"source": "iana"
		},
		"application/conference-info+xml": {
			"source": "iana"
		},
		"application/cpl+xml": {
			"source": "iana"
		},
		"application/csrattrs": {
			"source": "iana"
		},
		"application/csta+xml": {
			"source": "iana"
		},
		"application/cstadata+xml": {
			"source": "iana"
		},
		"application/csvm+json": {
			"source": "iana",
			"compressible": true
		},
		"application/cu-seeme": {
			"source": "apache",
			"extensions": [
				"cu"
			]
		},
		"application/cybercash": {
			"source": "iana"
		},
		"application/dart": {
			"compressible": true
		},
		"application/dash+xml": {
			"source": "iana",
			"extensions": [
				"mdp"
			]
		},
		"application/dashdelta": {
			"source": "iana"
		},
		"application/davmount+xml": {
			"source": "iana",
			"extensions": [
				"davmount"
			]
		},
		"application/dca-rft": {
			"source": "iana"
		},
		"application/dcd": {
			"source": "iana"
		},
		"application/dec-dx": {
			"source": "iana"
		},
		"application/dialog-info+xml": {
			"source": "iana"
		},
		"application/dicom": {
			"source": "iana"
		},
		"application/dii": {
			"source": "iana"
		},
		"application/dit": {
			"source": "iana"
		},
		"application/dns": {
			"source": "iana"
		},
		"application/docbook+xml": {
			"source": "apache",
			"extensions": [
				"dbk"
			]
		},
		"application/dskpp+xml": {
			"source": "iana"
		},
		"application/dssc+der": {
			"source": "iana",
			"extensions": [
				"dssc"
			]
		},
		"application/dssc+xml": {
			"source": "iana",
			"extensions": [
				"xdssc"
			]
		},
		"application/dvcs": {
			"source": "iana"
		},
		"application/ecmascript": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"ecma"
			]
		},
		"application/edi-consent": {
			"source": "iana"
		},
		"application/edi-x12": {
			"source": "iana",
			"compressible": false
		},
		"application/edifact": {
			"source": "iana",
			"compressible": false
		},
		"application/emergencycalldata.comment+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.deviceinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.providerinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.serviceinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.subscriberinfo+xml": {
			"source": "iana"
		},
		"application/emma+xml": {
			"source": "iana",
			"extensions": [
				"emma"
			]
		},
		"application/emotionml+xml": {
			"source": "iana"
		},
		"application/encaprtp": {
			"source": "iana"
		},
		"application/epp+xml": {
			"source": "iana"
		},
		"application/epub+zip": {
			"source": "iana",
			"extensions": [
				"epub"
			]
		},
		"application/eshop": {
			"source": "iana"
		},
		"application/exi": {
			"source": "iana",
			"extensions": [
				"exi"
			]
		},
		"application/fastinfoset": {
			"source": "iana"
		},
		"application/fastsoap": {
			"source": "iana"
		},
		"application/fdt+xml": {
			"source": "iana"
		},
		"application/fits": {
			"source": "iana"
		},
		"application/font-sfnt": {
			"source": "iana"
		},
		"application/font-tdpfr": {
			"source": "iana",
			"extensions": [
				"pfr"
			]
		},
		"application/font-woff": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"woff"
			]
		},
		"application/font-woff2": {
			"compressible": false,
			"extensions": [
				"woff2"
			]
		},
		"application/framework-attributes+xml": {
			"source": "iana"
		},
		"application/gml+xml": {
			"source": "apache",
			"extensions": [
				"gml"
			]
		},
		"application/gpx+xml": {
			"source": "apache",
			"extensions": [
				"gpx"
			]
		},
		"application/gxf": {
			"source": "apache",
			"extensions": [
				"gxf"
			]
		},
		"application/gzip": {
			"source": "iana",
			"compressible": false
		},
		"application/h224": {
			"source": "iana"
		},
		"application/held+xml": {
			"source": "iana"
		},
		"application/http": {
			"source": "iana"
		},
		"application/hyperstudio": {
			"source": "iana",
			"extensions": [
				"stk"
			]
		},
		"application/ibe-key-request+xml": {
			"source": "iana"
		},
		"application/ibe-pkg-reply+xml": {
			"source": "iana"
		},
		"application/ibe-pp-data": {
			"source": "iana"
		},
		"application/iges": {
			"source": "iana"
		},
		"application/im-iscomposing+xml": {
			"source": "iana"
		},
		"application/index": {
			"source": "iana"
		},
		"application/index.cmd": {
			"source": "iana"
		},
		"application/index.obj": {
			"source": "iana"
		},
		"application/index.response": {
			"source": "iana"
		},
		"application/index.vnd": {
			"source": "iana"
		},
		"application/inkml+xml": {
			"source": "iana",
			"extensions": [
				"ink",
				"inkml"
			]
		},
		"application/iotp": {
			"source": "iana"
		},
		"application/ipfix": {
			"source": "iana",
			"extensions": [
				"ipfix"
			]
		},
		"application/ipp": {
			"source": "iana"
		},
		"application/isup": {
			"source": "iana"
		},
		"application/its+xml": {
			"source": "iana"
		},
		"application/java-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"jar",
				"war",
				"ear"
			]
		},
		"application/java-serialized-object": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"ser"
			]
		},
		"application/java-vm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"class"
			]
		},
		"application/javascript": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"js"
			]
		},
		"application/jose": {
			"source": "iana"
		},
		"application/jose+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jrd+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"json",
				"map"
			]
		},
		"application/json-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json-seq": {
			"source": "iana"
		},
		"application/json5": {
			"extensions": [
				"json5"
			]
		},
		"application/jsonml+json": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"jsonml"
			]
		},
		"application/jwk+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwk-set+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwt": {
			"source": "iana"
		},
		"application/kpml-request+xml": {
			"source": "iana"
		},
		"application/kpml-response+xml": {
			"source": "iana"
		},
		"application/ld+json": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"jsonld"
			]
		},
		"application/link-format": {
			"source": "iana"
		},
		"application/load-control+xml": {
			"source": "iana"
		},
		"application/lost+xml": {
			"source": "iana",
			"extensions": [
				"lostxml"
			]
		},
		"application/lostsync+xml": {
			"source": "iana"
		},
		"application/lxf": {
			"source": "iana"
		},
		"application/mac-binhex40": {
			"source": "iana",
			"extensions": [
				"hqx"
			]
		},
		"application/mac-compactpro": {
			"source": "apache",
			"extensions": [
				"cpt"
			]
		},
		"application/macwriteii": {
			"source": "iana"
		},
		"application/mads+xml": {
			"source": "iana",
			"extensions": [
				"mads"
			]
		},
		"application/manifest+json": {
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"webmanifest"
			]
		},
		"application/marc": {
			"source": "iana",
			"extensions": [
				"mrc"
			]
		},
		"application/marcxml+xml": {
			"source": "iana",
			"extensions": [
				"mrcx"
			]
		},
		"application/mathematica": {
			"source": "iana",
			"extensions": [
				"ma",
				"nb",
				"mb"
			]
		},
		"application/mathml+xml": {
			"source": "iana",
			"extensions": [
				"mathml"
			]
		},
		"application/mathml-content+xml": {
			"source": "iana"
		},
		"application/mathml-presentation+xml": {
			"source": "iana"
		},
		"application/mbms-associated-procedure-description+xml": {
			"source": "iana"
		},
		"application/mbms-deregister+xml": {
			"source": "iana"
		},
		"application/mbms-envelope+xml": {
			"source": "iana"
		},
		"application/mbms-msk+xml": {
			"source": "iana"
		},
		"application/mbms-msk-response+xml": {
			"source": "iana"
		},
		"application/mbms-protection-description+xml": {
			"source": "iana"
		},
		"application/mbms-reception-report+xml": {
			"source": "iana"
		},
		"application/mbms-register+xml": {
			"source": "iana"
		},
		"application/mbms-register-response+xml": {
			"source": "iana"
		},
		"application/mbms-schedule+xml": {
			"source": "iana"
		},
		"application/mbms-user-service-description+xml": {
			"source": "iana"
		},
		"application/mbox": {
			"source": "iana",
			"extensions": [
				"mbox"
			]
		},
		"application/media-policy-dataset+xml": {
			"source": "iana"
		},
		"application/media_control+xml": {
			"source": "iana"
		},
		"application/mediaservercontrol+xml": {
			"source": "iana",
			"extensions": [
				"mscml"
			]
		},
		"application/merge-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/metalink+xml": {
			"source": "apache",
			"extensions": [
				"metalink"
			]
		},
		"application/metalink4+xml": {
			"source": "iana",
			"extensions": [
				"meta4"
			]
		},
		"application/mets+xml": {
			"source": "iana",
			"extensions": [
				"mets"
			]
		},
		"application/mf4": {
			"source": "iana"
		},
		"application/mikey": {
			"source": "iana"
		},
		"application/mods+xml": {
			"source": "iana",
			"extensions": [
				"mods"
			]
		},
		"application/moss-keys": {
			"source": "iana"
		},
		"application/moss-signature": {
			"source": "iana"
		},
		"application/mosskey-data": {
			"source": "iana"
		},
		"application/mosskey-request": {
			"source": "iana"
		},
		"application/mp21": {
			"source": "iana",
			"extensions": [
				"m21",
				"mp21"
			]
		},
		"application/mp4": {
			"source": "iana",
			"extensions": [
				"mp4s",
				"m4p"
			]
		},
		"application/mpeg4-generic": {
			"source": "iana"
		},
		"application/mpeg4-iod": {
			"source": "iana"
		},
		"application/mpeg4-iod-xmt": {
			"source": "iana"
		},
		"application/mrb-consumer+xml": {
			"source": "iana"
		},
		"application/mrb-publish+xml": {
			"source": "iana"
		},
		"application/msc-ivr+xml": {
			"source": "iana"
		},
		"application/msc-mixer+xml": {
			"source": "iana"
		},
		"application/msword": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"doc",
				"dot"
			]
		},
		"application/mxf": {
			"source": "iana",
			"extensions": [
				"mxf"
			]
		},
		"application/nasdata": {
			"source": "iana"
		},
		"application/news-checkgroups": {
			"source": "iana"
		},
		"application/news-groupinfo": {
			"source": "iana"
		},
		"application/news-transmission": {
			"source": "iana"
		},
		"application/nlsml+xml": {
			"source": "iana"
		},
		"application/nss": {
			"source": "iana"
		},
		"application/ocsp-request": {
			"source": "iana"
		},
		"application/ocsp-response": {
			"source": "iana"
		},
		"application/octet-stream": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"bin",
				"dms",
				"lrf",
				"mar",
				"so",
				"dist",
				"distz",
				"pkg",
				"bpk",
				"dump",
				"elc",
				"deploy",
				"exe",
				"dll",
				"deb",
				"dmg",
				"iso",
				"img",
				"msi",
				"msp",
				"msm",
				"buffer"
			]
		},
		"application/oda": {
			"source": "iana",
			"extensions": [
				"oda"
			]
		},
		"application/odx": {
			"source": "iana"
		},
		"application/oebps-package+xml": {
			"source": "iana",
			"extensions": [
				"opf"
			]
		},
		"application/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ogx"
			]
		},
		"application/omdoc+xml": {
			"source": "apache",
			"extensions": [
				"omdoc"
			]
		},
		"application/onenote": {
			"source": "apache",
			"extensions": [
				"onetoc",
				"onetoc2",
				"onetmp",
				"onepkg"
			]
		},
		"application/oxps": {
			"source": "iana",
			"extensions": [
				"oxps"
			]
		},
		"application/p2p-overlay+xml": {
			"source": "iana"
		},
		"application/parityfec": {
			"source": "iana"
		},
		"application/patch-ops-error+xml": {
			"source": "iana",
			"extensions": [
				"xer"
			]
		},
		"application/pdf": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pdf"
			]
		},
		"application/pdx": {
			"source": "iana"
		},
		"application/pgp-encrypted": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pgp"
			]
		},
		"application/pgp-keys": {
			"source": "iana"
		},
		"application/pgp-signature": {
			"source": "iana",
			"extensions": [
				"asc",
				"sig"
			]
		},
		"application/pics-rules": {
			"source": "apache",
			"extensions": [
				"prf"
			]
		},
		"application/pidf+xml": {
			"source": "iana"
		},
		"application/pidf-diff+xml": {
			"source": "iana"
		},
		"application/pkcs10": {
			"source": "iana",
			"extensions": [
				"p10"
			]
		},
		"application/pkcs12": {
			"source": "iana"
		},
		"application/pkcs7-mime": {
			"source": "iana",
			"extensions": [
				"p7m",
				"p7c"
			]
		},
		"application/pkcs7-signature": {
			"source": "iana",
			"extensions": [
				"p7s"
			]
		},
		"application/pkcs8": {
			"source": "iana",
			"extensions": [
				"p8"
			]
		},
		"application/pkix-attr-cert": {
			"source": "iana",
			"extensions": [
				"ac"
			]
		},
		"application/pkix-cert": {
			"source": "iana",
			"extensions": [
				"cer"
			]
		},
		"application/pkix-crl": {
			"source": "iana",
			"extensions": [
				"crl"
			]
		},
		"application/pkix-pkipath": {
			"source": "iana",
			"extensions": [
				"pkipath"
			]
		},
		"application/pkixcmp": {
			"source": "iana",
			"extensions": [
				"pki"
			]
		},
		"application/pls+xml": {
			"source": "iana",
			"extensions": [
				"pls"
			]
		},
		"application/poc-settings+xml": {
			"source": "iana"
		},
		"application/postscript": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"ai",
				"eps",
				"ps"
			]
		},
		"application/provenance+xml": {
			"source": "iana"
		},
		"application/prs.alvestrand.titrax-sheet": {
			"source": "iana"
		},
		"application/prs.cww": {
			"source": "iana",
			"extensions": [
				"cww"
			]
		},
		"application/prs.hpub+zip": {
			"source": "iana"
		},
		"application/prs.nprend": {
			"source": "iana"
		},
		"application/prs.plucker": {
			"source": "iana"
		},
		"application/prs.rdf-xml-crypt": {
			"source": "iana"
		},
		"application/prs.xsf+xml": {
			"source": "iana"
		},
		"application/pskc+xml": {
			"source": "iana",
			"extensions": [
				"pskcxml"
			]
		},
		"application/qsig": {
			"source": "iana"
		},
		"application/raptorfec": {
			"source": "iana"
		},
		"application/rdap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/rdf+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rdf"
			]
		},
		"application/reginfo+xml": {
			"source": "iana",
			"extensions": [
				"rif"
			]
		},
		"application/relax-ng-compact-syntax": {
			"source": "iana",
			"extensions": [
				"rnc"
			]
		},
		"application/remote-printing": {
			"source": "iana"
		},
		"application/reputon+json": {
			"source": "iana",
			"compressible": true
		},
		"application/resource-lists+xml": {
			"source": "iana",
			"extensions": [
				"rl"
			]
		},
		"application/resource-lists-diff+xml": {
			"source": "iana",
			"extensions": [
				"rld"
			]
		},
		"application/rfc+xml": {
			"source": "iana"
		},
		"application/riscos": {
			"source": "iana"
		},
		"application/rlmi+xml": {
			"source": "iana"
		},
		"application/rls-services+xml": {
			"source": "iana",
			"extensions": [
				"rs"
			]
		},
		"application/rpki-ghostbusters": {
			"source": "iana",
			"extensions": [
				"gbr"
			]
		},
		"application/rpki-manifest": {
			"source": "iana",
			"extensions": [
				"mft"
			]
		},
		"application/rpki-roa": {
			"source": "iana",
			"extensions": [
				"roa"
			]
		},
		"application/rpki-updown": {
			"source": "iana"
		},
		"application/rsd+xml": {
			"source": "apache",
			"extensions": [
				"rsd"
			]
		},
		"application/rss+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"rss"
			]
		},
		"application/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtf"
			]
		},
		"application/rtploopback": {
			"source": "iana"
		},
		"application/rtx": {
			"source": "iana"
		},
		"application/samlassertion+xml": {
			"source": "iana"
		},
		"application/samlmetadata+xml": {
			"source": "iana"
		},
		"application/sbml+xml": {
			"source": "iana",
			"extensions": [
				"sbml"
			]
		},
		"application/scaip+xml": {
			"source": "iana"
		},
		"application/scim+json": {
			"source": "iana",
			"compressible": true
		},
		"application/scvp-cv-request": {
			"source": "iana",
			"extensions": [
				"scq"
			]
		},
		"application/scvp-cv-response": {
			"source": "iana",
			"extensions": [
				"scs"
			]
		},
		"application/scvp-vp-request": {
			"source": "iana",
			"extensions": [
				"spq"
			]
		},
		"application/scvp-vp-response": {
			"source": "iana",
			"extensions": [
				"spp"
			]
		},
		"application/sdp": {
			"source": "iana",
			"extensions": [
				"sdp"
			]
		},
		"application/sep+xml": {
			"source": "iana"
		},
		"application/sep-exi": {
			"source": "iana"
		},
		"application/session-info": {
			"source": "iana"
		},
		"application/set-payment": {
			"source": "iana"
		},
		"application/set-payment-initiation": {
			"source": "iana",
			"extensions": [
				"setpay"
			]
		},
		"application/set-registration": {
			"source": "iana"
		},
		"application/set-registration-initiation": {
			"source": "iana",
			"extensions": [
				"setreg"
			]
		},
		"application/sgml": {
			"source": "iana"
		},
		"application/sgml-open-catalog": {
			"source": "iana"
		},
		"application/shf+xml": {
			"source": "iana",
			"extensions": [
				"shf"
			]
		},
		"application/sieve": {
			"source": "iana"
		},
		"application/simple-filter+xml": {
			"source": "iana"
		},
		"application/simple-message-summary": {
			"source": "iana"
		},
		"application/simplesymbolcontainer": {
			"source": "iana"
		},
		"application/slate": {
			"source": "iana"
		},
		"application/smil": {
			"source": "iana"
		},
		"application/smil+xml": {
			"source": "iana",
			"extensions": [
				"smi",
				"smil"
			]
		},
		"application/smpte336m": {
			"source": "iana"
		},
		"application/soap+fastinfoset": {
			"source": "iana"
		},
		"application/soap+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sparql-query": {
			"source": "iana",
			"extensions": [
				"rq"
			]
		},
		"application/sparql-results+xml": {
			"source": "iana",
			"extensions": [
				"srx"
			]
		},
		"application/spirits-event+xml": {
			"source": "iana"
		},
		"application/sql": {
			"source": "iana"
		},
		"application/srgs": {
			"source": "iana",
			"extensions": [
				"gram"
			]
		},
		"application/srgs+xml": {
			"source": "iana",
			"extensions": [
				"grxml"
			]
		},
		"application/sru+xml": {
			"source": "iana",
			"extensions": [
				"sru"
			]
		},
		"application/ssdl+xml": {
			"source": "apache",
			"extensions": [
				"ssdl"
			]
		},
		"application/ssml+xml": {
			"source": "iana",
			"extensions": [
				"ssml"
			]
		},
		"application/tamp-apex-update": {
			"source": "iana"
		},
		"application/tamp-apex-update-confirm": {
			"source": "iana"
		},
		"application/tamp-community-update": {
			"source": "iana"
		},
		"application/tamp-community-update-confirm": {
			"source": "iana"
		},
		"application/tamp-error": {
			"source": "iana"
		},
		"application/tamp-sequence-adjust": {
			"source": "iana"
		},
		"application/tamp-sequence-adjust-confirm": {
			"source": "iana"
		},
		"application/tamp-status-query": {
			"source": "iana"
		},
		"application/tamp-status-response": {
			"source": "iana"
		},
		"application/tamp-update": {
			"source": "iana"
		},
		"application/tamp-update-confirm": {
			"source": "iana"
		},
		"application/tar": {
			"compressible": true
		},
		"application/tei+xml": {
			"source": "iana",
			"extensions": [
				"tei",
				"teicorpus"
			]
		},
		"application/thraud+xml": {
			"source": "iana",
			"extensions": [
				"tfi"
			]
		},
		"application/timestamp-query": {
			"source": "iana"
		},
		"application/timestamp-reply": {
			"source": "iana"
		},
		"application/timestamped-data": {
			"source": "iana",
			"extensions": [
				"tsd"
			]
		},
		"application/ttml+xml": {
			"source": "iana"
		},
		"application/tve-trigger": {
			"source": "iana"
		},
		"application/ulpfec": {
			"source": "iana"
		},
		"application/urc-grpsheet+xml": {
			"source": "iana"
		},
		"application/urc-ressheet+xml": {
			"source": "iana"
		},
		"application/urc-targetdesc+xml": {
			"source": "iana"
		},
		"application/urc-uisocketdesc+xml": {
			"source": "iana"
		},
		"application/vcard+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vcard+xml": {
			"source": "iana"
		},
		"application/vemmi": {
			"source": "iana"
		},
		"application/vividence.scriptfile": {
			"source": "apache"
		},
		"application/vnd.3gpp-prose+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp-prose-pc3ch+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.access-transfer-events+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.bsf+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.mid-call+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.pic-bw-large": {
			"source": "iana",
			"extensions": [
				"plb"
			]
		},
		"application/vnd.3gpp.pic-bw-small": {
			"source": "iana",
			"extensions": [
				"psb"
			]
		},
		"application/vnd.3gpp.pic-bw-var": {
			"source": "iana",
			"extensions": [
				"pvb"
			]
		},
		"application/vnd.3gpp.sms": {
			"source": "iana"
		},
		"application/vnd.3gpp.srvcc-ext+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.srvcc-info+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.state-and-event-info+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.ussd+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp2.bcmcsinfo+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp2.sms": {
			"source": "iana"
		},
		"application/vnd.3gpp2.tcap": {
			"source": "iana",
			"extensions": [
				"tcap"
			]
		},
		"application/vnd.3m.post-it-notes": {
			"source": "iana",
			"extensions": [
				"pwn"
			]
		},
		"application/vnd.accpac.simply.aso": {
			"source": "iana",
			"extensions": [
				"aso"
			]
		},
		"application/vnd.accpac.simply.imp": {
			"source": "iana",
			"extensions": [
				"imp"
			]
		},
		"application/vnd.acucobol": {
			"source": "iana",
			"extensions": [
				"acu"
			]
		},
		"application/vnd.acucorp": {
			"source": "iana",
			"extensions": [
				"atc",
				"acutc"
			]
		},
		"application/vnd.adobe.air-application-installer-package+zip": {
			"source": "apache",
			"extensions": [
				"air"
			]
		},
		"application/vnd.adobe.flash.movie": {
			"source": "iana"
		},
		"application/vnd.adobe.formscentral.fcdt": {
			"source": "iana",
			"extensions": [
				"fcdt"
			]
		},
		"application/vnd.adobe.fxp": {
			"source": "iana",
			"extensions": [
				"fxp",
				"fxpl"
			]
		},
		"application/vnd.adobe.partial-upload": {
			"source": "iana"
		},
		"application/vnd.adobe.xdp+xml": {
			"source": "iana",
			"extensions": [
				"xdp"
			]
		},
		"application/vnd.adobe.xfdf": {
			"source": "iana",
			"extensions": [
				"xfdf"
			]
		},
		"application/vnd.aether.imp": {
			"source": "iana"
		},
		"application/vnd.ah-barcode": {
			"source": "iana"
		},
		"application/vnd.ahead.space": {
			"source": "iana",
			"extensions": [
				"ahead"
			]
		},
		"application/vnd.airzip.filesecure.azf": {
			"source": "iana",
			"extensions": [
				"azf"
			]
		},
		"application/vnd.airzip.filesecure.azs": {
			"source": "iana",
			"extensions": [
				"azs"
			]
		},
		"application/vnd.amazon.ebook": {
			"source": "apache",
			"extensions": [
				"azw"
			]
		},
		"application/vnd.americandynamics.acc": {
			"source": "iana",
			"extensions": [
				"acc"
			]
		},
		"application/vnd.amiga.ami": {
			"source": "iana",
			"extensions": [
				"ami"
			]
		},
		"application/vnd.amundsen.maze+xml": {
			"source": "iana"
		},
		"application/vnd.android.package-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"apk"
			]
		},
		"application/vnd.anki": {
			"source": "iana"
		},
		"application/vnd.anser-web-certificate-issue-initiation": {
			"source": "iana",
			"extensions": [
				"cii"
			]
		},
		"application/vnd.anser-web-funds-transfer-initiation": {
			"source": "apache",
			"extensions": [
				"fti"
			]
		},
		"application/vnd.antix.game-component": {
			"source": "iana",
			"extensions": [
				"atx"
			]
		},
		"application/vnd.apache.thrift.binary": {
			"source": "iana"
		},
		"application/vnd.apache.thrift.compact": {
			"source": "iana"
		},
		"application/vnd.apache.thrift.json": {
			"source": "iana"
		},
		"application/vnd.api+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.apple.installer+xml": {
			"source": "iana",
			"extensions": [
				"mpkg"
			]
		},
		"application/vnd.apple.mpegurl": {
			"source": "iana",
			"extensions": [
				"m3u8"
			]
		},
		"application/vnd.apple.pkpass": {
			"compressible": false,
			"extensions": [
				"pkpass"
			]
		},
		"application/vnd.arastra.swi": {
			"source": "iana"
		},
		"application/vnd.aristanetworks.swi": {
			"source": "iana",
			"extensions": [
				"swi"
			]
		},
		"application/vnd.artsquare": {
			"source": "iana"
		},
		"application/vnd.astraea-software.iota": {
			"source": "iana",
			"extensions": [
				"iota"
			]
		},
		"application/vnd.audiograph": {
			"source": "iana",
			"extensions": [
				"aep"
			]
		},
		"application/vnd.autopackage": {
			"source": "iana"
		},
		"application/vnd.avistar+xml": {
			"source": "iana"
		},
		"application/vnd.balsamiq.bmml+xml": {
			"source": "iana"
		},
		"application/vnd.balsamiq.bmpr": {
			"source": "iana"
		},
		"application/vnd.bekitzur-stech+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.biopax.rdf+xml": {
			"source": "iana"
		},
		"application/vnd.blueice.multipass": {
			"source": "iana",
			"extensions": [
				"mpm"
			]
		},
		"application/vnd.bluetooth.ep.oob": {
			"source": "iana"
		},
		"application/vnd.bluetooth.le.oob": {
			"source": "iana"
		},
		"application/vnd.bmi": {
			"source": "iana",
			"extensions": [
				"bmi"
			]
		},
		"application/vnd.businessobjects": {
			"source": "iana",
			"extensions": [
				"rep"
			]
		},
		"application/vnd.cab-jscript": {
			"source": "iana"
		},
		"application/vnd.canon-cpdl": {
			"source": "iana"
		},
		"application/vnd.canon-lips": {
			"source": "iana"
		},
		"application/vnd.cendio.thinlinc.clientconf": {
			"source": "iana"
		},
		"application/vnd.century-systems.tcp_stream": {
			"source": "iana"
		},
		"application/vnd.chemdraw+xml": {
			"source": "iana",
			"extensions": [
				"cdxml"
			]
		},
		"application/vnd.chipnuts.karaoke-mmd": {
			"source": "iana",
			"extensions": [
				"mmd"
			]
		},
		"application/vnd.cinderella": {
			"source": "iana",
			"extensions": [
				"cdy"
			]
		},
		"application/vnd.cirpack.isdn-ext": {
			"source": "iana"
		},
		"application/vnd.citationstyles.style+xml": {
			"source": "iana"
		},
		"application/vnd.claymore": {
			"source": "iana",
			"extensions": [
				"cla"
			]
		},
		"application/vnd.cloanto.rp9": {
			"source": "iana",
			"extensions": [
				"rp9"
			]
		},
		"application/vnd.clonk.c4group": {
			"source": "iana",
			"extensions": [
				"c4g",
				"c4d",
				"c4f",
				"c4p",
				"c4u"
			]
		},
		"application/vnd.cluetrust.cartomobile-config": {
			"source": "iana",
			"extensions": [
				"c11amc"
			]
		},
		"application/vnd.cluetrust.cartomobile-config-pkg": {
			"source": "iana",
			"extensions": [
				"c11amz"
			]
		},
		"application/vnd.coffeescript": {
			"source": "iana"
		},
		"application/vnd.collection+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.doc+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.next+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.commerce-battelle": {
			"source": "iana"
		},
		"application/vnd.commonspace": {
			"source": "iana",
			"extensions": [
				"csp"
			]
		},
		"application/vnd.contact.cmsg": {
			"source": "iana",
			"extensions": [
				"cdbcmsg"
			]
		},
		"application/vnd.cosmocaller": {
			"source": "iana",
			"extensions": [
				"cmc"
			]
		},
		"application/vnd.crick.clicker": {
			"source": "iana",
			"extensions": [
				"clkx"
			]
		},
		"application/vnd.crick.clicker.keyboard": {
			"source": "iana",
			"extensions": [
				"clkk"
			]
		},
		"application/vnd.crick.clicker.palette": {
			"source": "iana",
			"extensions": [
				"clkp"
			]
		},
		"application/vnd.crick.clicker.template": {
			"source": "iana",
			"extensions": [
				"clkt"
			]
		},
		"application/vnd.crick.clicker.wordbank": {
			"source": "iana",
			"extensions": [
				"clkw"
			]
		},
		"application/vnd.criticaltools.wbs+xml": {
			"source": "iana",
			"extensions": [
				"wbs"
			]
		},
		"application/vnd.ctc-posml": {
			"source": "iana",
			"extensions": [
				"pml"
			]
		},
		"application/vnd.ctct.ws+xml": {
			"source": "iana"
		},
		"application/vnd.cups-pdf": {
			"source": "iana"
		},
		"application/vnd.cups-postscript": {
			"source": "iana"
		},
		"application/vnd.cups-ppd": {
			"source": "iana",
			"extensions": [
				"ppd"
			]
		},
		"application/vnd.cups-raster": {
			"source": "iana"
		},
		"application/vnd.cups-raw": {
			"source": "iana"
		},
		"application/vnd.curl": {
			"source": "iana"
		},
		"application/vnd.curl.car": {
			"source": "apache",
			"extensions": [
				"car"
			]
		},
		"application/vnd.curl.pcurl": {
			"source": "apache",
			"extensions": [
				"pcurl"
			]
		},
		"application/vnd.cyan.dean.root+xml": {
			"source": "iana"
		},
		"application/vnd.cybank": {
			"source": "iana"
		},
		"application/vnd.dart": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"dart"
			]
		},
		"application/vnd.data-vision.rdz": {
			"source": "iana",
			"extensions": [
				"rdz"
			]
		},
		"application/vnd.debian.binary-package": {
			"source": "iana"
		},
		"application/vnd.dece.data": {
			"source": "iana",
			"extensions": [
				"uvf",
				"uvvf",
				"uvd",
				"uvvd"
			]
		},
		"application/vnd.dece.ttml+xml": {
			"source": "iana",
			"extensions": [
				"uvt",
				"uvvt"
			]
		},
		"application/vnd.dece.unspecified": {
			"source": "iana",
			"extensions": [
				"uvx",
				"uvvx"
			]
		},
		"application/vnd.dece.zip": {
			"source": "iana",
			"extensions": [
				"uvz",
				"uvvz"
			]
		},
		"application/vnd.denovo.fcselayout-link": {
			"source": "iana",
			"extensions": [
				"fe_launch"
			]
		},
		"application/vnd.desmume-movie": {
			"source": "iana"
		},
		"application/vnd.dir-bi.plate-dl-nosuffix": {
			"source": "iana"
		},
		"application/vnd.dm.delegation+xml": {
			"source": "iana"
		},
		"application/vnd.dna": {
			"source": "iana",
			"extensions": [
				"dna"
			]
		},
		"application/vnd.document+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dolby.mlp": {
			"source": "apache",
			"extensions": [
				"mlp"
			]
		},
		"application/vnd.dolby.mobile.1": {
			"source": "iana"
		},
		"application/vnd.dolby.mobile.2": {
			"source": "iana"
		},
		"application/vnd.doremir.scorecloud-binary-document": {
			"source": "iana"
		},
		"application/vnd.dpgraph": {
			"source": "iana",
			"extensions": [
				"dpg"
			]
		},
		"application/vnd.dreamfactory": {
			"source": "iana",
			"extensions": [
				"dfac"
			]
		},
		"application/vnd.drive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ds-keypoint": {
			"source": "apache",
			"extensions": [
				"kpxx"
			]
		},
		"application/vnd.dtg.local": {
			"source": "iana"
		},
		"application/vnd.dtg.local.flash": {
			"source": "iana"
		},
		"application/vnd.dtg.local.html": {
			"source": "iana"
		},
		"application/vnd.dvb.ait": {
			"source": "iana",
			"extensions": [
				"ait"
			]
		},
		"application/vnd.dvb.dvbj": {
			"source": "iana"
		},
		"application/vnd.dvb.esgcontainer": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcdftnotifaccess": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgaccess": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgaccess2": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgpdd": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcroaming": {
			"source": "iana"
		},
		"application/vnd.dvb.iptv.alfec-base": {
			"source": "iana"
		},
		"application/vnd.dvb.iptv.alfec-enhancement": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-aggregate-root+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-container+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-generic+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-msglist+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-registration-request+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-registration-response+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-init+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.pfr": {
			"source": "iana"
		},
		"application/vnd.dvb.service": {
			"source": "iana",
			"extensions": [
				"svc"
			]
		},
		"application/vnd.dxr": {
			"source": "iana"
		},
		"application/vnd.dynageo": {
			"source": "iana",
			"extensions": [
				"geo"
			]
		},
		"application/vnd.dzr": {
			"source": "iana"
		},
		"application/vnd.easykaraoke.cdgdownload": {
			"source": "iana"
		},
		"application/vnd.ecdis-update": {
			"source": "iana"
		},
		"application/vnd.ecowin.chart": {
			"source": "iana",
			"extensions": [
				"mag"
			]
		},
		"application/vnd.ecowin.filerequest": {
			"source": "iana"
		},
		"application/vnd.ecowin.fileupdate": {
			"source": "iana"
		},
		"application/vnd.ecowin.series": {
			"source": "iana"
		},
		"application/vnd.ecowin.seriesrequest": {
			"source": "iana"
		},
		"application/vnd.ecowin.seriesupdate": {
			"source": "iana"
		},
		"application/vnd.emclient.accessrequest+xml": {
			"source": "iana"
		},
		"application/vnd.enliven": {
			"source": "iana",
			"extensions": [
				"nml"
			]
		},
		"application/vnd.enphase.envoy": {
			"source": "iana"
		},
		"application/vnd.eprints.data+xml": {
			"source": "iana"
		},
		"application/vnd.epson.esf": {
			"source": "iana",
			"extensions": [
				"esf"
			]
		},
		"application/vnd.epson.msf": {
			"source": "iana",
			"extensions": [
				"msf"
			]
		},
		"application/vnd.epson.quickanime": {
			"source": "iana",
			"extensions": [
				"qam"
			]
		},
		"application/vnd.epson.salt": {
			"source": "iana",
			"extensions": [
				"slt"
			]
		},
		"application/vnd.epson.ssf": {
			"source": "iana",
			"extensions": [
				"ssf"
			]
		},
		"application/vnd.ericsson.quickcall": {
			"source": "iana"
		},
		"application/vnd.eszigno3+xml": {
			"source": "iana",
			"extensions": [
				"es3",
				"et3"
			]
		},
		"application/vnd.etsi.aoc+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.asic-e+zip": {
			"source": "iana"
		},
		"application/vnd.etsi.asic-s+zip": {
			"source": "iana"
		},
		"application/vnd.etsi.cug+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvcommand+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvdiscovery+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvprofile+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-bc+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-cod+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-npvr+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvservice+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsync+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvueprofile+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.mcid+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.mheg5": {
			"source": "iana"
		},
		"application/vnd.etsi.overload-control-policy-dataset+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.pstn+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.sci+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.simservs+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.timestamp-token": {
			"source": "iana"
		},
		"application/vnd.etsi.tsl+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.tsl.der": {
			"source": "iana"
		},
		"application/vnd.eudora.data": {
			"source": "iana"
		},
		"application/vnd.ezpix-album": {
			"source": "iana",
			"extensions": [
				"ez2"
			]
		},
		"application/vnd.ezpix-package": {
			"source": "iana",
			"extensions": [
				"ez3"
			]
		},
		"application/vnd.f-secure.mobile": {
			"source": "iana"
		},
		"application/vnd.fastcopy-disk-image": {
			"source": "iana"
		},
		"application/vnd.fdf": {
			"source": "iana",
			"extensions": [
				"fdf"
			]
		},
		"application/vnd.fdsn.mseed": {
			"source": "iana",
			"extensions": [
				"mseed"
			]
		},
		"application/vnd.fdsn.seed": {
			"source": "iana",
			"extensions": [
				"seed",
				"dataless"
			]
		},
		"application/vnd.ffsns": {
			"source": "iana"
		},
		"application/vnd.filmit.zfc": {
			"source": "iana"
		},
		"application/vnd.fints": {
			"source": "iana"
		},
		"application/vnd.firemonkeys.cloudcell": {
			"source": "iana"
		},
		"application/vnd.flographit": {
			"source": "iana",
			"extensions": [
				"gph"
			]
		},
		"application/vnd.fluxtime.clip": {
			"source": "iana",
			"extensions": [
				"ftc"
			]
		},
		"application/vnd.font-fontforge-sfd": {
			"source": "iana"
		},
		"application/vnd.framemaker": {
			"source": "iana",
			"extensions": [
				"fm",
				"frame",
				"maker",
				"book"
			]
		},
		"application/vnd.frogans.fnc": {
			"source": "iana",
			"extensions": [
				"fnc"
			]
		},
		"application/vnd.frogans.ltf": {
			"source": "iana",
			"extensions": [
				"ltf"
			]
		},
		"application/vnd.fsc.weblaunch": {
			"source": "iana",
			"extensions": [
				"fsc"
			]
		},
		"application/vnd.fujitsu.oasys": {
			"source": "iana",
			"extensions": [
				"oas"
			]
		},
		"application/vnd.fujitsu.oasys2": {
			"source": "iana",
			"extensions": [
				"oa2"
			]
		},
		"application/vnd.fujitsu.oasys3": {
			"source": "iana",
			"extensions": [
				"oa3"
			]
		},
		"application/vnd.fujitsu.oasysgp": {
			"source": "iana",
			"extensions": [
				"fg5"
			]
		},
		"application/vnd.fujitsu.oasysprs": {
			"source": "iana",
			"extensions": [
				"bh2"
			]
		},
		"application/vnd.fujixerox.art-ex": {
			"source": "iana"
		},
		"application/vnd.fujixerox.art4": {
			"source": "iana"
		},
		"application/vnd.fujixerox.ddd": {
			"source": "iana",
			"extensions": [
				"ddd"
			]
		},
		"application/vnd.fujixerox.docuworks": {
			"source": "iana",
			"extensions": [
				"xdw"
			]
		},
		"application/vnd.fujixerox.docuworks.binder": {
			"source": "iana",
			"extensions": [
				"xbd"
			]
		},
		"application/vnd.fujixerox.docuworks.container": {
			"source": "iana"
		},
		"application/vnd.fujixerox.hbpl": {
			"source": "iana"
		},
		"application/vnd.fut-misnet": {
			"source": "iana"
		},
		"application/vnd.fuzzysheet": {
			"source": "iana",
			"extensions": [
				"fzs"
			]
		},
		"application/vnd.genomatix.tuxedo": {
			"source": "iana",
			"extensions": [
				"txd"
			]
		},
		"application/vnd.geo+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.geocube+xml": {
			"source": "iana"
		},
		"application/vnd.geogebra.file": {
			"source": "iana",
			"extensions": [
				"ggb"
			]
		},
		"application/vnd.geogebra.tool": {
			"source": "iana",
			"extensions": [
				"ggt"
			]
		},
		"application/vnd.geometry-explorer": {
			"source": "iana",
			"extensions": [
				"gex",
				"gre"
			]
		},
		"application/vnd.geonext": {
			"source": "iana",
			"extensions": [
				"gxt"
			]
		},
		"application/vnd.geoplan": {
			"source": "iana",
			"extensions": [
				"g2w"
			]
		},
		"application/vnd.geospace": {
			"source": "iana",
			"extensions": [
				"g3w"
			]
		},
		"application/vnd.gerber": {
			"source": "iana"
		},
		"application/vnd.globalplatform.card-content-mgt": {
			"source": "iana"
		},
		"application/vnd.globalplatform.card-content-mgt-response": {
			"source": "iana"
		},
		"application/vnd.gmx": {
			"source": "iana",
			"extensions": [
				"gmx"
			]
		},
		"application/vnd.google-apps.document": {
			"compressible": false,
			"extensions": [
				"gdoc"
			]
		},
		"application/vnd.google-apps.presentation": {
			"compressible": false,
			"extensions": [
				"gslides"
			]
		},
		"application/vnd.google-apps.spreadsheet": {
			"compressible": false,
			"extensions": [
				"gsheet"
			]
		},
		"application/vnd.google-earth.kml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"kml"
			]
		},
		"application/vnd.google-earth.kmz": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"kmz"
			]
		},
		"application/vnd.gov.sk.e-form+xml": {
			"source": "iana"
		},
		"application/vnd.gov.sk.e-form+zip": {
			"source": "iana"
		},
		"application/vnd.gov.sk.xmldatacontainer+xml": {
			"source": "iana"
		},
		"application/vnd.grafeq": {
			"source": "iana",
			"extensions": [
				"gqf",
				"gqs"
			]
		},
		"application/vnd.gridmp": {
			"source": "iana"
		},
		"application/vnd.groove-account": {
			"source": "iana",
			"extensions": [
				"gac"
			]
		},
		"application/vnd.groove-help": {
			"source": "iana",
			"extensions": [
				"ghf"
			]
		},
		"application/vnd.groove-identity-message": {
			"source": "iana",
			"extensions": [
				"gim"
			]
		},
		"application/vnd.groove-injector": {
			"source": "iana",
			"extensions": [
				"grv"
			]
		},
		"application/vnd.groove-tool-message": {
			"source": "iana",
			"extensions": [
				"gtm"
			]
		},
		"application/vnd.groove-tool-template": {
			"source": "iana",
			"extensions": [
				"tpl"
			]
		},
		"application/vnd.groove-vcard": {
			"source": "iana",
			"extensions": [
				"vcg"
			]
		},
		"application/vnd.hal+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hal+xml": {
			"source": "iana",
			"extensions": [
				"hal"
			]
		},
		"application/vnd.handheld-entertainment+xml": {
			"source": "iana",
			"extensions": [
				"zmm"
			]
		},
		"application/vnd.hbci": {
			"source": "iana",
			"extensions": [
				"hbci"
			]
		},
		"application/vnd.hcl-bireports": {
			"source": "iana"
		},
		"application/vnd.heroku+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hhe.lesson-player": {
			"source": "iana",
			"extensions": [
				"les"
			]
		},
		"application/vnd.hp-hpgl": {
			"source": "iana",
			"extensions": [
				"hpgl"
			]
		},
		"application/vnd.hp-hpid": {
			"source": "iana",
			"extensions": [
				"hpid"
			]
		},
		"application/vnd.hp-hps": {
			"source": "iana",
			"extensions": [
				"hps"
			]
		},
		"application/vnd.hp-jlyt": {
			"source": "iana",
			"extensions": [
				"jlt"
			]
		},
		"application/vnd.hp-pcl": {
			"source": "iana",
			"extensions": [
				"pcl"
			]
		},
		"application/vnd.hp-pclxl": {
			"source": "iana",
			"extensions": [
				"pclxl"
			]
		},
		"application/vnd.httphone": {
			"source": "iana"
		},
		"application/vnd.hydrostatix.sof-data": {
			"source": "iana",
			"extensions": [
				"sfd-hdstx"
			]
		},
		"application/vnd.hyperdrive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hzn-3d-crossword": {
			"source": "iana"
		},
		"application/vnd.ibm.afplinedata": {
			"source": "iana"
		},
		"application/vnd.ibm.electronic-media": {
			"source": "iana"
		},
		"application/vnd.ibm.minipay": {
			"source": "iana",
			"extensions": [
				"mpy"
			]
		},
		"application/vnd.ibm.modcap": {
			"source": "iana",
			"extensions": [
				"afp",
				"listafp",
				"list3820"
			]
		},
		"application/vnd.ibm.rights-management": {
			"source": "iana",
			"extensions": [
				"irm"
			]
		},
		"application/vnd.ibm.secure-container": {
			"source": "iana",
			"extensions": [
				"sc"
			]
		},
		"application/vnd.iccprofile": {
			"source": "iana",
			"extensions": [
				"icc",
				"icm"
			]
		},
		"application/vnd.ieee.1905": {
			"source": "iana"
		},
		"application/vnd.igloader": {
			"source": "iana",
			"extensions": [
				"igl"
			]
		},
		"application/vnd.immervision-ivp": {
			"source": "iana",
			"extensions": [
				"ivp"
			]
		},
		"application/vnd.immervision-ivu": {
			"source": "iana",
			"extensions": [
				"ivu"
			]
		},
		"application/vnd.ims.imsccv1p1": {
			"source": "iana"
		},
		"application/vnd.ims.imsccv1p2": {
			"source": "iana"
		},
		"application/vnd.ims.imsccv1p3": {
			"source": "iana"
		},
		"application/vnd.ims.lis.v2.result+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy.id+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings.simple+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.informedcontrol.rms+xml": {
			"source": "iana"
		},
		"application/vnd.informix-visionary": {
			"source": "iana"
		},
		"application/vnd.infotech.project": {
			"source": "iana"
		},
		"application/vnd.infotech.project+xml": {
			"source": "iana"
		},
		"application/vnd.innopath.wamp.notification": {
			"source": "iana"
		},
		"application/vnd.insors.igm": {
			"source": "iana",
			"extensions": [
				"igm"
			]
		},
		"application/vnd.intercon.formnet": {
			"source": "iana",
			"extensions": [
				"xpw",
				"xpx"
			]
		},
		"application/vnd.intergeo": {
			"source": "iana",
			"extensions": [
				"i2g"
			]
		},
		"application/vnd.intertrust.digibox": {
			"source": "iana"
		},
		"application/vnd.intertrust.nncp": {
			"source": "iana"
		},
		"application/vnd.intu.qbo": {
			"source": "iana",
			"extensions": [
				"qbo"
			]
		},
		"application/vnd.intu.qfx": {
			"source": "iana",
			"extensions": [
				"qfx"
			]
		},
		"application/vnd.iptc.g2.catalogitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.conceptitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.knowledgeitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.newsitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.newsmessage+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.packageitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.planningitem+xml": {
			"source": "iana"
		},
		"application/vnd.ipunplugged.rcprofile": {
			"source": "iana",
			"extensions": [
				"rcprofile"
			]
		},
		"application/vnd.irepository.package+xml": {
			"source": "iana",
			"extensions": [
				"irp"
			]
		},
		"application/vnd.is-xpr": {
			"source": "iana",
			"extensions": [
				"xpr"
			]
		},
		"application/vnd.isac.fcs": {
			"source": "iana",
			"extensions": [
				"fcs"
			]
		},
		"application/vnd.jam": {
			"source": "iana",
			"extensions": [
				"jam"
			]
		},
		"application/vnd.japannet-directory-service": {
			"source": "iana"
		},
		"application/vnd.japannet-jpnstore-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-payment-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-registration": {
			"source": "iana"
		},
		"application/vnd.japannet-registration-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-setstore-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-verification": {
			"source": "iana"
		},
		"application/vnd.japannet-verification-wakeup": {
			"source": "iana"
		},
		"application/vnd.jcp.javame.midlet-rms": {
			"source": "iana",
			"extensions": [
				"rms"
			]
		},
		"application/vnd.jisp": {
			"source": "iana",
			"extensions": [
				"jisp"
			]
		},
		"application/vnd.joost.joda-archive": {
			"source": "iana",
			"extensions": [
				"joda"
			]
		},
		"application/vnd.jsk.isdn-ngn": {
			"source": "iana"
		},
		"application/vnd.kahootz": {
			"source": "iana",
			"extensions": [
				"ktz",
				"ktr"
			]
		},
		"application/vnd.kde.karbon": {
			"source": "iana",
			"extensions": [
				"karbon"
			]
		},
		"application/vnd.kde.kchart": {
			"source": "iana",
			"extensions": [
				"chrt"
			]
		},
		"application/vnd.kde.kformula": {
			"source": "iana",
			"extensions": [
				"kfo"
			]
		},
		"application/vnd.kde.kivio": {
			"source": "iana",
			"extensions": [
				"flw"
			]
		},
		"application/vnd.kde.kontour": {
			"source": "iana",
			"extensions": [
				"kon"
			]
		},
		"application/vnd.kde.kpresenter": {
			"source": "iana",
			"extensions": [
				"kpr",
				"kpt"
			]
		},
		"application/vnd.kde.kspread": {
			"source": "iana",
			"extensions": [
				"ksp"
			]
		},
		"application/vnd.kde.kword": {
			"source": "iana",
			"extensions": [
				"kwd",
				"kwt"
			]
		},
		"application/vnd.kenameaapp": {
			"source": "iana",
			"extensions": [
				"htke"
			]
		},
		"application/vnd.kidspiration": {
			"source": "iana",
			"extensions": [
				"kia"
			]
		},
		"application/vnd.kinar": {
			"source": "iana",
			"extensions": [
				"kne",
				"knp"
			]
		},
		"application/vnd.koan": {
			"source": "iana",
			"extensions": [
				"skp",
				"skd",
				"skt",
				"skm"
			]
		},
		"application/vnd.kodak-descriptor": {
			"source": "iana",
			"extensions": [
				"sse"
			]
		},
		"application/vnd.las.las+xml": {
			"source": "iana",
			"extensions": [
				"lasxml"
			]
		},
		"application/vnd.liberty-request+xml": {
			"source": "iana"
		},
		"application/vnd.llamagraphics.life-balance.desktop": {
			"source": "iana",
			"extensions": [
				"lbd"
			]
		},
		"application/vnd.llamagraphics.life-balance.exchange+xml": {
			"source": "iana",
			"extensions": [
				"lbe"
			]
		},
		"application/vnd.lotus-1-2-3": {
			"source": "iana",
			"extensions": [
				"123"
			]
		},
		"application/vnd.lotus-approach": {
			"source": "iana",
			"extensions": [
				"apr"
			]
		},
		"application/vnd.lotus-freelance": {
			"source": "iana",
			"extensions": [
				"pre"
			]
		},
		"application/vnd.lotus-notes": {
			"source": "iana",
			"extensions": [
				"nsf"
			]
		},
		"application/vnd.lotus-organizer": {
			"source": "iana",
			"extensions": [
				"org"
			]
		},
		"application/vnd.lotus-screencam": {
			"source": "iana",
			"extensions": [
				"scm"
			]
		},
		"application/vnd.lotus-wordpro": {
			"source": "iana",
			"extensions": [
				"lwp"
			]
		},
		"application/vnd.macports.portpkg": {
			"source": "iana",
			"extensions": [
				"portpkg"
			]
		},
		"application/vnd.mapbox-vector-tile": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.actiontoken+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.conftoken+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.license+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.mdcf": {
			"source": "iana"
		},
		"application/vnd.mason+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.maxmind.maxmind-db": {
			"source": "iana"
		},
		"application/vnd.mcd": {
			"source": "iana",
			"extensions": [
				"mcd"
			]
		},
		"application/vnd.medcalcdata": {
			"source": "iana",
			"extensions": [
				"mc1"
			]
		},
		"application/vnd.mediastation.cdkey": {
			"source": "iana",
			"extensions": [
				"cdkey"
			]
		},
		"application/vnd.meridian-slingshot": {
			"source": "iana"
		},
		"application/vnd.mfer": {
			"source": "iana",
			"extensions": [
				"mwf"
			]
		},
		"application/vnd.mfmp": {
			"source": "iana",
			"extensions": [
				"mfm"
			]
		},
		"application/vnd.micro+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.micrografx.flo": {
			"source": "iana",
			"extensions": [
				"flo"
			]
		},
		"application/vnd.micrografx.igx": {
			"source": "iana",
			"extensions": [
				"igx"
			]
		},
		"application/vnd.microsoft.portable-executable": {
			"source": "iana"
		},
		"application/vnd.miele+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.mif": {
			"source": "iana",
			"extensions": [
				"mif"
			]
		},
		"application/vnd.minisoft-hp3000-save": {
			"source": "iana"
		},
		"application/vnd.mitsubishi.misty-guard.trustweb": {
			"source": "iana"
		},
		"application/vnd.mobius.daf": {
			"source": "iana",
			"extensions": [
				"daf"
			]
		},
		"application/vnd.mobius.dis": {
			"source": "iana",
			"extensions": [
				"dis"
			]
		},
		"application/vnd.mobius.mbk": {
			"source": "iana",
			"extensions": [
				"mbk"
			]
		},
		"application/vnd.mobius.mqy": {
			"source": "iana",
			"extensions": [
				"mqy"
			]
		},
		"application/vnd.mobius.msl": {
			"source": "iana",
			"extensions": [
				"msl"
			]
		},
		"application/vnd.mobius.plc": {
			"source": "iana",
			"extensions": [
				"plc"
			]
		},
		"application/vnd.mobius.txf": {
			"source": "iana",
			"extensions": [
				"txf"
			]
		},
		"application/vnd.mophun.application": {
			"source": "iana",
			"extensions": [
				"mpn"
			]
		},
		"application/vnd.mophun.certificate": {
			"source": "iana",
			"extensions": [
				"mpc"
			]
		},
		"application/vnd.motorola.flexsuite": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.adsi": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.fis": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.gotap": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.kmr": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.ttc": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.wem": {
			"source": "iana"
		},
		"application/vnd.motorola.iprm": {
			"source": "iana"
		},
		"application/vnd.mozilla.xul+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xul"
			]
		},
		"application/vnd.ms-3mfdocument": {
			"source": "iana"
		},
		"application/vnd.ms-artgalry": {
			"source": "iana",
			"extensions": [
				"cil"
			]
		},
		"application/vnd.ms-asf": {
			"source": "iana"
		},
		"application/vnd.ms-cab-compressed": {
			"source": "iana",
			"extensions": [
				"cab"
			]
		},
		"application/vnd.ms-color.iccprofile": {
			"source": "apache"
		},
		"application/vnd.ms-excel": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xls",
				"xlm",
				"xla",
				"xlc",
				"xlt",
				"xlw"
			]
		},
		"application/vnd.ms-excel.addin.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlam"
			]
		},
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlsb"
			]
		},
		"application/vnd.ms-excel.sheet.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlsm"
			]
		},
		"application/vnd.ms-excel.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xltm"
			]
		},
		"application/vnd.ms-fontobject": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"eot"
			]
		},
		"application/vnd.ms-htmlhelp": {
			"source": "iana",
			"extensions": [
				"chm"
			]
		},
		"application/vnd.ms-ims": {
			"source": "iana",
			"extensions": [
				"ims"
			]
		},
		"application/vnd.ms-lrm": {
			"source": "iana",
			"extensions": [
				"lrm"
			]
		},
		"application/vnd.ms-office.activex+xml": {
			"source": "iana"
		},
		"application/vnd.ms-officetheme": {
			"source": "iana",
			"extensions": [
				"thmx"
			]
		},
		"application/vnd.ms-opentype": {
			"source": "apache",
			"compressible": true
		},
		"application/vnd.ms-package.obfuscated-opentype": {
			"source": "apache"
		},
		"application/vnd.ms-pki.seccat": {
			"source": "apache",
			"extensions": [
				"cat"
			]
		},
		"application/vnd.ms-pki.stl": {
			"source": "apache",
			"extensions": [
				"stl"
			]
		},
		"application/vnd.ms-playready.initiator+xml": {
			"source": "iana"
		},
		"application/vnd.ms-powerpoint": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ppt",
				"pps",
				"pot"
			]
		},
		"application/vnd.ms-powerpoint.addin.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"ppam"
			]
		},
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"pptm"
			]
		},
		"application/vnd.ms-powerpoint.slide.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"sldm"
			]
		},
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"ppsm"
			]
		},
		"application/vnd.ms-powerpoint.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"potm"
			]
		},
		"application/vnd.ms-printdevicecapabilities+xml": {
			"source": "iana"
		},
		"application/vnd.ms-printing.printticket+xml": {
			"source": "apache"
		},
		"application/vnd.ms-project": {
			"source": "iana",
			"extensions": [
				"mpp",
				"mpt"
			]
		},
		"application/vnd.ms-tnef": {
			"source": "iana"
		},
		"application/vnd.ms-windows.devicepairing": {
			"source": "iana"
		},
		"application/vnd.ms-windows.nwprinting.oob": {
			"source": "iana"
		},
		"application/vnd.ms-windows.printerpairing": {
			"source": "iana"
		},
		"application/vnd.ms-windows.wsd.oob": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.lic-chlg-req": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.lic-resp": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.meter-chlg-req": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.meter-resp": {
			"source": "iana"
		},
		"application/vnd.ms-word.document.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"docm"
			]
		},
		"application/vnd.ms-word.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"dotm"
			]
		},
		"application/vnd.ms-works": {
			"source": "iana",
			"extensions": [
				"wps",
				"wks",
				"wcm",
				"wdb"
			]
		},
		"application/vnd.ms-wpl": {
			"source": "iana",
			"extensions": [
				"wpl"
			]
		},
		"application/vnd.ms-xpsdocument": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xps"
			]
		},
		"application/vnd.msa-disk-image": {
			"source": "iana"
		},
		"application/vnd.mseq": {
			"source": "iana",
			"extensions": [
				"mseq"
			]
		},
		"application/vnd.msign": {
			"source": "iana"
		},
		"application/vnd.multiad.creator": {
			"source": "iana"
		},
		"application/vnd.multiad.creator.cif": {
			"source": "iana"
		},
		"application/vnd.music-niff": {
			"source": "iana"
		},
		"application/vnd.musician": {
			"source": "iana",
			"extensions": [
				"mus"
			]
		},
		"application/vnd.muvee.style": {
			"source": "iana",
			"extensions": [
				"msty"
			]
		},
		"application/vnd.mynfc": {
			"source": "iana",
			"extensions": [
				"taglet"
			]
		},
		"application/vnd.ncd.control": {
			"source": "iana"
		},
		"application/vnd.ncd.reference": {
			"source": "iana"
		},
		"application/vnd.nervana": {
			"source": "iana"
		},
		"application/vnd.netfpx": {
			"source": "iana"
		},
		"application/vnd.neurolanguage.nlu": {
			"source": "iana",
			"extensions": [
				"nlu"
			]
		},
		"application/vnd.nintendo.nitro.rom": {
			"source": "iana"
		},
		"application/vnd.nintendo.snes.rom": {
			"source": "iana"
		},
		"application/vnd.nitf": {
			"source": "iana",
			"extensions": [
				"ntf",
				"nitf"
			]
		},
		"application/vnd.noblenet-directory": {
			"source": "iana",
			"extensions": [
				"nnd"
			]
		},
		"application/vnd.noblenet-sealer": {
			"source": "iana",
			"extensions": [
				"nns"
			]
		},
		"application/vnd.noblenet-web": {
			"source": "iana",
			"extensions": [
				"nnw"
			]
		},
		"application/vnd.nokia.catalogs": {
			"source": "iana"
		},
		"application/vnd.nokia.conml+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.conml+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.iptv.config+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.isds-radio-presets": {
			"source": "iana"
		},
		"application/vnd.nokia.landmark+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.landmark+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.landmarkcollection+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.n-gage.ac+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.n-gage.data": {
			"source": "iana",
			"extensions": [
				"ngdat"
			]
		},
		"application/vnd.nokia.n-gage.symbian.install": {
			"source": "iana",
			"extensions": [
				"n-gage"
			]
		},
		"application/vnd.nokia.ncd": {
			"source": "iana"
		},
		"application/vnd.nokia.pcd+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.pcd+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.radio-preset": {
			"source": "iana",
			"extensions": [
				"rpst"
			]
		},
		"application/vnd.nokia.radio-presets": {
			"source": "iana",
			"extensions": [
				"rpss"
			]
		},
		"application/vnd.novadigm.edm": {
			"source": "iana",
			"extensions": [
				"edm"
			]
		},
		"application/vnd.novadigm.edx": {
			"source": "iana",
			"extensions": [
				"edx"
			]
		},
		"application/vnd.novadigm.ext": {
			"source": "iana",
			"extensions": [
				"ext"
			]
		},
		"application/vnd.ntt-local.content-share": {
			"source": "iana"
		},
		"application/vnd.ntt-local.file-transfer": {
			"source": "iana"
		},
		"application/vnd.ntt-local.ogw_remote-access": {
			"source": "iana"
		},
		"application/vnd.ntt-local.sip-ta_remote": {
			"source": "iana"
		},
		"application/vnd.ntt-local.sip-ta_tcp_stream": {
			"source": "iana"
		},
		"application/vnd.oasis.opendocument.chart": {
			"source": "iana",
			"extensions": [
				"odc"
			]
		},
		"application/vnd.oasis.opendocument.chart-template": {
			"source": "iana",
			"extensions": [
				"otc"
			]
		},
		"application/vnd.oasis.opendocument.database": {
			"source": "iana",
			"extensions": [
				"odb"
			]
		},
		"application/vnd.oasis.opendocument.formula": {
			"source": "iana",
			"extensions": [
				"odf"
			]
		},
		"application/vnd.oasis.opendocument.formula-template": {
			"source": "iana",
			"extensions": [
				"odft"
			]
		},
		"application/vnd.oasis.opendocument.graphics": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odg"
			]
		},
		"application/vnd.oasis.opendocument.graphics-template": {
			"source": "iana",
			"extensions": [
				"otg"
			]
		},
		"application/vnd.oasis.opendocument.image": {
			"source": "iana",
			"extensions": [
				"odi"
			]
		},
		"application/vnd.oasis.opendocument.image-template": {
			"source": "iana",
			"extensions": [
				"oti"
			]
		},
		"application/vnd.oasis.opendocument.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odp"
			]
		},
		"application/vnd.oasis.opendocument.presentation-template": {
			"source": "iana",
			"extensions": [
				"otp"
			]
		},
		"application/vnd.oasis.opendocument.spreadsheet": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ods"
			]
		},
		"application/vnd.oasis.opendocument.spreadsheet-template": {
			"source": "iana",
			"extensions": [
				"ots"
			]
		},
		"application/vnd.oasis.opendocument.text": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odt"
			]
		},
		"application/vnd.oasis.opendocument.text-master": {
			"source": "iana",
			"extensions": [
				"odm"
			]
		},
		"application/vnd.oasis.opendocument.text-template": {
			"source": "iana",
			"extensions": [
				"ott"
			]
		},
		"application/vnd.oasis.opendocument.text-web": {
			"source": "iana",
			"extensions": [
				"oth"
			]
		},
		"application/vnd.obn": {
			"source": "iana"
		},
		"application/vnd.oftn.l10n+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.contentaccessdownload+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.contentaccessstreaming+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.cspg-hexbinary": {
			"source": "iana"
		},
		"application/vnd.oipf.dae.svg+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.dae.xhtml+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.mippvcontrolmessage+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.pae.gem": {
			"source": "iana"
		},
		"application/vnd.oipf.spdiscovery+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.spdlist+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.ueprofile+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.userprofile+xml": {
			"source": "iana"
		},
		"application/vnd.olpc-sugar": {
			"source": "iana",
			"extensions": [
				"xo"
			]
		},
		"application/vnd.oma-scws-config": {
			"source": "iana"
		},
		"application/vnd.oma-scws-http-request": {
			"source": "iana"
		},
		"application/vnd.oma-scws-http-response": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.drm-trigger+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.imd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.ltkm": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.notification+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.provisioningtrigger": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgboot": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgdd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgdu": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.simple-symbol-container": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.smartcard-trigger+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sprov+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.stkm": {
			"source": "iana"
		},
		"application/vnd.oma.cab-address-book+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-feature-handler+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-pcc+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-subs-invite+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-user-prefs+xml": {
			"source": "iana"
		},
		"application/vnd.oma.dcd": {
			"source": "iana"
		},
		"application/vnd.oma.dcdc": {
			"source": "iana"
		},
		"application/vnd.oma.dd2+xml": {
			"source": "iana",
			"extensions": [
				"dd2"
			]
		},
		"application/vnd.oma.drm.risd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.group-usage-list+xml": {
			"source": "iana"
		},
		"application/vnd.oma.pal+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.detailed-progress-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.final-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.groups+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.invocation-descriptor+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.optimized-progress-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.push": {
			"source": "iana"
		},
		"application/vnd.oma.scidm.messages+xml": {
			"source": "iana"
		},
		"application/vnd.oma.xcap-directory+xml": {
			"source": "iana"
		},
		"application/vnd.omads-email+xml": {
			"source": "iana"
		},
		"application/vnd.omads-file+xml": {
			"source": "iana"
		},
		"application/vnd.omads-folder+xml": {
			"source": "iana"
		},
		"application/vnd.omaloc-supl-init": {
			"source": "iana"
		},
		"application/vnd.openblox.game+xml": {
			"source": "iana"
		},
		"application/vnd.openblox.game-binary": {
			"source": "iana"
		},
		"application/vnd.openeye.oeb": {
			"source": "iana"
		},
		"application/vnd.openofficeorg.extension": {
			"source": "apache",
			"extensions": [
				"oxt"
			]
		},
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawing+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pptx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide": {
			"source": "iana",
			"extensions": [
				"sldx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
			"source": "iana",
			"extensions": [
				"ppsx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template": {
			"source": "apache",
			"extensions": [
				"potx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xlsx"
			]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
			"source": "apache",
			"extensions": [
				"xltx"
			]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.theme+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.vmldrawing": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"docx"
			]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
			"source": "apache",
			"extensions": [
				"dotx"
			]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.core-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.relationships+xml": {
			"source": "iana"
		},
		"application/vnd.oracle.resource+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.orange.indata": {
			"source": "iana"
		},
		"application/vnd.osa.netdeploy": {
			"source": "iana"
		},
		"application/vnd.osgeo.mapguide.package": {
			"source": "iana",
			"extensions": [
				"mgp"
			]
		},
		"application/vnd.osgi.bundle": {
			"source": "iana"
		},
		"application/vnd.osgi.dp": {
			"source": "iana",
			"extensions": [
				"dp"
			]
		},
		"application/vnd.osgi.subsystem": {
			"source": "iana",
			"extensions": [
				"esa"
			]
		},
		"application/vnd.otps.ct-kip+xml": {
			"source": "iana"
		},
		"application/vnd.oxli.countgraph": {
			"source": "iana"
		},
		"application/vnd.pagerduty+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.palm": {
			"source": "iana",
			"extensions": [
				"pdb",
				"pqa",
				"oprc"
			]
		},
		"application/vnd.panoply": {
			"source": "iana"
		},
		"application/vnd.paos+xml": {
			"source": "iana"
		},
		"application/vnd.paos.xml": {
			"source": "apache"
		},
		"application/vnd.pawaafile": {
			"source": "iana",
			"extensions": [
				"paw"
			]
		},
		"application/vnd.pcos": {
			"source": "iana"
		},
		"application/vnd.pg.format": {
			"source": "iana",
			"extensions": [
				"str"
			]
		},
		"application/vnd.pg.osasli": {
			"source": "iana",
			"extensions": [
				"ei6"
			]
		},
		"application/vnd.piaccess.application-licence": {
			"source": "iana"
		},
		"application/vnd.picsel": {
			"source": "iana",
			"extensions": [
				"efif"
			]
		},
		"application/vnd.pmi.widget": {
			"source": "iana",
			"extensions": [
				"wg"
			]
		},
		"application/vnd.poc.group-advertisement+xml": {
			"source": "iana"
		},
		"application/vnd.pocketlearn": {
			"source": "iana",
			"extensions": [
				"plf"
			]
		},
		"application/vnd.powerbuilder6": {
			"source": "iana",
			"extensions": [
				"pbd"
			]
		},
		"application/vnd.powerbuilder6-s": {
			"source": "iana"
		},
		"application/vnd.powerbuilder7": {
			"source": "iana"
		},
		"application/vnd.powerbuilder7-s": {
			"source": "iana"
		},
		"application/vnd.powerbuilder75": {
			"source": "iana"
		},
		"application/vnd.powerbuilder75-s": {
			"source": "iana"
		},
		"application/vnd.preminet": {
			"source": "iana"
		},
		"application/vnd.previewsystems.box": {
			"source": "iana",
			"extensions": [
				"box"
			]
		},
		"application/vnd.proteus.magazine": {
			"source": "iana",
			"extensions": [
				"mgz"
			]
		},
		"application/vnd.publishare-delta-tree": {
			"source": "iana",
			"extensions": [
				"qps"
			]
		},
		"application/vnd.pvi.ptid1": {
			"source": "iana",
			"extensions": [
				"ptid"
			]
		},
		"application/vnd.pwg-multiplexed": {
			"source": "iana"
		},
		"application/vnd.pwg-xhtml-print+xml": {
			"source": "iana"
		},
		"application/vnd.qualcomm.brew-app-res": {
			"source": "iana"
		},
		"application/vnd.quark.quarkxpress": {
			"source": "iana",
			"extensions": [
				"qxd",
				"qxt",
				"qwd",
				"qwt",
				"qxl",
				"qxb"
			]
		},
		"application/vnd.quobject-quoxdocument": {
			"source": "iana"
		},
		"application/vnd.radisys.moml+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-conf+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-conn+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-dialog+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-stream+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-conf+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-base+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-fax-detect+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-group+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-speech+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-transform+xml": {
			"source": "iana"
		},
		"application/vnd.rainstor.data": {
			"source": "iana"
		},
		"application/vnd.rapid": {
			"source": "iana"
		},
		"application/vnd.realvnc.bed": {
			"source": "iana",
			"extensions": [
				"bed"
			]
		},
		"application/vnd.recordare.musicxml": {
			"source": "iana",
			"extensions": [
				"mxl"
			]
		},
		"application/vnd.recordare.musicxml+xml": {
			"source": "iana",
			"extensions": [
				"musicxml"
			]
		},
		"application/vnd.renlearn.rlprint": {
			"source": "iana"
		},
		"application/vnd.rig.cryptonote": {
			"source": "iana",
			"extensions": [
				"cryptonote"
			]
		},
		"application/vnd.rim.cod": {
			"source": "apache",
			"extensions": [
				"cod"
			]
		},
		"application/vnd.rn-realmedia": {
			"source": "apache",
			"extensions": [
				"rm"
			]
		},
		"application/vnd.rn-realmedia-vbr": {
			"source": "apache",
			"extensions": [
				"rmvb"
			]
		},
		"application/vnd.route66.link66+xml": {
			"source": "iana",
			"extensions": [
				"link66"
			]
		},
		"application/vnd.rs-274x": {
			"source": "iana"
		},
		"application/vnd.ruckus.download": {
			"source": "iana"
		},
		"application/vnd.s3sms": {
			"source": "iana"
		},
		"application/vnd.sailingtracker.track": {
			"source": "iana",
			"extensions": [
				"st"
			]
		},
		"application/vnd.sbm.cid": {
			"source": "iana"
		},
		"application/vnd.sbm.mid2": {
			"source": "iana"
		},
		"application/vnd.scribus": {
			"source": "iana"
		},
		"application/vnd.sealed.3df": {
			"source": "iana"
		},
		"application/vnd.sealed.csf": {
			"source": "iana"
		},
		"application/vnd.sealed.doc": {
			"source": "iana"
		},
		"application/vnd.sealed.eml": {
			"source": "iana"
		},
		"application/vnd.sealed.mht": {
			"source": "iana"
		},
		"application/vnd.sealed.net": {
			"source": "iana"
		},
		"application/vnd.sealed.ppt": {
			"source": "iana"
		},
		"application/vnd.sealed.tiff": {
			"source": "iana"
		},
		"application/vnd.sealed.xls": {
			"source": "iana"
		},
		"application/vnd.sealedmedia.softseal.html": {
			"source": "iana"
		},
		"application/vnd.sealedmedia.softseal.pdf": {
			"source": "iana"
		},
		"application/vnd.seemail": {
			"source": "iana",
			"extensions": [
				"see"
			]
		},
		"application/vnd.sema": {
			"source": "iana",
			"extensions": [
				"sema"
			]
		},
		"application/vnd.semd": {
			"source": "iana",
			"extensions": [
				"semd"
			]
		},
		"application/vnd.semf": {
			"source": "iana",
			"extensions": [
				"semf"
			]
		},
		"application/vnd.shana.informed.formdata": {
			"source": "iana",
			"extensions": [
				"ifm"
			]
		},
		"application/vnd.shana.informed.formtemplate": {
			"source": "iana",
			"extensions": [
				"itp"
			]
		},
		"application/vnd.shana.informed.interchange": {
			"source": "iana",
			"extensions": [
				"iif"
			]
		},
		"application/vnd.shana.informed.package": {
			"source": "iana",
			"extensions": [
				"ipk"
			]
		},
		"application/vnd.simtech-mindmapper": {
			"source": "iana",
			"extensions": [
				"twd",
				"twds"
			]
		},
		"application/vnd.siren+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.smaf": {
			"source": "iana",
			"extensions": [
				"mmf"
			]
		},
		"application/vnd.smart.notebook": {
			"source": "iana"
		},
		"application/vnd.smart.teacher": {
			"source": "iana",
			"extensions": [
				"teacher"
			]
		},
		"application/vnd.software602.filler.form+xml": {
			"source": "iana"
		},
		"application/vnd.software602.filler.form-xml-zip": {
			"source": "iana"
		},
		"application/vnd.solent.sdkm+xml": {
			"source": "iana",
			"extensions": [
				"sdkm",
				"sdkd"
			]
		},
		"application/vnd.spotfire.dxp": {
			"source": "iana",
			"extensions": [
				"dxp"
			]
		},
		"application/vnd.spotfire.sfs": {
			"source": "iana",
			"extensions": [
				"sfs"
			]
		},
		"application/vnd.sss-cod": {
			"source": "iana"
		},
		"application/vnd.sss-dtf": {
			"source": "iana"
		},
		"application/vnd.sss-ntf": {
			"source": "iana"
		},
		"application/vnd.stardivision.calc": {
			"source": "apache",
			"extensions": [
				"sdc"
			]
		},
		"application/vnd.stardivision.draw": {
			"source": "apache",
			"extensions": [
				"sda"
			]
		},
		"application/vnd.stardivision.impress": {
			"source": "apache",
			"extensions": [
				"sdd"
			]
		},
		"application/vnd.stardivision.math": {
			"source": "apache",
			"extensions": [
				"smf"
			]
		},
		"application/vnd.stardivision.writer": {
			"source": "apache",
			"extensions": [
				"sdw",
				"vor"
			]
		},
		"application/vnd.stardivision.writer-global": {
			"source": "apache",
			"extensions": [
				"sgl"
			]
		},
		"application/vnd.stepmania.package": {
			"source": "iana",
			"extensions": [
				"smzip"
			]
		},
		"application/vnd.stepmania.stepchart": {
			"source": "iana",
			"extensions": [
				"sm"
			]
		},
		"application/vnd.street-stream": {
			"source": "iana"
		},
		"application/vnd.sun.wadl+xml": {
			"source": "iana"
		},
		"application/vnd.sun.xml.calc": {
			"source": "apache",
			"extensions": [
				"sxc"
			]
		},
		"application/vnd.sun.xml.calc.template": {
			"source": "apache",
			"extensions": [
				"stc"
			]
		},
		"application/vnd.sun.xml.draw": {
			"source": "apache",
			"extensions": [
				"sxd"
			]
		},
		"application/vnd.sun.xml.draw.template": {
			"source": "apache",
			"extensions": [
				"std"
			]
		},
		"application/vnd.sun.xml.impress": {
			"source": "apache",
			"extensions": [
				"sxi"
			]
		},
		"application/vnd.sun.xml.impress.template": {
			"source": "apache",
			"extensions": [
				"sti"
			]
		},
		"application/vnd.sun.xml.math": {
			"source": "apache",
			"extensions": [
				"sxm"
			]
		},
		"application/vnd.sun.xml.writer": {
			"source": "apache",
			"extensions": [
				"sxw"
			]
		},
		"application/vnd.sun.xml.writer.global": {
			"source": "apache",
			"extensions": [
				"sxg"
			]
		},
		"application/vnd.sun.xml.writer.template": {
			"source": "apache",
			"extensions": [
				"stw"
			]
		},
		"application/vnd.sus-calendar": {
			"source": "iana",
			"extensions": [
				"sus",
				"susp"
			]
		},
		"application/vnd.svd": {
			"source": "iana",
			"extensions": [
				"svd"
			]
		},
		"application/vnd.swiftview-ics": {
			"source": "iana"
		},
		"application/vnd.symbian.install": {
			"source": "apache",
			"extensions": [
				"sis",
				"sisx"
			]
		},
		"application/vnd.syncml+xml": {
			"source": "iana",
			"extensions": [
				"xsm"
			]
		},
		"application/vnd.syncml.dm+wbxml": {
			"source": "iana",
			"extensions": [
				"bdm"
			]
		},
		"application/vnd.syncml.dm+xml": {
			"source": "iana",
			"extensions": [
				"xdm"
			]
		},
		"application/vnd.syncml.dm.notification": {
			"source": "iana"
		},
		"application/vnd.syncml.dmddf+wbxml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmddf+xml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmtnds+wbxml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmtnds+xml": {
			"source": "iana"
		},
		"application/vnd.syncml.ds.notification": {
			"source": "iana"
		},
		"application/vnd.tao.intent-module-archive": {
			"source": "iana",
			"extensions": [
				"tao"
			]
		},
		"application/vnd.tcpdump.pcap": {
			"source": "iana",
			"extensions": [
				"pcap",
				"cap",
				"dmp"
			]
		},
		"application/vnd.tmd.mediaflex.api+xml": {
			"source": "iana"
		},
		"application/vnd.tml": {
			"source": "iana"
		},
		"application/vnd.tmobile-livetv": {
			"source": "iana",
			"extensions": [
				"tmo"
			]
		},
		"application/vnd.trid.tpt": {
			"source": "iana",
			"extensions": [
				"tpt"
			]
		},
		"application/vnd.triscape.mxs": {
			"source": "iana",
			"extensions": [
				"mxs"
			]
		},
		"application/vnd.trueapp": {
			"source": "iana",
			"extensions": [
				"tra"
			]
		},
		"application/vnd.truedoc": {
			"source": "iana"
		},
		"application/vnd.ubisoft.webplayer": {
			"source": "iana"
		},
		"application/vnd.ufdl": {
			"source": "iana",
			"extensions": [
				"ufd",
				"ufdl"
			]
		},
		"application/vnd.uiq.theme": {
			"source": "iana",
			"extensions": [
				"utz"
			]
		},
		"application/vnd.umajin": {
			"source": "iana",
			"extensions": [
				"umj"
			]
		},
		"application/vnd.unity": {
			"source": "iana",
			"extensions": [
				"unityweb"
			]
		},
		"application/vnd.uoml+xml": {
			"source": "iana",
			"extensions": [
				"uoml"
			]
		},
		"application/vnd.uplanet.alert": {
			"source": "iana"
		},
		"application/vnd.uplanet.alert-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.bearer-choice": {
			"source": "iana"
		},
		"application/vnd.uplanet.bearer-choice-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.cacheop": {
			"source": "iana"
		},
		"application/vnd.uplanet.cacheop-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.channel": {
			"source": "iana"
		},
		"application/vnd.uplanet.channel-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.list": {
			"source": "iana"
		},
		"application/vnd.uplanet.list-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.listcmd": {
			"source": "iana"
		},
		"application/vnd.uplanet.listcmd-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.signal": {
			"source": "iana"
		},
		"application/vnd.uri-map": {
			"source": "iana"
		},
		"application/vnd.valve.source.material": {
			"source": "iana"
		},
		"application/vnd.vcx": {
			"source": "iana",
			"extensions": [
				"vcx"
			]
		},
		"application/vnd.vd-study": {
			"source": "iana"
		},
		"application/vnd.vectorworks": {
			"source": "iana"
		},
		"application/vnd.verimatrix.vcas": {
			"source": "iana"
		},
		"application/vnd.vidsoft.vidconference": {
			"source": "iana"
		},
		"application/vnd.visio": {
			"source": "iana",
			"extensions": [
				"vsd",
				"vst",
				"vss",
				"vsw"
			]
		},
		"application/vnd.visionary": {
			"source": "iana",
			"extensions": [
				"vis"
			]
		},
		"application/vnd.vividence.scriptfile": {
			"source": "iana"
		},
		"application/vnd.vsf": {
			"source": "iana",
			"extensions": [
				"vsf"
			]
		},
		"application/vnd.wap.sic": {
			"source": "iana"
		},
		"application/vnd.wap.slc": {
			"source": "iana"
		},
		"application/vnd.wap.wbxml": {
			"source": "iana",
			"extensions": [
				"wbxml"
			]
		},
		"application/vnd.wap.wmlc": {
			"source": "iana",
			"extensions": [
				"wmlc"
			]
		},
		"application/vnd.wap.wmlscriptc": {
			"source": "iana",
			"extensions": [
				"wmlsc"
			]
		},
		"application/vnd.webturbo": {
			"source": "iana",
			"extensions": [
				"wtb"
			]
		},
		"application/vnd.wfa.p2p": {
			"source": "iana"
		},
		"application/vnd.wfa.wsc": {
			"source": "iana"
		},
		"application/vnd.windows.devicepairing": {
			"source": "iana"
		},
		"application/vnd.wmc": {
			"source": "iana"
		},
		"application/vnd.wmf.bootstrap": {
			"source": "iana"
		},
		"application/vnd.wolfram.mathematica": {
			"source": "iana"
		},
		"application/vnd.wolfram.mathematica.package": {
			"source": "iana"
		},
		"application/vnd.wolfram.player": {
			"source": "iana",
			"extensions": [
				"nbp"
			]
		},
		"application/vnd.wordperfect": {
			"source": "iana",
			"extensions": [
				"wpd"
			]
		},
		"application/vnd.wqd": {
			"source": "iana",
			"extensions": [
				"wqd"
			]
		},
		"application/vnd.wrq-hp3000-labelled": {
			"source": "iana"
		},
		"application/vnd.wt.stf": {
			"source": "iana",
			"extensions": [
				"stf"
			]
		},
		"application/vnd.wv.csp+wbxml": {
			"source": "iana"
		},
		"application/vnd.wv.csp+xml": {
			"source": "iana"
		},
		"application/vnd.wv.ssp+xml": {
			"source": "iana"
		},
		"application/vnd.xacml+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.xara": {
			"source": "iana",
			"extensions": [
				"xar"
			]
		},
		"application/vnd.xfdl": {
			"source": "iana",
			"extensions": [
				"xfdl"
			]
		},
		"application/vnd.xfdl.webform": {
			"source": "iana"
		},
		"application/vnd.xmi+xml": {
			"source": "iana"
		},
		"application/vnd.xmpie.cpkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.dpkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.plan": {
			"source": "iana"
		},
		"application/vnd.xmpie.ppkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.xlim": {
			"source": "iana"
		},
		"application/vnd.yamaha.hv-dic": {
			"source": "iana",
			"extensions": [
				"hvd"
			]
		},
		"application/vnd.yamaha.hv-script": {
			"source": "iana",
			"extensions": [
				"hvs"
			]
		},
		"application/vnd.yamaha.hv-voice": {
			"source": "iana",
			"extensions": [
				"hvp"
			]
		},
		"application/vnd.yamaha.openscoreformat": {
			"source": "iana",
			"extensions": [
				"osf"
			]
		},
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
			"source": "iana",
			"extensions": [
				"osfpvg"
			]
		},
		"application/vnd.yamaha.remote-setup": {
			"source": "iana"
		},
		"application/vnd.yamaha.smaf-audio": {
			"source": "iana",
			"extensions": [
				"saf"
			]
		},
		"application/vnd.yamaha.smaf-phrase": {
			"source": "iana",
			"extensions": [
				"spf"
			]
		},
		"application/vnd.yamaha.through-ngn": {
			"source": "iana"
		},
		"application/vnd.yamaha.tunnel-udpencap": {
			"source": "iana"
		},
		"application/vnd.yaoweme": {
			"source": "iana"
		},
		"application/vnd.yellowriver-custom-menu": {
			"source": "iana",
			"extensions": [
				"cmp"
			]
		},
		"application/vnd.zul": {
			"source": "iana",
			"extensions": [
				"zir",
				"zirz"
			]
		},
		"application/vnd.zzazz.deck+xml": {
			"source": "iana",
			"extensions": [
				"zaz"
			]
		},
		"application/voicexml+xml": {
			"source": "iana",
			"extensions": [
				"vxml"
			]
		},
		"application/vq-rtcpxr": {
			"source": "iana"
		},
		"application/watcherinfo+xml": {
			"source": "iana"
		},
		"application/whoispp-query": {
			"source": "iana"
		},
		"application/whoispp-response": {
			"source": "iana"
		},
		"application/widget": {
			"source": "iana",
			"extensions": [
				"wgt"
			]
		},
		"application/winhlp": {
			"source": "apache",
			"extensions": [
				"hlp"
			]
		},
		"application/wita": {
			"source": "iana"
		},
		"application/wordperfect5.1": {
			"source": "iana"
		},
		"application/wsdl+xml": {
			"source": "iana",
			"extensions": [
				"wsdl"
			]
		},
		"application/wspolicy+xml": {
			"source": "iana",
			"extensions": [
				"wspolicy"
			]
		},
		"application/x-7z-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"7z"
			]
		},
		"application/x-abiword": {
			"source": "apache",
			"extensions": [
				"abw"
			]
		},
		"application/x-ace-compressed": {
			"source": "apache",
			"extensions": [
				"ace"
			]
		},
		"application/x-amf": {
			"source": "apache"
		},
		"application/x-apple-diskimage": {
			"source": "apache",
			"extensions": [
				"dmg"
			]
		},
		"application/x-authorware-bin": {
			"source": "apache",
			"extensions": [
				"aab",
				"x32",
				"u32",
				"vox"
			]
		},
		"application/x-authorware-map": {
			"source": "apache",
			"extensions": [
				"aam"
			]
		},
		"application/x-authorware-seg": {
			"source": "apache",
			"extensions": [
				"aas"
			]
		},
		"application/x-bcpio": {
			"source": "apache",
			"extensions": [
				"bcpio"
			]
		},
		"application/x-bdoc": {
			"compressible": false,
			"extensions": [
				"bdoc"
			]
		},
		"application/x-bittorrent": {
			"source": "apache",
			"extensions": [
				"torrent"
			]
		},
		"application/x-blorb": {
			"source": "apache",
			"extensions": [
				"blb",
				"blorb"
			]
		},
		"application/x-bzip": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"bz"
			]
		},
		"application/x-bzip2": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"bz2",
				"boz"
			]
		},
		"application/x-cbr": {
			"source": "apache",
			"extensions": [
				"cbr",
				"cba",
				"cbt",
				"cbz",
				"cb7"
			]
		},
		"application/x-cdlink": {
			"source": "apache",
			"extensions": [
				"vcd"
			]
		},
		"application/x-cfs-compressed": {
			"source": "apache",
			"extensions": [
				"cfs"
			]
		},
		"application/x-chat": {
			"source": "apache",
			"extensions": [
				"chat"
			]
		},
		"application/x-chess-pgn": {
			"source": "apache",
			"extensions": [
				"pgn"
			]
		},
		"application/x-chrome-extension": {
			"extensions": [
				"crx"
			]
		},
		"application/x-cocoa": {
			"source": "nginx",
			"extensions": [
				"cco"
			]
		},
		"application/x-compress": {
			"source": "apache"
		},
		"application/x-conference": {
			"source": "apache",
			"extensions": [
				"nsc"
			]
		},
		"application/x-cpio": {
			"source": "apache",
			"extensions": [
				"cpio"
			]
		},
		"application/x-csh": {
			"source": "apache",
			"extensions": [
				"csh"
			]
		},
		"application/x-deb": {
			"compressible": false
		},
		"application/x-debian-package": {
			"source": "apache",
			"extensions": [
				"deb",
				"udeb"
			]
		},
		"application/x-dgc-compressed": {
			"source": "apache",
			"extensions": [
				"dgc"
			]
		},
		"application/x-director": {
			"source": "apache",
			"extensions": [
				"dir",
				"dcr",
				"dxr",
				"cst",
				"cct",
				"cxt",
				"w3d",
				"fgd",
				"swa"
			]
		},
		"application/x-doom": {
			"source": "apache",
			"extensions": [
				"wad"
			]
		},
		"application/x-dtbncx+xml": {
			"source": "apache",
			"extensions": [
				"ncx"
			]
		},
		"application/x-dtbook+xml": {
			"source": "apache",
			"extensions": [
				"dtb"
			]
		},
		"application/x-dtbresource+xml": {
			"source": "apache",
			"extensions": [
				"res"
			]
		},
		"application/x-dvi": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"dvi"
			]
		},
		"application/x-envoy": {
			"source": "apache",
			"extensions": [
				"evy"
			]
		},
		"application/x-eva": {
			"source": "apache",
			"extensions": [
				"eva"
			]
		},
		"application/x-font-bdf": {
			"source": "apache",
			"extensions": [
				"bdf"
			]
		},
		"application/x-font-dos": {
			"source": "apache"
		},
		"application/x-font-framemaker": {
			"source": "apache"
		},
		"application/x-font-ghostscript": {
			"source": "apache",
			"extensions": [
				"gsf"
			]
		},
		"application/x-font-libgrx": {
			"source": "apache"
		},
		"application/x-font-linux-psf": {
			"source": "apache",
			"extensions": [
				"psf"
			]
		},
		"application/x-font-otf": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"otf"
			]
		},
		"application/x-font-pcf": {
			"source": "apache",
			"extensions": [
				"pcf"
			]
		},
		"application/x-font-snf": {
			"source": "apache",
			"extensions": [
				"snf"
			]
		},
		"application/x-font-speedo": {
			"source": "apache"
		},
		"application/x-font-sunos-news": {
			"source": "apache"
		},
		"application/x-font-ttf": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"ttf",
				"ttc"
			]
		},
		"application/x-font-type1": {
			"source": "apache",
			"extensions": [
				"pfa",
				"pfb",
				"pfm",
				"afm"
			]
		},
		"application/x-font-vfont": {
			"source": "apache"
		},
		"application/x-freearc": {
			"source": "apache",
			"extensions": [
				"arc"
			]
		},
		"application/x-futuresplash": {
			"source": "apache",
			"extensions": [
				"spl"
			]
		},
		"application/x-gca-compressed": {
			"source": "apache",
			"extensions": [
				"gca"
			]
		},
		"application/x-glulx": {
			"source": "apache",
			"extensions": [
				"ulx"
			]
		},
		"application/x-gnumeric": {
			"source": "apache",
			"extensions": [
				"gnumeric"
			]
		},
		"application/x-gramps-xml": {
			"source": "apache",
			"extensions": [
				"gramps"
			]
		},
		"application/x-gtar": {
			"source": "apache",
			"extensions": [
				"gtar"
			]
		},
		"application/x-gzip": {
			"source": "apache"
		},
		"application/x-hdf": {
			"source": "apache",
			"extensions": [
				"hdf"
			]
		},
		"application/x-httpd-php": {
			"compressible": true,
			"extensions": [
				"php"
			]
		},
		"application/x-install-instructions": {
			"source": "apache",
			"extensions": [
				"install"
			]
		},
		"application/x-iso9660-image": {
			"source": "apache",
			"extensions": [
				"iso"
			]
		},
		"application/x-java-archive-diff": {
			"source": "nginx",
			"extensions": [
				"jardiff"
			]
		},
		"application/x-java-jnlp-file": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"jnlp"
			]
		},
		"application/x-javascript": {
			"compressible": true
		},
		"application/x-latex": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"latex"
			]
		},
		"application/x-lua-bytecode": {
			"extensions": [
				"luac"
			]
		},
		"application/x-lzh-compressed": {
			"source": "apache",
			"extensions": [
				"lzh",
				"lha"
			]
		},
		"application/x-makeself": {
			"source": "nginx",
			"extensions": [
				"run"
			]
		},
		"application/x-mie": {
			"source": "apache",
			"extensions": [
				"mie"
			]
		},
		"application/x-mobipocket-ebook": {
			"source": "apache",
			"extensions": [
				"prc",
				"mobi"
			]
		},
		"application/x-mpegurl": {
			"compressible": false
		},
		"application/x-ms-application": {
			"source": "apache",
			"extensions": [
				"application"
			]
		},
		"application/x-ms-shortcut": {
			"source": "apache",
			"extensions": [
				"lnk"
			]
		},
		"application/x-ms-wmd": {
			"source": "apache",
			"extensions": [
				"wmd"
			]
		},
		"application/x-ms-wmz": {
			"source": "apache",
			"extensions": [
				"wmz"
			]
		},
		"application/x-ms-xbap": {
			"source": "apache",
			"extensions": [
				"xbap"
			]
		},
		"application/x-msaccess": {
			"source": "apache",
			"extensions": [
				"mdb"
			]
		},
		"application/x-msbinder": {
			"source": "apache",
			"extensions": [
				"obd"
			]
		},
		"application/x-mscardfile": {
			"source": "apache",
			"extensions": [
				"crd"
			]
		},
		"application/x-msclip": {
			"source": "apache",
			"extensions": [
				"clp"
			]
		},
		"application/x-msdos-program": {
			"extensions": [
				"exe"
			]
		},
		"application/x-msdownload": {
			"source": "apache",
			"extensions": [
				"exe",
				"dll",
				"com",
				"bat",
				"msi"
			]
		},
		"application/x-msmediaview": {
			"source": "apache",
			"extensions": [
				"mvb",
				"m13",
				"m14"
			]
		},
		"application/x-msmetafile": {
			"source": "apache",
			"extensions": [
				"wmf",
				"wmz",
				"emf",
				"emz"
			]
		},
		"application/x-msmoney": {
			"source": "apache",
			"extensions": [
				"mny"
			]
		},
		"application/x-mspublisher": {
			"source": "apache",
			"extensions": [
				"pub"
			]
		},
		"application/x-msschedule": {
			"source": "apache",
			"extensions": [
				"scd"
			]
		},
		"application/x-msterminal": {
			"source": "apache",
			"extensions": [
				"trm"
			]
		},
		"application/x-mswrite": {
			"source": "apache",
			"extensions": [
				"wri"
			]
		},
		"application/x-netcdf": {
			"source": "apache",
			"extensions": [
				"nc",
				"cdf"
			]
		},
		"application/x-ns-proxy-autoconfig": {
			"compressible": true,
			"extensions": [
				"pac"
			]
		},
		"application/x-nzb": {
			"source": "apache",
			"extensions": [
				"nzb"
			]
		},
		"application/x-perl": {
			"source": "nginx",
			"extensions": [
				"pl",
				"pm"
			]
		},
		"application/x-pilot": {
			"source": "nginx",
			"extensions": [
				"prc",
				"pdb"
			]
		},
		"application/x-pkcs12": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"p12",
				"pfx"
			]
		},
		"application/x-pkcs7-certificates": {
			"source": "apache",
			"extensions": [
				"p7b",
				"spc"
			]
		},
		"application/x-pkcs7-certreqresp": {
			"source": "apache",
			"extensions": [
				"p7r"
			]
		},
		"application/x-rar-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"rar"
			]
		},
		"application/x-redhat-package-manager": {
			"source": "nginx",
			"extensions": [
				"rpm"
			]
		},
		"application/x-research-info-systems": {
			"source": "apache",
			"extensions": [
				"ris"
			]
		},
		"application/x-sea": {
			"source": "nginx",
			"extensions": [
				"sea"
			]
		},
		"application/x-sh": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"sh"
			]
		},
		"application/x-shar": {
			"source": "apache",
			"extensions": [
				"shar"
			]
		},
		"application/x-shockwave-flash": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"swf"
			]
		},
		"application/x-silverlight-app": {
			"source": "apache",
			"extensions": [
				"xap"
			]
		},
		"application/x-sql": {
			"source": "apache",
			"extensions": [
				"sql"
			]
		},
		"application/x-stuffit": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"sit"
			]
		},
		"application/x-stuffitx": {
			"source": "apache",
			"extensions": [
				"sitx"
			]
		},
		"application/x-subrip": {
			"source": "apache",
			"extensions": [
				"srt"
			]
		},
		"application/x-sv4cpio": {
			"source": "apache",
			"extensions": [
				"sv4cpio"
			]
		},
		"application/x-sv4crc": {
			"source": "apache",
			"extensions": [
				"sv4crc"
			]
		},
		"application/x-t3vm-image": {
			"source": "apache",
			"extensions": [
				"t3"
			]
		},
		"application/x-tads": {
			"source": "apache",
			"extensions": [
				"gam"
			]
		},
		"application/x-tar": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"tar"
			]
		},
		"application/x-tcl": {
			"source": "apache",
			"extensions": [
				"tcl",
				"tk"
			]
		},
		"application/x-tex": {
			"source": "apache",
			"extensions": [
				"tex"
			]
		},
		"application/x-tex-tfm": {
			"source": "apache",
			"extensions": [
				"tfm"
			]
		},
		"application/x-texinfo": {
			"source": "apache",
			"extensions": [
				"texinfo",
				"texi"
			]
		},
		"application/x-tgif": {
			"source": "apache",
			"extensions": [
				"obj"
			]
		},
		"application/x-ustar": {
			"source": "apache",
			"extensions": [
				"ustar"
			]
		},
		"application/x-wais-source": {
			"source": "apache",
			"extensions": [
				"src"
			]
		},
		"application/x-web-app-manifest+json": {
			"compressible": true,
			"extensions": [
				"webapp"
			]
		},
		"application/x-www-form-urlencoded": {
			"source": "iana",
			"compressible": true
		},
		"application/x-x509-ca-cert": {
			"source": "apache",
			"extensions": [
				"der",
				"crt",
				"pem"
			]
		},
		"application/x-xfig": {
			"source": "apache",
			"extensions": [
				"fig"
			]
		},
		"application/x-xliff+xml": {
			"source": "apache",
			"extensions": [
				"xlf"
			]
		},
		"application/x-xpinstall": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"xpi"
			]
		},
		"application/x-xz": {
			"source": "apache",
			"extensions": [
				"xz"
			]
		},
		"application/x-zmachine": {
			"source": "apache",
			"extensions": [
				"z1",
				"z2",
				"z3",
				"z4",
				"z5",
				"z6",
				"z7",
				"z8"
			]
		},
		"application/x400-bp": {
			"source": "iana"
		},
		"application/xacml+xml": {
			"source": "iana"
		},
		"application/xaml+xml": {
			"source": "apache",
			"extensions": [
				"xaml"
			]
		},
		"application/xcap-att+xml": {
			"source": "iana"
		},
		"application/xcap-caps+xml": {
			"source": "iana"
		},
		"application/xcap-diff+xml": {
			"source": "iana",
			"extensions": [
				"xdf"
			]
		},
		"application/xcap-el+xml": {
			"source": "iana"
		},
		"application/xcap-error+xml": {
			"source": "iana"
		},
		"application/xcap-ns+xml": {
			"source": "iana"
		},
		"application/xcon-conference-info+xml": {
			"source": "iana"
		},
		"application/xcon-conference-info-diff+xml": {
			"source": "iana"
		},
		"application/xenc+xml": {
			"source": "iana",
			"extensions": [
				"xenc"
			]
		},
		"application/xhtml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xhtml",
				"xht"
			]
		},
		"application/xhtml-voice+xml": {
			"source": "apache"
		},
		"application/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xml",
				"xsl",
				"xsd"
			]
		},
		"application/xml-dtd": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"dtd"
			]
		},
		"application/xml-external-parsed-entity": {
			"source": "iana"
		},
		"application/xml-patch+xml": {
			"source": "iana"
		},
		"application/xmpp+xml": {
			"source": "iana"
		},
		"application/xop+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xop"
			]
		},
		"application/xproc+xml": {
			"source": "apache",
			"extensions": [
				"xpl"
			]
		},
		"application/xslt+xml": {
			"source": "iana",
			"extensions": [
				"xslt"
			]
		},
		"application/xspf+xml": {
			"source": "apache",
			"extensions": [
				"xspf"
			]
		},
		"application/xv+xml": {
			"source": "iana",
			"extensions": [
				"mxml",
				"xhvml",
				"xvml",
				"xvm"
			]
		},
		"application/yang": {
			"source": "iana",
			"extensions": [
				"yang"
			]
		},
		"application/yin+xml": {
			"source": "iana",
			"extensions": [
				"yin"
			]
		},
		"application/zip": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"zip"
			]
		},
		"application/zlib": {
			"source": "iana"
		},
		"audio/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"audio/32kadpcm": {
			"source": "iana"
		},
		"audio/3gpp": {
			"source": "iana"
		},
		"audio/3gpp2": {
			"source": "iana"
		},
		"audio/ac3": {
			"source": "iana"
		},
		"audio/adpcm": {
			"source": "apache",
			"extensions": [
				"adp"
			]
		},
		"audio/amr": {
			"source": "iana"
		},
		"audio/amr-wb": {
			"source": "iana"
		},
		"audio/amr-wb+": {
			"source": "iana"
		},
		"audio/aptx": {
			"source": "iana"
		},
		"audio/asc": {
			"source": "iana"
		},
		"audio/atrac-advanced-lossless": {
			"source": "iana"
		},
		"audio/atrac-x": {
			"source": "iana"
		},
		"audio/atrac3": {
			"source": "iana"
		},
		"audio/basic": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"au",
				"snd"
			]
		},
		"audio/bv16": {
			"source": "iana"
		},
		"audio/bv32": {
			"source": "iana"
		},
		"audio/clearmode": {
			"source": "iana"
		},
		"audio/cn": {
			"source": "iana"
		},
		"audio/dat12": {
			"source": "iana"
		},
		"audio/dls": {
			"source": "iana"
		},
		"audio/dsr-es201108": {
			"source": "iana"
		},
		"audio/dsr-es202050": {
			"source": "iana"
		},
		"audio/dsr-es202211": {
			"source": "iana"
		},
		"audio/dsr-es202212": {
			"source": "iana"
		},
		"audio/dv": {
			"source": "iana"
		},
		"audio/dvi4": {
			"source": "iana"
		},
		"audio/eac3": {
			"source": "iana"
		},
		"audio/encaprtp": {
			"source": "iana"
		},
		"audio/evrc": {
			"source": "iana"
		},
		"audio/evrc-qcp": {
			"source": "iana"
		},
		"audio/evrc0": {
			"source": "iana"
		},
		"audio/evrc1": {
			"source": "iana"
		},
		"audio/evrcb": {
			"source": "iana"
		},
		"audio/evrcb0": {
			"source": "iana"
		},
		"audio/evrcb1": {
			"source": "iana"
		},
		"audio/evrcnw": {
			"source": "iana"
		},
		"audio/evrcnw0": {
			"source": "iana"
		},
		"audio/evrcnw1": {
			"source": "iana"
		},
		"audio/evrcwb": {
			"source": "iana"
		},
		"audio/evrcwb0": {
			"source": "iana"
		},
		"audio/evrcwb1": {
			"source": "iana"
		},
		"audio/evs": {
			"source": "iana"
		},
		"audio/fwdred": {
			"source": "iana"
		},
		"audio/g711-0": {
			"source": "iana"
		},
		"audio/g719": {
			"source": "iana"
		},
		"audio/g722": {
			"source": "iana"
		},
		"audio/g7221": {
			"source": "iana"
		},
		"audio/g723": {
			"source": "iana"
		},
		"audio/g726-16": {
			"source": "iana"
		},
		"audio/g726-24": {
			"source": "iana"
		},
		"audio/g726-32": {
			"source": "iana"
		},
		"audio/g726-40": {
			"source": "iana"
		},
		"audio/g728": {
			"source": "iana"
		},
		"audio/g729": {
			"source": "iana"
		},
		"audio/g7291": {
			"source": "iana"
		},
		"audio/g729d": {
			"source": "iana"
		},
		"audio/g729e": {
			"source": "iana"
		},
		"audio/gsm": {
			"source": "iana"
		},
		"audio/gsm-efr": {
			"source": "iana"
		},
		"audio/gsm-hr-08": {
			"source": "iana"
		},
		"audio/ilbc": {
			"source": "iana"
		},
		"audio/ip-mr_v2.5": {
			"source": "iana"
		},
		"audio/isac": {
			"source": "apache"
		},
		"audio/l16": {
			"source": "iana"
		},
		"audio/l20": {
			"source": "iana"
		},
		"audio/l24": {
			"source": "iana",
			"compressible": false
		},
		"audio/l8": {
			"source": "iana"
		},
		"audio/lpc": {
			"source": "iana"
		},
		"audio/midi": {
			"source": "apache",
			"extensions": [
				"mid",
				"midi",
				"kar",
				"rmi"
			]
		},
		"audio/mobile-xmf": {
			"source": "iana"
		},
		"audio/mp4": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mp4a",
				"m4a"
			]
		},
		"audio/mp4a-latm": {
			"source": "iana"
		},
		"audio/mpa": {
			"source": "iana"
		},
		"audio/mpa-robust": {
			"source": "iana"
		},
		"audio/mpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mpga",
				"mp2",
				"mp2a",
				"mp3",
				"m2a",
				"m3a"
			]
		},
		"audio/mpeg4-generic": {
			"source": "iana"
		},
		"audio/musepack": {
			"source": "apache"
		},
		"audio/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"oga",
				"ogg",
				"spx"
			]
		},
		"audio/opus": {
			"source": "iana"
		},
		"audio/parityfec": {
			"source": "iana"
		},
		"audio/pcma": {
			"source": "iana"
		},
		"audio/pcma-wb": {
			"source": "iana"
		},
		"audio/pcmu": {
			"source": "iana"
		},
		"audio/pcmu-wb": {
			"source": "iana"
		},
		"audio/prs.sid": {
			"source": "iana"
		},
		"audio/qcelp": {
			"source": "iana"
		},
		"audio/raptorfec": {
			"source": "iana"
		},
		"audio/red": {
			"source": "iana"
		},
		"audio/rtp-enc-aescm128": {
			"source": "iana"
		},
		"audio/rtp-midi": {
			"source": "iana"
		},
		"audio/rtploopback": {
			"source": "iana"
		},
		"audio/rtx": {
			"source": "iana"
		},
		"audio/s3m": {
			"source": "apache",
			"extensions": [
				"s3m"
			]
		},
		"audio/silk": {
			"source": "apache",
			"extensions": [
				"sil"
			]
		},
		"audio/smv": {
			"source": "iana"
		},
		"audio/smv-qcp": {
			"source": "iana"
		},
		"audio/smv0": {
			"source": "iana"
		},
		"audio/sp-midi": {
			"source": "iana"
		},
		"audio/speex": {
			"source": "iana"
		},
		"audio/t140c": {
			"source": "iana"
		},
		"audio/t38": {
			"source": "iana"
		},
		"audio/telephone-event": {
			"source": "iana"
		},
		"audio/tone": {
			"source": "iana"
		},
		"audio/uemclip": {
			"source": "iana"
		},
		"audio/ulpfec": {
			"source": "iana"
		},
		"audio/vdvi": {
			"source": "iana"
		},
		"audio/vmr-wb": {
			"source": "iana"
		},
		"audio/vnd.3gpp.iufp": {
			"source": "iana"
		},
		"audio/vnd.4sb": {
			"source": "iana"
		},
		"audio/vnd.audiokoz": {
			"source": "iana"
		},
		"audio/vnd.celp": {
			"source": "iana"
		},
		"audio/vnd.cisco.nse": {
			"source": "iana"
		},
		"audio/vnd.cmles.radio-events": {
			"source": "iana"
		},
		"audio/vnd.cns.anp1": {
			"source": "iana"
		},
		"audio/vnd.cns.inf1": {
			"source": "iana"
		},
		"audio/vnd.dece.audio": {
			"source": "iana",
			"extensions": [
				"uva",
				"uvva"
			]
		},
		"audio/vnd.digital-winds": {
			"source": "iana",
			"extensions": [
				"eol"
			]
		},
		"audio/vnd.dlna.adts": {
			"source": "iana"
		},
		"audio/vnd.dolby.heaac.1": {
			"source": "iana"
		},
		"audio/vnd.dolby.heaac.2": {
			"source": "iana"
		},
		"audio/vnd.dolby.mlp": {
			"source": "iana"
		},
		"audio/vnd.dolby.mps": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2x": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2z": {
			"source": "iana"
		},
		"audio/vnd.dolby.pulse.1": {
			"source": "iana"
		},
		"audio/vnd.dra": {
			"source": "iana",
			"extensions": [
				"dra"
			]
		},
		"audio/vnd.dts": {
			"source": "iana",
			"extensions": [
				"dts"
			]
		},
		"audio/vnd.dts.hd": {
			"source": "iana",
			"extensions": [
				"dtshd"
			]
		},
		"audio/vnd.dvb.file": {
			"source": "iana"
		},
		"audio/vnd.everad.plj": {
			"source": "iana"
		},
		"audio/vnd.hns.audio": {
			"source": "iana"
		},
		"audio/vnd.lucent.voice": {
			"source": "iana",
			"extensions": [
				"lvp"
			]
		},
		"audio/vnd.ms-playready.media.pya": {
			"source": "iana",
			"extensions": [
				"pya"
			]
		},
		"audio/vnd.nokia.mobile-xmf": {
			"source": "iana"
		},
		"audio/vnd.nortel.vbk": {
			"source": "iana"
		},
		"audio/vnd.nuera.ecelp4800": {
			"source": "iana",
			"extensions": [
				"ecelp4800"
			]
		},
		"audio/vnd.nuera.ecelp7470": {
			"source": "iana",
			"extensions": [
				"ecelp7470"
			]
		},
		"audio/vnd.nuera.ecelp9600": {
			"source": "iana",
			"extensions": [
				"ecelp9600"
			]
		},
		"audio/vnd.octel.sbc": {
			"source": "iana"
		},
		"audio/vnd.qcelp": {
			"source": "iana"
		},
		"audio/vnd.rhetorex.32kadpcm": {
			"source": "iana"
		},
		"audio/vnd.rip": {
			"source": "iana",
			"extensions": [
				"rip"
			]
		},
		"audio/vnd.rn-realaudio": {
			"compressible": false
		},
		"audio/vnd.sealedmedia.softseal.mpeg": {
			"source": "iana"
		},
		"audio/vnd.vmx.cvsd": {
			"source": "iana"
		},
		"audio/vnd.wave": {
			"compressible": false
		},
		"audio/vorbis": {
			"source": "iana",
			"compressible": false
		},
		"audio/vorbis-config": {
			"source": "iana"
		},
		"audio/wav": {
			"compressible": false,
			"extensions": [
				"wav"
			]
		},
		"audio/wave": {
			"compressible": false,
			"extensions": [
				"wav"
			]
		},
		"audio/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"weba"
			]
		},
		"audio/x-aac": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"aac"
			]
		},
		"audio/x-aiff": {
			"source": "apache",
			"extensions": [
				"aif",
				"aiff",
				"aifc"
			]
		},
		"audio/x-caf": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"caf"
			]
		},
		"audio/x-flac": {
			"source": "apache",
			"extensions": [
				"flac"
			]
		},
		"audio/x-m4a": {
			"source": "nginx",
			"extensions": [
				"m4a"
			]
		},
		"audio/x-matroska": {
			"source": "apache",
			"extensions": [
				"mka"
			]
		},
		"audio/x-mpegurl": {
			"source": "apache",
			"extensions": [
				"m3u"
			]
		},
		"audio/x-ms-wax": {
			"source": "apache",
			"extensions": [
				"wax"
			]
		},
		"audio/x-ms-wma": {
			"source": "apache",
			"extensions": [
				"wma"
			]
		},
		"audio/x-pn-realaudio": {
			"source": "apache",
			"extensions": [
				"ram",
				"ra"
			]
		},
		"audio/x-pn-realaudio-plugin": {
			"source": "apache",
			"extensions": [
				"rmp"
			]
		},
		"audio/x-realaudio": {
			"source": "nginx",
			"extensions": [
				"ra"
			]
		},
		"audio/x-tta": {
			"source": "apache"
		},
		"audio/x-wav": {
			"source": "apache",
			"extensions": [
				"wav"
			]
		},
		"audio/xm": {
			"source": "apache",
			"extensions": [
				"xm"
			]
		},
		"chemical/x-cdx": {
			"source": "apache",
			"extensions": [
				"cdx"
			]
		},
		"chemical/x-cif": {
			"source": "apache",
			"extensions": [
				"cif"
			]
		},
		"chemical/x-cmdf": {
			"source": "apache",
			"extensions": [
				"cmdf"
			]
		},
		"chemical/x-cml": {
			"source": "apache",
			"extensions": [
				"cml"
			]
		},
		"chemical/x-csml": {
			"source": "apache",
			"extensions": [
				"csml"
			]
		},
		"chemical/x-pdb": {
			"source": "apache"
		},
		"chemical/x-xyz": {
			"source": "apache",
			"extensions": [
				"xyz"
			]
		},
		"font/opentype": {
			"compressible": true,
			"extensions": [
				"otf"
			]
		},
		"image/bmp": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"bmp"
			]
		},
		"image/cgm": {
			"source": "iana",
			"extensions": [
				"cgm"
			]
		},
		"image/fits": {
			"source": "iana"
		},
		"image/g3fax": {
			"source": "iana",
			"extensions": [
				"g3"
			]
		},
		"image/gif": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"gif"
			]
		},
		"image/ief": {
			"source": "iana",
			"extensions": [
				"ief"
			]
		},
		"image/jp2": {
			"source": "iana"
		},
		"image/jpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"jpeg",
				"jpg",
				"jpe"
			]
		},
		"image/jpm": {
			"source": "iana"
		},
		"image/jpx": {
			"source": "iana"
		},
		"image/ktx": {
			"source": "iana",
			"extensions": [
				"ktx"
			]
		},
		"image/naplps": {
			"source": "iana"
		},
		"image/pjpeg": {
			"compressible": false
		},
		"image/png": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"png"
			]
		},
		"image/prs.btif": {
			"source": "iana",
			"extensions": [
				"btif"
			]
		},
		"image/prs.pti": {
			"source": "iana"
		},
		"image/pwg-raster": {
			"source": "iana"
		},
		"image/sgi": {
			"source": "apache",
			"extensions": [
				"sgi"
			]
		},
		"image/svg+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"svg",
				"svgz"
			]
		},
		"image/t38": {
			"source": "iana"
		},
		"image/tiff": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"tiff",
				"tif"
			]
		},
		"image/tiff-fx": {
			"source": "iana"
		},
		"image/vnd.adobe.photoshop": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"psd"
			]
		},
		"image/vnd.airzip.accelerator.azv": {
			"source": "iana"
		},
		"image/vnd.cns.inf2": {
			"source": "iana"
		},
		"image/vnd.dece.graphic": {
			"source": "iana",
			"extensions": [
				"uvi",
				"uvvi",
				"uvg",
				"uvvg"
			]
		},
		"image/vnd.djvu": {
			"source": "iana",
			"extensions": [
				"djvu",
				"djv"
			]
		},
		"image/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": [
				"sub"
			]
		},
		"image/vnd.dwg": {
			"source": "iana",
			"extensions": [
				"dwg"
			]
		},
		"image/vnd.dxf": {
			"source": "iana",
			"extensions": [
				"dxf"
			]
		},
		"image/vnd.fastbidsheet": {
			"source": "iana",
			"extensions": [
				"fbs"
			]
		},
		"image/vnd.fpx": {
			"source": "iana",
			"extensions": [
				"fpx"
			]
		},
		"image/vnd.fst": {
			"source": "iana",
			"extensions": [
				"fst"
			]
		},
		"image/vnd.fujixerox.edmics-mmr": {
			"source": "iana",
			"extensions": [
				"mmr"
			]
		},
		"image/vnd.fujixerox.edmics-rlc": {
			"source": "iana",
			"extensions": [
				"rlc"
			]
		},
		"image/vnd.globalgraphics.pgb": {
			"source": "iana"
		},
		"image/vnd.microsoft.icon": {
			"source": "iana"
		},
		"image/vnd.mix": {
			"source": "iana"
		},
		"image/vnd.mozilla.apng": {
			"source": "iana"
		},
		"image/vnd.ms-modi": {
			"source": "iana",
			"extensions": [
				"mdi"
			]
		},
		"image/vnd.ms-photo": {
			"source": "apache",
			"extensions": [
				"wdp"
			]
		},
		"image/vnd.net-fpx": {
			"source": "iana",
			"extensions": [
				"npx"
			]
		},
		"image/vnd.radiance": {
			"source": "iana"
		},
		"image/vnd.sealed.png": {
			"source": "iana"
		},
		"image/vnd.sealedmedia.softseal.gif": {
			"source": "iana"
		},
		"image/vnd.sealedmedia.softseal.jpg": {
			"source": "iana"
		},
		"image/vnd.svf": {
			"source": "iana"
		},
		"image/vnd.tencent.tap": {
			"source": "iana"
		},
		"image/vnd.valve.source.texture": {
			"source": "iana"
		},
		"image/vnd.wap.wbmp": {
			"source": "iana",
			"extensions": [
				"wbmp"
			]
		},
		"image/vnd.xiff": {
			"source": "iana",
			"extensions": [
				"xif"
			]
		},
		"image/vnd.zbrush.pcx": {
			"source": "iana"
		},
		"image/webp": {
			"source": "apache",
			"extensions": [
				"webp"
			]
		},
		"image/x-3ds": {
			"source": "apache",
			"extensions": [
				"3ds"
			]
		},
		"image/x-cmu-raster": {
			"source": "apache",
			"extensions": [
				"ras"
			]
		},
		"image/x-cmx": {
			"source": "apache",
			"extensions": [
				"cmx"
			]
		},
		"image/x-freehand": {
			"source": "apache",
			"extensions": [
				"fh",
				"fhc",
				"fh4",
				"fh5",
				"fh7"
			]
		},
		"image/x-icon": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"ico"
			]
		},
		"image/x-jng": {
			"source": "nginx",
			"extensions": [
				"jng"
			]
		},
		"image/x-mrsid-image": {
			"source": "apache",
			"extensions": [
				"sid"
			]
		},
		"image/x-ms-bmp": {
			"source": "nginx",
			"compressible": true,
			"extensions": [
				"bmp"
			]
		},
		"image/x-pcx": {
			"source": "apache",
			"extensions": [
				"pcx"
			]
		},
		"image/x-pict": {
			"source": "apache",
			"extensions": [
				"pic",
				"pct"
			]
		},
		"image/x-portable-anymap": {
			"source": "apache",
			"extensions": [
				"pnm"
			]
		},
		"image/x-portable-bitmap": {
			"source": "apache",
			"extensions": [
				"pbm"
			]
		},
		"image/x-portable-graymap": {
			"source": "apache",
			"extensions": [
				"pgm"
			]
		},
		"image/x-portable-pixmap": {
			"source": "apache",
			"extensions": [
				"ppm"
			]
		},
		"image/x-rgb": {
			"source": "apache",
			"extensions": [
				"rgb"
			]
		},
		"image/x-tga": {
			"source": "apache",
			"extensions": [
				"tga"
			]
		},
		"image/x-xbitmap": {
			"source": "apache",
			"extensions": [
				"xbm"
			]
		},
		"image/x-xcf": {
			"compressible": false
		},
		"image/x-xpixmap": {
			"source": "apache",
			"extensions": [
				"xpm"
			]
		},
		"image/x-xwindowdump": {
			"source": "apache",
			"extensions": [
				"xwd"
			]
		},
		"message/cpim": {
			"source": "iana"
		},
		"message/delivery-status": {
			"source": "iana"
		},
		"message/disposition-notification": {
			"source": "iana"
		},
		"message/external-body": {
			"source": "iana"
		},
		"message/feedback-report": {
			"source": "iana"
		},
		"message/global": {
			"source": "iana"
		},
		"message/global-delivery-status": {
			"source": "iana"
		},
		"message/global-disposition-notification": {
			"source": "iana"
		},
		"message/global-headers": {
			"source": "iana"
		},
		"message/http": {
			"source": "iana",
			"compressible": false
		},
		"message/imdn+xml": {
			"source": "iana",
			"compressible": true
		},
		"message/news": {
			"source": "iana"
		},
		"message/partial": {
			"source": "iana",
			"compressible": false
		},
		"message/rfc822": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"eml",
				"mime"
			]
		},
		"message/s-http": {
			"source": "iana"
		},
		"message/sip": {
			"source": "iana"
		},
		"message/sipfrag": {
			"source": "iana"
		},
		"message/tracking-status": {
			"source": "iana"
		},
		"message/vnd.si.simp": {
			"source": "iana"
		},
		"message/vnd.wfa.wsc": {
			"source": "iana"
		},
		"model/iges": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"igs",
				"iges"
			]
		},
		"model/mesh": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"msh",
				"mesh",
				"silo"
			]
		},
		"model/vnd.collada+xml": {
			"source": "iana",
			"extensions": [
				"dae"
			]
		},
		"model/vnd.dwf": {
			"source": "iana",
			"extensions": [
				"dwf"
			]
		},
		"model/vnd.flatland.3dml": {
			"source": "iana"
		},
		"model/vnd.gdl": {
			"source": "iana",
			"extensions": [
				"gdl"
			]
		},
		"model/vnd.gs-gdl": {
			"source": "apache"
		},
		"model/vnd.gs.gdl": {
			"source": "iana"
		},
		"model/vnd.gtw": {
			"source": "iana",
			"extensions": [
				"gtw"
			]
		},
		"model/vnd.moml+xml": {
			"source": "iana"
		},
		"model/vnd.mts": {
			"source": "iana",
			"extensions": [
				"mts"
			]
		},
		"model/vnd.opengex": {
			"source": "iana"
		},
		"model/vnd.parasolid.transmit.binary": {
			"source": "iana"
		},
		"model/vnd.parasolid.transmit.text": {
			"source": "iana"
		},
		"model/vnd.valve.source.compiled-map": {
			"source": "iana"
		},
		"model/vnd.vtu": {
			"source": "iana",
			"extensions": [
				"vtu"
			]
		},
		"model/vrml": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"wrl",
				"vrml"
			]
		},
		"model/x3d+binary": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"x3db",
				"x3dbz"
			]
		},
		"model/x3d+fastinfoset": {
			"source": "iana"
		},
		"model/x3d+vrml": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"x3dv",
				"x3dvz"
			]
		},
		"model/x3d+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"x3d",
				"x3dz"
			]
		},
		"model/x3d-vrml": {
			"source": "iana"
		},
		"multipart/alternative": {
			"source": "iana",
			"compressible": false
		},
		"multipart/appledouble": {
			"source": "iana"
		},
		"multipart/byteranges": {
			"source": "iana"
		},
		"multipart/digest": {
			"source": "iana"
		},
		"multipart/encrypted": {
			"source": "iana",
			"compressible": false
		},
		"multipart/form-data": {
			"source": "iana",
			"compressible": false
		},
		"multipart/header-set": {
			"source": "iana"
		},
		"multipart/mixed": {
			"source": "iana",
			"compressible": false
		},
		"multipart/parallel": {
			"source": "iana"
		},
		"multipart/related": {
			"source": "iana",
			"compressible": false
		},
		"multipart/report": {
			"source": "iana"
		},
		"multipart/signed": {
			"source": "iana",
			"compressible": false
		},
		"multipart/voice-message": {
			"source": "iana"
		},
		"multipart/x-mixed-replace": {
			"source": "iana"
		},
		"text/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"text/cache-manifest": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"appcache",
				"manifest"
			]
		},
		"text/calendar": {
			"source": "iana",
			"extensions": [
				"ics",
				"ifb"
			]
		},
		"text/calender": {
			"compressible": true
		},
		"text/cmd": {
			"compressible": true
		},
		"text/coffeescript": {
			"extensions": [
				"coffee",
				"litcoffee"
			]
		},
		"text/css": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"css"
			]
		},
		"text/csv": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"csv"
			]
		},
		"text/csv-schema": {
			"source": "iana"
		},
		"text/directory": {
			"source": "iana"
		},
		"text/dns": {
			"source": "iana"
		},
		"text/ecmascript": {
			"source": "iana"
		},
		"text/encaprtp": {
			"source": "iana"
		},
		"text/enriched": {
			"source": "iana"
		},
		"text/fwdred": {
			"source": "iana"
		},
		"text/grammar-ref-list": {
			"source": "iana"
		},
		"text/hjson": {
			"extensions": [
				"hjson"
			]
		},
		"text/html": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"html",
				"htm",
				"shtml"
			]
		},
		"text/jade": {
			"extensions": [
				"jade"
			]
		},
		"text/javascript": {
			"source": "iana",
			"compressible": true
		},
		"text/jcr-cnd": {
			"source": "iana"
		},
		"text/jsx": {
			"compressible": true,
			"extensions": [
				"jsx"
			]
		},
		"text/less": {
			"extensions": [
				"less"
			]
		},
		"text/markdown": {
			"source": "iana"
		},
		"text/mathml": {
			"source": "nginx",
			"extensions": [
				"mml"
			]
		},
		"text/mizar": {
			"source": "iana"
		},
		"text/n3": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"n3"
			]
		},
		"text/parameters": {
			"source": "iana"
		},
		"text/parityfec": {
			"source": "iana"
		},
		"text/plain": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"txt",
				"text",
				"conf",
				"def",
				"list",
				"log",
				"in",
				"ini"
			]
		},
		"text/provenance-notation": {
			"source": "iana"
		},
		"text/prs.fallenstein.rst": {
			"source": "iana"
		},
		"text/prs.lines.tag": {
			"source": "iana",
			"extensions": [
				"dsc"
			]
		},
		"text/raptorfec": {
			"source": "iana"
		},
		"text/red": {
			"source": "iana"
		},
		"text/rfc822-headers": {
			"source": "iana"
		},
		"text/richtext": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtx"
			]
		},
		"text/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtf"
			]
		},
		"text/rtp-enc-aescm128": {
			"source": "iana"
		},
		"text/rtploopback": {
			"source": "iana"
		},
		"text/rtx": {
			"source": "iana"
		},
		"text/sgml": {
			"source": "iana",
			"extensions": [
				"sgml",
				"sgm"
			]
		},
		"text/stylus": {
			"extensions": [
				"stylus",
				"styl"
			]
		},
		"text/t140": {
			"source": "iana"
		},
		"text/tab-separated-values": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"tsv"
			]
		},
		"text/troff": {
			"source": "iana",
			"extensions": [
				"t",
				"tr",
				"roff",
				"man",
				"me",
				"ms"
			]
		},
		"text/turtle": {
			"source": "iana",
			"extensions": [
				"ttl"
			]
		},
		"text/ulpfec": {
			"source": "iana"
		},
		"text/uri-list": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"uri",
				"uris",
				"urls"
			]
		},
		"text/vcard": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"vcard"
			]
		},
		"text/vnd.a": {
			"source": "iana"
		},
		"text/vnd.abc": {
			"source": "iana"
		},
		"text/vnd.curl": {
			"source": "iana",
			"extensions": [
				"curl"
			]
		},
		"text/vnd.curl.dcurl": {
			"source": "apache",
			"extensions": [
				"dcurl"
			]
		},
		"text/vnd.curl.mcurl": {
			"source": "apache",
			"extensions": [
				"mcurl"
			]
		},
		"text/vnd.curl.scurl": {
			"source": "apache",
			"extensions": [
				"scurl"
			]
		},
		"text/vnd.debian.copyright": {
			"source": "iana"
		},
		"text/vnd.dmclientscript": {
			"source": "iana"
		},
		"text/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": [
				"sub"
			]
		},
		"text/vnd.esmertec.theme-descriptor": {
			"source": "iana"
		},
		"text/vnd.fly": {
			"source": "iana",
			"extensions": [
				"fly"
			]
		},
		"text/vnd.fmi.flexstor": {
			"source": "iana",
			"extensions": [
				"flx"
			]
		},
		"text/vnd.graphviz": {
			"source": "iana",
			"extensions": [
				"gv"
			]
		},
		"text/vnd.in3d.3dml": {
			"source": "iana",
			"extensions": [
				"3dml"
			]
		},
		"text/vnd.in3d.spot": {
			"source": "iana",
			"extensions": [
				"spot"
			]
		},
		"text/vnd.iptc.newsml": {
			"source": "iana"
		},
		"text/vnd.iptc.nitf": {
			"source": "iana"
		},
		"text/vnd.latex-z": {
			"source": "iana"
		},
		"text/vnd.motorola.reflex": {
			"source": "iana"
		},
		"text/vnd.ms-mediapackage": {
			"source": "iana"
		},
		"text/vnd.net2phone.commcenter.command": {
			"source": "iana"
		},
		"text/vnd.radisys.msml-basic-layout": {
			"source": "iana"
		},
		"text/vnd.si.uricatalogue": {
			"source": "iana"
		},
		"text/vnd.sun.j2me.app-descriptor": {
			"source": "iana",
			"extensions": [
				"jad"
			]
		},
		"text/vnd.trolltech.linguist": {
			"source": "iana"
		},
		"text/vnd.wap.si": {
			"source": "iana"
		},
		"text/vnd.wap.sl": {
			"source": "iana"
		},
		"text/vnd.wap.wml": {
			"source": "iana",
			"extensions": [
				"wml"
			]
		},
		"text/vnd.wap.wmlscript": {
			"source": "iana",
			"extensions": [
				"wmls"
			]
		},
		"text/vtt": {
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"vtt"
			]
		},
		"text/x-asm": {
			"source": "apache",
			"extensions": [
				"s",
				"asm"
			]
		},
		"text/x-c": {
			"source": "apache",
			"extensions": [
				"c",
				"cc",
				"cxx",
				"cpp",
				"h",
				"hh",
				"dic"
			]
		},
		"text/x-component": {
			"source": "nginx",
			"extensions": [
				"htc"
			]
		},
		"text/x-fortran": {
			"source": "apache",
			"extensions": [
				"f",
				"for",
				"f77",
				"f90"
			]
		},
		"text/x-gwt-rpc": {
			"compressible": true
		},
		"text/x-handlebars-template": {
			"extensions": [
				"hbs"
			]
		},
		"text/x-java-source": {
			"source": "apache",
			"extensions": [
				"java"
			]
		},
		"text/x-jquery-tmpl": {
			"compressible": true
		},
		"text/x-lua": {
			"extensions": [
				"lua"
			]
		},
		"text/x-markdown": {
			"compressible": true,
			"extensions": [
				"markdown",
				"md",
				"mkd"
			]
		},
		"text/x-nfo": {
			"source": "apache",
			"extensions": [
				"nfo"
			]
		},
		"text/x-opml": {
			"source": "apache",
			"extensions": [
				"opml"
			]
		},
		"text/x-pascal": {
			"source": "apache",
			"extensions": [
				"p",
				"pas"
			]
		},
		"text/x-processing": {
			"compressible": true,
			"extensions": [
				"pde"
			]
		},
		"text/x-sass": {
			"extensions": [
				"sass"
			]
		},
		"text/x-scss": {
			"extensions": [
				"scss"
			]
		},
		"text/x-setext": {
			"source": "apache",
			"extensions": [
				"etx"
			]
		},
		"text/x-sfv": {
			"source": "apache",
			"extensions": [
				"sfv"
			]
		},
		"text/x-suse-ymp": {
			"compressible": true,
			"extensions": [
				"ymp"
			]
		},
		"text/x-uuencode": {
			"source": "apache",
			"extensions": [
				"uu"
			]
		},
		"text/x-vcalendar": {
			"source": "apache",
			"extensions": [
				"vcs"
			]
		},
		"text/x-vcard": {
			"source": "apache",
			"extensions": [
				"vcf"
			]
		},
		"text/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xml"
			]
		},
		"text/xml-external-parsed-entity": {
			"source": "iana"
		},
		"text/yaml": {
			"extensions": [
				"yaml",
				"yml"
			]
		},
		"video/1d-interleaved-parityfec": {
			"source": "apache"
		},
		"video/3gpp": {
			"source": "apache",
			"extensions": [
				"3gp",
				"3gpp"
			]
		},
		"video/3gpp-tt": {
			"source": "apache"
		},
		"video/3gpp2": {
			"source": "apache",
			"extensions": [
				"3g2"
			]
		},
		"video/bmpeg": {
			"source": "apache"
		},
		"video/bt656": {
			"source": "apache"
		},
		"video/celb": {
			"source": "apache"
		},
		"video/dv": {
			"source": "apache"
		},
		"video/h261": {
			"source": "apache",
			"extensions": [
				"h261"
			]
		},
		"video/h263": {
			"source": "apache",
			"extensions": [
				"h263"
			]
		},
		"video/h263-1998": {
			"source": "apache"
		},
		"video/h263-2000": {
			"source": "apache"
		},
		"video/h264": {
			"source": "apache",
			"extensions": [
				"h264"
			]
		},
		"video/h264-rcdo": {
			"source": "apache"
		},
		"video/h264-svc": {
			"source": "apache"
		},
		"video/jpeg": {
			"source": "apache",
			"extensions": [
				"jpgv"
			]
		},
		"video/jpeg2000": {
			"source": "apache"
		},
		"video/jpm": {
			"source": "apache",
			"extensions": [
				"jpm",
				"jpgm"
			]
		},
		"video/mj2": {
			"source": "apache",
			"extensions": [
				"mj2",
				"mjp2"
			]
		},
		"video/mp1s": {
			"source": "apache"
		},
		"video/mp2p": {
			"source": "apache"
		},
		"video/mp2t": {
			"source": "apache",
			"extensions": [
				"ts"
			]
		},
		"video/mp4": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mp4",
				"mp4v",
				"mpg4"
			]
		},
		"video/mp4v-es": {
			"source": "apache"
		},
		"video/mpeg": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mpeg",
				"mpg",
				"mpe",
				"m1v",
				"m2v"
			]
		},
		"video/mpeg4-generic": {
			"source": "apache"
		},
		"video/mpv": {
			"source": "apache"
		},
		"video/nv": {
			"source": "apache"
		},
		"video/ogg": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"ogv"
			]
		},
		"video/parityfec": {
			"source": "apache"
		},
		"video/pointer": {
			"source": "apache"
		},
		"video/quicktime": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"qt",
				"mov"
			]
		},
		"video/raw": {
			"source": "apache"
		},
		"video/rtp-enc-aescm128": {
			"source": "apache"
		},
		"video/rtx": {
			"source": "apache"
		},
		"video/smpte292m": {
			"source": "apache"
		},
		"video/ulpfec": {
			"source": "apache"
		},
		"video/vc1": {
			"source": "apache"
		},
		"video/vnd.cctv": {
			"source": "apache"
		},
		"video/vnd.dece.hd": {
			"source": "apache",
			"extensions": [
				"uvh",
				"uvvh"
			]
		},
		"video/vnd.dece.mobile": {
			"source": "apache",
			"extensions": [
				"uvm",
				"uvvm"
			]
		},
		"video/vnd.dece.mp4": {
			"source": "apache"
		},
		"video/vnd.dece.pd": {
			"source": "apache",
			"extensions": [
				"uvp",
				"uvvp"
			]
		},
		"video/vnd.dece.sd": {
			"source": "apache",
			"extensions": [
				"uvs",
				"uvvs"
			]
		},
		"video/vnd.dece.video": {
			"source": "apache",
			"extensions": [
				"uvv",
				"uvvv"
			]
		},
		"video/vnd.directv.mpeg": {
			"source": "apache"
		},
		"video/vnd.directv.mpeg-tts": {
			"source": "apache"
		},
		"video/vnd.dlna.mpeg-tts": {
			"source": "apache"
		},
		"video/vnd.dvb.file": {
			"source": "apache",
			"extensions": [
				"dvb"
			]
		},
		"video/vnd.fvt": {
			"source": "apache",
			"extensions": [
				"fvt"
			]
		},
		"video/vnd.hns.video": {
			"source": "apache"
		},
		"video/vnd.iptvforum.1dparityfec-1010": {
			"source": "apache"
		},
		"video/vnd.iptvforum.1dparityfec-2005": {
			"source": "apache"
		},
		"video/vnd.iptvforum.2dparityfec-1010": {
			"source": "apache"
		},
		"video/vnd.iptvforum.2dparityfec-2005": {
			"source": "apache"
		},
		"video/vnd.iptvforum.ttsavc": {
			"source": "apache"
		},
		"video/vnd.iptvforum.ttsmpeg2": {
			"source": "apache"
		},
		"video/vnd.motorola.video": {
			"source": "apache"
		},
		"video/vnd.motorola.videop": {
			"source": "apache"
		},
		"video/vnd.mpegurl": {
			"source": "apache",
			"extensions": [
				"mxu",
				"m4u"
			]
		},
		"video/vnd.ms-playready.media.pyv": {
			"source": "apache",
			"extensions": [
				"pyv"
			]
		},
		"video/vnd.nokia.interleaved-multimedia": {
			"source": "apache"
		},
		"video/vnd.nokia.videovoip": {
			"source": "apache"
		},
		"video/vnd.objectvideo": {
			"source": "apache"
		},
		"video/vnd.sealed.mpeg1": {
			"source": "apache"
		},
		"video/vnd.sealed.mpeg4": {
			"source": "apache"
		},
		"video/vnd.sealed.swf": {
			"source": "apache"
		},
		"video/vnd.sealedmedia.softseal.mov": {
			"source": "apache"
		},
		"video/vnd.uvvu.mp4": {
			"source": "apache",
			"extensions": [
				"uvu",
				"uvvu"
			]
		},
		"video/vnd.vivo": {
			"source": "apache",
			"extensions": [
				"viv"
			]
		},
		"video/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"webm"
			]
		},
		"video/x-f4v": {
			"source": "apache",
			"extensions": [
				"f4v"
			]
		},
		"video/x-fli": {
			"source": "apache",
			"extensions": [
				"fli"
			]
		},
		"video/x-flv": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"flv"
			]
		},
		"video/x-m4v": {
			"source": "apache",
			"extensions": [
				"m4v"
			]
		},
		"video/x-matroska": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mkv",
				"mk3d",
				"mks"
			]
		},
		"video/x-mng": {
			"source": "apache",
			"extensions": [
				"mng"
			]
		},
		"video/x-ms-asf": {
			"source": "apache",
			"extensions": [
				"asf",
				"asx"
			]
		},
		"video/x-ms-vob": {
			"source": "apache",
			"extensions": [
				"vob"
			]
		},
		"video/x-ms-wm": {
			"source": "apache",
			"extensions": [
				"wm"
			]
		},
		"video/x-ms-wmv": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"wmv"
			]
		},
		"video/x-ms-wmx": {
			"source": "apache",
			"extensions": [
				"wmx"
			]
		},
		"video/x-ms-wvx": {
			"source": "apache",
			"extensions": [
				"wvx"
			]
		},
		"video/x-msvideo": {
			"source": "apache",
			"extensions": [
				"avi"
			]
		},
		"video/x-sgi-movie": {
			"source": "apache",
			"extensions": [
				"movie"
			]
		},
		"video/x-smv": {
			"source": "apache",
			"extensions": [
				"smv"
			]
		},
		"x-conference/x-cooltalk": {
			"source": "apache",
			"extensions": [
				"ice"
			]
		},
		"x-shader/x-fragment": {
			"compressible": true
		},
		"x-shader/x-vertex": {
			"compressible": true
		}
	};

/***/ },
/* 411 */
/***/ function(module, exports) {

	/*!
	 * bytes
	 * Copyright(c) 2012-2014 TJ Holowaychuk
	 * Copyright(c) 2015 Jed Watson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = bytes;
	module.exports.format = format;
	module.exports.parse = parse;

	/**
	 * Module variables.
	 * @private
	 */

	var map = {
	  b:  1,
	  kb: 1 << 10,
	  mb: 1 << 20,
	  gb: 1 << 30,
	  tb: ((1 << 30) * 1024)
	};

	/**
	 *Convert the given value in bytes into a string or parse to string to an integer in bytes.
	 *
	 * @param {string|number} value
	 * @param {{
	 *  case: [string],
	 *  decimalPlaces: [number]
	 *  fixedDecimals: [boolean]
	 *  thousandsSeparator: [string]
	 *  }} [options] bytes options.
	 *
	 * @returns {string|number|null}
	 */

	function bytes(value, options) {
	  if (typeof value === 'string') {
	    return parse(value);
	  }

	  if (typeof value === 'number') {
	    return format(value, options);
	  }

	  return null;
	}

	/**
	 * Format the given value in bytes into a string.
	 *
	 * If the value is negative, it is kept as such. If it is a float,
	 * it is rounded.
	 *
	 * @param {number} value
	 * @param {object} [options]
	 * @param {number} [options.decimalPlaces=2]
	 * @param {number} [options.fixedDecimals=false]
	 * @param {string} [options.thousandsSeparator=]
	 * @public
	 */

	function format(value, options) {
	  if (typeof value !== 'number') {
	    return null;
	  }

	  var mag = Math.abs(value);
	  var thousandsSeparator = (options && options.thousandsSeparator) || '';
	  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;
	  var fixedDecimals = Boolean(options && options.fixedDecimals);
	  var unit = 'B';

	  if (mag >= map.tb) {
	    unit = 'TB';
	  } else if (mag >= map.gb) {
	    unit = 'GB';
	  } else if (mag >= map.mb) {
	    unit = 'MB';
	  } else if (mag >= map.kb) {
	    unit = 'kB';
	  }

	  var val = value / map[unit.toLowerCase()];
	  var str = val.toFixed(decimalPlaces);

	  if (!fixedDecimals) {
	    str = str.replace(/(?:\.0*|(\.[^0]+)0+)$/, '$1');
	  }

	  if (thousandsSeparator) {
	    str = str.replace(/\B(?=(\d{3})+(?!\d))/g, thousandsSeparator);
	  }

	  return str + unit;
	}

	/**
	 * Parse the string value into an integer in bytes.
	 *
	 * If no unit is given, it is assumed the value is in bytes.
	 *
	 * @param {number|string} val
	 * @public
	 */

	function parse(val) {
	  if (typeof val === 'number' && !isNaN(val)) {
	    return val;
	  }

	  if (typeof val !== 'string') {
	    return null;
	  }

	  // Test if the string passed is valid
	  var results = val.match(/^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb)$/i);
	  var floatValue;
	  var unit = 'b';

	  if (!results) {
	    // Nothing could be extracted from the given string
	    floatValue = parseInt(val);
	    unit = 'b'
	  } else {
	    // Retrieve the value and the unit
	    floatValue = parseFloat(results[1]);
	    unit = results[4].toLowerCase();
	  }

	  return map[unit] * floatValue;
	}


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * compressible
	 * Copyright(c) 2013 Jonathan Ong
	 * Copyright(c) 2014 Jeremiah Senkpiel
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var db = __webpack_require__(409)

	/**
	 * Module variables.
	 * @private
	 */

	var compressibleTypeRegExp = /^text\/|\+json$|\+text$|\+xml$/i
	var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = compressible

	/**
	 * Checks if a type is compressible.
	 *
	 * @param {string} type
	 * @return {Boolean} compressible
	 * @public
	 */

	function compressible(type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // strip parameters
	  var match = extractTypeRegExp.exec(type)
	  var mime = match && match[1].toLowerCase()
	  var data = db[mime]

	  if ((data && data.compressible) || compressibleTypeRegExp.test(mime)) {
	    return true
	  }

	  return data
	    ? data.compressible
	    : undefined
	}


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var tty = __webpack_require__(414);
	var util = __webpack_require__(325);

	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(415);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	/**
	 * The file descriptor to write the `debug()` calls to.
	 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	 *
	 *   $ DEBUG_FD=3 node script.js 3>debug.log
	 */

	var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	var stream = 1 === fd ? process.stdout :
	             2 === fd ? process.stderr :
	             createWritableStdioStream(fd);

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
	  if (0 === debugColors.length) {
	    return tty.isatty(fd);
	  } else {
	    return '0' !== debugColors
	        && 'no' !== debugColors
	        && 'false' !== debugColors
	        && 'disabled' !== debugColors;
	  }
	}

	/**
	 * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	 */

	var inspect = (4 === util.inspect.length ?
	  // node <= 0.8.x
	  function (v, colors) {
	    return util.inspect(v, void 0, void 0, colors);
	  } :
	  // node > 0.8.x
	  function (v, colors) {
	    return util.inspect(v, { colors: colors });
	  }
	);

	exports.formatters.o = function(v) {
	  return inspect(v, this.useColors)
	    .replace(/\s*\n\s*/g, ' ');
	};

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	  var name = this.namespace;

	  if (useColors) {
	    var c = this.color;

	    args[0] = '  \u001b[3' + c + ';1m' + name + ' '
	      + '\u001b[0m'
	      + args[0] + '\u001b[3' + c + 'm'
	      + ' +' + exports.humanize(this.diff) + '\u001b[0m';
	  } else {
	    args[0] = new Date().toUTCString()
	      + ' ' + name + ' ' + args[0];
	  }
	  return args;
	}

	/**
	 * Invokes `console.error()` with the specified arguments.
	 */

	function log() {
	  return stream.write(util.format.apply(this, arguments) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  return process.env.DEBUG;
	}

	/**
	 * Copied from `node/src/node.js`.
	 *
	 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	 */

	function createWritableStdioStream (fd) {
	  var stream;
	  var tty_wrap = process.binding('tty_wrap');

	  // Note stream._type is used for test-module-load-list.js

	  switch (tty_wrap.guessHandleType(fd)) {
	    case 'TTY':
	      stream = new tty.WriteStream(fd);
	      stream._type = 'tty';

	      // Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    case 'FILE':
	      var fs = __webpack_require__(350);
	      stream = new fs.SyncWriteStream(fd, { autoClose: false });
	      stream._type = 'fs';
	      break;

	    case 'PIPE':
	    case 'TCP':
	      var net = __webpack_require__(323);
	      stream = new net.Socket({
	        fd: fd,
	        readable: false,
	        writable: true
	      });

	      // FIXME Should probably have an option in net.Socket to create a
	      // stream from an existing fd which is writable only. But for now
	      // we'll just add this hack and set the `readable` member to false.
	      // Test: ./node test/fixtures/echo.js < /etc/passwd
	      stream.readable = false;
	      stream.read = null;
	      stream._type = 'pipe';

	      // FIXME Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    default:
	      // Probably an error on in uv_guess_handle()
	      throw new Error('Implement me. Unknown stream file type!');
	  }

	  // For supporting legacy API we put the FD here.
	  stream.fd = fd;

	  stream._isStdio = true;

	  return stream;
	}

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	exports.enable(load());


/***/ },
/* 414 */
/***/ function(module, exports) {

	module.exports = require("tty");

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(416);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 416 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 417 */
/***/ function(module, exports) {

	/*!
	 * on-headers
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Reference to Array slice.
	 */

	var slice = Array.prototype.slice

	/**
	 * Execute a listener when a response is about to write headers.
	 *
	 * @param {Object} res
	 * @return {Function} listener
	 * @api public
	 */

	module.exports = function onHeaders(res, listener) {
	  if (!res) {
	    throw new TypeError('argument res is required')
	  }

	  if (typeof listener !== 'function') {
	    throw new TypeError('argument listener must be a function')
	  }

	  res.writeHead = createWriteHead(res.writeHead, listener)
	}

	function createWriteHead(prevWriteHead, listener) {
	  var fired = false;

	  // return function with core name and argument list
	  return function writeHead(statusCode) {
	    // set headers from arguments
	    var args = setWriteHeadHeaders.apply(this, arguments);

	    // fire listener
	    if (!fired) {
	      fired = true
	      listener.call(this)

	      // pass-along an updated status code
	      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {
	        args[0] = this.statusCode
	        args.length = 1
	      }
	    }

	    prevWriteHead.apply(this, args);
	  }
	}

	function setWriteHeadHeaders(statusCode) {
	  var length = arguments.length
	  var headerIndex = length > 1 && typeof arguments[1] === 'string'
	    ? 2
	    : 1

	  var headers = length >= headerIndex + 1
	    ? arguments[headerIndex]
	    : undefined

	  this.statusCode = statusCode

	  // the following block is from node.js core
	  if (Array.isArray(headers)) {
	    // handle array case
	    for (var i = 0, len = headers.length; i < len; ++i) {
	      this.setHeader(headers[i][0], headers[i][1])
	    }
	  } else if (headers) {
	    // handle object case
	    var keys = Object.keys(headers)
	    for (var i = 0; i < keys.length; i++) {
	      var k = keys[i]
	      if (k) this.setHeader(k, headers[k])
	    }
	  }

	  // copy leading arguments
	  var args = new Array(Math.min(length, headerIndex))
	  for (var i = 0; i < args.length; i++) {
	    args[i] = arguments[i]
	  }

	  return args
	}


/***/ },
/* 418 */
/***/ function(module, exports) {

	/*!
	 * vary
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 */

	module.exports = vary;
	module.exports.append = append;

	/**
	 * RegExp to match field-name in RFC 7230 sec 3.2
	 *
	 * field-name    = token
	 * token         = 1*tchar
	 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
	 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
	 *               / DIGIT / ALPHA
	 *               ; any VCHAR, except delimiters
	 */

	var fieldNameRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/

	/**
	 * Append a field to a vary header.
	 *
	 * @param {String} header
	 * @param {String|Array} field
	 * @return {String}
	 * @api public
	 */

	function append(header, field) {
	  if (typeof header !== 'string') {
	    throw new TypeError('header argument is required');
	  }

	  if (!field) {
	    throw new TypeError('field argument is required');
	  }

	  // get fields array
	  var fields = !Array.isArray(field)
	    ? parse(String(field))
	    : field;

	  // assert on invalid field names
	  for (var i = 0; i < fields.length; i++) {
	    if (!fieldNameRegExp.test(fields[i])) {
	      throw new TypeError('field argument contains an invalid header name');
	    }
	  }

	  // existing, unspecified vary
	  if (header === '*') {
	    return header;
	  }

	  // enumerate current values
	  var val = header;
	  var vals = parse(header.toLowerCase());

	  // unspecified vary
	  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
	    return '*';
	  }

	  for (var i = 0; i < fields.length; i++) {
	    var fld = fields[i].toLowerCase();

	    // append value (case-preserving)
	    if (vals.indexOf(fld) === -1) {
	      vals.push(fld);
	      val = val
	        ? val + ', ' + fields[i]
	        : fields[i];
	    }
	  }

	  return val;
	}

	/**
	 * Parse a vary header into an array.
	 *
	 * @param {String} header
	 * @return {Array}
	 * @api private
	 */

	function parse(header) {
	  return header.trim().split(/ *, */);
	}

	/**
	 * Mark that a request is varied on a header field.
	 *
	 * @param {Object} res
	 * @param {String|Array} field
	 * @api public
	 */

	function vary(res, field) {
	  if (!res || !res.getHeader || !res.setHeader) {
	    // quack quack
	    throw new TypeError('res argument is required');
	  }

	  // get existing header
	  var val = res.getHeader('Vary') || ''
	  var header = Array.isArray(val)
	    ? val.join(', ')
	    : String(val);

	  // set new header
	  if ((val = append(header, field))) {
	    res.setHeader('Vary', val);
	  }
	}


/***/ },
/* 419 */
/***/ function(module, exports) {

	module.exports = require("zlib");

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = ra;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _cc = __webpack_require__(421);

	var cc = _interopRequireWildcard(_cc);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _obj_diff = __webpack_require__(422);

	var Diff = _interopRequireWildcard(_obj_diff);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /*
	                                                                                                                                                          
	                                                                                                                                                          !!! be aware of cyclic changes via child threads:
	                                                                                                                                                          
	                                                                                                                                                          ra( {
	                                                                                                                                                          	a: 1,
	                                                                                                                                                          	get _onA() { this::function* {
	                                                                                                                                                          		let x = this.a
	                                                                                                                                                          		yield cc.go( this::function* () {
	                                                                                                                                                          			this.a = this.a + 1 // <- restart this._onA because of changing this.a from another thread.
	                                                                                                                                                          			// such a mistake is common if using "a" as "private" member
	                                                                                                                                                          		} )
	                                                                                                                                                          	}() },
	                                                                                                                                                          }
	                                                                                                                                                          */

	/*

	THE IMPORTANT THING OF DESIGN:

	ra( () => 1 ) - transparent (ra.Transparent) by default
	ra( { x: ... } ) - opaque (ra.Opaque) by default

	TODO:

	* Warning if a live property has not been read during the life time of observable value or during some period of time (e.g. 1-30 minutes) since creating that observable value.

	* check for changes during execution of (function*) and restart calculus.


	TODO BUG:
	let app = ra( {
		moving1: {
			a: 1,
			b: 2,
			c: {
				d: 3,
			},
		},
	}
	_app.moving1.a
	1
	_app.moving1.c.d
	3
	_app.moving1={a:4}
	Object {a: 4}
	_app.moving1.c.d
	3                       <----------- !!!  MUST BE NULL !!!!
	_app.moving1.c
	Cell {_id: "j87yqkoqppuv", _value: null, _error: null, _isValueEqual: function, _initialized: true…}
	_app.moving1.c.valueOf()
	null


	*/

	/*
	Objects is fatser than Maps :(
	Pity.
	time(()=>{a.y=1;a.z=2;a.x=3;delete a.y;delete a.z},1000000)
	2.605s
	xx={};yy={};zz={}
	time(()=>{m.set(xx,1);m.set(yy,2);m.set(zz,3);m.delete(xx);m.delete(yy)},1000000)
	3.897s
	Chrome.
	*/

	var Actions = new WeakMap();
	var Opaques = new WeakSet();

	var checkNull = function checkNull(value) {
	  return value == null ? null : value;
	};
	var getValue = function getValue(value) {
	  return value == null || typeof value.valueOf != "function" ? value : value.valueOf();
	};
	var isLiteral = function isLiteral(value) {
	  return value && typeof value == "object" && value.constructor == Object;
	};

	var usedPropsGuard = function usedPropsGuard() {
	  _classCallCheck(this, usedPropsGuard);
	};

	var AbstractGuard = function (_usedPropsGuard) {
	  _inherits(AbstractGuard, _usedPropsGuard);

	  function AbstractGuard() {
	    _classCallCheck(this, AbstractGuard);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(AbstractGuard).apply(this, arguments));
	  }

	  return AbstractGuard;
	}(usedPropsGuard);

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {

	  for (var _iterator = "toString valueOf toLocaleString hasOwnProperty isPrototypeOf propertyIsEnumerable".split(" ")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	    var i = _step.value;

	    Object.defineProperty(AbstractGuard.prototype, i, { value: {}[i], enumerable: false });
	  }
	} catch (err) {
	  _didIteratorError = true;
	  _iteratorError = err;
	} finally {
	  try {
	    if (!_iteratorNormalCompletion && _iterator.return) {
	      _iterator.return();
	    }
	  } finally {
	    if (_didIteratorError) {
	      throw _iteratorError;
	    }
	  }
	}

	Object.defineProperty(AbstractGuard.prototype, "$name", { value: "<...>", enumerable: false, writable: true });

	var invalidKeyCall = function invalidKeyCall(key) {
	  throw new Error("access to an undeclared property \"" + this.$name + "." + key + "\"");
	};

	var guardProp = function guardProp(key) {
	  var _context;

	  if (!(_context = usedPropsGuard.prototype, Object.prototype.hasOwnProperty).call(_context, key)) {
	    Object.defineProperty(usedPropsGuard.prototype, key, {
	      get: function get() {
	        invalidKeyCall.call(this, key);
	      },
	      set: function set() {
	        invalidKeyCall.call(this, key);
	      }
	    });
	    // console.log( Object.keys( usedPropsGuard.prototype ).length )
	    // console.log( Object.getOwnPropertyNames( usedPropsGuard.prototype ).length )
	  }
	};

	// Не зразумела толкам, як гэты Proxy працуе ў якасьці прататыпу.
	// Пакуль што, здаецца, паводзіны не адпавядаюць сьпецыфікацыі (2014.11.25)

	// if ( typeof Proxy == `function` ) {
	// 	AbstractGuard.prototype = new Proxy( AbstractGuard.prototype, {
	// 		get: function ( _, key ) { this::invalidKeyCall( key ) },
	// 		set: function ( _, key ) { this::invalidKeyCall( key ) },
	// 	} )
	// }

	// if ( global.APP_DEBUG ) {
	// 	//
	// 	// аб'яўленьне аб'екта з ~700-800 уласьцівасьцяў з функцыямі чытаньня/запісу
	// 	// займае ў Google Chrome'е каля траціны секунды.
	// 	// Правераныя спосабы:
	// 	// - дабаўленьне па адным праз Object.defineProperty
	// 	// - дабаўленьне гуртам праз Object.defineProperties
	// 	// - кампіляцыя зыходніка праз лакальны eval
	// 	// - кампіляцыя зыходніка праз глабальны eval
	// 	// - кампіляцыя зыходніка праз дабаўленьне тэгу script з зыходнікам
	// 	// Не правераныя спосабы:
	// 	// - дабаўленьне тэгу script з пазнакай src
	// 	// Паляпшае сітуацыю (напалову):
	// 	// - стварэньне для кожнай уласьцівасьці новага аб'екта са старым аб'ектам
	// 	// у якасьці прататыпу. Пры гэтым доступ да неаб'яўленых уласьцівасьцяў можа
	// 	// стаць адносна доўгім па часе, але ж гэта ня так важна, бо ў выніку ўсё адно
	// 	// кідаецца памылка.
	// 	//
	// 	// Генерацыя тэксту зыходніка адбываецца імгненна.
	// 	//
	// 	// Зыходзячы з гэтага улучаць стражнікаў доступу да неаб'яўленых уласьцівасьцяў
	// 	// трэба толькі пры адладцы.
	// 	//
	// 	AbstractGuard.prototype =
	// 		( global.__UsedScriptIdentifiers__ + `` )
	// 		.split( /[\s,]+/ )
	// 		.reduce( ( proto, key ) =>
	// 			Object.create( proto, { [ key ]: {
	// 				get: function () { this::invalidKeyCall( key ) },
	// 				set: function ( _ ) { this::invalidKeyCall( key ) },
	// 			} } ),
	// 			AbstractGuard.prototype )
	// }

	var EMPTY_ARRAY = [];
	Object.freeze(EMPTY_ARRAY);

	var ImmutableInterface = function (_AbstractGuard) {
	  _inherits(ImmutableInterface, _AbstractGuard);

	  function ImmutableInterface() {
	    _classCallCheck(this, ImmutableInterface);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ImmutableInterface).apply(this, arguments));
	  }

	  _createClass(ImmutableInterface, [{
	    key: "get",
	    value: function get(key) {
	      if (key != null) {
	        var m = this.valueOf();
	        if (m != null && Object.prototype.hasOwnProperty.call(m, key)) return m[key];
	      }
	      return null;
	    }
	  }, {
	    key: "map",
	    value: function map(fun) {
	      var m = this.valueOf();
	      return m && (Array.isArray(m) ? lodash.map(m, fun) : lodash.mapValues(m, fun));
	    }
	  }, {
	    key: "keys",
	    value: function keys() {
	      var m = this.valueOf();
	      return m == null ? EMPTY_ARRAY : Object.keys(m);
	    }
	  }, {
	    key: "props",
	    get: function get() {
	      throw new Error("access to deprecated 'props' property detected");
	    }
	  }, {
	    key: "declaredProperties",
	    get: function get() {
	      return this.live;
	    }
	  }, {
	    key: "length",
	    get: function get() {
	      var m = this.valueOf();return m == null ? 0 : Object.keys(m).length;
	    }
	  }]);

	  return ImmutableInterface;
	}(AbstractGuard);

	var ReadOnlyCell = function (_ImmutableInterface) {
	  _inherits(ReadOnlyCell, _ImmutableInterface);

	  function ReadOnlyCell(parent) {
	    _classCallCheck(this, ReadOnlyCell);

	    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(ReadOnlyCell).call(this));

	    _this3._parent = parent;
	    return _this3;
	  }

	  _createClass(ReadOnlyCell, [{
	    key: "getReadOnly",
	    value: function getReadOnly() {
	      return this;
	    }
	  }, {
	    key: "valueOf",
	    value: function valueOf() {
	      var _parent;

	      return (_parent = this._parent).valueOf.apply(_parent, arguments);
	    }
	  }, {
	    key: "noTouch",
	    value: function noTouch() {
	      var _parent2;

	      return (_parent2 = this._parent).valueOf.apply(_parent2, arguments);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      var _parent3;

	      return (_parent3 = this._parent).valueOf.apply(_parent3, arguments);
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      var _parent4;

	      return (_parent4 = this._parent).valueOf.apply(_parent4, arguments);
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      var _parent5;

	      return (_parent5 = this._parent).valueOf.apply(_parent5, arguments);
	    }
	  }, {
	    key: "live",
	    get: function get() {
	      return this._parent.live;
	    }
	  }]);

	  return ReadOnlyCell;
	}(ImmutableInterface);

	var Getters = new WeakSet();
	var Getter = function Getter(fun, isValueEqual) {
	  var last = void 0;
	  var ret = Object.assign(!isValueEqual ? function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return fun.call.apply(fun, [this].concat(args));
	  } : function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    var ret = fun.call.apply(fun, [this].concat(args));
	    if (!is(last, ret, isValueEqual)) last = ret;
	    return last;
	  }, { _dbg: fun });
	  Getters.add(ret);
	  return ret;
	};

	var runGetter = function runGetter(cell, getter) {
	  return new Action(getter, cell);
	};

	function is(a, b, isEqual) {
	  return Object.is(a, b) || b && typeof b.isEqualTo == "function" && b.isEqualTo(a) || a && typeof a.isEqualTo == "function" && a.isEqualTo(b) || typeof isEqual == "function" && isEqual(a, b);
	}

	var ThisToCell = new WeakMap();

	var This = function () {
	  function This() {
	    _classCallCheck(this, This);
	  }

	  _createClass(This, [{
	    key: "_defineThatProperty",
	    value: function _defineThatProperty(key, that) {
	      Object.defineProperty(this, key, {
	        configurable: true,
	        enumerable: true,
	        get: function get() {
	          return that[key];
	        },
	        set: function set(value) {
	          that[key] = value;
	        }
	      });
	    }
	  }], [{
	    key: "create",
	    value: function create(parent, that) {
	      var ret = null;
	      if (!parent) ret = new This();else ret = Object.create(parent);
	      ret.valueOf = function () {
	        return that.valueOf();
	      };
	      ret.toString = function () {
	        return that.toString();
	      };
	      ret.toJSON = function () {
	        return that.toJSON();
	      };
	      ret.assign = function (value) {
	        return that.assign(value);
	      };
	      ret.throw = function (value) {
	        return that.throw(value);
	      };
	      Object.defineProperty(ret, "live", { get: function get() {
	          return that.live;
	        } });
	      ThisToCell.set(ret, that);
	      return ret;
	    }
	  }]);

	  return This;
	}();

	var Cell = function (_ImmutableInterface2) {
	  _inherits(Cell, _ImmutableInterface2);

	  // TODO: delete all public methods but valueOf.
	  // move them to namespace ra.

	  function Cell() {
	    _classCallCheck(this, Cell);

	    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(Cell).call(this));

	    _this4._id = (0, _uid2.default)();
	    _this4._level = 0;
	    _this4._value = null;
	    _this4._error = null;
	    _this4._name = null;
	    _this4._key = null;
	    _this4._that = null;
	    _this4._initialized = false;
	    _this4._frozen = false;
	    _this4._closed = false;
	    _this4._dirty = false;
	    _this4._live = null;
	    _this4._parent = null;
	    _this4._actionsArr = [];
	    _this4._notifyWritten();
	    return _this4;
	  }

	  _createClass(Cell, [{
	    key: "valueOf",
	    value: function valueOf() {
	      return this._read();
	    }
	  }, {
	    key: "_assign",
	    value: function _assign(value) {
	      return this._write(value, false, null);
	    }
	  }, {
	    key: "assign",
	    value: function assign(value) {
	      return this._write(value, false, null);
	    }
	  }, {
	    key: "_apply",
	    value: function _apply(diff) {
	      var partial = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];
	      return this.assign(Diff.apply(this.noTouch(), diff, partial));
	    }
	  }, {
	    key: "apply",
	    value: function apply(diff) {
	      var partial = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];
	      return this.assign(Diff.apply(this.noTouch(), diff, partial));
	    }
	  }, {
	    key: "_throw",
	    value: function _throw(value) {
	      return this._write(null, false, value);
	    }
	  }, {
	    key: "throw",
	    value: function _throw(value) {
	      return this._write(null, false, value);
	    }
	  }, {
	    key: "_touch",
	    value: function _touch() {
	      this._fire();
	    }
	  }, {
	    key: "touch",
	    value: function touch() {
	      this._fire();
	    }
	  }, {
	    key: "_noTouch",
	    value: function _noTouch() {
	      if (this._dirty) this._updateSelf();
	      if (this._error) throw this._error;
	      return this._value;
	    }
	  }, {
	    key: "noTouch",
	    value: function noTouch() {
	      if (this._dirty) this._updateSelf();
	      if (this._error) throw this._error;
	      return this._value;
	    }
	  }, {
	    key: "then_",
	    value: function then_(mapvalue, maperror) {
	      var _this5 = this;

	      if (mapvalue != null && typeof mapvalue != "function" || maperror != null && typeof maperror != "function" || mapvalue == null && maperror == null) throw new Error("ra.then: wrong parameters");
	      return ra(maperror == null ? function () {
	        return mapvalue(_this5.valueOf());
	      } : function () {
	        var value = void 0;
	        try {
	          value = _this5.valueOf();
	        } catch (error) {
	          return maperror(error);
	        }
	        return mapvalue == null ? value : mapvalue(value);
	      });
	    }
	  }, {
	    key: "close",
	    value: function close() {
	      // TODO: delete this method.
	      // use ra.close() instead.
	      return this._close();
	    }
	  }, {
	    key: "_close",
	    value: function _close() {
	      if (this._parent && !this._parent._closed) throw new Error("cannot close not root data");
	      if (this._closed) return;
	      this._closed = true;
	      this._fire();
	      if (this._live && this._live.array) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	          for (var _iterator2 = this._live.array[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var p = _step2.value;

	            p.close();
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }

	        this._live.array = null;
	      }
	      this._value = null;
	      this._error = null;
	      this._actionsArr = null;
	      this._parent = null;
	    }
	  }, {
	    key: "freeze",
	    value: function freeze() {
	      // TODO: delete this method.
	      // use ra.freeze() instead.
	      return this._freeze();
	    }
	  }, {
	    key: "_freeze",
	    value: function _freeze() {
	      if (this._closed || this._frozen) return;
	      this._frozen = true;
	      this._fire(); // TODO для выдаленьня спасылак абысьціся без _fire і адпаведна без лішняга прагону
	      if (this._live && this._live.array) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = this._live.array[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var p = _step3.value;

	            p._freeze();
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: "getReadOnly",
	    value: function getReadOnly() {
	      return new ReadOnlyCell(this);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      var v = this._read();
	      return v == null || !v.toString ? "" + v : v.toString.apply(v, arguments);
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      var v = this._read();
	      return v == null || !v.toJSON ? v : v.toJSON.apply(v, arguments);
	    }
	  }, {
	    key: "with",
	    value: function _with(cb) {
	      var _context2;

	      return (_context2 = this._getThat(), cb).call(_context2);
	    }
	  }, {
	    key: "setName",
	    value: function setName(name) {
	      this._name = name;
	      return this;
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      var ret = this._name || this._key;
	      var p = this._parent;
	      while (p) {
	        ret = (p._name || p._key) + "." + ret;
	        p = p._parent;
	      }
	      return ret;
	    }
	  }, {
	    key: "_getThat",
	    value: function _getThat() {
	      if (!this._that) {
	        this._that = This.create(this._parent && this._parent._getThat(), this);
	        if (this._live) for (var i in this._live.object) {
	          this._that._defineThatProperty(i, this);
	        }
	      }
	      return this._that;
	    }
	  }, {
	    key: "defineProperty",
	    value: function defineProperty(key) {
	      return this._defineProperty(key);
	    }
	  }, {
	    key: "_defineProperty",
	    value: function _defineProperty(key, proxy) {
	      // pass key == `` to make Cell object, not value
	      if (!this._live) this._live = {
	        object: Object.create(null),
	        array: []
	      };
	      if (!key) return;
	      guardProp(key);
	      var cc = this._live.object[key];
	      if (cc) return cc;
	      var c = new Cell();
	      this._live.object[key] = c;
	      this._live.array.push(c);
	      c._key = key;
	      c._parent = this;
	      Object.defineProperty(proxy || this, key, {
	        enumerable: true,
	        configurable: true,
	        get: function get() {
	          if (c._live) return c;else return c._read();
	        },
	        set: function set(value) {
	          if (c._live) value = getValue(value);
	          c._write(value, false);
	        }
	      });
	      if (this._that) this._that._defineThatProperty(key, this);
	      if (this._value != null) c._write(this._value[key], true);
	      // Object.seal( c )
	      return c;
	    }
	  }, {
	    key: "init",
	    value: function init(value) {
	      this._init(value, false, false);
	    }
	  }, {
	    key: "setVar",
	    value: function setVar(prop, value) {
	      Object.defineProperty(this, prop, { enumerable: true, writable: true, value: value });
	      return this;
	    }
	  }, {
	    key: "_init",
	    value: function _init(value, recursive, isGetter) {
	      var _this6 = this;

	      var proxy = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	      if (!recursive && this._initialized) throw new Error("already initialized");
	      if (this._parent) this._parent._dirty = true;
	      this._initialized = true;
	      value = checkNull(value);
	      if (typeof value == "function" && value.typeDescriptor) value = value(this._key);
	      if (value == null) // we are already null at the point of birth
	        return;
	      if (Opaques.has(value)) // force just a value
	        return this._value = value;
	      if (typeof value == "function") {
	        if (isGetter || Getters.has(value)) // getter
	          runGetter(this, Object.assign(function () {
	            var _context3;

	            return (_context3 = _this6._parent && _this6._parent._getThat(), value).call(_context3);
	          }, { _dbg: value }));else // method
	          this._value = function () {
	            var _context4, _ref;

	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	              args[_key3] = arguments[_key3];
	            }

	            return (_ref = (_context4 = _this6._parent && _this6._parent._getThat(), value)).call.apply(_ref, [_context4].concat(args));
	          };
	        return;
	      }
	      if (!isLiteral(value)) {
	        // just a value or a promise
	        if (typeof value.then == "function") value.then(this.assign.bind(this), this.throw.bind(this));else this._value = value;
	        return;
	      }
	      Opaques.add(this); // Ra-classes are opaque by default. Ra-values are transparent by default.
	      // subrecord description
	      if (recursive) throw new Error("wrong parameters");
	      this._defineProperty();
	      for (var key in value) {
	        var descr = Object.getOwnPropertyDescriptor(value, key);
	        if (!descr) continue;
	        var get = descr.get;
	        var subValue = descr.value;
	        if (descr.set) throw new Error("wrong parameters");else if (get) subValue = get;
	        if (key == "$") this._init(subValue, true, !!get);else this._defineProperty(key, proxy)._init(subValue, false, !!get);
	      }
	    }
	  }, {
	    key: "_read",
	    value: function _read() {
	      if (this._dirty) this._updateSelf();
	      var action = Actions.get(cc.current);
	      if (action) {
	        if (this._closed) action.close();else if (!this._frozen) action.onread(this);
	      }
	      if (this._error) throw this._error;
	      return this._value;
	    }
	  }, {
	    key: "_write",
	    value: function _write(newValue, down, newError) {
	      if (newError == null) newError = null;
	      if (this._frozen) throw new Error("Try to change a frozen value");
	      this._initialized = true;
	      this._dirty = false;
	      newValue = checkNull(newValue);
	      // IMPORTANT: notify written before fire
	      if (!down) {
	        var p = this;
	        while (p) {
	          p._notifyWritten();
	          p = p._parent;
	        }
	      }
	      if (this._closed) {
	        var action = Actions.get(cc.current);
	        if (action) action.close();
	      } else if (!is(this._value, newValue) || this._error != newError) {
	        // console.log(`>`+this.$name)//debugger
	        this._value = newValue;
	        this._error = newError;
	        if (this._live) {
	          var _iteratorNormalCompletion4 = true;
	          var _didIteratorError4 = false;
	          var _iteratorError4 = undefined;

	          try {
	            for (var _iterator4 = this._live.array[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	              var _p = _step4.value;

	              _p._write(newValue && newValue[_p._key], true);
	            }
	          } catch (err) {
	            _didIteratorError4 = true;
	            _iteratorError4 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                _iterator4.return();
	              }
	            } finally {
	              if (_didIteratorError4) {
	                throw _iteratorError4;
	              }
	            }
	          }
	        }this._fire();
	        if (!down) {
	          var _p2 = this._parent;
	          while (_p2 && !_p2._dirty) {
	            _p2._dirty = true;
	            _p2._fire();
	            _p2 = _p2._parent;
	          }
	        }
	      }
	      return newValue;
	    }
	  }, {
	    key: "_updateSelf",
	    value: function _updateSelf() {
	      var cnt = 0;
	      var ret = {};
	      for (var key in this._value) {
	        var _context5;

	        if ((_context5 = this._value, Object.prototype.hasOwnProperty).call(_context5, key)) {
	          ret[key] = this._value[key];
	          ++cnt;
	        }
	      }if (this._live && this._live.array) {
	        var _iteratorNormalCompletion5 = true;
	        var _didIteratorError5 = false;
	        var _iteratorError5 = undefined;

	        try {
	          for (var _iterator5 = this._live.array[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	            var p = _step5.value;

	            if (p._dirty) p._updateSelf();
	            if (p._error) {
	              this._error = p._error;
	              this._value = null;
	              this._dirty = false;
	              return;
	            }
	            var value = p._value;
	            if (value == null) {
	              var _context6;

	              if ((_context6 = ret, Object.prototype.hasOwnProperty).call(_context6, p._key)) {
	                delete ret[p._key];
	                --cnt;
	              }
	            } else {
	              ret[p._key] = value;
	              cnt = Infinity;
	            }
	          }
	        } catch (err) {
	          _didIteratorError5 = true;
	          _iteratorError5 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion5 && _iterator5.return) {
	              _iterator5.return();
	            }
	          } finally {
	            if (_didIteratorError5) {
	              throw _iteratorError5;
	            }
	          }
	        }
	      }if (cnt == 0) ret = null;

	      this._value = ret;
	      this._dirty = false;
	    }
	  }, {
	    key: "debug",
	    value: function debug(cb) {
	      this._actionsArr.push({ action: { _fire: cb } });
	    }
	  }, {
	    key: "debugger",
	    value: function _debugger() {
	      this.debug(function () {
	        debugger;
	      });
	    }
	  }, {
	    key: "_fire",
	    value: function _fire() {
	      var a = void 0;
	      a = this._actionsArr;
	      if (a.length) {
	        for (var i = 0; i < a.length; i++) {
	          var c = a[i];
	          if (c.action) c.action._fire(this);
	          c.pushedC = false;
	        }
	        a.length = 0;
	      }
	    }
	  }, {
	    key: "_notifyWritten",
	    value: function _notifyWritten() {
	      var action = Actions.get(cc.current);
	      if (action) action.onwritten(this);
	    }
	  }, {
	    key: "changed",
	    get: function get() {
	      var _this7 = this;

	      return this._actionsArr && { then: function then(proc) {
	          return _this7._actionsArr.push({ action: { _fire: function _fire() {
	                return process.nextTick(proc);
	              } } });
	        } };
	    }
	  }, {
	    key: "_liveRec",
	    get: function get() {
	      return this._live && this._live.object;
	    }
	  }, {
	    key: "live",
	    get: function get() {
	      return this._live && this._live.object;
	    }
	  }]);

	  return Cell;
	}(ImmutableInterface);

	var rethrow = function rethrow(error) {
	  return process.nextTick(function () {
	    throw error;
	  });
	};

	var Action = function () {
	  function Action(fun, dest) {
	    _classCallCheck(this, Action);

	    this._id = (0, _uid2.default)();
	    this._level = 0;
	    this._fun = fun;
	    this._dest = dest;
	    this._cellSet = Object.create(null);
	    this._cellSetSize = 0;
	    this._cellArr = [];
	    this._dependencies = 0;
	    this._checked = 0;
	    this._checkSheduled = false;
	    this._running = false;
	    this._startThread();
	  }

	  _createClass(Action, [{
	    key: "_startThread",
	    value: function _startThread() {
	      this._thread = cc.go(this._loop.bind(this));
	      Actions.set(this._thread, this);
	    }
	  }, {
	    key: "_loop",
	    value: regeneratorRuntime.mark(function _loop() {
	      var _this8 = this;

	      var next, _loop2, _ret;

	      return regeneratorRuntime.wrap(function _loop$(_context8) {
	        while (1) switch (_context8.prev = _context8.next) {
	          case 0:
	            next = { then: function then(next) {
	                _this8._onchange = next;
	              } };

	            cc.defer(function () {
	              Actions.delete(cc.current);
	              if (_this8._thread == cc.current) _this8._finalize();
	            });
	            _context8.next = 4;
	            return;

	          case 4:
	            _loop2 = regeneratorRuntime.mark(function _loop2() {
	              var isError, ret, delegated;
	              return regeneratorRuntime.wrap(function _loop2$(_context7) {
	                while (1) switch (_context7.prev = _context7.next) {
	                  case 0:
	                    if (!_this8.isClosed()) {
	                      _context7.next = 2;
	                      break;
	                    }

	                    return _context7.abrupt("return", {
	                      v: void 0
	                    });

	                  case 2:
	                    if (!(_this8._thread != cc.current)) {
	                      _context7.next = 4;
	                      break;
	                    }

	                    return _context7.abrupt("return", {
	                      v: void 0
	                    });

	                  case 4:
	                    if (!(_this8._dest && _this8._dest._closed)) {
	                      _context7.next = 6;
	                      break;
	                    }

	                    return _context7.abrupt("return", {
	                      v: void 0
	                    });

	                  case 6:
	                    _this8._begin();
	                    isError = false;
	                    ret = void 0;
	                    delegated = false;
	                    _context7.prev = 10;

	                    _this8._running = true;
	                    ret = (0, _this8._fun)();
	                    _this8._running = false;

	                  case 14:
	                    if (!(ret != null && !Opaques.has(ret))) {
	                      _context7.next = 31;
	                      break;
	                    }

	                    if (!(ret instanceof ImmutableInterface)) {
	                      _context7.next = 20;
	                      break;
	                    }

	                    delegated = true;
	                    if (_this8._dest)
	                      // we cannot just do 'ret = ret.valueOf()' because then we will force to restart this loop and recalculate this._fun when ret.valueOf() is changed by another loop. And so possibly this._fun will reconstruct a reactive every time it is called and calculations will never finish.
	                      // TODO: ensure that that action will be destroyed on restart.
	                      new Action(function () {
	                        return ret.valueOf();
	                      }, _this8._dest);
	                    _context7.next = 28;
	                    break;

	                  case 20:
	                    if (!(typeof ret == "object" && ("next" in ret && typeof ret.next == "function" || "then" in ret && typeof ret.then == "function"))) {
	                      _context7.next = 28;
	                      break;
	                    }

	                    _this8._check(); // check before yield to be able to stop loop thread on variable change
	                    _context7.next = 24;
	                    return ret;

	                  case 24:
	                    ret = _context7.sent;

	                    if (!(_this8._thread != cc.current)) {
	                      _context7.next = 27;
	                      break;
	                    }

	                    return _context7.abrupt("return", {
	                      v: void 0
	                    });

	                  case 27:
	                    return _context7.abrupt("continue", 14);

	                  case 28:
	                    return _context7.abrupt("break", 31);

	                  case 31:
	                    _context7.next = 38;
	                    break;

	                  case 33:
	                    _context7.prev = 33;
	                    _context7.t0 = _context7["catch"](10);

	                    _this8._running = false;
	                    isError = true;
	                    ret = _context7.t0;

	                  case 38:
	                    if (!_this8.isClosed()) {
	                      _context7.next = 40;
	                      break;
	                    }

	                    return _context7.abrupt("return", {
	                      v: void 0
	                    });

	                  case 40:
	                    if (!delegated) {
	                      if (_this8._dest) {
	                        if (isError) _this8._dest.throw(ret);else _this8._dest.assign(ret);
	                      } else {
	                        if (isError) rethrow(ret);
	                      }
	                    }
	                    _this8._check();

	                    if (!_this8._dependencies) {
	                      _context7.next = 47;
	                      break;
	                    }

	                    _context7.next = 45;
	                    return next;

	                  case 45:
	                    _context7.next = 50;
	                    break;

	                  case 47:
	                    if (!delegated) {
	                      if (_this8._dest) _this8._dest._freeze();
	                    }
	                    // Current thread isn't needed any more. Let it be garbaged, but its children must be preserved.
	                    cc.current.switchToChildren();
	                    return _context7.abrupt("return", "break");

	                  case 50:
	                  case "end":
	                    return _context7.stop();
	                }
	              }, _loop2, _this8, [[10, 33]]);
	            });

	          case 5:
	            return _context8.delegateYield(_loop2(), "t0", 6);

	          case 6:
	            _ret = _context8.t0;
	            _context8.t1 = _ret;
	            _context8.next = _context8.t1 === "break" ? 10 : 11;
	            break;

	          case 10:
	            return _context8.abrupt("break", 15);

	          case 11:
	            if (!((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")) {
	              _context8.next = 13;
	              break;
	            }

	            return _context8.abrupt("return", _ret.v);

	          case 13:
	            _context8.next = 5;
	            break;

	          case 15:
	          case "end":
	            return _context8.stop();
	        }
	      }, _loop, this);
	    })
	  }, {
	    key: "isClosed",
	    value: function isClosed() {
	      return !this._cellArr;
	    }
	  }, {
	    key: "close",
	    value: function close() {
	      this._thread && this._thread.return();
	    }
	  }, {
	    key: "_finalize",
	    value: function _finalize() {
	      this._unsubscribe();
	      this._cellSet = null;
	      this._cellArr = null;
	      this._fun = null;
	      this._dest = null;
	      this._thread = null;
	    }
	  }, {
	    key: "_begin",
	    value: function _begin() {
	      this._unsubscribe();
	      // TODO: fix a bug and uncomment next line !!!
	      // cc.current.killChildren()
	    }
	  }, {
	    key: "_unsubscribe",
	    value: function _unsubscribe() {
	      this._onchange = null;
	      this._dependencies = 0;
	      this._checked = 0;
	      this._level = 0;
	      var a = this._cellArr;
	      if (a) {
	        for (var i = 0, l = a.length; i < l; ++i) {
	          var c = a[i];
	          c.cell = null;
	          c.action = null;
	          c.read = false;
	          c.written = false;
	          c.pushedA = false;
	          // do not change c.pushedC here!!
	        }
	        if (this._cellSetSize > 32 && a.length < this._cellSetSize / 4) {
	          this._cellSet = Object.create(null);
	          this._cellSetSize = 0;
	        }
	        a.length = 0;
	      }
	    }
	  }, {
	    key: "_check",
	    value: function _check() {
	      var a = this._cellArr;
	      var l = a.length;
	      var level = this._level;
	      for (var i = this._checked; i < l; ++i) {
	        var c = a[i];
	        if (!c.written) {
	          if (!c.pushedC) {
	            c.cell._actionsArr.push(c);
	            c.pushedC = true;
	          }
	          if (level < c.cell._level) level = c.cell._level;
	          c.cell = null;
	        }
	      }
	      this._level = level;
	      this._checked = l;
	    }
	  }, {
	    key: "_linkCell",
	    value: function _linkCell(cell, read) {
	      if (!this._cellSet) return; // TODO debugger workaround: this._cellSet must not be null
	      var c = this._cellSet[cell._id] || (++this._cellSetSize, this._cellSet[cell._id] = {
	        cell: null,
	        action: null,
	        read: false,
	        written: false,
	        pushedA: false,
	        pushedC: false
	      });
	      if (!c.pushedA) {
	        this._cellArr.push(c);
	        c.pushedA = true;
	      }
	      return c;
	    }
	  }, {
	    key: "onread",
	    value: function onread(cell) {
	      var _this9 = this;

	      var c = this._linkCell(cell, true);
	      if (!c) return; // TODO debugger workaround: this._linkCell must not return null
	      if (c.written || c.read) return;
	      c.read = true;
	      c.cell = cell;
	      c.action = this;
	      ++this._dependencies;
	      if (!this._running && !this._checkSheduled && this._thread != null) {
	        this._checkSheduled = true;
	        this._thread.nextTick(function () {
	          _this9._checkSheduled = false;
	          _this9._check();
	        });
	      }
	    }
	  }, {
	    key: "onwritten",
	    value: function onwritten(cell) {
	      cell._level = this._level + 1;
	      var c = this._linkCell(cell, false);
	      if (!c) return; // TODO debugger workaround: this._linkCell must not return null
	      if (c.written) return;
	      c.written = true;
	      if (c.read) {
	        c.cell = null;
	        c.action = null;
	        --this._dependencies;
	      }
	    }
	  }, {
	    key: "_fire",
	    value: function _fire(sender) {
	      if (this._onchange) {
	        // nextTick( this._onchange, this._level )
	        this._thread.nextTick(this._onchange);
	        // this._onchange = null <- assigned in this._unsubscribe()
	        this._unsubscribe();
	      } else {
	        this._unsubscribe();
	        this._checkSheduled = false; // _checkSheduled is linked to _thread. Killing thread clearing _checkSheduled.
	        this._thread.return();
	        if (!this.isClosed()) this._startThread();
	      }
	    }
	  }]);

	  return Action;
	}();

	var nextTick = function nextTick() {
	  var ticks = [];
	  var minLevel = 0;
	  var scheduled = false;

	  function schedule() {
	    schedule = true;
	    process.nextTick(onNextTick);
	  }

	  function onNextTick() {
	    schedule = false;
	    loop: for (;;) {
	      while (minLevel < ticks.length) {
	        var t = ticks[minLevel];
	        if (t && t.l.length) {
	          if (t.i < t.l.length) {
	            scheduled || schedule();
	            if (t.i === 65536) {
	              t.l.splice(0, t.i);
	              t.i = 0;
	            }
	            t.l[t.i++]();
	            continue loop;
	          }
	          t.i = 0;
	          t.l.length = 0;
	        }
	        ++minLevel;
	      }
	    }
	  }

	  return function nextTick(proc, level) {
	    var t = ticks[level] || (ticks[level] = { i: 0, l: [] });
	    t.l.push(proc);
	    if (minLevel > level) minLevel = level;
	    scheduled || schedule();
	  };
	};

	function ra(getter) {
	  var proxy = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	  if (getter instanceof ImmutableInterface) return getter;
	  var cell = new Cell();
	  if (getter !== undefined) cell._init(getter, false, true, proxy);
	  // Object.seal( cell )
	  return proxy || cell;
	}

	function ArrayIsEqualTo(a) {
	  return this == a || Array.isArray(a) && this.length == a.length && this.every(function (e, i) {
	    return is(e, a[i]);
	  });
	}

	function JsonIsEqualTo(a) {
	  return this == a || JSON.stringify(this) == JSON.stringify(a);
	}

	ra.ra = ra;

	ra.is = is;

	ra.Array = function (array) {
	  array.isEqualTo = ArrayIsEqualTo;
	  return array;
	};

	ra.JSON = function (obj) {
	  obj.isEqualTo = JsonIsEqualTo;
	  return obj;
	};

	ra.Opaque = function (obj) {
	  if (obj && (typeof obj == "object" || typeof obj == "function")) Opaques.add(obj);
	  return obj;
	};

	ra.Transparent = function (obj) {
	  Opaques.delete(obj);
	  return obj;
	};

	var getCell = function getCell(that) {
	  return ThisToCell.get(that) || that;
	};

	ra.close = function () {
	  return getCell(this)._close();
	};
	ra.freeze = function () {
	  return getCell(this)._freeze();
	};
	ra.assign = function (value) {
	  return getCell(this)._assign(value);
	};
	ra.apply = function (value, partial) {
	  return getCell(this)._apply(value, partial);
	};
	ra.throw = function (value) {
	  return getCell(this)._throw(value);
	};
	ra.touch = function (name) {
	  return (name == null ? getCell(this) : getCell(this)._liveRec[name])._touch();
	};

	ra.noTouch = function (fun) {
	  var old = Actions.get(cc.current);
	  if (old) {
	    Actions.delete(cc.current);
	    try {
	      return fun();
	    } finally {
	      Actions.set(cc.current, old);
	    }
	  } else return fun();
	};

	ra.wait = function (predicate) {
	  var timeout = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	  return new _bluebird2.default(function (resolve, reject) {
	    var opts = ra({
	      get done() {
	        return predicate();
	      },
	      get _check() {
	        try {
	          if (!this.done) return;
	          resolve();
	        } catch (e) {
	          reject(e);
	        }
	        clearTimeout(timer);
	        ra.close.call(opts);
	      }
	    });
	    var timer = timeout == null ? null : setTimeout(function () {
	      reject(new Error("timeout "));
	      ra.close.call(opts);
	    }, timeout);
	  });
	};

	ra.on = function (emitter, event, getter) {
	  var ret = ra();
	  var handler = function handler(data) {
	    return ret.assign(getter(data));
	  };
	  if (event == "string") emitter.on(event, handler);else {
	    var _iteratorNormalCompletion6 = true;
	    var _didIteratorError6 = false;
	    var _iteratorError6 = undefined;

	    try {
	      for (var _iterator6 = event[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	        var e = _step6.value;

	        emitter.on(e, handler);
	      }
	    } catch (err) {
	      _didIteratorError6 = true;
	      _iteratorError6 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	          _iterator6.return();
	        }
	      } finally {
	        if (_didIteratorError6) {
	          throw _iteratorError6;
	        }
	      }
	    }
	  }handler();
	  return ret;
	};

	ra.makeIsFrozen = function (cell) {
	  var ret = ra();
	  ret.assign(false);
	  var first = true;
	  process.nextTick(function () {
	    return ra(function () {
	      if (first) {
	        first = false;
	        cc.defer(function () {
	          ra.assign.call(ret, true);
	          ra.freeze.call(ret);
	        });
	      }
	      cell.valueOf();
	    });
	  });
	  return ret;
	};

	ra.Cell = Cell;
	ra.ImmutableInterface = ImmutableInterface;
	ra.AbstractGuard = AbstractGuard;
	ra.Getter = Getter;

	var Type = ra.Type = function (f) {
	  g.typeDescriptor = true;
	  return g;
	  function g() {
	    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    return f.call.apply(f, [this].concat(args));
	  }
	};

	ra.from = function (observable) {
	  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	    args[_key5 - 1] = arguments[_key5];
	  }

	  if (Array.isArray(observable)) {
	    var _ret2 = observable[0];
	    for (var i = 0; i < args.length; ++i) {
	      _ret2 += args[i];
	      _ret2 += observable[i];
	    }
	    observable = _ret2;
	  }
	  if (typeof observable == "string") return Type(function (name) {
	    return Getter(function () {
	      var p = this[observable];
	      return p == null ? p : p[name];
	    });
	  });else return Type(function (name) {
	    return Getter(function () {
	      return observable[name];
	    });
	  });
	};

	function toKey(obj) {
	  if (obj && (typeof obj == "object" || typeof obj == "function")) {
	    if (!toKey.Keys) toKey.Keys = new WeakMap();
	    if (!toKey.Keys.has(obj)) toKey.Keys.set(obj, (0, _uid2.default)());
	    return toKey.Keys.get(obj);
	  }
	  return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) + obj;
	}

	ra.makeKey = function (obj, key) {
	  return ra(function () {
	    return obj.get(key);
	  });
	};

	ra.map = function (array, mapper) {
	  if (typeof array == "function") array = ra(array);else if (!(array instanceof ImmutableInterface)) throw new Error("ra.map: first argument must be a cell");
	  var cache = Object.create(null);
	  var ret = ra(function () {
	    // TODO праверыць, што пры array.close() гэта функцыя адпрацоўвае і прыбівае ўсе cache[].index і cache[].proc
	    var a = array.valueOf();
	    // ra.noTouch( () => {
	    var retarr = [];
	    var index = 0;
	    var _iteratorNormalCompletion7 = true;
	    var _didIteratorError7 = false;
	    var _iteratorError7 = undefined;

	    try {
	      for (var _iterator7 = lodash.values(cache)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	        var _c = _step7.value;

	        _c.abandoned = true;
	      }
	    } catch (err) {
	      _didIteratorError7 = true;
	      _iteratorError7 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion7 && _iterator7.return) {
	          _iterator7.return();
	        }
	      } finally {
	        if (_didIteratorError7) {
	          throw _iteratorError7;
	        }
	      }
	    }

	    if (a) {
	      var _iteratorNormalCompletion8 = true;
	      var _didIteratorError8 = false;
	      var _iteratorError8 = undefined;

	      try {
	        var _loop4 = function _loop4() {
	          var value = _step8.value;

	          var key = toKey(value);
	          var c = cache[key] || (cache[key] = {
	            value: value,
	            index: ra(),
	            abandoned: true,
	            proc: null
	          });
	          if (!c.abandoned) return "continue";
	          c.abandoned = false;
	          c.index.assign(index++);
	          if (!c.proc) c.proc = ra(function () {
	            return mapper(value, c.index);
	          });
	          retarr.push(c.proc);
	        };

	        for (var _iterator8 = a[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	          var _ret3 = _loop4();

	          if (_ret3 === "continue") continue;
	        }
	      } catch (err) {
	        _didIteratorError8 = true;
	        _iteratorError8 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion8 && _iterator8.return) {
	            _iterator8.return();
	          }
	        } finally {
	          if (_didIteratorError8) {
	            throw _iteratorError8;
	          }
	        }
	      }
	    }var _iteratorNormalCompletion9 = true;
	    var _didIteratorError9 = false;
	    var _iteratorError9 = undefined;

	    try {
	      for (var _iterator9 = lodash.toPairs(cache)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	        var _step9$value = _slicedToArray(_step9.value, 2);

	        var key = _step9$value[0];
	        var _c2 = _step9$value[1];
	        if (_c2.abandoned) {
	          delete cache[key];
	          _c2.index.close();
	          _c2.proc.close();
	        }
	      }
	    } catch (err) {
	      _didIteratorError9 = true;
	      _iteratorError9 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion9 && _iterator9.return) {
	          _iterator9.return();
	        }
	      } finally {
	        if (_didIteratorError9) {
	          throw _iteratorError9;
	        }
	      }
	    }

	    return ra.Array(retarr);
	    // } )
	  });
	  // )
	  return ret;
	};

	ra.keymap = function (array, mapper) {
	  var mapped = ra.map(array, mapper);
	  return ra(function () {
	    return Object.assign(Object.create(null), lodash.zipObject(array.valueOf(), mapped.valueOf()));
	  });
	};

	ra.reducer = function (initial) {
	  var first = ra({
	    next: null,
	    get result() {
	      return getValue(initial);
	    }
	  });
	  var last = ra({
	    prev: null,
	    get result() {
	      return this.prev.result;
	    }
	  });
	  first.next = last;
	  last.prev = first;
	  return ra.Opaque({
	    get result() {
	      return last.result;
	    },
	    diff: function diff(func) {
	      return this.open(function (data) {
	        return Diff.apply(data, func());
	      });
	    },
	    open: function open(func) {
	      var rec = ra({
	        prev: null,
	        next: null,
	        dispose: function dispose() {
	          this.prev.next = this.next;
	          this.next.prev = this.prev;
	          this.prev = null;
	          this.next = null;
	        },

	        get result() {
	          return this.prev && func(this.prev.result);
	        }
	      });
	      rec.prev = last.prev;
	      rec.next = last;
	      rec.prev.next = rec;
	      rec.next.prev = rec;
	      return ra.Opaque({
	        get result() {
	          return rec.result;
	        },
	        dispose: rec.dispose
	      });
	    }
	  });
	};
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Thread = exports.nextTick = exports.defer = exports.connect = exports.EKill = exports.wrap = exports.promise = exports.receive = exports.async = exports.factory = exports.go = exports._debug = exports.global = exports.current = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; }; // ConCurrent.js

	var _marked = [asyncIterator].map(regeneratorRuntime.mark);

	exports.read = read;
	exports.write = write;
	exports.asyncIterator = asyncIterator;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ccCurrent = null,
	    ccGlobal = Object.create(null);
	exports.current = ccCurrent;
	exports.global = ccGlobal;


	var _debug = null;
	var _killdebug = !true;
	var DEBUGGER = function DEBUGGER() {
	  debugger;
	};

	function __debug() {
	  var thread = arguments.length <= 0 || arguments[0] === undefined ? ccCurrent : arguments[0];
	  var debug = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	  return debug ? (_debug || (_debug = new WeakSet())).add(thread) : _debug && _debug.delete(thread);
	}
	exports._debug = __debug;

	var go = exports.go = function go(fun) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  if (typeof fun == "function") fun = fun.apply(undefined, args);
	  if (typeof fun.next != "function") {
	    (function () {
	      var value = fun;
	      fun = {
	        next: function next() {
	          var ret = { value: value, done: !value };
	          value = null;
	          return ret;
	        }
	      };
	    })();
	  }
	  return new Thread(fun, false);
	};

	var func = function func(standalone) {
	  return function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    var fun = args.reduceRight(function (g, f) {
	      return f(g);
	    });
	    return function proc() {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      return new Thread(fun.call.apply(fun, [this].concat(args)), standalone);
	    };
	  };
	};

	var factory = exports.factory = func(false);

	var async_ = func(true);
	exports.async = async_;


	var killablePromise = function killablePromise(callback) {
	  return new _bluebird2.default(function (resolve, reject) {
	    // return callback( resolve, reject )
	    var done = false;
	    var makeProc = function makeProc(proc) {
	      return function (value) {
	        if (done) return;
	        done = true;
	        try {
	          return proc(value);
	        } finally {
	          def.close();
	          kill && kill();
	        }
	      };
	    };
	    var call_reject = makeProc(reject);
	    var def = defer(call_reject);
	    var kill = callback(makeProc(resolve), call_reject);
	  });
	};

	var receive = exports.receive = function receive(emitter, events) {
	  return killablePromise(function (resolve, reject) {
	    var handlers = Object.create(null);
	    var timer = void 0;

	    var _loop = function _loop(event) {
	      if (Object.prototype.hasOwnProperty.call(events, event)) {
	        var _ret3 = function () {
	          var predicate = events[event];
	          if (predicate == null)
	            //
	            // allow simpler events defining like
	            //
	            // yield cc.receive( obj, { data: true, timeout: getTimeout( ... ) } )
	            //
	            // instead of
	            //
	            // const events = { data: true }
	            // if ( getTimeout( ... ) != null ) events.timeout = getTimeout( ... )
	            // yield cc.receive( obj, events )
	            //
	            return {
	              v: "continue"
	            };
	          if (event == "timeout") timer = setTimeout(function () {
	            return resolve({ event: "timeout", data: null });
	          }, predicate);else emitter.addListener(event, handlers[event] = function (data) {
	            if (typeof predicate != "function" || predicate(data)) resolve({ event: event, data: data });
	          });
	        }();

	        if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
	      }
	    };

	    for (var event in events) {
	      var _ret2 = _loop(event);

	      if (_ret2 === "continue") continue;
	    }return function () {
	      if (!handlers) return;
	      clearTimeout(timer);
	      for (var _event in handlers) {
	        emitter.removeListener(_event, handlers[_event]);
	      }handlers = null;
	    };
	  });
	};

	var promise = exports.promise = function promise(value) {
	  return _bluebird2.default.all([go(regeneratorRuntime.mark(function _callee() {
	    return regeneratorRuntime.wrap(function _callee$(_context) {
	      while (1) switch (_context.prev = _context.next) {
	        case 0:
	          _context.next = 2;
	          return value;

	        case 2:
	        case "end":
	          return _context.stop();
	      }
	    }, _callee, this);
	  }))]);
	};

	var requestAnimationFrame = { then: function then(resolve) {
	    if (typeof global.cancelAnimationFrame == "function") {
	      var _ret4 = function () {
	        var frame = global.requestAnimationFrame(resolve);
	        return {
	          v: {
	            kill: function kill() {
	              global.cancelAnimationFrame(frame);
	            }
	          }
	        };
	      }();

	      if ((typeof _ret4 === "undefined" ? "undefined" : _typeof(_ret4)) === "object") return _ret4.v;
	    } else return _bluebird2.default.delay(1).then(resolve);
	  } };

	var wrap = exports.wrap = function wrap(proc) {
	  return ccCurrent ? ccCurrent.wrap(proc) : proc;
	};

	var resolved = function () {
	  var resolve = function resolve(value, callback) {
	    return callback(value);
	  };
	  return function (value) {
	    return { then: resolve.bind(null, value) };
	  };
	}();

	function read() {
	  var stream = this;
	  var value = stream.read();
	  if (value != null || !stream.readable) return resolved(value);
	  return receive(stream, { readable: true }).then(function () {
	    return stream.read();
	  });
	}

	function write(data, chunk) {
	  var stream = this;
	  if (stream.write(data, chunk)) return null;else return receive(stream, { drain: true, end: true, finish: true });
	}

	var rethrow = function rethrow(e) {
	  process.nextTick(function () {
	    throw e;
	  });
	};

	var noop = function noop() {};

	function iteratorFailed(error) {
	  return { done: true, iteratorFailed: true, value: error };
	}

	function iteratorNext(iterator, result) {
	  try {
	    return iterator.next(result);
	  } catch (error) {
	    return iteratorFailed(error);
	  }
	}

	function iteratorThrow(iterator, result) {
	  if (!iterator.throw) return iteratorFailed(result);
	  try {
	    return iterator.throw(result);
	  } catch (error) {
	    return iteratorFailed(error);
	  }
	}

	var DONE = Object.freeze({ done: true });

	var EKill = exports.EKill = function (_Error) {
	  _inherits(EKill, _Error);

	  function EKill() {
	    var message = arguments.length <= 0 || arguments[0] === undefined ? "kill" : arguments[0];

	    _classCallCheck(this, EKill);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(EKill).call(this, message));
	  }

	  return EKill;
	}(Error);

	var FINALIZING = new EKill("finalizing");

	function iteratorReturn(iterator, value) {
	  if (iterator.return) {
	    try {
	      var v = iterator.return(value);
	      if (!v || !v.done) rethrow(new Error("thread has eaten return()"));
	    } catch (error) {
	      rethrow(new Error("thread has eaten return() and thrown an exception"));
	      return iteratorFailed(error);
	    }
	  } else if (iterator.throw) {
	    var e = new EKill();
	    var _v = iteratorThrow(iterator, e);
	    if (!_v || !_v.done || !_v.iteratorFailed) rethrow(new Error("thread has eaten EKill"));else if (_v.value != e) return _v;
	  }
	  return DONE;
	}

	function killIterator(iterator, value) {
	  if (iterator) {
	    var res = iteratorReturn(iterator, value);
	    if (res.done && res.iteratorFailed) rethrow(res.value);
	  }
	  return DONE;
	}

	// Thread

	var dummyIterator = {
	  next: function next() {
	    return DONE;
	  },
	  throw: function _throw(error) {
	    throw error;
	  },
	  return: function _return(value) {
	    return { value: value, done: true };
	  }
	};

	var connect = exports.connect = function connect(waitable) {
	  return defer(regeneratorRuntime.mark(function _callee2() {
	    return regeneratorRuntime.wrap(function _callee2$(_context2) {
	      while (1) switch (_context2.prev = _context2.next) {
	        case 0:
	          _context2.next = 2;
	          return waitable;

	        case 2:
	        case "end":
	          return _context2.stop();
	      }
	    }, _callee2, this);
	  }));
	};

	var defer = exports.defer = function defer(proc) {
	  if (typeof proc != "function") throw new Error("only functions can be deferred");
	  var thread = ccCurrent;
	  if (!thread || !thread._current) throw new Error("not in a thread");
	  var iterator = dummyIterator;
	  function createIterator() {
	    if (proc) {
	      // Keep in mind exceptions. Save state consistent in case of exception in proc().
	      var p = proc;
	      proc = null;
	      var i = p();
	      if (i && typeof i.next == "function") iterator = i;
	      deferRec._iterator = iterator;
	    }
	    return iterator;
	  }
	  var lazyIteratorProxy = {
	    next: function next(value) {
	      return createIterator().next(value);
	    },
	    throw: function _throw(error) {
	      createIterator();
	      return iterator.throw ? iterator.throw(error) : dummyIterator.throw(error);
	    },
	    return: function _return(value) {
	      if (proc)
	        // let deferred iterator do at least one step
	        createIterator().next(undefined);
	      if (iterator.return) return iterator.return(value);else {
	        if (iterator.throw) !function () {
	          var ekill = new EKill("return");
	          try {
	            iterator.throw(ekill);
	          } catch (error) {
	            if (error != ekill) throw error;
	          }
	        }();
	        return dummyIterator.return(value);
	      }
	    }
	  };
	  var deferRec = new IteratorRec(thread, lazyIteratorProxy, thread._current._caller);
	  thread._stack.push(deferRec);
	  return {
	    close: function close() {
	      proc = null;
	    }
	  };
	};

	var nextTick = exports.nextTick = function nextTick(proc) {
	  return ccCurrent ? ccCurrent.nextTick(proc) : process.nextTick(proc);
	};

	var IteratorRec = function () {
	  function IteratorRec(thread, iterator, caller) {
	    _classCallCheck(this, IteratorRec);

	    this._thread = thread;
	    this._caller = caller;
	    this._iterator = iterator;
	    this._method = iteratorNext;
	    this._value = undefined;
	    this._currentPromise = null;
	    this._next = this._next.bind(this);
	    this._throw = this._throw.bind(this);
	    this._cb = this._cb.bind(this);
	  }

	  _createClass(IteratorRec, [{
	    key: "_store",
	    value: function _store(value, isError) {
	      if (isError) {
	        if (this._method == iteratorThrow) rethrow(this._value);else this._method = iteratorThrow;
	        this._value = value;
	      } else if (this._method == null) {
	        this._method = iteratorNext;
	        this._value = value;
	      }
	    }
	  }, {
	    key: "_onvalue",
	    value: function _onvalue(method, value) {
	      if (_debug && _debug.has(this._thread)) DEBUGGER();
	      this._currentPromise = null;
	      if (this._thread) {
	        this._value = value;
	        this._method = method;
	        process.nextTick(this._thread._processIterator);
	      }
	    }
	  }, {
	    key: "_next",
	    value: function _next(value) {
	      this._onvalue(iteratorNext, value);
	    }
	  }, {
	    key: "_throw",
	    value: function _throw(error) {
	      if (!this._thread) rethrow(error);
	      this._onvalue(iteratorThrow, error);
	    }
	  }, {
	    key: "_cb",
	    value: function _cb(error, data) {
	      if (error) this._throw(error);else this._next(data);
	    }
	  }]);

	  return IteratorRec;
	}();

	function _onsuccess(event) {
	  this._next(event.target.result);
	}

	function _onload(event) {
	  this._next(event.target);
	}

	function _onerror(event) {
	  this._throw(event.target.error || event);
	}

	function getStack() {
	  var n = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	  var m = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	  try {
	    throw new Error("xxx");
	  } catch (error) {
	    return error.stack.split("\n").filter(Boolean).slice(3 + n, m ? -m : Infinity);
	  }
	}

	var Child = function () {
	  function Child() {
	    _classCallCheck(this, Child);

	    this._owner = null;
	  }

	  _createClass(Child, [{
	    key: "_kill",
	    value: function _kill() {
	      this.detach();
	    }
	  }, {
	    key: "detach",
	    value: function detach() {
	      if (this._owner) this._owner._unlinkChild(this);
	      return this;
	    }
	  }, {
	    key: "attach",
	    value: function attach(owner) {
	      owner._linkChild(this);
	    }
	  }]);

	  return Child;
	}();

	var Thread = exports.Thread = function (_Child) {
	  _inherits(Thread, _Child);

	  function Thread(iterator, standalone) {
	    _classCallCheck(this, Thread);

	    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Thread).call(this));

	    _this2._dbg = getStack();
	    _this2._processTicks = _this2._processTicks.bind(_this2);
	    _this2._processIterator = _this2._processIterator.bind(_this2);
	    _this2._promise = new _bluebird2.default(function (resolve) {
	      return _this2._resolve = resolve;
	    });
	    _this2._attached = false;
	    var it = new IteratorRec(_this2, null, null);
	    it._method = null;
	    _this2._stack = [it, new IteratorRec(_this2, iterator, it)];
	    _this2._ticks = [];
	    _this2._index = 0;
	    _this2._current = null;
	    _this2._started = false;
	    _this2._killing = null;
	    _this2._children = null;
	    _this2.global = Object.create(null);
	    if (!standalone && ccCurrent) _this2.attach(ccCurrent);
	    process.nextTick(_this2._processIterator);
	    return _this2;
	  }

	  _createClass(Thread, [{
	    key: "waitForInput",
	    value: function waitForInput() {
	      if (this._ticks.length > 0) throw new Error("unplanned behaviour: ticks also must be done on waitForInput, but this is not implemented");
	      if (!this._started) {
	        this._processIterator();
	        if (this._stack.length > 0 && !this._killing) this._stack.push(null); // compensate extra _processIterator call.
	      }
	      return this;
	    }
	  }, {
	    key: "nextTick",
	    value: function nextTick(tick) {
	      if (process.nextTick._dbg && process.nextTick._dbg()) DEBUGGER();
	      if (this._ticks.length == 0) process.nextTick(this._processTicks);
	      this._ticks.push(tick);
	    }
	  }, {
	    key: "then",
	    value: function then(onFulfilled, onRejected) {
	      return this._attachPromise(this._promise.then(onFulfilled, onRejected));
	    }
	  }, {
	    key: "catch",
	    value: function _catch(onRejected) {
	      return this._attachPromise(this._promise.catch(onRejected));
	    }
	  }, {
	    key: "isFinished",
	    value: function isFinished() {
	      return this._stack.length == 0;
	    }
	  }, {
	    key: "throw",
	    value: function _throw(error) {
	      if (this._current) throw error;
	      this._checkFinished();
	      var it = this._stack.pop();
	      var jt = new IteratorRec(this, it._iterator, it._caller);
	      it._thread = it._iterator = it._caller = null;
	      this._stack.push(jt);
	      jt._throw(error);
	    }
	  }, {
	    key: "finish",
	    value: function finish(proc) {
	      try {
	        this.return(proc());
	      } catch (e) {
	        this.kill(e);
	      }
	    }
	  }, {
	    key: "return",
	    value: function _return(result) {
	      return this._killingByUser(result, false);
	    }
	  }, {
	    key: "kill",
	    value: function kill(reason) {
	      return this._killingByUser(reason, true);
	    }
	  }, {
	    key: "killChildren",
	    value: function killChildren(reason) {
	      if (this._children) {
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = this._children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var c = _step.value;

	            if (ccCurrent == c) {
	              console.warn("One child thread has killed its parent and so on itself. This strange behavior can be because of bug in your code.");
	            }
	            if (_debug && _debug.has(c)) DEBUGGER();
	            if (_killdebug && !c._killing) DEBUGGER();
	            c._owner = null;
	            c._kill(reason, reason !== undefined);
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }

	        this._children.clear();
	      }
	    }
	  }, {
	    key: "switchToChildren",
	    value: function switchToChildren() {
	      var _this3 = this;

	      if (this._children) {
	        _bluebird2.default.all([].concat(_toConsumableArray(this._children)).map(function (c) {
	          c._owner = null;
	          if (_this3._owner) _this3._owner._linkChild(c);
	          return c._promise.catch(noop);
	        })).then(noop /*skip array*/).then(this._resolve);
	        this._resolve = noop;
	        this._children.clear();
	      }
	      this.return();
	    }
	  }, {
	    key: "_linkChild",
	    value: function _linkChild(child) {
	      if (this._killing) throw new Error("CREATING CHILD WHILE KILLING OWNER!!!");
	      if (child._owner != null) throw new Error("child already linked");
	      if (!this._children) this._children = new Set();
	      child._owner = this;
	      this._children.add(child);
	    }
	  }, {
	    key: "_unlinkChild",
	    value: function _unlinkChild(child) {
	      if (child._owner != this) throw new Error("not a child");
	      child._owner = null;
	      if (!this._killing && this._children) this._children.delete(child);
	    }
	  }, {
	    key: "_processTicks",
	    value: function _processTicks() {
	      if (_debug && _debug.has(this)) DEBUGGER();
	      var previousThread = ccCurrent;
	      var previousGlobal = ccGlobal;
	      exports.global = ccGlobal = this.global;
	      exports.current = ccCurrent = this;
	      try {
	        this._callTicks(); // move loop to the function w/o try/finally to allow optimizations
	      } finally {
	        exports.global = ccGlobal = previousGlobal;
	        exports.current = ccCurrent = previousThread;
	        if (this._ticks.length > 0) {
	          this._ticks.splice(0, this._index);
	          process.nextTick(this._processTicks);
	        }
	      }
	    }
	  }, {
	    key: "_callTicks",
	    value: function _callTicks() {
	      if (process.nextTick._dbg && process.nextTick._dbg()) DEBUGGER();
	      var t = this._ticks;
	      for (var i = 0; i < t.length; ++i) {
	        this._index = i + 1;
	        t[i]();
	        if (process.nextTick._dbg && process.nextTick._dbg()) DEBUGGER();
	      }
	      t.length = 0;
	    }
	  }, {
	    key: "_checkTicks",
	    value: function _checkTicks() {
	      if (this._ticks.length) this._processTicks();
	    }
	  }, {
	    key: "call",
	    value: function call(proc) {
	      var previousThread = ccCurrent;
	      var previousGlobal = ccGlobal;
	      exports.global = ccGlobal = this.global;
	      exports.current = ccCurrent = this;
	      try {
	        return proc();
	      } finally {
	        exports.global = ccGlobal = previousGlobal;
	        exports.current = ccCurrent = previousThread;
	      }
	    }
	  }, {
	    key: "wrap",
	    value: function wrap(proc) {
	      var self = this;
	      return function () {
	        var _this4 = this;

	        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	          args[_key4] = arguments[_key4];
	        }

	        return self.call(function () {
	          return proc.call.apply(proc, [_this4].concat(args));
	        });
	      };
	    }
	  }, {
	    key: "_finalize",
	    value: function _finalize(it) {
	      if (!this._killing) this._killing = FINALIZING;
	      if (it._method == iteratorNext) this._resolve(it._value);else // it._method == iteratorThrow or it._method == null ( when killing )
	        this._resolve(_bluebird2.default.reject(it._value));
	      if (this._owner) this._owner._unlinkChild(this);
	      this.killChildren(it._method == iteratorNext ? undefined : it._value === undefined ? null : it._value);
	      // _promise must be left to store thread result
	      this._resolve = null;
	      this._current = null;
	      this._children = null;
	      this._owner = null;
	    }
	  }, {
	    key: "_processIterator",
	    value: function _processIterator() {
	      if (_debug && _debug.has(this)) DEBUGGER();
	      this._started = true;
	      if (this._stack.length == 0) return;
	      if (this._ticks.length > 0) {
	        // do any ticks before yielding
	        process.nextTick(this._processIterator);
	        return;
	      }
	      var it = this._stack.pop();
	      if (!it) return; // got compensated extra _processIterator call. see waitForInput.
	      if (!this._killing && it._method == null) {
	        DEBUGGER();
	        throw new Error("it._method cannot be null");
	      }
	      if (this._stack.length == 0) {
	        this._finalize(it);
	        return;
	      }
	      this._current = it;
	      var method = void 0,
	          value = void 0;
	      if (!this._killing) {
	        method = it._method;
	        value = it._value;
	      } else {
	        method = killIterator;
	        value = undefined;
	      }
	      it._method = null;
	      it._value = null;
	      it._currentPromise = null;
	      var previousThread = ccCurrent;
	      var previousGlobal = ccGlobal;
	      exports.global = ccGlobal = this.global;
	      exports.current = ccCurrent = this;
	      var v = method(it._iterator, value);
	      exports.global = ccGlobal = previousGlobal;
	      exports.current = ccCurrent = previousThread;
	      this._current = null;
	      processing: {
	        if (this._killing) {
	          if (v.done && v.iteratorFailed && v.value != this._killing) rethrow(v.value);
	          process.nextTick(this._processIterator);
	          break processing;
	        }
	        if (v.done) {
	          it._caller._store(v.value, v.iteratorFailed);
	          process.nextTick(this._processIterator);
	          break processing;
	        }
	        this._stack.push(it);
	        if (v.value != null) {
	          if (typeof v.value.then == "function") {
	            var p = v.value.then(it._next, it._throw);
	            if (p && typeof p.kill == "function") it._currentPromise = p;else if (typeof v.value.kill == "function") it._currentPromise = v.value;
	            break processing;
	          }
	          if (typeof v.value.next == "function") {
	            this._stack.push(new IteratorRec(this, v.value, it));
	            process.nextTick(this._processIterator);
	            break processing;
	          }
	          if (typeof v.value == "object") {
	            // TODO write a specific adapter and remove this code from here
	            if ("onerror" in v.value && !v.value.onerror) {
	              if ("onload" in v.value && !v.value.onload) {
	                v.value.onload = _onload.bind(it);
	                v.value.onerror = _onerror.bind(it);
	                break processing;
	              }
	              if ("onsuccess" in v.value && !v.value.onsuccess) {
	                v.value.onsuccess = _onsuccess.bind(it);
	                v.value.onerror = _onerror.bind(it);
	                break processing;
	              }
	            }
	          }
	          // TODO: throw a type error here
	        }
	        it._next(undefined);
	      }
	      this._checkTicks();
	    }
	  }, {
	    key: "_attachPromise",
	    value: function _attachPromise(promise) {
	      this._attached = true;
	      promise.kill = this._kill.bind(this);
	      return promise;
	    }
	  }, {
	    key: "_killingByUser",
	    value: function _killingByUser(reason, isError) {
	      this._kill(reason, isError);
	      if (this._current) throw this._killing;
	      return this.then(noop, noop);
	    }
	  }, {
	    key: "_kill",
	    value: function _kill(reason, isError) {
	      if (_debug && _debug.has(this)) DEBUGGER();
	      if (!this._killing) {
	        if (_killdebug) DEBUGGER();
	        process.nextTick(this._processIterator);
	        this._killing = new EKill(reason);
	        if (this._owner) this._owner._unlinkChild(this);
	        this.killChildren(!isError ? undefined : reason === undefined ? null : reason);
	        if (this._stack.length > 0) this._stack[0]._store(reason, isError);
	      }
	    }
	  }, {
	    key: "_checkFinished",
	    value: function _checkFinished() {
	      if (this.isFinished()) throw new Error("thread is already finished");
	    }
	  }]);

	  return Thread;
	}(Child);

	function asyncIterator(iterable) {
	  var i, v, p;
	  return regeneratorRuntime.wrap(function asyncIterator$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	        i = iterable[Symbol.asyncIterator]();
	        v = void 0;
	        _context3.prev = 2;

	      case 3:
	        v = null;
	        p = i.next();

	        p.then(function (x) {
	          return v = x;
	        }, function () {
	          return v = { done: true };
	        });
	        _context3.next = 8;
	        return p;

	      case 8:
	        if (v) {
	          _context3.next = 10;
	          break;
	        }

	        throw new Error("client must await for a yielded value");

	      case 10:
	        if (!v.done) {
	          _context3.next = 3;
	          break;
	        }

	      case 11:
	        _context3.prev = 11;

	        if (v) {
	          _context3.next = 14;
	          break;
	        }

	        throw new Error("client must await for a yielded value");

	      case 14:
	        if (!v.done && i && i.return) i.return();
	        return _context3.finish(11);

	      case 16:
	      case "end":
	        return _context3.stop();
	    }
	  }, _marked[0], this, [[2,, 11, 16]]);
	}

/***/ },
/* 422 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.apply = apply;
	exports.make = make;
	var LiteralPrototype = Object.getPrototypeOf({});

	var isSet = function isSet(obj) {
	  if (obj == null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  return proto === LiteralPrototype || proto === null;
	};

	function apply(dest, diff, partial) {

	  if (diff == null && partial === false) return null;

	  if (diff == null || dest == null && diff != null && diff.__present__) return dest;

	  var ret = dest;
	  var cnt = 0;

	  function copyDest() {
	    ret = Object.create(null);
	    for (var key in dest) {
	      if (Object.prototype.hasOwnProperty.call(dest, key)) {
	        var value = dest[key];
	        if (value === undefined) continue;
	        ret[key] = dest[key];
	        ++cnt;
	      }
	    }
	  }

	  if (diff.__partial__ === false) partial = false;

	  for (var key in diff) {
	    if (key != "__partial__" && key != "__present__" && Object.prototype.hasOwnProperty.call(diff, key)) {
	      var value = diff[key];
	      if (value === undefined) continue;
	      if (value != null && typeof value == "object") value = apply(ret && ret[key], value, partial);
	      if (value == null) {
	        if (ret != null && Object.prototype.hasOwnProperty.call(ret, key)) {
	          if (ret === dest) copyDest();
	          delete ret[key];
	          --cnt;
	        }
	      } else {
	        if (ret == null || ret[key] !== value) {
	          if (ret === dest) copyDest();
	          ret[key] = value;
	        }
	        cnt = Infinity;
	      }
	    }
	  }if (partial === false) for (var _key in ret) {
	    if (Object.prototype.hasOwnProperty.call(ret, _key)) {
	      if (!Object.prototype.hasOwnProperty.call(diff, _key) || diff[_key] === undefined) {
	        if (ret === dest) copyDest();
	        delete ret[_key];
	        --cnt;
	      } else cnt = Infinity;
	    }
	  }if (ret !== dest && cnt == 0) ret = null;

	  return ret;
	}

	function make(previous, next) {
	  if (previous === next) return undefined;
	  var ret = undefined;
	  function toArray(obj) {
	    var ret = [];
	    if (obj) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var key = _step.value;

	          ret.push({ value: obj[key], key: key });
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }return ret.sort(function (v1, v2) {
	      return v1.key < v2.key ? -1 : v1.key > v2.key ? 1 : 0;
	    });
	  }
	  var pa = toArray(previous);
	  var na = toArray(next);
	  var p = pa.pop();
	  var n = na.pop();
	  while (p || n) {
	    if (!n || p && p.key > n.key) {
	      if (!ret) ret = Object.create(null);
	      ret[p.key] = null; // deleting
	      p = pa.pop();
	    } else if (!p || p.key < n.key) {
	      if (!ret) ret = Object.create(null);
	      ret[n.key] = n.value;
	      n = na.pop();
	    } else {
	      if (p.value !== n.value) {
	        if (isSet(p.value) && isSet(n.value)) {
	          var diff = make(p.value, n.value);
	          if (diff) {
	            if (!ret) ret = Object.create(null);
	            ret[n.key] = diff;
	          }
	        } else {
	          if (!ret) ret = Object.create(null);
	          ret[n.key] = n.value;
	        }
	      }
	      p = pa.pop();
	      n = na.pop();
	    }
	  }
	  return ret ? ret : undefined;
	}

	// TODO:

	// function assert( value, message ) {
	// 	if ( !value )
	// 		throw new Error( `` + message )
	// }

	// function testDiff() {
	// 	let p = { a: 1, x: { u: 9 } }
	// 	let q = { x: { c: 2 } }
	// 	assert( JSON.stringify( q ) == JSON.stringify( Diff.apply( p, Diff.make( p, q ) ) ) )
	// }

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _context,
	    _this2 = this;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _path = __webpack_require__(389);

	var path = _interopRequireWildcard(_path);

	var _fs = __webpack_require__(350);

	var fs = _interopRequireWildcard(_fs);

	var _csvConfig = __webpack_require__(424);

	var cfg = _interopRequireWildcard(_csvConfig);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _localUtils = __webpack_require__(332);

	var lu = _interopRequireWildcard(_localUtils);

	var _express = __webpack_require__(431);

	var express = _interopRequireWildcard(_express);

	var _httpStatus = __webpack_require__(331);

	var HTTPStatus = _interopRequireWildcard(_httpStatus);

	__webpack_require__(492);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	_bluebird2.default.promisifyAll(fs);


	var isSVG = (_context = /\.svg$/).test.bind(_context);
	var isCSV = (_context = /\.csv$/).test.bind(_context);

	function readFiles(path, filter) {
	  var names, files;
	  return regeneratorRuntime.async(function readFiles$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        _context2.next = 2;
	        return regeneratorRuntime.awrap(fs.readdirAsync(path));

	      case 2:
	        names = _context2.sent;

	        if (filter) names = names.filter(filter);
	        files = names.map(function (fn) {
	          return [fn, fs.readFileAsync(path + "/" + fn).then(String)];
	        });
	        return _context2.abrupt("return", lodash.fromPairs(files));

	      case 6:
	      case "end":
	        return _context2.stop();
	    }
	  }, null, this);
	}

	function staticData(value) {
	  var _this = this;

	  var contentType = arguments.length <= 1 || arguments[1] === undefined ? "json" : arguments[1];

	  return function _callee(_, response) {
	    return regeneratorRuntime.async(function _callee$(_context3) {
	      while (1) switch (_context3.prev = _context3.next) {
	        case 0:
	          _context3.prev = 0;
	          _context3.t0 = response.contentType(contentType);
	          _context3.next = 4;
	          return regeneratorRuntime.awrap(value);

	        case 4:
	          _context3.t1 = _context3.sent;

	          _context3.t0.end.call(_context3.t0, _context3.t1);

	          _context3.next = 11;
	          break;

	        case 8:
	          _context3.prev = 8;
	          _context3.t2 = _context3["catch"](0);

	          response.status(HTTPStatus.INTERNAL_SERVER_ERROR).end(_context3.t2.message);

	        case 11:
	        case "end":
	          return _context3.stop();
	      }
	    }, null, _this, [[0, 8]]);
	  };
	}

	var cookieInfinite = { expires: new Date("Fri, 31-Dec-9999 23:59:59 GMT") };

	exports.default = function (app) {

	  app.get("/templates", staticData(function _callee2() {
	    var files, ret, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;

	    return regeneratorRuntime.async(function _callee2$(_context4) {
	      while (1) switch (_context4.prev = _context4.next) {
	        case 0:
	          _context4.next = 2;
	          return regeneratorRuntime.awrap(readFiles("./templates/locations/", isCSV));

	        case 2:
	          files = _context4.sent;
	          ret = [];
	          _iteratorNormalCompletion = true;
	          _didIteratorError = false;
	          _iteratorError = undefined;
	          _context4.prev = 7;
	          _iterator = lodash.values(files)[Symbol.iterator]();

	        case 9:
	          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	            _context4.next = 27;
	            break;
	          }

	          file = _step.value;
	          _context4.t0 = ret.push;
	          _context4.t1 = ret;
	          _context4.t2 = regeneratorRuntime;
	          _context4.t3 = cfg;
	          _context4.next = 17;
	          return regeneratorRuntime.awrap(file);

	        case 17:
	          _context4.t4 = _context4.sent;
	          _context4.t5 = _context4.t3.readTree.call(_context4.t3, _context4.t4);
	          _context4.next = 21;
	          return _context4.t2.awrap.call(_context4.t2, _context4.t5);

	        case 21:
	          _context4.t6 = _context4.sent;
	          _context4.t7 = _toConsumableArray(_context4.t6);

	          _context4.t0.apply.call(_context4.t0, _context4.t1, _context4.t7);

	        case 24:
	          _iteratorNormalCompletion = true;
	          _context4.next = 9;
	          break;

	        case 27:
	          _context4.next = 33;
	          break;

	        case 29:
	          _context4.prev = 29;
	          _context4.t8 = _context4["catch"](7);
	          _didIteratorError = true;
	          _iteratorError = _context4.t8;

	        case 33:
	          _context4.prev = 33;
	          _context4.prev = 34;

	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }

	        case 36:
	          _context4.prev = 36;

	          if (!_didIteratorError) {
	            _context4.next = 39;
	            break;
	          }

	          throw _iteratorError;

	        case 39:
	          return _context4.finish(36);

	        case 40:
	          return _context4.finish(33);

	        case 41:
	          return _context4.abrupt("return", JSON.stringify(ret));

	        case 42:
	        case "end":
	          return _context4.stop();
	      }
	    }, null, this, [[7, 29, 33, 41], [34,, 36, 40]]);
	  }()));

	  app.get("/messages", staticData(function _callee3() {
	    return regeneratorRuntime.async(function _callee3$(_context5) {
	      while (1) switch (_context5.prev = _context5.next) {
	        case 0:
	          _context5.t0 = JSON;
	          _context5.t1 = regeneratorRuntime;
	          _context5.t2 = cfg;
	          _context5.next = 5;
	          return regeneratorRuntime.awrap(fs.readFileAsync("./templates/messages.csv", "utf8"));

	        case 5:
	          _context5.t3 = _context5.sent;
	          _context5.t4 = _context5.t2.read.call(_context5.t2, _context5.t3, "id");
	          _context5.next = 9;
	          return _context5.t1.awrap.call(_context5.t1, _context5.t4);

	        case 9:
	          _context5.t5 = _context5.sent;
	          return _context5.abrupt("return", _context5.t0.stringify.call(_context5.t0, _context5.t5));

	        case 11:
	        case "end":
	          return _context5.stop();
	      }
	    }, null, this);
	  }()));

	  app.rewrite(/^\/apple\-touch\-icon/, function (url) {
	    return "/touch" + path.extname(url);
	  });
	  app.rewrite(/^\/favicon.ico$/, function () {
	    return "/favicon96.ico";
	  });

	  app.get("/images", function _callee4(request, response, next) {
	    var images, written, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, name, image;

	    return regeneratorRuntime.async(function _callee4$(_context6) {
	      while (1) switch (_context6.prev = _context6.next) {
	        case 0:
	          _context6.next = 2;
	          return regeneratorRuntime.awrap(readFiles("./www/images", isSVG));

	        case 2:
	          images = _context6.sent;

	          response.contentType("json");
	          response.write("{");
	          written = false;
	          _iteratorNormalCompletion2 = true;
	          _didIteratorError2 = false;
	          _iteratorError2 = undefined;
	          _context6.prev = 9;
	          _iterator2 = lodash.toPairs(images)[Symbol.iterator]();

	        case 11:
	          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	            _context6.next = 29;
	            break;
	          }

	          _step2$value = _slicedToArray(_step2.value, 2);
	          name = _step2$value[0];
	          image = _step2$value[1];

	          if (written) response.write(",");
	          response.write(JSON.stringify(name));
	          response.write(":");
	          _context6.t0 = response;
	          _context6.t1 = JSON;
	          _context6.next = 22;
	          return regeneratorRuntime.awrap(image);

	        case 22:
	          _context6.t2 = _context6.sent;
	          _context6.t3 = _context6.t1.stringify.call(_context6.t1, _context6.t2);

	          _context6.t0.write.call(_context6.t0, _context6.t3);

	          written = true;

	        case 26:
	          _iteratorNormalCompletion2 = true;
	          _context6.next = 11;
	          break;

	        case 29:
	          _context6.next = 35;
	          break;

	        case 31:
	          _context6.prev = 31;
	          _context6.t4 = _context6["catch"](9);
	          _didIteratorError2 = true;
	          _iteratorError2 = _context6.t4;

	        case 35:
	          _context6.prev = 35;
	          _context6.prev = 36;

	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }

	        case 38:
	          _context6.prev = 38;

	          if (!_didIteratorError2) {
	            _context6.next = 41;
	            break;
	          }

	          throw _iteratorError2;

	        case 41:
	          return _context6.finish(38);

	        case 42:
	          return _context6.finish(35);

	        case 43:
	          response.write("}");
	          response.end();

	        case 45:
	        case "end":
	          return _context6.stop();
	      }
	    }, null, this, [[9, 31, 35, 43], [36,, 38, 42]]);
	  });

	  process.env.DEVELOPMENT && app.get("/index.manifest", function (request, response) {
	    return fs.createReadStream("./www/index.manifest").on("end", function () {
	      return response.end("\n# DEVELOPMENT\n");
	    }).pipe(response.type(".manifest"), { end: false });
	  });

	  app.rewrite(/^\/$/, function (_) {
	    return "/index.html";
	  });
	  app.use(/^\/index.html/, function (request, response, next) {
	    if (request.query.appicon) response.cookie("appicon", request.query.appicon, cookieInfinite);
	    response.clearCookie("icon");
	    response.clearCookie("room");
	    next();
	  });

	  process.env.DEVELOPMENT && app.rewrite("/js/index.js", "/js/index_dbg.js");

	  process.env.DEVELOPMENT && app.use(/^\/index.html/, function _callee5(request, response, next) {
	    var text;
	    return regeneratorRuntime.async(function _callee5$(_context7) {
	      while (1) switch (_context7.prev = _context7.next) {
	        case 0:
	          _context7.next = 2;
	          return regeneratorRuntime.awrap(fs.readFileAsync("./www/index_dbg.html"));

	        case 2:
	          _context7.t0 = _context7.sent;
	          text = String(_context7.t0);

	          if (request.query.debug != null) text = text.replace(/\bmanifest\s*\=/i, "m=");
	          response.type("html").end(text);

	        case 6:
	        case "end":
	          return _context7.stop();
	      }
	    }, null, _this2);
	  });

	  app.get("/unsupported.html", function _callee6(request, response, next) {
	    return regeneratorRuntime.async(function _callee6$(_context8) {
	      while (1) switch (_context8.prev = _context8.next) {
	        case 0:
	          _context8.t0 = response.type("html");
	          _context8.next = 3;
	          return regeneratorRuntime.awrap(new global.Promise(function (resolve) {
	            resolve(__webpack_require__(493));
	          }));

	        case 3:
	          _context8.t1 = { request: request };
	          _context8.t2 = _context8.sent.default(_context8.t1).outerHTML;
	          return _context8.abrupt("return", _context8.t0.end.call(_context8.t0, _context8.t2));

	        case 6:
	        case "end":
	          return _context8.stop();
	      }
	    }, null, _this2);
	  });

	  app.use(express.static("./www", {
	    lastModified: true,
	    etag: true
	  }));

	  return app;
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.readCSV = readCSV;
	exports.read = read;
	exports.readArrays = readArrays;
	exports.readTree = readTree;
	exports.parse = parse;
	exports.parseTree = parseTree;
	exports.parseArrays = parseArrays;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _csv = __webpack_require__(425);

	var csv = _interopRequireWildcard(_csv);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

	_bluebird2.default.promisifyAll(csv);


	function isStars(str) {
	  return [].slice.call(str).every(function (ch) {
	    return ch == "*";
	  });
	}

	function readCSV(text) {
	  return regeneratorRuntime.async(function readCSV$(_context) {
	    while (1) switch (_context.prev = _context.next) {
	      case 0:
	        _context.next = 2;
	        return regeneratorRuntime.awrap(csv.parseAsync(text, {}));

	      case 2:
	        return _context.abrupt("return", _context.sent);

	      case 3:
	      case "end":
	        return _context.stop();
	    }
	  }, null, this);
	}

	function read(text, key) {
	  return regeneratorRuntime.async(function read$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        _context2.next = 2;
	        return regeneratorRuntime.awrap(readCSV(text));

	      case 2:
	        _context2.t0 = _context2.sent;
	        _context2.t1 = key;
	        return _context2.abrupt("return", parse(_context2.t0, _context2.t1));

	      case 5:
	      case "end":
	        return _context2.stop();
	    }
	  }, null, this);
	}

	function readArrays(text) {
	  return regeneratorRuntime.async(function readArrays$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	        _context3.next = 2;
	        return regeneratorRuntime.awrap(readCSV(text));

	      case 2:
	        _context3.t0 = _context3.sent;
	        return _context3.abrupt("return", parseArrays(_context3.t0));

	      case 4:
	      case "end":
	        return _context3.stop();
	    }
	  }, null, this);
	}

	function readTree(text) {
	  return regeneratorRuntime.async(function readTree$(_context4) {
	    while (1) switch (_context4.prev = _context4.next) {
	      case 0:
	        _context4.next = 2;
	        return regeneratorRuntime.awrap(readCSV(text));

	      case 2:
	        _context4.t0 = _context4.sent;
	        return _context4.abrupt("return", parseTree(_context4.t0));

	      case 4:
	      case "end":
	        return _context4.stop();
	    }
	  }, null, this);
	}

	function parse(csv, key) {
	  var _csv$filter = csv.filter(function (a) {
	    return a.some(Boolean);
	  });

	  var _csv$filter2 = _toArray(_csv$filter);

	  var titles = _csv$filter2[0];

	  var body = _csv$filter2.slice(1);

	  var array = body.map(function (row) {
	    return lodash.zipObject(titles, row);
	  });
	  if (key != null) array = lodash.fromPairs(array.map(function (row) {
	    var id = row[key];
	    delete row[key];
	    return [id, row];
	  }));
	  return array;
	}

	function parseTree(csv) {
	  var _csv$filter3 = csv.filter(function (a) {
	    return a.some(Boolean);
	  });

	  var _csv$filter4 = _toArray(_csv$filter3);

	  var titles = _csv$filter4[0];

	  var body = _csv$filter4.slice(1);

	  body = body.map(function (row) {
	    var tab = { length: Infinity };
	    if (isStars(row[0])) {
	      tab = row[0];
	      row[0] = "";
	    }
	    return { tab: tab, row: lodash.zipObject(titles, row) };
	  });
	  var last = { tab: "", row: { content: [] } };
	  var ret = [];
	  body.forEach(function (row) {
	    while (last.tab.length >= row.tab.length) {
	      last = ret.pop();
	    }!(last.row.content || (last.row.content = [])).push(row.row);
	    ret.push(last);
	    last = row;
	  });
	  return ret[0].row.content;
	}

	function parseArrays(csv) {
	  return lodash.fromPairs(lodash.zip.apply(lodash, _toConsumableArray(csv)).map(function (x) {
	    var _x$filter = x.filter(Boolean);

	    var _x$filter2 = _toArray(_x$filter);

	    var name = _x$filter2[0];

	    var data = _x$filter2.slice(1);

	    return [name, data];
	  }));
	}

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	var generate, parse, stringify, transform;

	generate = __webpack_require__(426);

	parse = __webpack_require__(427);

	transform = __webpack_require__(429);

	stringify = __webpack_require__(430);

	module.exports.generate = generate;

	module.exports.parse = parse;

	module.exports.transform = transform;

	module.exports.stringify = stringify;


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.7.1
	var Generator, stream, util;

	stream = __webpack_require__(322);

	util = __webpack_require__(325);

	module.exports = function() {
	  var callback, data, generator, options;
	  if (arguments.length === 2) {
	    options = arguments[0];
	    callback = arguments[1];
	  } else if (arguments.length === 1) {
	    if (typeof arguments[0] === 'function') {
	      options = {};
	      callback = arguments[0];
	    } else {
	      options = arguments[0];
	    }
	  } else if (arguments.length === 0) {
	    options = {};
	  }
	  generator = new Generator(options);
	  if (callback) {
	    data = [];
	    generator.on('readable', function() {
	      var d, _results;
	      _results = [];
	      while (d = generator.read()) {
	        _results.push(data.push(options.objectMode ? d : d.toString()));
	      }
	      return _results;
	    });
	    generator.on('error', callback);
	    generator.on('end', function() {
	      return callback(null, options.objectMode ? data : data.join(''));
	    });
	  }
	  return generator;
	};

	Generator = function(options) {
	  var i, v, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _i, _len, _ref;
	  this.options = options != null ? options : {};
	  stream.Readable.call(this, this.options);
	  this.options.count = 0;
	  if ((_base = this.options).duration == null) {
	    _base.duration = 4 * 60 * 1000;
	  }
	  if ((_base1 = this.options).columns == null) {
	    _base1.columns = 8;
	  }
	  if ((_base2 = this.options).max_word_length == null) {
	    _base2.max_word_length = 16;
	  }
	  if ((_base3 = this.options).fixed_size == null) {
	    _base3.fixed_size = false;
	  }
	  if (this.fixed_size_buffer == null) {
	    this.fixed_size_buffer = '';
	  }
	  if ((_base4 = this.options).start == null) {
	    _base4.start = Date.now();
	  }
	  if ((_base5 = this.options).end == null) {
	    _base5.end = null;
	  }
	  if ((_base6 = this.options).seed == null) {
	    _base6.seed = false;
	  }
	  if ((_base7 = this.options).length == null) {
	    _base7.length = -1;
	  }
	  if ((_base8 = this.options).delimiter == null) {
	    _base8.delimiter = ',';
	  }
	  this.count_written = 0;
	  this.count_created = 0;
	  if (typeof this.options.columns === 'number') {
	    this.options.columns = new Array(this.options.columns);
	  }
	  _ref = this.options.columns;
	  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
	    v = _ref[i];
	    if (v == null) {
	      v = 'ascii';
	    }
	    if (typeof v === 'string') {
	      this.options.columns[i] = Generator[v];
	    }
	  }
	  return this;
	};

	util.inherits(Generator, stream.Readable);

	module.exports.Generator = Generator;

	Generator.prototype.random = function() {
	  if (this.options.seed) {
	    return this.options.seed = this.options.seed * Math.PI * 100 % 100 / 100;
	  } else {
	    return Math.random();
	  }
	};

	Generator.prototype.end = function() {
	  return this.push(null);
	};

	Generator.prototype._read = function(size) {
	  var column, data, header, length, line, lineLength, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
	  data = [];
	  length = this.fixed_size_buffer.length;
	  if (length) {
	    data.push(this.fixed_size_buffer);
	  }
	  while (true) {
	    if ((this.count_created === this.options.length) || (this.options.end && Date.now() > this.options.end)) {
	      if (data.length) {
	        if (this.options.objectMode) {
	          for (_i = 0, _len = data.length; _i < _len; _i++) {
	            line = data[_i];
	            this.count_written++;
	            this.push(line);
	          }
	        } else {
	          this.count_written++;
	          this.push(data.join(''));
	        }
	      }
	      return this.push(null);
	    }
	    line = [];
	    _ref = this.options.columns;
	    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
	      header = _ref[_j];
	      line.push("" + (header(this)));
	    }
	    if (this.options.objectMode) {
	      lineLength = 0;
	      for (_k = 0, _len2 = line.length; _k < _len2; _k++) {
	        column = line[_k];
	        lineLength += column.length;
	      }
	    } else {
	      line = "" + (this.count_created === 0 ? '' : '\n') + (line.join(this.options.delimiter));
	      lineLength = line.length;
	    }
	    this.count_created++;
	    if (length + lineLength > size) {
	      if (this.options.objectMode) {
	        data.push(line);
	        for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
	          line = data[_l];
	          this.count_written++;
	          this.push(line);
	        }
	      } else {
	        if (this.options.fixed_size) {
	          this.fixed_size_buffer = line.substr(size - length);
	          data.push(line.substr(0, size - length));
	        } else {
	          data.push(line);
	        }
	        this.count_written++;
	        this.push(data.join(''));
	      }
	      break;
	    }
	    length += lineLength;
	    data.push(line);
	  }
	};

	Generator.ascii = function(gen) {
	  var char, column, nb_chars, _i, _ref;
	  column = [];
	  for (nb_chars = _i = 0, _ref = Math.ceil(gen.random() * gen.options.max_word_length); 0 <= _ref ? _i < _ref : _i > _ref; nb_chars = 0 <= _ref ? ++_i : --_i) {
	    char = Math.floor(gen.random() * 32);
	    column.push(String.fromCharCode(char + (char < 16 ? 65 : 97 - 16)));
	  }
	  return column.join('');
	};

	Generator.int = function(gen) {
	  return Math.floor(gen.random() * Math.pow(2, 52));
	};

	Generator.bool = function(gen) {
	  return Math.floor(gen.random() * 2);
	};


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	var Parser, StringDecoder, stream, util;

	stream = __webpack_require__(322);

	util = __webpack_require__(325);

	StringDecoder = __webpack_require__(428).StringDecoder;

	module.exports = function() {
	  var callback, called, chunks, data, options, parser;
	  if (arguments.length === 3) {
	    data = arguments[0];
	    options = arguments[1];
	    callback = arguments[2];
	    if (typeof callback !== 'function') {
	      throw Error("Invalid callback argument: " + (JSON.stringify(callback)));
	    }
	    if (!(typeof data === 'string' || Buffer.isBuffer(arguments[0]))) {
	      return callback(Error("Invalid data argument: " + (JSON.stringify(data))));
	    }
	  } else if (arguments.length === 2) {
	    if (typeof arguments[0] === 'string' || Buffer.isBuffer(arguments[0])) {
	      data = arguments[0];
	    } else {
	      options = arguments[0];
	    }
	    if (typeof arguments[1] === 'function') {
	      callback = arguments[1];
	    } else {
	      options = arguments[1];
	    }
	  } else if (arguments.length === 1) {
	    if (typeof arguments[0] === 'function') {
	      callback = arguments[0];
	    } else {
	      options = arguments[0];
	    }
	  }
	  if (options == null) {
	    options = {};
	  }
	  parser = new Parser(options);
	  if (data != null) {
	    process.nextTick(function() {
	      parser.write(data);
	      return parser.end();
	    });
	  }
	  if (callback) {
	    called = false;
	    chunks = options.objname ? {} : [];
	    parser.on('readable', function() {
	      var chunk, results;
	      results = [];
	      while (chunk = parser.read()) {
	        if (options.objname) {
	          results.push(chunks[chunk[0]] = chunk[1]);
	        } else {
	          results.push(chunks.push(chunk));
	        }
	      }
	      return results;
	    });
	    parser.on('error', function(err) {
	      called = true;
	      return callback(err);
	    });
	    parser.on('end', function() {
	      if (!called) {
	        return callback(null, chunks);
	      }
	    });
	  }
	  return parser;
	};

	Parser = function(options) {
	  var base, base1, base10, base11, base12, base2, base3, base4, base5, base6, base7, base8, base9, k, v;
	  if (options == null) {
	    options = {};
	  }
	  options.objectMode = true;
	  this.options = {};
	  for (k in options) {
	    v = options[k];
	    this.options[k] = v;
	  }
	  stream.Transform.call(this, this.options);
	  if ((base = this.options).rowDelimiter == null) {
	    base.rowDelimiter = null;
	  }
	  if ((base1 = this.options).delimiter == null) {
	    base1.delimiter = ',';
	  }
	  if ((base2 = this.options).quote == null) {
	    base2.quote = '"';
	  }
	  if ((base3 = this.options).escape == null) {
	    base3.escape = '"';
	  }
	  if ((base4 = this.options).columns == null) {
	    base4.columns = null;
	  }
	  if ((base5 = this.options).comment == null) {
	    base5.comment = '';
	  }
	  if ((base6 = this.options).objname == null) {
	    base6.objname = false;
	  }
	  if ((base7 = this.options).trim == null) {
	    base7.trim = false;
	  }
	  if ((base8 = this.options).ltrim == null) {
	    base8.ltrim = false;
	  }
	  if ((base9 = this.options).rtrim == null) {
	    base9.rtrim = false;
	  }
	  if ((base10 = this.options).auto_parse == null) {
	    base10.auto_parse = false;
	  }
	  if ((base11 = this.options).auto_parse_date == null) {
	    base11.auto_parse_date = false;
	  }
	  if ((base12 = this.options).skip_empty_lines == null) {
	    base12.skip_empty_lines = false;
	  }
	  this.lines = 0;
	  this.count = 0;
	  this.is_int = /^(\-|\+)?([1-9]+[0-9]*)$/;
	  this.is_float = function(value) {
	    return (value - parseFloat(value) + 1) >= 0;
	  };
	  this.decoder = new StringDecoder();
	  this.buf = '';
	  this.quoting = false;
	  this.commenting = false;
	  this.field = '';
	  this.nextChar = null;
	  this.closingQuote = 0;
	  this.line = [];
	  this.chunks = [];
	  return this;
	};

	util.inherits(Parser, stream.Transform);

	module.exports.Parser = Parser;

	Parser.prototype._transform = function(chunk, encoding, callback) {
	  var err, error;
	  if (chunk instanceof Buffer) {
	    chunk = this.decoder.write(chunk);
	  }
	  try {
	    this.__write(chunk, false);
	    return callback();
	  } catch (error) {
	    err = error;
	    return this.emit('error', err);
	  }
	};

	Parser.prototype._flush = function(callback) {
	  var err, error;
	  try {
	    this.__write(this.decoder.end(), true);
	    if (this.quoting) {
	      this.emit('error', new Error("Quoted field not terminated at line " + (this.lines + 1)));
	      return;
	    }
	    if (this.line.length > 0) {
	      this.__push(this.line);
	    }
	    return callback();
	  } catch (error) {
	    err = error;
	    return this.emit('error', err);
	  }
	};

	Parser.prototype.__push = function(line) {
	  var field, i, j, len, lineAsColumns;
	  if (this.options.columns === true) {
	    this.options.columns = line;
	    return;
	  } else if (typeof this.options.columns === 'function') {
	    this.options.columns = this.options.columns(line);
	    return;
	  }
	  this.count++;
	  if (this.options.columns != null) {
	    lineAsColumns = {};
	    for (i = j = 0, len = line.length; j < len; i = ++j) {
	      field = line[i];
	      lineAsColumns[this.options.columns[i]] = field;
	    }
	    if (this.options.objname) {
	      return this.push([lineAsColumns[this.options.objname], lineAsColumns]);
	    } else {
	      return this.push(lineAsColumns);
	    }
	  } else {
	    return this.push(line);
	  }
	};

	Parser.prototype.__write = function(chars, end, callback) {
	  var acceptedLength, areNextCharsDelimiter, areNextCharsRowDelimiters, auto_parse, char, escapeIsQuote, i, isDelimiter, isEscape, isNextCharAComment, isQuote, isRowDelimiter, is_float, is_int, l, ltrim, nextCharPos, ref, results, rowDelimiter, rowDelimiterLength, rtrim, wasCommenting;
	  is_int = (function(_this) {
	    return function(value) {
	      if (typeof _this.is_int === 'function') {
	        return _this.is_int(value);
	      } else {
	        return _this.is_int.test(value);
	      }
	    };
	  })(this);
	  is_float = (function(_this) {
	    return function(value) {
	      if (typeof _this.is_float === 'function') {
	        return _this.is_float(value);
	      } else {
	        return _this.is_float.test(value);
	      }
	    };
	  })(this);
	  auto_parse = (function(_this) {
	    return function(value) {
	      var m;
	      if (_this.options.auto_parse && is_int(_this.field)) {
	        _this.field = parseInt(_this.field);
	      } else if (_this.options.auto_parse && is_float(_this.field)) {
	        _this.field = parseFloat(_this.field);
	      } else if (_this.options.auto_parse && _this.options.auto_parse_date) {
	        m = Date.parse(_this.field);
	        if (!isNaN(m)) {
	          _this.field = new Date(m);
	        }
	      }
	      return _this.field;
	    };
	  })(this);
	  ltrim = this.options.trim || this.options.ltrim;
	  rtrim = this.options.trim || this.options.rtrim;
	  chars = this.buf + chars;
	  l = chars.length;
	  rowDelimiterLength = this.options.rowDelimiter ? this.options.rowDelimiter.length : 0;
	  i = 0;
	  if (this.lines === 0 && 0xFEFF === chars.charCodeAt(0)) {
	    i++;
	  }
	  while (i < l) {
	    acceptedLength = rowDelimiterLength + this.options.comment.length + this.options.escape.length + this.options.delimiter.length;
	    if (this.quoting) {
	      acceptedLength += this.options.quote.length;
	    }
	    if (!end && (i + acceptedLength >= l)) {
	      break;
	    }
	    char = this.nextChar ? this.nextChar : chars.charAt(i);
	    this.nextChar = chars.charAt(i + 1);
	    if (this.options.rowDelimiter == null) {
	      if ((this.field === '') && (char === '\n' || char === '\r')) {
	        rowDelimiter = char;
	        nextCharPos = i + 1;
	      } else if (this.nextChar === '\n' || this.nextChar === '\r') {
	        rowDelimiter = this.nextChar;
	        nextCharPos = i + 2;
	      }
	      if (rowDelimiter) {
	        if (rowDelimiter === '\r' && chars.charAt(nextCharPos) === '\n') {
	          rowDelimiter += '\n';
	        }
	        this.options.rowDelimiter = rowDelimiter;
	        rowDelimiterLength = this.options.rowDelimiter.length;
	      }
	    }
	    if (!this.commenting && char === this.options.escape) {
	      escapeIsQuote = this.options.escape === this.options.quote;
	      isEscape = this.nextChar === this.options.escape;
	      isQuote = this.nextChar === this.options.quote;
	      if (!(escapeIsQuote && !this.field && !this.quoting) && (isEscape || isQuote)) {
	        i++;
	        char = this.nextChar;
	        this.nextChar = chars.charAt(i + 1);
	        this.field += char;
	        i++;
	        continue;
	      }
	    }
	    if (!this.commenting && char === this.options.quote) {
	      if (this.quoting) {
	        areNextCharsRowDelimiters = this.options.rowDelimiter && chars.substr(i + 1, this.options.rowDelimiter.length) === this.options.rowDelimiter;
	        areNextCharsDelimiter = chars.substr(i + 1, this.options.delimiter.length) === this.options.delimiter;
	        isNextCharAComment = this.nextChar === this.options.comment;
	        if (this.nextChar && !areNextCharsRowDelimiters && !areNextCharsDelimiter && !isNextCharAComment) {
	          if (this.options.relax) {
	            this.quoting = false;
	            this.field = "" + this.options.quote + this.field;
	          } else {
	            throw Error("Invalid closing quote at line " + (this.lines + 1) + "; found " + (JSON.stringify(this.nextChar)) + " instead of delimiter " + (JSON.stringify(this.options.delimiter)));
	          }
	        } else {
	          this.quoting = false;
	          this.closingQuote = this.options.quote.length;
	          i++;
	          if (end && i === l) {
	            this.line.push(auto_parse(this.field));
	          }
	          continue;
	        }
	      } else if (!this.field) {
	        this.quoting = true;
	        i++;
	        continue;
	      } else if (this.field && !this.options.relax) {
	        throw Error("Invalid opening quote at line " + (this.lines + 1));
	      }
	    }
	    isRowDelimiter = this.options.rowDelimiter && chars.substr(i, this.options.rowDelimiter.length) === this.options.rowDelimiter;
	    if (isRowDelimiter) {
	      this.lines++;
	    }
	    wasCommenting = false;
	    if (!this.commenting && !this.quoting && this.options.comment && chars.substr(i, this.options.comment.length) === this.options.comment) {
	      this.commenting = true;
	    } else if (this.commenting && isRowDelimiter) {
	      wasCommenting = true;
	      this.commenting = false;
	    }
	    isDelimiter = chars.substr(i, this.options.delimiter.length) === this.options.delimiter;
	    if (!this.commenting && !this.quoting && (isDelimiter || isRowDelimiter)) {
	      if (isRowDelimiter && this.line.length === 0 && this.field === '') {
	        if (wasCommenting || this.options.skip_empty_lines) {
	          i += this.options.rowDelimiter.length;
	          this.nextChar = chars.charAt(i);
	          continue;
	        }
	      }
	      if (rtrim) {
	        if (!this.closingQuote) {
	          this.field = this.field.trimRight();
	        }
	      }
	      this.line.push(auto_parse(this.field));
	      this.closingQuote = 0;
	      this.field = '';
	      if (isDelimiter) {
	        i += this.options.delimiter.length;
	        this.nextChar = chars.charAt(i);
	        if (end && !this.nextChar) {
	          isRowDelimiter = true;
	          this.line.push('');
	        }
	      }
	      if (isRowDelimiter) {
	        this.__push(this.line);
	        this.line = [];
	        i += (ref = this.options.rowDelimiter) != null ? ref.length : void 0;
	        this.nextChar = chars.charAt(i);
	        continue;
	      }
	    } else if (!this.commenting && !this.quoting && (char === ' ' || char === '\t')) {
	      if (!(ltrim && !this.field)) {
	        this.field += char;
	      }
	      if (end && i + 1 === l) {
	        if (this.options.trim || this.options.rtrim) {
	          this.field = this.field.trimRight();
	        }
	        this.line.push(auto_parse(this.field));
	      }
	      i++;
	    } else if (!this.commenting) {
	      this.field += char;
	      i++;
	      if (end && i === l) {
	        this.line.push(auto_parse(this.field));
	      }
	    } else {
	      i++;
	    }
	  }
	  this.buf = '';
	  results = [];
	  while (i < l) {
	    this.buf += chars.charAt(i);
	    results.push(i++);
	  }
	  return results;
	};


/***/ },
/* 428 */
/***/ function(module, exports) {

	module.exports = require("string_decoder");

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.2
	var Transformer, stream, util,
	  slice = [].slice;

	stream = __webpack_require__(322);

	util = __webpack_require__(325);

	module.exports = function() {
	  var argument, callback, data, error, handler, i, j, k, len, options, result, transform, type, v;
	  options = {};
	  for (i = j = 0, len = arguments.length; j < len; i = ++j) {
	    argument = arguments[i];
	    type = typeof argument;
	    if (argument === null) {
	      type = 'null';
	    } else if (type === 'object' && Array.isArray(argument)) {
	      type = 'array';
	    }
	    if (i === 0) {
	      if (type === 'function') {
	        handler = argument;
	      } else if (type !== null) {
	        data = argument;
	      }
	      continue;
	    }
	    if (type === 'object') {
	      for (k in argument) {
	        v = argument[k];
	        options[k] = v;
	      }
	    } else if (type === 'function') {
	      if (handler && i === arguments.length - 1) {
	        callback = argument;
	      } else {
	        handler = argument;
	      }
	    } else if (type !== 'null') {
	      throw new Error('Invalid arguments');
	    }
	  }
	  transform = new Transformer(options, handler);
	  error = false;
	  if (data) {
	    process.nextTick(function() {
	      var l, len1, row;
	      for (l = 0, len1 = data.length; l < len1; l++) {
	        row = data[l];
	        if (error) {
	          break;
	        }
	        transform.write(row);
	      }
	      return transform.end();
	    });
	  }
	  if (callback || options.consume) {
	    result = [];
	    transform.on('readable', function() {
	      var r, results;
	      results = [];
	      while ((r = transform.read())) {
	        results.push(result.push(r));
	      }
	      return results;
	    });
	    transform.on('error', function(err) {
	      error = true;
	      if (callback) {
	        return callback(err);
	      }
	    });
	    transform.on('end', function() {
	      if (callback && !error) {
	        return callback(null, result);
	      }
	    });
	  }
	  return transform;
	};

	Transformer = function(options1, transform1) {
	  var base;
	  this.options = options1 != null ? options1 : {};
	  this.transform = transform1;
	  this.options.objectMode = true;
	  if ((base = this.options).parallel == null) {
	    base.parallel = 100;
	  }
	  stream.Transform.call(this, this.options);
	  this.running = 0;
	  this.started = 0;
	  this.finished = 0;
	  return this;
	};

	util.inherits(Transformer, stream.Transform);

	module.exports.Transformer = Transformer;

	Transformer.prototype._transform = function(chunk, encoding, cb) {
	  var err;
	  this.started++;
	  this.running++;
	  if (this.running < this.options.parallel) {
	    cb();
	    cb = null;
	  }
	  try {
	    if (this.transform.length === 2) {
	      this.transform.call(null, chunk, (function(_this) {
	        return function() {
	          var chunks, err;
	          err = arguments[0], chunks = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	          return _this._done(err, chunks, cb);
	        };
	      })(this));
	    } else {
	      this._done(null, [this.transform.call(null, chunk)], cb);
	    }
	    return false;
	  } catch (_error) {
	    err = _error;
	    return this._done(err);
	  }
	};

	Transformer.prototype._flush = function(cb) {
	  this._ending = function() {
	    if (this.running === 0) {
	      return cb();
	    }
	  };
	  return this._ending();
	};

	Transformer.prototype._done = function(err, chunks, cb) {
	  var chunk, j, len;
	  this.running--;
	  if (err) {
	    return this.emit('error', err);
	  }
	  this.finished++;
	  for (j = 0, len = chunks.length; j < len; j++) {
	    chunk = chunks[j];
	    if (typeof chunk === 'number') {
	      chunk = "" + chunk;
	    }
	    if (chunk != null) {
	      this.push(chunk);
	    }
	  }
	  if (cb) {
	    cb();
	  }
	  if (this._ending) {
	    return this._ending();
	  }
	};


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.2
	var Stringifier, stream, util;

	stream = __webpack_require__(322);

	util = __webpack_require__(325);

	module.exports = function() {
	  var callback, chunks, data, options, stringifier;
	  if (arguments.length === 3) {
	    data = arguments[0];
	    options = arguments[1];
	    callback = arguments[2];
	  } else if (arguments.length === 2) {
	    if (Array.isArray(arguments[0])) {
	      data = arguments[0];
	    } else {
	      options = arguments[0];
	    }
	    if (typeof arguments[1] === 'function') {
	      callback = arguments[1];
	    } else {
	      options = arguments[1];
	    }
	  } else if (arguments.length === 1) {
	    if (typeof arguments[0] === 'function') {
	      callback = arguments[0];
	    } else if (Array.isArray(arguments[0])) {
	      data = arguments[0];
	    } else {
	      options = arguments[0];
	    }
	  }
	  if (options == null) {
	    options = {};
	  }
	  stringifier = new Stringifier(options);
	  if (data) {
	    process.nextTick(function() {
	      var d, j, len;
	      for (j = 0, len = data.length; j < len; j++) {
	        d = data[j];
	        stringifier.write(d);
	      }
	      return stringifier.end();
	    });
	  }
	  if (callback) {
	    chunks = [];
	    stringifier.on('readable', function() {
	      var chunk, results;
	      results = [];
	      while (chunk = stringifier.read()) {
	        results.push(chunks.push(chunk));
	      }
	      return results;
	    });
	    stringifier.on('error', function(err) {
	      return callback(err);
	    });
	    stringifier.on('end', function() {
	      return callback(null, chunks.join(''));
	    });
	  }
	  return stringifier;
	};

	Stringifier = function(options) {
	  var base, base1, base2, base3, base4, base5, base6, base7, base8;
	  if (options == null) {
	    options = {};
	  }
	  stream.Transform.call(this, options);
	  this.options = options;
	  if ((base = this.options).delimiter == null) {
	    base.delimiter = ',';
	  }
	  if ((base1 = this.options).quote == null) {
	    base1.quote = '"';
	  }
	  if ((base2 = this.options).quoted == null) {
	    base2.quoted = false;
	  }
	  if ((base3 = this.options).quotedString == null) {
	    base3.quotedString = false;
	  }
	  if ((base4 = this.options).eof == null) {
	    base4.eof = true;
	  }
	  if ((base5 = this.options).escape == null) {
	    base5.escape = '"';
	  }
	  if ((base6 = this.options).columns == null) {
	    base6.columns = null;
	  }
	  if ((base7 = this.options).header == null) {
	    base7.header = false;
	  }
	  if ((base8 = this.options).rowDelimiter == null) {
	    base8.rowDelimiter = '\n';
	  }
	  if (this.countWriten == null) {
	    this.countWriten = 0;
	  }
	  switch (this.options.rowDelimiter) {
	    case 'auto':
	      this.options.rowDelimiter = null;
	      break;
	    case 'unix':
	      this.options.rowDelimiter = "\n";
	      break;
	    case 'mac':
	      this.options.rowDelimiter = "\r";
	      break;
	    case 'windows':
	      this.options.rowDelimiter = "\r\n";
	      break;
	    case 'unicode':
	      this.options.rowDelimiter = "\u2028";
	  }
	  return this;
	};

	util.inherits(Stringifier, stream.Transform);

	module.exports.Stringifier = Stringifier;

	Stringifier.prototype.headers = function() {
	  var k, label, labels;
	  if (!this.options.header) {
	    return;
	  }
	  if (!this.options.columns) {
	    return;
	  }
	  labels = this.options.columns;
	  if (typeof labels === 'object') {
	    labels = (function() {
	      var results;
	      results = [];
	      for (k in labels) {
	        label = labels[k];
	        results.push(label);
	      }
	      return results;
	    })();
	  }
	  if (this.options.eof) {
	    labels = this.stringify(labels) + this.options.rowDelimiter;
	  } else {
	    labels = this.stringify(labels);
	  }
	  return stream.Transform.prototype.write.call(this, labels);
	};

	Stringifier.prototype.end = function(chunk, encoding, callback) {
	  if (this.countWriten === 0) {
	    this.headers();
	  }
	  return stream.Transform.prototype.end.apply(this, arguments);
	};

	Stringifier.prototype.write = function(chunk, encoding, callback) {
	  var base, e, preserve;
	  if (chunk == null) {
	    return;
	  }
	  preserve = typeof chunk !== 'object';
	  if (!preserve) {
	    if (this.countWriten === 0 && !Array.isArray(chunk)) {
	      if ((base = this.options).columns == null) {
	        base.columns = Object.keys(chunk);
	      }
	    }
	    try {
	      this.emit('record', chunk, this.countWriten);
	    } catch (_error) {
	      e = _error;
	      return this.emit('error', e);
	    }
	    if (this.options.eof) {
	      chunk = this.stringify(chunk) + this.options.rowDelimiter;
	    } else {
	      chunk = this.stringify(chunk);
	      if (this.options.header || this.countWriten) {
	        chunk = this.options.rowDelimiter + chunk;
	      }
	    }
	  }
	  if (typeof chunk === 'number') {
	    chunk = "" + chunk;
	  }
	  if (this.countWriten === 0) {
	    this.headers();
	  }
	  if (!preserve) {
	    this.countWriten++;
	  }
	  return stream.Transform.prototype.write.call(this, chunk, encoding, callback);
	};

	Stringifier.prototype._transform = function(chunk, encoding, callback) {
	  this.push(chunk);
	  return callback();
	};

	Stringifier.prototype.stringify = function(line) {
	  var _line, column, columns, containsLinebreak, containsQuote, containsdelimiter, delimiter, escape, field, i, j, l, newLine, quote, ref, ref1, regexp;
	  if (typeof line !== 'object') {
	    return line;
	  }
	  columns = this.options.columns;
	  if (typeof columns === 'object' && columns !== null && !Array.isArray(columns)) {
	    columns = Object.keys(columns);
	  }
	  delimiter = this.options.delimiter;
	  quote = this.options.quote;
	  escape = this.options.escape;
	  if (!Array.isArray(line)) {
	    _line = [];
	    if (columns) {
	      for (i = j = 0, ref = columns.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        column = columns[i];
	        _line[i] = typeof line[column] === 'undefined' || line[column] === null ? '' : line[column];
	      }
	    } else {
	      for (column in line) {
	        _line.push(line[column]);
	      }
	    }
	    line = _line;
	    _line = null;
	  } else if (columns) {
	    line.splice(columns.length);
	  }
	  if (Array.isArray(line)) {
	    newLine = '';
	    for (i = l = 0, ref1 = line.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
	      field = line[i];
	      if (typeof field === 'string') {

	      } else if (typeof field === 'number') {
	        field = '' + field;
	      } else if (typeof field === 'boolean') {
	        field = field ? '1' : '';
	      } else if (field instanceof Date) {
	        field = '' + field.getTime();
	      } else if (typeof field === 'object' && field !== null) {
	        field = JSON.stringify(field);
	      }
	      if (field) {
	        containsdelimiter = field.indexOf(delimiter) >= 0;
	        containsQuote = field.indexOf(quote) >= 0;
	        containsLinebreak = field.indexOf('\r') >= 0 || field.indexOf('\n') >= 0;
	        if (containsQuote) {
	          regexp = new RegExp(quote, 'g');
	          field = field.replace(regexp, escape + quote);
	        }
	        if (containsQuote || containsdelimiter || containsLinebreak || this.options.quoted || (this.options.quotedString && typeof line[i] === 'string')) {
	          field = quote + field + quote;
	        }
	        newLine += field;
	      } else if (this.options.quotedEmpty || ((this.options.quotedEmpty == null) && line[i] === '' && this.options.quotedString)) {
	        newLine += quote + quote;
	      }
	      if (i !== line.length - 1) {
	        newLine += delimiter;
	      }
	    }
	    line = newLine;
	  }
	  return line;
	};


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	module.exports = __webpack_require__(432);


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 */

	var EventEmitter = __webpack_require__(374).EventEmitter;
	var mixin = __webpack_require__(433);
	var proto = __webpack_require__(434);
	var Route = __webpack_require__(441);
	var Router = __webpack_require__(440);
	var req = __webpack_require__(479);
	var res = __webpack_require__(488);

	/**
	 * Expose `createApplication()`.
	 */

	exports = module.exports = createApplication;

	/**
	 * Create an express application.
	 *
	 * @return {Function}
	 * @api public
	 */

	function createApplication() {
	  var app = function(req, res, next) {
	    app.handle(req, res, next);
	  };

	  mixin(app, EventEmitter.prototype, false);
	  mixin(app, proto, false);

	  app.request = { __proto__: req, app: app };
	  app.response = { __proto__: res, app: app };
	  app.init();
	  return app;
	}

	/**
	 * Expose the prototypes.
	 */

	exports.application = proto;
	exports.request = req;
	exports.response = res;

	/**
	 * Expose constructors.
	 */

	exports.Route = Route;
	exports.Router = Router;

	/**
	 * Expose middleware
	 */

	exports.query = __webpack_require__(455);
	exports.static = __webpack_require__(491);

	/**
	 * Replace removed middleware with an appropriate error message.
	 */

	[
	  'json',
	  'urlencoded',
	  'bodyParser',
	  'compress',
	  'cookieSession',
	  'session',
	  'logger',
	  'cookieParser',
	  'favicon',
	  'responseTime',
	  'errorHandler',
	  'timeout',
	  'methodOverride',
	  'vhost',
	  'csrf',
	  'directory',
	  'limit',
	  'multipart',
	  'staticCache',
	].forEach(function (name) {
	  Object.defineProperty(exports, name, {
	    get: function () {
	      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
	    },
	    configurable: true
	  });
	});


/***/ },
/* 433 */
/***/ function(module, exports) {

	/*!
	 * merge-descriptors
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = merge

	/**
	 * Module variables.
	 * @private
	 */

	var hasOwnProperty = Object.prototype.hasOwnProperty

	/**
	 * Merge the property descriptors of `src` into `dest`
	 *
	 * @param {object} dest Object to add descriptors to
	 * @param {object} src Object to clone descriptors from
	 * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
	 * @returns {object} Reference to dest
	 * @public
	 */

	function merge(dest, src, redefine) {
	  if (!dest) {
	    throw new TypeError('argument dest is required')
	  }

	  if (!src) {
	    throw new TypeError('argument src is required')
	  }

	  if (redefine === undefined) {
	    // Default to true
	    redefine = true
	  }

	  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
	    if (!redefine && hasOwnProperty.call(dest, name)) {
	      // Skip desriptor
	      return
	    }

	    // Copy descriptor
	    var descriptor = Object.getOwnPropertyDescriptor(src, name)
	    Object.defineProperty(dest, name, descriptor)
	  })

	  return dest
	}


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var finalhandler = __webpack_require__(435);
	var Router = __webpack_require__(440);
	var methods = __webpack_require__(445);
	var middleware = __webpack_require__(454);
	var query = __webpack_require__(455);
	var debug = __webpack_require__(413)('express:application');
	var View = __webpack_require__(460);
	var http = __webpack_require__(326);
	var compileETag = __webpack_require__(461).compileETag;
	var compileQueryParser = __webpack_require__(461).compileQueryParser;
	var compileTrust = __webpack_require__(461).compileTrust;
	var deprecate = __webpack_require__(447)('express');
	var flatten = __webpack_require__(442);
	var merge = __webpack_require__(446);
	var resolve = __webpack_require__(389).resolve;
	var slice = Array.prototype.slice;

	/**
	 * Application prototype.
	 */

	var app = exports = module.exports = {};

	/**
	 * Variable for trust proxy inheritance back-compat
	 * @private
	 */

	var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';

	/**
	 * Initialize the server.
	 *
	 *   - setup default configuration
	 *   - setup default middleware
	 *   - setup route reflection methods
	 *
	 * @private
	 */

	app.init = function init() {
	  this.cache = {};
	  this.engines = {};
	  this.settings = {};

	  this.defaultConfiguration();
	};

	/**
	 * Initialize application configuration.
	 * @private
	 */

	app.defaultConfiguration = function defaultConfiguration() {
	  var env = process.env.NODE_ENV || 'development';

	  // default settings
	  this.enable('x-powered-by');
	  this.set('etag', 'weak');
	  this.set('env', env);
	  this.set('query parser', 'extended');
	  this.set('subdomain offset', 2);
	  this.set('trust proxy', false);

	  // trust proxy inherit back-compat
	  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	    configurable: true,
	    value: true
	  });

	  debug('booting in %s mode', env);

	  this.on('mount', function onmount(parent) {
	    // inherit trust proxy
	    if (this.settings[trustProxyDefaultSymbol] === true
	      && typeof parent.settings['trust proxy fn'] === 'function') {
	      delete this.settings['trust proxy'];
	      delete this.settings['trust proxy fn'];
	    }

	    // inherit protos
	    this.request.__proto__ = parent.request;
	    this.response.__proto__ = parent.response;
	    this.engines.__proto__ = parent.engines;
	    this.settings.__proto__ = parent.settings;
	  });

	  // setup locals
	  this.locals = Object.create(null);

	  // top-most app is mounted at /
	  this.mountpath = '/';

	  // default locals
	  this.locals.settings = this.settings;

	  // default configuration
	  this.set('view', View);
	  this.set('views', resolve('views'));
	  this.set('jsonp callback name', 'callback');

	  if (env === 'production') {
	    this.enable('view cache');
	  }

	  Object.defineProperty(this, 'router', {
	    get: function() {
	      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
	    }
	  });
	};

	/**
	 * lazily adds the base router if it has not yet been added.
	 *
	 * We cannot add the base router in the defaultConfiguration because
	 * it reads app settings which might be set after that has run.
	 *
	 * @private
	 */
	app.lazyrouter = function lazyrouter() {
	  if (!this._router) {
	    this._router = new Router({
	      caseSensitive: this.enabled('case sensitive routing'),
	      strict: this.enabled('strict routing')
	    });

	    this._router.use(query(this.get('query parser fn')));
	    this._router.use(middleware.init(this));
	  }
	};

	/**
	 * Dispatch a req, res pair into the application. Starts pipeline processing.
	 *
	 * If no callback is provided, then default error handlers will respond
	 * in the event of an error bubbling through the stack.
	 *
	 * @private
	 */

	app.handle = function handle(req, res, callback) {
	  var router = this._router;

	  // final handler
	  var done = callback || finalhandler(req, res, {
	    env: this.get('env'),
	    onerror: logerror.bind(this)
	  });

	  // no routes
	  if (!router) {
	    debug('no routes defined on app');
	    done();
	    return;
	  }

	  router.handle(req, res, done);
	};

	/**
	 * Proxy `Router#use()` to add middleware to the app router.
	 * See Router#use() documentation for details.
	 *
	 * If the _fn_ parameter is an express app, then it will be
	 * mounted at the _route_ specified.
	 *
	 * @public
	 */

	app.use = function use(fn) {
	  var offset = 0;
	  var path = '/';

	  // default path to '/'
	  // disambiguate app.use([fn])
	  if (typeof fn !== 'function') {
	    var arg = fn;

	    while (Array.isArray(arg) && arg.length !== 0) {
	      arg = arg[0];
	    }

	    // first arg is the path
	    if (typeof arg !== 'function') {
	      offset = 1;
	      path = fn;
	    }
	  }

	  var fns = flatten(slice.call(arguments, offset));

	  if (fns.length === 0) {
	    throw new TypeError('app.use() requires middleware functions');
	  }

	  // setup router
	  this.lazyrouter();
	  var router = this._router;

	  fns.forEach(function (fn) {
	    // non-express app
	    if (!fn || !fn.handle || !fn.set) {
	      return router.use(path, fn);
	    }

	    debug('.use app under %s', path);
	    fn.mountpath = path;
	    fn.parent = this;

	    // restore .app property on req and res
	    router.use(path, function mounted_app(req, res, next) {
	      var orig = req.app;
	      fn.handle(req, res, function (err) {
	        req.__proto__ = orig.request;
	        res.__proto__ = orig.response;
	        next(err);
	      });
	    });

	    // mounted an app
	    fn.emit('mount', this);
	  }, this);

	  return this;
	};

	/**
	 * Proxy to the app `Router#route()`
	 * Returns a new `Route` instance for the _path_.
	 *
	 * Routes are isolated middleware stacks for specific paths.
	 * See the Route api docs for details.
	 *
	 * @public
	 */

	app.route = function route(path) {
	  this.lazyrouter();
	  return this._router.route(path);
	};

	/**
	 * Register the given template engine callback `fn`
	 * as `ext`.
	 *
	 * By default will `require()` the engine based on the
	 * file extension. For example if you try to render
	 * a "foo.jade" file Express will invoke the following internally:
	 *
	 *     app.engine('jade', require('jade').__express);
	 *
	 * For engines that do not provide `.__express` out of the box,
	 * or if you wish to "map" a different extension to the template engine
	 * you may use this method. For example mapping the EJS template engine to
	 * ".html" files:
	 *
	 *     app.engine('html', require('ejs').renderFile);
	 *
	 * In this case EJS provides a `.renderFile()` method with
	 * the same signature that Express expects: `(path, options, callback)`,
	 * though note that it aliases this method as `ejs.__express` internally
	 * so if you're using ".ejs" extensions you dont need to do anything.
	 *
	 * Some template engines do not follow this convention, the
	 * [Consolidate.js](https://github.com/tj/consolidate.js)
	 * library was created to map all of node's popular template
	 * engines to follow this convention, thus allowing them to
	 * work seamlessly within Express.
	 *
	 * @param {String} ext
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */

	app.engine = function engine(ext, fn) {
	  if (typeof fn !== 'function') {
	    throw new Error('callback function required');
	  }

	  // get file extension
	  var extension = ext[0] !== '.'
	    ? '.' + ext
	    : ext;

	  // store engine
	  this.engines[extension] = fn;

	  return this;
	};

	/**
	 * Proxy to `Router#param()` with one added api feature. The _name_ parameter
	 * can be an array of names.
	 *
	 * See the Router#param() docs for more details.
	 *
	 * @param {String|Array} name
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */

	app.param = function param(name, fn) {
	  this.lazyrouter();

	  if (Array.isArray(name)) {
	    for (var i = 0; i < name.length; i++) {
	      this.param(name[i], fn);
	    }

	    return this;
	  }

	  this._router.param(name, fn);

	  return this;
	};

	/**
	 * Assign `setting` to `val`, or return `setting`'s value.
	 *
	 *    app.set('foo', 'bar');
	 *    app.get('foo');
	 *    // => "bar"
	 *
	 * Mounted servers inherit their parent server's settings.
	 *
	 * @param {String} setting
	 * @param {*} [val]
	 * @return {Server} for chaining
	 * @public
	 */

	app.set = function set(setting, val) {
	  if (arguments.length === 1) {
	    // app.get(setting)
	    return this.settings[setting];
	  }

	  debug('set "%s" to %o', setting, val);

	  // set value
	  this.settings[setting] = val;

	  // trigger matched settings
	  switch (setting) {
	    case 'etag':
	      this.set('etag fn', compileETag(val));
	      break;
	    case 'query parser':
	      this.set('query parser fn', compileQueryParser(val));
	      break;
	    case 'trust proxy':
	      this.set('trust proxy fn', compileTrust(val));

	      // trust proxy inherit back-compat
	      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	        configurable: true,
	        value: false
	      });

	      break;
	  }

	  return this;
	};

	/**
	 * Return the app's absolute pathname
	 * based on the parent(s) that have
	 * mounted it.
	 *
	 * For example if the application was
	 * mounted as "/admin", which itself
	 * was mounted as "/blog" then the
	 * return value would be "/blog/admin".
	 *
	 * @return {String}
	 * @private
	 */

	app.path = function path() {
	  return this.parent
	    ? this.parent.path() + this.mountpath
	    : '';
	};

	/**
	 * Check if `setting` is enabled (truthy).
	 *
	 *    app.enabled('foo')
	 *    // => false
	 *
	 *    app.enable('foo')
	 *    app.enabled('foo')
	 *    // => true
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */

	app.enabled = function enabled(setting) {
	  return Boolean(this.set(setting));
	};

	/**
	 * Check if `setting` is disabled.
	 *
	 *    app.disabled('foo')
	 *    // => true
	 *
	 *    app.enable('foo')
	 *    app.disabled('foo')
	 *    // => false
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */

	app.disabled = function disabled(setting) {
	  return !this.set(setting);
	};

	/**
	 * Enable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */

	app.enable = function enable(setting) {
	  return this.set(setting, true);
	};

	/**
	 * Disable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */

	app.disable = function disable(setting) {
	  return this.set(setting, false);
	};

	/**
	 * Delegate `.VERB(...)` calls to `router.VERB(...)`.
	 */

	methods.forEach(function(method){
	  app[method] = function(path){
	    if (method === 'get' && arguments.length === 1) {
	      // app.get(setting)
	      return this.set(path);
	    }

	    this.lazyrouter();

	    var route = this._router.route(path);
	    route[method].apply(route, slice.call(arguments, 1));
	    return this;
	  };
	});

	/**
	 * Special-cased "all" method, applying the given route `path`,
	 * middleware, and callback to _every_ HTTP method.
	 *
	 * @param {String} path
	 * @param {Function} ...
	 * @return {app} for chaining
	 * @public
	 */

	app.all = function all(path) {
	  this.lazyrouter();

	  var route = this._router.route(path);
	  var args = slice.call(arguments, 1);

	  for (var i = 0; i < methods.length; i++) {
	    route[methods[i]].apply(route, args);
	  }

	  return this;
	};

	// del -> delete alias

	app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');

	/**
	 * Render the given view `name` name with `options`
	 * and a callback accepting an error and the
	 * rendered template string.
	 *
	 * Example:
	 *
	 *    app.render('email', { name: 'Tobi' }, function(err, html){
	 *      // ...
	 *    })
	 *
	 * @param {String} name
	 * @param {Object|Function} options or fn
	 * @param {Function} callback
	 * @public
	 */

	app.render = function render(name, options, callback) {
	  var cache = this.cache;
	  var done = callback;
	  var engines = this.engines;
	  var opts = options;
	  var renderOptions = {};
	  var view;

	  // support callback function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  // merge app.locals
	  merge(renderOptions, this.locals);

	  // merge options._locals
	  if (opts._locals) {
	    merge(renderOptions, opts._locals);
	  }

	  // merge options
	  merge(renderOptions, opts);

	  // set .cache unless explicitly provided
	  if (renderOptions.cache == null) {
	    renderOptions.cache = this.enabled('view cache');
	  }

	  // primed cache
	  if (renderOptions.cache) {
	    view = cache[name];
	  }

	  // view
	  if (!view) {
	    var View = this.get('view');

	    view = new View(name, {
	      defaultEngine: this.get('view engine'),
	      root: this.get('views'),
	      engines: engines
	    });

	    if (!view.path) {
	      var dirs = Array.isArray(view.root) && view.root.length > 1
	        ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"'
	        : 'directory "' + view.root + '"'
	      var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
	      err.view = view;
	      return done(err);
	    }

	    // prime the cache
	    if (renderOptions.cache) {
	      cache[name] = view;
	    }
	  }

	  // render
	  tryRender(view, renderOptions, done);
	};

	/**
	 * Listen for connections.
	 *
	 * A node `http.Server` is returned, with this
	 * application (which is a `Function`) as its
	 * callback. If you wish to create both an HTTP
	 * and HTTPS server you may do so with the "http"
	 * and "https" modules as shown here:
	 *
	 *    var http = require('http')
	 *      , https = require('https')
	 *      , express = require('express')
	 *      , app = express();
	 *
	 *    http.createServer(app).listen(80);
	 *    https.createServer({ ... }, app).listen(443);
	 *
	 * @return {http.Server}
	 * @public
	 */

	app.listen = function listen() {
	  var server = http.createServer(this);
	  return server.listen.apply(server, arguments);
	};

	/**
	 * Log error using console.error.
	 *
	 * @param {Error} err
	 * @private
	 */

	function logerror(err) {
	  /* istanbul ignore next */
	  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
	}

	/**
	 * Try rendering a view.
	 * @private
	 */

	function tryRender(view, options, callback) {
	  try {
	    view.render(options, callback);
	  } catch (err) {
	    callback(err);
	  }
	}


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * finalhandler
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var debug = __webpack_require__(413)('finalhandler')
	var escapeHtml = __webpack_require__(436)
	var http = __webpack_require__(326)
	var onFinished = __webpack_require__(437)
	var unpipe = __webpack_require__(439)

	/**
	 * Module variables.
	 * @private
	 */

	/* istanbul ignore next */
	var defer = typeof setImmediate === 'function'
	  ? setImmediate
	  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
	var isFinished = onFinished.isFinished

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = finalhandler

	/**
	 * Create a function to handle the final response.
	 *
	 * @param {Request} req
	 * @param {Response} res
	 * @param {Object} [options]
	 * @return {Function}
	 * @public
	 */

	function finalhandler(req, res, options) {
	  var opts = options || {}

	  // get environment
	  var env = opts.env || process.env.NODE_ENV || 'development'

	  // get error callback
	  var onerror = opts.onerror

	  return function (err) {
	    var status = res.statusCode

	    // ignore 404 on in-flight response
	    if (!err && res._header) {
	      debug('cannot 404 after headers sent')
	      return
	    }

	    // unhandled error
	    if (err) {
	      // respect err.statusCode
	      if (err.statusCode) {
	        status = err.statusCode
	      }

	      // respect err.status
	      if (err.status) {
	        status = err.status
	      }

	      // default status code to 500
	      if (!status || status < 400) {
	        status = 500
	      }

	      // production gets a basic error message
	      var msg = env === 'production'
	        ? http.STATUS_CODES[status]
	        : err.stack || err.toString()
	      msg = escapeHtml(msg)
	        .replace(/\n/g, '<br>')
	        .replace(/  /g, ' &nbsp;') + '\n'
	    } else {
	      status = 404
	      msg = 'Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl || req.url) + '\n'
	    }

	    debug('default %s', status)

	    // schedule onerror callback
	    if (err && onerror) {
	      defer(onerror, err, req, res)
	    }

	    // cannot actually respond
	    if (res._header) {
	      return req.socket.destroy()
	    }

	    send(req, res, status, msg)
	  }
	}

	/**
	 * Send response.
	 *
	 * @param {IncomingMessage} req
	 * @param {OutgoingMessage} res
	 * @param {number} status
	 * @param {string} body
	 * @private
	 */

	function send(req, res, status, body) {
	  function write() {
	    res.statusCode = status

	    // security header for content sniffing
	    res.setHeader('X-Content-Type-Options', 'nosniff')

	    // standard headers
	    res.setHeader('Content-Type', 'text/html; charset=utf-8')
	    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))

	    if (req.method === 'HEAD') {
	      res.end()
	      return
	    }

	    res.end(body, 'utf8')
	  }

	  if (isFinished(req)) {
	    write()
	    return
	  }

	  // unpipe everything from the request
	  unpipe(req)

	  // flush the request
	  onFinished(req, write)
	  req.resume()
	}


/***/ },
/* 436 */
/***/ function(module, exports) {

	/*!
	 * escape-html
	 * Copyright(c) 2012-2013 TJ Holowaychuk
	 * Copyright(c) 2015 Andreas Lubbe
	 * Copyright(c) 2015 Tiancheng "Timothy" Gu
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = escapeHtml;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34: // "
	        escape = '&quot;';
	        break;
	      case 38: // &
	        escape = '&amp;';
	        break;
	      case 39: // '
	        escape = '&#39;';
	        break;
	      case 60: // <
	        escape = '&lt;';
	        break;
	      case 62: // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index
	    ? html + str.substring(lastIndex, index)
	    : html;
	}


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * on-finished
	 * Copyright(c) 2013 Jonathan Ong
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = onFinished
	module.exports.isFinished = isFinished

	/**
	 * Module dependencies.
	 * @private
	 */

	var first = __webpack_require__(438)

	/**
	 * Variables.
	 * @private
	 */

	/* istanbul ignore next */
	var defer = typeof setImmediate === 'function'
	  ? setImmediate
	  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }

	/**
	 * Invoke callback when the response has finished, useful for
	 * cleaning up resources afterwards.
	 *
	 * @param {object} msg
	 * @param {function} listener
	 * @return {object}
	 * @public
	 */

	function onFinished(msg, listener) {
	  if (isFinished(msg) !== false) {
	    defer(listener, null, msg)
	    return msg
	  }

	  // attach the listener to the message
	  attachListener(msg, listener)

	  return msg
	}

	/**
	 * Determine if message is already finished.
	 *
	 * @param {object} msg
	 * @return {boolean}
	 * @public
	 */

	function isFinished(msg) {
	  var socket = msg.socket

	  if (typeof msg.finished === 'boolean') {
	    // OutgoingMessage
	    return Boolean(msg.finished || (socket && !socket.writable))
	  }

	  if (typeof msg.complete === 'boolean') {
	    // IncomingMessage
	    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
	  }

	  // don't know
	  return undefined
	}

	/**
	 * Attach a finished listener to the message.
	 *
	 * @param {object} msg
	 * @param {function} callback
	 * @private
	 */

	function attachFinishedListener(msg, callback) {
	  var eeMsg
	  var eeSocket
	  var finished = false

	  function onFinish(error) {
	    eeMsg.cancel()
	    eeSocket.cancel()

	    finished = true
	    callback(error)
	  }

	  // finished on first message event
	  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)

	  function onSocket(socket) {
	    // remove listener
	    msg.removeListener('socket', onSocket)

	    if (finished) return
	    if (eeMsg !== eeSocket) return

	    // finished on first socket event
	    eeSocket = first([[socket, 'error', 'close']], onFinish)
	  }

	  if (msg.socket) {
	    // socket already assigned
	    onSocket(msg.socket)
	    return
	  }

	  // wait for socket to be assigned
	  msg.on('socket', onSocket)

	  if (msg.socket === undefined) {
	    // node.js 0.8 patch
	    patchAssignSocket(msg, onSocket)
	  }
	}

	/**
	 * Attach the listener to the message.
	 *
	 * @param {object} msg
	 * @return {function}
	 * @private
	 */

	function attachListener(msg, listener) {
	  var attached = msg.__onFinished

	  // create a private single listener with queue
	  if (!attached || !attached.queue) {
	    attached = msg.__onFinished = createListener(msg)
	    attachFinishedListener(msg, attached)
	  }

	  attached.queue.push(listener)
	}

	/**
	 * Create listener on message.
	 *
	 * @param {object} msg
	 * @return {function}
	 * @private
	 */

	function createListener(msg) {
	  function listener(err) {
	    if (msg.__onFinished === listener) msg.__onFinished = null
	    if (!listener.queue) return

	    var queue = listener.queue
	    listener.queue = null

	    for (var i = 0; i < queue.length; i++) {
	      queue[i](err, msg)
	    }
	  }

	  listener.queue = []

	  return listener
	}

	/**
	 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
	 *
	 * @param {ServerResponse} res
	 * @param {function} callback
	 * @private
	 */

	function patchAssignSocket(res, callback) {
	  var assignSocket = res.assignSocket

	  if (typeof assignSocket !== 'function') return

	  // res.on('socket', callback) is broken in 0.8
	  res.assignSocket = function _assignSocket(socket) {
	    assignSocket.call(this, socket)
	    callback(socket)
	  }
	}


/***/ },
/* 438 */
/***/ function(module, exports) {

	/*!
	 * ee-first
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = first

	/**
	 * Get the first event in a set of event emitters and event pairs.
	 *
	 * @param {array} stuff
	 * @param {function} done
	 * @public
	 */

	function first(stuff, done) {
	  if (!Array.isArray(stuff))
	    throw new TypeError('arg must be an array of [ee, events...] arrays')

	  var cleanups = []

	  for (var i = 0; i < stuff.length; i++) {
	    var arr = stuff[i]

	    if (!Array.isArray(arr) || arr.length < 2)
	      throw new TypeError('each array member must be [ee, events...]')

	    var ee = arr[0]

	    for (var j = 1; j < arr.length; j++) {
	      var event = arr[j]
	      var fn = listener(event, callback)

	      // listen to the event
	      ee.on(event, fn)
	      // push this listener to the list of cleanups
	      cleanups.push({
	        ee: ee,
	        event: event,
	        fn: fn,
	      })
	    }
	  }

	  function callback() {
	    cleanup()
	    done.apply(null, arguments)
	  }

	  function cleanup() {
	    var x
	    for (var i = 0; i < cleanups.length; i++) {
	      x = cleanups[i]
	      x.ee.removeListener(x.event, x.fn)
	    }
	  }

	  function thunk(fn) {
	    done = fn
	  }

	  thunk.cancel = cleanup

	  return thunk
	}

	/**
	 * Create the event listener.
	 * @private
	 */

	function listener(event, done) {
	  return function onevent(arg1) {
	    var args = new Array(arguments.length)
	    var ee = this
	    var err = event === 'error'
	      ? arg1
	      : null

	    // copy args to prevent arguments escaping scope
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }

	    done(err, ee, event, args)
	  }
	}


/***/ },
/* 439 */
/***/ function(module, exports) {

	/*!
	 * unpipe
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = unpipe

	/**
	 * Determine if there are Node.js pipe-like data listeners.
	 * @private
	 */

	function hasPipeDataListeners(stream) {
	  var listeners = stream.listeners('data')

	  for (var i = 0; i < listeners.length; i++) {
	    if (listeners[i].name === 'ondata') {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * Unpipe a stream from all destinations.
	 *
	 * @param {object} stream
	 * @public
	 */

	function unpipe(stream) {
	  if (!stream) {
	    throw new TypeError('argument stream is required')
	  }

	  if (typeof stream.unpipe === 'function') {
	    // new-style
	    stream.unpipe()
	    return
	  }

	  // Node.js 0.8 hack
	  if (!hasPipeDataListeners(stream)) {
	    return
	  }

	  var listener
	  var listeners = stream.listeners('close')

	  for (var i = 0; i < listeners.length; i++) {
	    listener = listeners[i]

	    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
	      continue
	    }

	    // invoke the listener
	    listener.call(stream)
	  }
	}


/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var Route = __webpack_require__(441);
	var Layer = __webpack_require__(443);
	var methods = __webpack_require__(445);
	var mixin = __webpack_require__(446);
	var debug = __webpack_require__(413)('express:router');
	var deprecate = __webpack_require__(447)('express');
	var flatten = __webpack_require__(442);
	var parseUrl = __webpack_require__(453);

	/**
	 * Module variables.
	 * @private
	 */

	var objectRegExp = /^\[object (\S+)\]$/;
	var slice = Array.prototype.slice;
	var toString = Object.prototype.toString;

	/**
	 * Initialize a new `Router` with the given `options`.
	 *
	 * @param {Object} options
	 * @return {Router} which is an callable function
	 * @public
	 */

	var proto = module.exports = function(options) {
	  var opts = options || {};

	  function router(req, res, next) {
	    router.handle(req, res, next);
	  }

	  // mixin Router class functions
	  router.__proto__ = proto;

	  router.params = {};
	  router._params = [];
	  router.caseSensitive = opts.caseSensitive;
	  router.mergeParams = opts.mergeParams;
	  router.strict = opts.strict;
	  router.stack = [];

	  return router;
	};

	/**
	 * Map the given param placeholder `name`(s) to the given callback.
	 *
	 * Parameter mapping is used to provide pre-conditions to routes
	 * which use normalized placeholders. For example a _:user_id_ parameter
	 * could automatically load a user's information from the database without
	 * any additional code,
	 *
	 * The callback uses the same signature as middleware, the only difference
	 * being that the value of the placeholder is passed, in this case the _id_
	 * of the user. Once the `next()` function is invoked, just like middleware
	 * it will continue on to execute the route, or subsequent parameter functions.
	 *
	 * Just like in middleware, you must either respond to the request or call next
	 * to avoid stalling the request.
	 *
	 *  app.param('user_id', function(req, res, next, id){
	 *    User.find(id, function(err, user){
	 *      if (err) {
	 *        return next(err);
	 *      } else if (!user) {
	 *        return next(new Error('failed to load user'));
	 *      }
	 *      req.user = user;
	 *      next();
	 *    });
	 *  });
	 *
	 * @param {String} name
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */

	proto.param = function param(name, fn) {
	  // param logic
	  if (typeof name === 'function') {
	    deprecate('router.param(fn): Refactor to use path params');
	    this._params.push(name);
	    return;
	  }

	  // apply param functions
	  var params = this._params;
	  var len = params.length;
	  var ret;

	  if (name[0] === ':') {
	    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
	    name = name.substr(1);
	  }

	  for (var i = 0; i < len; ++i) {
	    if (ret = params[i](name, fn)) {
	      fn = ret;
	    }
	  }

	  // ensure we end up with a
	  // middleware function
	  if ('function' != typeof fn) {
	    throw new Error('invalid param() call for ' + name + ', got ' + fn);
	  }

	  (this.params[name] = this.params[name] || []).push(fn);
	  return this;
	};

	/**
	 * Dispatch a req, res into the router.
	 * @private
	 */

	proto.handle = function handle(req, res, out) {
	  var self = this;

	  debug('dispatching %s %s', req.method, req.url);

	  var search = 1 + req.url.indexOf('?');
	  var pathlength = search ? search - 1 : req.url.length;
	  var fqdn = req.url[0] !== '/' && 1 + req.url.substr(0, pathlength).indexOf('://');
	  var protohost = fqdn ? req.url.substr(0, req.url.indexOf('/', 2 + fqdn)) : '';
	  var idx = 0;
	  var removed = '';
	  var slashAdded = false;
	  var paramcalled = {};

	  // store options for OPTIONS request
	  // only used if OPTIONS request
	  var options = [];

	  // middleware and routes
	  var stack = self.stack;

	  // manage inter-router variables
	  var parentParams = req.params;
	  var parentUrl = req.baseUrl || '';
	  var done = restore(out, req, 'baseUrl', 'next', 'params');

	  // setup next layer
	  req.next = next;

	  // for options requests, respond with a default if nothing else responds
	  if (req.method === 'OPTIONS') {
	    done = wrap(done, function(old, err) {
	      if (err || options.length === 0) return old(err);
	      sendOptionsResponse(res, options, old);
	    });
	  }

	  // setup basic req values
	  req.baseUrl = parentUrl;
	  req.originalUrl = req.originalUrl || req.url;

	  next();

	  function next(err) {
	    var layerError = err === 'route'
	      ? null
	      : err;

	    // remove added slash
	    if (slashAdded) {
	      req.url = req.url.substr(1);
	      slashAdded = false;
	    }

	    // restore altered req.url
	    if (removed.length !== 0) {
	      req.baseUrl = parentUrl;
	      req.url = protohost + removed + req.url.substr(protohost.length);
	      removed = '';
	    }

	    // no more matching layers
	    if (idx >= stack.length) {
	      setImmediate(done, layerError);
	      return;
	    }

	    // get pathname of request
	    var path = getPathname(req);

	    if (path == null) {
	      return done(layerError);
	    }

	    // find next matching layer
	    var layer;
	    var match;
	    var route;

	    while (match !== true && idx < stack.length) {
	      layer = stack[idx++];
	      match = matchLayer(layer, path);
	      route = layer.route;

	      if (typeof match !== 'boolean') {
	        // hold on to layerError
	        layerError = layerError || match;
	      }

	      if (match !== true) {
	        continue;
	      }

	      if (!route) {
	        // process non-route handlers normally
	        continue;
	      }

	      if (layerError) {
	        // routes do not match with a pending error
	        match = false;
	        continue;
	      }

	      var method = req.method;
	      var has_method = route._handles_method(method);

	      // build up automatic options response
	      if (!has_method && method === 'OPTIONS') {
	        appendMethods(options, route._options());
	      }

	      // don't even bother matching route
	      if (!has_method && method !== 'HEAD') {
	        match = false;
	        continue;
	      }
	    }

	    // no match
	    if (match !== true) {
	      return done(layerError);
	    }

	    // store route for dispatch on change
	    if (route) {
	      req.route = route;
	    }

	    // Capture one-time layer values
	    req.params = self.mergeParams
	      ? mergeParams(layer.params, parentParams)
	      : layer.params;
	    var layerPath = layer.path;

	    // this should be done for the layer
	    self.process_params(layer, paramcalled, req, res, function (err) {
	      if (err) {
	        return next(layerError || err);
	      }

	      if (route) {
	        return layer.handle_request(req, res, next);
	      }

	      trim_prefix(layer, layerError, layerPath, path);
	    });
	  }

	  function trim_prefix(layer, layerError, layerPath, path) {
	    var c = path[layerPath.length];
	    if (c && '/' !== c && '.' !== c) return next(layerError);

	     // Trim off the part of the url that matches the route
	     // middleware (.use stuff) needs to have the path stripped
	    if (layerPath.length !== 0) {
	      debug('trim prefix (%s) from url %s', layerPath, req.url);
	      removed = layerPath;
	      req.url = protohost + req.url.substr(protohost.length + removed.length);

	      // Ensure leading slash
	      if (!fqdn && req.url[0] !== '/') {
	        req.url = '/' + req.url;
	        slashAdded = true;
	      }

	      // Setup base URL (no trailing slash)
	      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'
	        ? removed.substring(0, removed.length - 1)
	        : removed);
	    }

	    debug('%s %s : %s', layer.name, layerPath, req.originalUrl);

	    if (layerError) {
	      layer.handle_error(layerError, req, res, next);
	    } else {
	      layer.handle_request(req, res, next);
	    }
	  }
	};

	/**
	 * Process any parameters for the layer.
	 * @private
	 */

	proto.process_params = function process_params(layer, called, req, res, done) {
	  var params = this.params;

	  // captured parameters from the layer, keys and values
	  var keys = layer.keys;

	  // fast track
	  if (!keys || keys.length === 0) {
	    return done();
	  }

	  var i = 0;
	  var name;
	  var paramIndex = 0;
	  var key;
	  var paramVal;
	  var paramCallbacks;
	  var paramCalled;

	  // process params in order
	  // param callbacks can be async
	  function param(err) {
	    if (err) {
	      return done(err);
	    }

	    if (i >= keys.length ) {
	      return done();
	    }

	    paramIndex = 0;
	    key = keys[i++];

	    if (!key) {
	      return done();
	    }

	    name = key.name;
	    paramVal = req.params[name];
	    paramCallbacks = params[name];
	    paramCalled = called[name];

	    if (paramVal === undefined || !paramCallbacks) {
	      return param();
	    }

	    // param previously called with same value or error occurred
	    if (paramCalled && (paramCalled.match === paramVal
	      || (paramCalled.error && paramCalled.error !== 'route'))) {
	      // restore value
	      req.params[name] = paramCalled.value;

	      // next param
	      return param(paramCalled.error);
	    }

	    called[name] = paramCalled = {
	      error: null,
	      match: paramVal,
	      value: paramVal
	    };

	    paramCallback();
	  }

	  // single param callbacks
	  function paramCallback(err) {
	    var fn = paramCallbacks[paramIndex++];

	    // store updated value
	    paramCalled.value = req.params[key.name];

	    if (err) {
	      // store error
	      paramCalled.error = err;
	      param(err);
	      return;
	    }

	    if (!fn) return param();

	    try {
	      fn(req, res, paramCallback, paramVal, key.name);
	    } catch (e) {
	      paramCallback(e);
	    }
	  }

	  param();
	};

	/**
	 * Use the given middleware function, with optional path, defaulting to "/".
	 *
	 * Use (like `.all`) will run for any http METHOD, but it will not add
	 * handlers for those methods so OPTIONS requests will not consider `.use`
	 * functions even if they could respond.
	 *
	 * The other difference is that _route_ path is stripped and not visible
	 * to the handler function. The main effect of this feature is that mounted
	 * handlers can operate without any code changes regardless of the "prefix"
	 * pathname.
	 *
	 * @public
	 */

	proto.use = function use(fn) {
	  var offset = 0;
	  var path = '/';

	  // default path to '/'
	  // disambiguate router.use([fn])
	  if (typeof fn !== 'function') {
	    var arg = fn;

	    while (Array.isArray(arg) && arg.length !== 0) {
	      arg = arg[0];
	    }

	    // first arg is the path
	    if (typeof arg !== 'function') {
	      offset = 1;
	      path = fn;
	    }
	  }

	  var callbacks = flatten(slice.call(arguments, offset));

	  if (callbacks.length === 0) {
	    throw new TypeError('Router.use() requires middleware functions');
	  }

	  for (var i = 0; i < callbacks.length; i++) {
	    var fn = callbacks[i];

	    if (typeof fn !== 'function') {
	      throw new TypeError('Router.use() requires middleware function but got a ' + gettype(fn));
	    }

	    // add the middleware
	    debug('use %s %s', path, fn.name || '<anonymous>');

	    var layer = new Layer(path, {
	      sensitive: this.caseSensitive,
	      strict: false,
	      end: false
	    }, fn);

	    layer.route = undefined;

	    this.stack.push(layer);
	  }

	  return this;
	};

	/**
	 * Create a new Route for the given path.
	 *
	 * Each route contains a separate middleware stack and VERB handlers.
	 *
	 * See the Route api documentation for details on adding handlers
	 * and middleware to routes.
	 *
	 * @param {String} path
	 * @return {Route}
	 * @public
	 */

	proto.route = function route(path) {
	  var route = new Route(path);

	  var layer = new Layer(path, {
	    sensitive: this.caseSensitive,
	    strict: this.strict,
	    end: true
	  }, route.dispatch.bind(route));

	  layer.route = route;

	  this.stack.push(layer);
	  return route;
	};

	// create Router#VERB functions
	methods.concat('all').forEach(function(method){
	  proto[method] = function(path){
	    var route = this.route(path)
	    route[method].apply(route, slice.call(arguments, 1));
	    return this;
	  };
	});

	// append methods to a list of methods
	function appendMethods(list, addition) {
	  for (var i = 0; i < addition.length; i++) {
	    var method = addition[i];
	    if (list.indexOf(method) === -1) {
	      list.push(method);
	    }
	  }
	}

	// get pathname of request
	function getPathname(req) {
	  try {
	    return parseUrl(req).pathname;
	  } catch (err) {
	    return undefined;
	  }
	}

	// get type for error message
	function gettype(obj) {
	  var type = typeof obj;

	  if (type !== 'object') {
	    return type;
	  }

	  // inspect [[Class]] for objects
	  return toString.call(obj)
	    .replace(objectRegExp, '$1');
	}

	/**
	 * Match path to a layer.
	 *
	 * @param {Layer} layer
	 * @param {string} path
	 * @private
	 */

	function matchLayer(layer, path) {
	  try {
	    return layer.match(path);
	  } catch (err) {
	    return err;
	  }
	}

	// merge params with parent params
	function mergeParams(params, parent) {
	  if (typeof parent !== 'object' || !parent) {
	    return params;
	  }

	  // make copy of parent for base
	  var obj = mixin({}, parent);

	  // simple non-numeric merging
	  if (!(0 in params) || !(0 in parent)) {
	    return mixin(obj, params);
	  }

	  var i = 0;
	  var o = 0;

	  // determine numeric gaps
	  while (i in params) {
	    i++;
	  }

	  while (o in parent) {
	    o++;
	  }

	  // offset numeric indices in params before merge
	  for (i--; i >= 0; i--) {
	    params[i + o] = params[i];

	    // create holes for the merge when necessary
	    if (i < o) {
	      delete params[i];
	    }
	  }

	  return mixin(obj, params);
	}

	// restore obj props after function
	function restore(fn, obj) {
	  var props = new Array(arguments.length - 2);
	  var vals = new Array(arguments.length - 2);

	  for (var i = 0; i < props.length; i++) {
	    props[i] = arguments[i + 2];
	    vals[i] = obj[props[i]];
	  }

	  return function(err){
	    // restore vals
	    for (var i = 0; i < props.length; i++) {
	      obj[props[i]] = vals[i];
	    }

	    return fn.apply(this, arguments);
	  };
	}

	// send an OPTIONS response
	function sendOptionsResponse(res, options, next) {
	  try {
	    var body = options.join(',');
	    res.set('Allow', body);
	    res.send(body);
	  } catch (err) {
	    next(err);
	  }
	}

	// wrap a function
	function wrap(old, fn) {
	  return function proxy() {
	    var args = new Array(arguments.length + 1);

	    args[0] = old;
	    for (var i = 0, len = arguments.length; i < len; i++) {
	      args[i + 1] = arguments[i];
	    }

	    fn.apply(this, args);
	  };
	}


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var debug = __webpack_require__(413)('express:router:route');
	var flatten = __webpack_require__(442);
	var Layer = __webpack_require__(443);
	var methods = __webpack_require__(445);

	/**
	 * Module variables.
	 * @private
	 */

	var slice = Array.prototype.slice;
	var toString = Object.prototype.toString;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = Route;

	/**
	 * Initialize `Route` with the given `path`,
	 *
	 * @param {String} path
	 * @public
	 */

	function Route(path) {
	  this.path = path;
	  this.stack = [];

	  debug('new %s', path);

	  // route handlers for various http methods
	  this.methods = {};
	}

	/**
	 * Determine if the route handles a given method.
	 * @private
	 */

	Route.prototype._handles_method = function _handles_method(method) {
	  if (this.methods._all) {
	    return true;
	  }

	  var name = method.toLowerCase();

	  if (name === 'head' && !this.methods['head']) {
	    name = 'get';
	  }

	  return Boolean(this.methods[name]);
	};

	/**
	 * @return {Array} supported HTTP methods
	 * @private
	 */

	Route.prototype._options = function _options() {
	  var methods = Object.keys(this.methods);

	  // append automatic head
	  if (this.methods.get && !this.methods.head) {
	    methods.push('head');
	  }

	  for (var i = 0; i < methods.length; i++) {
	    // make upper case
	    methods[i] = methods[i].toUpperCase();
	  }

	  return methods;
	};

	/**
	 * dispatch req, res into this route
	 * @private
	 */

	Route.prototype.dispatch = function dispatch(req, res, done) {
	  var idx = 0;
	  var stack = this.stack;
	  if (stack.length === 0) {
	    return done();
	  }

	  var method = req.method.toLowerCase();
	  if (method === 'head' && !this.methods['head']) {
	    method = 'get';
	  }

	  req.route = this;

	  next();

	  function next(err) {
	    if (err && err === 'route') {
	      return done();
	    }

	    var layer = stack[idx++];
	    if (!layer) {
	      return done(err);
	    }

	    if (layer.method && layer.method !== method) {
	      return next(err);
	    }

	    if (err) {
	      layer.handle_error(err, req, res, next);
	    } else {
	      layer.handle_request(req, res, next);
	    }
	  }
	};

	/**
	 * Add a handler for all HTTP verbs to this route.
	 *
	 * Behaves just like middleware and can respond or call `next`
	 * to continue processing.
	 *
	 * You can use multiple `.all` call to add multiple handlers.
	 *
	 *   function check_something(req, res, next){
	 *     next();
	 *   };
	 *
	 *   function validate_user(req, res, next){
	 *     next();
	 *   };
	 *
	 *   route
	 *   .all(validate_user)
	 *   .all(check_something)
	 *   .get(function(req, res, next){
	 *     res.send('hello world');
	 *   });
	 *
	 * @param {function} handler
	 * @return {Route} for chaining
	 * @api public
	 */

	Route.prototype.all = function all() {
	  var handles = flatten(slice.call(arguments));

	  for (var i = 0; i < handles.length; i++) {
	    var handle = handles[i];

	    if (typeof handle !== 'function') {
	      var type = toString.call(handle);
	      var msg = 'Route.all() requires callback functions but got a ' + type;
	      throw new TypeError(msg);
	    }

	    var layer = Layer('/', {}, handle);
	    layer.method = undefined;

	    this.methods._all = true;
	    this.stack.push(layer);
	  }

	  return this;
	};

	methods.forEach(function(method){
	  Route.prototype[method] = function(){
	    var handles = flatten(slice.call(arguments));

	    for (var i = 0; i < handles.length; i++) {
	      var handle = handles[i];

	      if (typeof handle !== 'function') {
	        var type = toString.call(handle);
	        var msg = 'Route.' + method + '() requires callback functions but got a ' + type;
	        throw new Error(msg);
	      }

	      debug('%s %s', method, this.path);

	      var layer = Layer('/', {}, handle);
	      layer.method = method;

	      this.methods[method] = true;
	      this.stack.push(layer);
	    }

	    return this;
	  };
	});


/***/ },
/* 442 */
/***/ function(module, exports) {

	'use strict'

	/**
	 * Expose `arrayFlatten`.
	 */
	module.exports = arrayFlatten

	/**
	 * Recursive flatten function with depth.
	 *
	 * @param  {Array}  array
	 * @param  {Array}  result
	 * @param  {Number} depth
	 * @return {Array}
	 */
	function flattenWithDepth (array, result, depth) {
	  for (var i = 0; i < array.length; i++) {
	    var value = array[i]

	    if (depth > 0 && Array.isArray(value)) {
	      flattenWithDepth(value, result, depth - 1)
	    } else {
	      result.push(value)
	    }
	  }

	  return result
	}

	/**
	 * Recursive flatten function. Omitting depth is slightly faster.
	 *
	 * @param  {Array} array
	 * @param  {Array} result
	 * @return {Array}
	 */
	function flattenForever (array, result) {
	  for (var i = 0; i < array.length; i++) {
	    var value = array[i]

	    if (Array.isArray(value)) {
	      flattenForever(value, result)
	    } else {
	      result.push(value)
	    }
	  }

	  return result
	}

	/**
	 * Flatten an array, with the ability to define a depth.
	 *
	 * @param  {Array}  array
	 * @param  {Number} depth
	 * @return {Array}
	 */
	function arrayFlatten (array, depth) {
	  if (depth == null) {
	    return flattenForever(array, [])
	  }

	  return flattenWithDepth(array, [], depth)
	}


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var pathRegexp = __webpack_require__(444);
	var debug = __webpack_require__(413)('express:router:layer');

	/**
	 * Module variables.
	 * @private
	 */

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = Layer;

	function Layer(path, options, fn) {
	  if (!(this instanceof Layer)) {
	    return new Layer(path, options, fn);
	  }

	  debug('new %s', path);
	  var opts = options || {};

	  this.handle = fn;
	  this.name = fn.name || '<anonymous>';
	  this.params = undefined;
	  this.path = undefined;
	  this.regexp = pathRegexp(path, this.keys = [], opts);

	  if (path === '/' && opts.end === false) {
	    this.regexp.fast_slash = true;
	  }
	}

	/**
	 * Handle the error for the layer.
	 *
	 * @param {Error} error
	 * @param {Request} req
	 * @param {Response} res
	 * @param {function} next
	 * @api private
	 */

	Layer.prototype.handle_error = function handle_error(error, req, res, next) {
	  var fn = this.handle;

	  if (fn.length !== 4) {
	    // not a standard error handler
	    return next(error);
	  }

	  try {
	    fn(error, req, res, next);
	  } catch (err) {
	    next(err);
	  }
	};

	/**
	 * Handle the request for the layer.
	 *
	 * @param {Request} req
	 * @param {Response} res
	 * @param {function} next
	 * @api private
	 */

	Layer.prototype.handle_request = function handle(req, res, next) {
	  var fn = this.handle;

	  if (fn.length > 3) {
	    // not a standard request handler
	    return next();
	  }

	  try {
	    fn(req, res, next);
	  } catch (err) {
	    next(err);
	  }
	};

	/**
	 * Check if this route matches `path`, if so
	 * populate `.params`.
	 *
	 * @param {String} path
	 * @return {Boolean}
	 * @api private
	 */

	Layer.prototype.match = function match(path) {
	  if (path == null) {
	    // no path, nothing matches
	    this.params = undefined;
	    this.path = undefined;
	    return false;
	  }

	  if (this.regexp.fast_slash) {
	    // fast path non-ending match for / (everything matches)
	    this.params = {};
	    this.path = '';
	    return true;
	  }

	  var m = this.regexp.exec(path);

	  if (!m) {
	    this.params = undefined;
	    this.path = undefined;
	    return false;
	  }

	  // store values
	  this.params = {};
	  this.path = m[0];

	  var keys = this.keys;
	  var params = this.params;

	  for (var i = 1; i < m.length; i++) {
	    var key = keys[i - 1];
	    var prop = key.name;
	    var val = decode_param(m[i]);

	    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {
	      params[prop] = val;
	    }
	  }

	  return true;
	};

	/**
	 * Decode param value.
	 *
	 * @param {string} val
	 * @return {string}
	 * @private
	 */

	function decode_param(val) {
	  if (typeof val !== 'string' || val.length === 0) {
	    return val;
	  }

	  try {
	    return decodeURIComponent(val);
	  } catch (err) {
	    if (err instanceof URIError) {
	      err.message = 'Failed to decode param \'' + val + '\'';
	      err.status = err.statusCode = 400;
	    }

	    throw err;
	  }
	}


/***/ },
/* 444 */
/***/ function(module, exports) {

	/**
	 * Expose `pathtoRegexp`.
	 */

	module.exports = pathtoRegexp;

	/**
	 * Match matching groups in a regular expression.
	 */
	var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

	/**
	 * Normalize the given path string,
	 * returning a regular expression.
	 *
	 * An empty array should be passed,
	 * which will contain the placeholder
	 * key names. For example "/user/:id" will
	 * then contain ["id"].
	 *
	 * @param  {String|RegExp|Array} path
	 * @param  {Array} keys
	 * @param  {Object} options
	 * @return {RegExp}
	 * @api private
	 */

	function pathtoRegexp(path, keys, options) {
	  options = options || {};
	  keys = keys || [];
	  var strict = options.strict;
	  var end = options.end !== false;
	  var flags = options.sensitive ? '' : 'i';
	  var extraOffset = 0;
	  var keysOffset = keys.length;
	  var i = 0;
	  var name = 0;
	  var m;

	  if (path instanceof RegExp) {
	    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
	      keys.push({
	        name: name++,
	        optional: false,
	        offset: m.index
	      });
	    }

	    return path;
	  }

	  if (Array.isArray(path)) {
	    // Map array parts into regexps and return their source. We also pass
	    // the same keys and options instance into every generation to get
	    // consistent matching groups before we join the sources together.
	    path = path.map(function (value) {
	      return pathtoRegexp(value, keys, options).source;
	    });

	    return new RegExp('(?:' + path.join('|') + ')', flags);
	  }

	  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
	    .replace(/\/\(/g, '/(?:')
	    .replace(/([\/\.])/g, '\\$1')
	    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
	      slash = slash || '';
	      format = format || '';
	      capture = capture || '([^\\/' + format + ']+?)';
	      optional = optional || '';

	      keys.push({
	        name: key,
	        optional: !!optional,
	        offset: offset + extraOffset
	      });

	      var result = ''
	        + (optional ? '' : slash)
	        + '(?:'
	        + format + (optional ? slash : '') + capture
	        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
	        + ')'
	        + optional;

	      extraOffset += result.length - match.length;

	      return result;
	    })
	    .replace(/\*/g, function (star, index) {
	      var len = keys.length

	      while (len-- > keysOffset && keys[len].offset > index) {
	        keys[len].offset += 3; // Replacement length minus asterisk length.
	      }

	      return '(.*)';
	    });

	  // This is a workaround for handling unnamed matching groups.
	  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
	    var escapeCount = 0;
	    var index = m.index;

	    while (path.charAt(--index) === '\\') {
	      escapeCount++;
	    }

	    // It's possible to escape the bracket.
	    if (escapeCount % 2 === 1) {
	      continue;
	    }

	    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
	      keys.splice(keysOffset + i, 0, {
	        name: name++, // Unnamed matching groups must be consistently linear.
	        optional: false,
	        offset: m.index
	      });
	    }

	    i++;
	  }

	  // If the path is non-ending, match until the end or a slash.
	  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

	  return new RegExp(path, flags);
	};


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * methods
	 * Copyright(c) 2013-2014 TJ Holowaychuk
	 * Copyright(c) 2015-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var http = __webpack_require__(326);

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = getCurrentNodeMethods() || getBasicNodeMethods();

	/**
	 * Get the current Node.js methods.
	 * @private
	 */

	function getCurrentNodeMethods() {
	  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
	    return method.toLowerCase();
	  });
	}

	/**
	 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
	 * @private
	 */

	function getBasicNodeMethods() {
	  return [
	    'get',
	    'post',
	    'put',
	    'head',
	    'delete',
	    'options',
	    'trace',
	    'copy',
	    'lock',
	    'mkcol',
	    'move',
	    'purge',
	    'propfind',
	    'proppatch',
	    'unlock',
	    'report',
	    'mkactivity',
	    'checkout',
	    'merge',
	    'm-search',
	    'notify',
	    'subscribe',
	    'unsubscribe',
	    'patch',
	    'search',
	    'connect'
	  ];
	}


/***/ },
/* 446 */
/***/ function(module, exports) {

	/**
	 * Merge object b with object a.
	 *
	 *     var a = { foo: 'bar' }
	 *       , b = { bar: 'baz' };
	 *
	 *     merge(a, b);
	 *     // => { foo: 'bar', bar: 'baz' }
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object}
	 * @api public
	 */

	exports = module.exports = function(a, b){
	  if (a && b) {
	    for (var key in b) {
	      a[key] = b[key];
	    }
	  }
	  return a;
	};


/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * depd
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 */

	var callSiteToString = __webpack_require__(448).callSiteToString
	var eventListenerCount = __webpack_require__(448).eventListenerCount
	var relative = __webpack_require__(389).relative

	/**
	 * Module exports.
	 */

	module.exports = depd

	/**
	 * Get the path to base files on.
	 */

	var basePath = process.cwd()

	/**
	 * Determine if namespace is contained in the string.
	 */

	function containsNamespace(str, namespace) {
	  var val = str.split(/[ ,]+/)

	  namespace = String(namespace).toLowerCase()

	  for (var i = 0 ; i < val.length; i++) {
	    if (!(str = val[i])) continue;

	    // namespace contained
	    if (str === '*' || str.toLowerCase() === namespace) {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * Convert a data descriptor to accessor descriptor.
	 */

	function convertDataDescriptorToAccessor(obj, prop, message) {
	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)
	  var value = descriptor.value

	  descriptor.get = function getter() { return value }

	  if (descriptor.writable) {
	    descriptor.set = function setter(val) { return value = val }
	  }

	  delete descriptor.value
	  delete descriptor.writable

	  Object.defineProperty(obj, prop, descriptor)

	  return descriptor
	}

	/**
	 * Create arguments string to keep arity.
	 */

	function createArgumentsString(arity) {
	  var str = ''

	  for (var i = 0; i < arity; i++) {
	    str += ', arg' + i
	  }

	  return str.substr(2)
	}

	/**
	 * Create stack string from stack.
	 */

	function createStackString(stack) {
	  var str = this.name + ': ' + this.namespace

	  if (this.message) {
	    str += ' deprecated ' + this.message
	  }

	  for (var i = 0; i < stack.length; i++) {
	    str += '\n    at ' + callSiteToString(stack[i])
	  }

	  return str
	}

	/**
	 * Create deprecate for namespace in caller.
	 */

	function depd(namespace) {
	  if (!namespace) {
	    throw new TypeError('argument namespace is required')
	  }

	  var stack = getStack()
	  var site = callSiteLocation(stack[1])
	  var file = site[0]

	  function deprecate(message) {
	    // call to self as log
	    log.call(deprecate, message)
	  }

	  deprecate._file = file
	  deprecate._ignored = isignored(namespace)
	  deprecate._namespace = namespace
	  deprecate._traced = istraced(namespace)
	  deprecate._warned = Object.create(null)

	  deprecate.function = wrapfunction
	  deprecate.property = wrapproperty

	  return deprecate
	}

	/**
	 * Determine if namespace is ignored.
	 */

	function isignored(namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.noDeprecation) {
	    // --no-deprecation support
	    return true
	  }

	  var str = process.env.NO_DEPRECATION || ''

	  // namespace ignored
	  return containsNamespace(str, namespace)
	}

	/**
	 * Determine if namespace is traced.
	 */

	function istraced(namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.traceDeprecation) {
	    // --trace-deprecation support
	    return true
	  }

	  var str = process.env.TRACE_DEPRECATION || ''

	  // namespace traced
	  return containsNamespace(str, namespace)
	}

	/**
	 * Display deprecation message.
	 */

	function log(message, site) {
	  var haslisteners = eventListenerCount(process, 'deprecation') !== 0

	  // abort early if no destination
	  if (!haslisteners && this._ignored) {
	    return
	  }

	  var caller
	  var callFile
	  var callSite
	  var i = 0
	  var seen = false
	  var stack = getStack()
	  var file = this._file

	  if (site) {
	    // provided site
	    callSite = callSiteLocation(stack[1])
	    callSite.name = site.name
	    file = callSite[0]
	  } else {
	    // get call site
	    i = 2
	    site = callSiteLocation(stack[i])
	    callSite = site
	  }

	  // get caller of deprecated thing in relation to file
	  for (; i < stack.length; i++) {
	    caller = callSiteLocation(stack[i])
	    callFile = caller[0]

	    if (callFile === file) {
	      seen = true
	    } else if (callFile === this._file) {
	      file = this._file
	    } else if (seen) {
	      break
	    }
	  }

	  var key = caller
	    ? site.join(':') + '__' + caller.join(':')
	    : undefined

	  if (key !== undefined && key in this._warned) {
	    // already warned
	    return
	  }

	  this._warned[key] = true

	  // generate automatic message from call site
	  if (!message) {
	    message = callSite === site || !callSite.name
	      ? defaultMessage(site)
	      : defaultMessage(callSite)
	  }

	  // emit deprecation if listeners exist
	  if (haslisteners) {
	    var err = DeprecationError(this._namespace, message, stack.slice(i))
	    process.emit('deprecation', err)
	    return
	  }

	  // format and write message
	  var format = process.stderr.isTTY
	    ? formatColor
	    : formatPlain
	  var msg = format.call(this, message, caller, stack.slice(i))
	  process.stderr.write(msg + '\n', 'utf8')

	  return
	}

	/**
	 * Get call site location as array.
	 */

	function callSiteLocation(callSite) {
	  var file = callSite.getFileName() || '<anonymous>'
	  var line = callSite.getLineNumber()
	  var colm = callSite.getColumnNumber()

	  if (callSite.isEval()) {
	    file = callSite.getEvalOrigin() + ', ' + file
	  }

	  var site = [file, line, colm]

	  site.callSite = callSite
	  site.name = callSite.getFunctionName()

	  return site
	}

	/**
	 * Generate a default message from the site.
	 */

	function defaultMessage(site) {
	  var callSite = site.callSite
	  var funcName = site.name

	  // make useful anonymous name
	  if (!funcName) {
	    funcName = '<anonymous@' + formatLocation(site) + '>'
	  }

	  var context = callSite.getThis()
	  var typeName = context && callSite.getTypeName()

	  // ignore useless type name
	  if (typeName === 'Object') {
	    typeName = undefined
	  }

	  // make useful type name
	  if (typeName === 'Function') {
	    typeName = context.name || typeName
	  }

	  return typeName && callSite.getMethodName()
	    ? typeName + '.' + funcName
	    : funcName
	}

	/**
	 * Format deprecation message without color.
	 */

	function formatPlain(msg, caller, stack) {
	  var timestamp = new Date().toUTCString()

	  var formatted = timestamp
	    + ' ' + this._namespace
	    + ' deprecated ' + msg

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    at ' + callSiteToString(stack[i])
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' at ' + formatLocation(caller)
	  }

	  return formatted
	}

	/**
	 * Format deprecation message with color.
	 */

	function formatColor(msg, caller, stack) {
	  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' // bold cyan
	    + ' \x1b[33;1mdeprecated\x1b[22;39m' // bold yellow
	    + ' \x1b[0m' + msg + '\x1b[39m' // reset

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    \x1b[36mat ' + callSiteToString(stack[i]) + '\x1b[39m' // cyan
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m' // cyan
	  }

	  return formatted
	}

	/**
	 * Format call site location.
	 */

	function formatLocation(callSite) {
	  return relative(basePath, callSite[0])
	    + ':' + callSite[1]
	    + ':' + callSite[2]
	}

	/**
	 * Get the stack as array of call sites.
	 */

	function getStack() {
	  var limit = Error.stackTraceLimit
	  var obj = {}
	  var prep = Error.prepareStackTrace

	  Error.prepareStackTrace = prepareObjectStackTrace
	  Error.stackTraceLimit = Math.max(10, limit)

	  // capture the stack
	  Error.captureStackTrace(obj)

	  // slice this function off the top
	  var stack = obj.stack.slice(1)

	  Error.prepareStackTrace = prep
	  Error.stackTraceLimit = limit

	  return stack
	}

	/**
	 * Capture call site stack from v8.
	 */

	function prepareObjectStackTrace(obj, stack) {
	  return stack
	}

	/**
	 * Return a wrapped function in a deprecation message.
	 */

	function wrapfunction(fn, message) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('argument fn must be a function')
	  }

	  var args = createArgumentsString(fn.length)
	  var deprecate = this
	  var stack = getStack()
	  var site = callSiteLocation(stack[1])

	  site.name = fn.name

	  var deprecatedfn = eval('(function (' + args + ') {\n'
	    + '"use strict"\n'
	    + 'log.call(deprecate, message, site)\n'
	    + 'return fn.apply(this, arguments)\n'
	    + '})')

	  return deprecatedfn
	}

	/**
	 * Wrap property in a deprecation message.
	 */

	function wrapproperty(obj, prop, message) {
	  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
	    throw new TypeError('argument obj must be object')
	  }

	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)

	  if (!descriptor) {
	    throw new TypeError('must call property on owner object')
	  }

	  if (!descriptor.configurable) {
	    throw new TypeError('property must be configurable')
	  }

	  var deprecate = this
	  var stack = getStack()
	  var site = callSiteLocation(stack[1])

	  // set site name
	  site.name = prop

	  // convert data descriptor
	  if ('value' in descriptor) {
	    descriptor = convertDataDescriptorToAccessor(obj, prop, message)
	  }

	  var get = descriptor.get
	  var set = descriptor.set

	  // wrap getter
	  if (typeof get === 'function') {
	    descriptor.get = function getter() {
	      log.call(deprecate, message, site)
	      return get.apply(this, arguments)
	    }
	  }

	  // wrap setter
	  if (typeof set === 'function') {
	    descriptor.set = function setter() {
	      log.call(deprecate, message, site)
	      return set.apply(this, arguments)
	    }
	  }

	  Object.defineProperty(obj, prop, descriptor)
	}

	/**
	 * Create DeprecationError for deprecation
	 */

	function DeprecationError(namespace, message, stack) {
	  var error = new Error()
	  var stackString

	  Object.defineProperty(error, 'constructor', {
	    value: DeprecationError
	  })

	  Object.defineProperty(error, 'message', {
	    configurable: true,
	    enumerable: false,
	    value: message,
	    writable: true
	  })

	  Object.defineProperty(error, 'name', {
	    enumerable: false,
	    configurable: true,
	    value: 'DeprecationError',
	    writable: true
	  })

	  Object.defineProperty(error, 'namespace', {
	    configurable: true,
	    enumerable: false,
	    value: namespace,
	    writable: true
	  })

	  Object.defineProperty(error, 'stack', {
	    configurable: true,
	    enumerable: false,
	    get: function () {
	      if (stackString !== undefined) {
	        return stackString
	      }

	      // prepare stack trace
	      return stackString = createStackString.call(this, stack)
	    },
	    set: function setter(val) {
	      stackString = val
	    }
	  })

	  return error
	}


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * depd
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var Buffer = __webpack_require__(449)
	var EventEmitter = __webpack_require__(374).EventEmitter

	/**
	 * Module exports.
	 * @public
	 */

	lazyProperty(module.exports, 'bufferConcat', function bufferConcat() {
	  return Buffer.concat || __webpack_require__(450)
	})

	lazyProperty(module.exports, 'callSiteToString', function callSiteToString() {
	  var limit = Error.stackTraceLimit
	  var obj = {}
	  var prep = Error.prepareStackTrace

	  function prepareObjectStackTrace(obj, stack) {
	    return stack
	  }

	  Error.prepareStackTrace = prepareObjectStackTrace
	  Error.stackTraceLimit = 2

	  // capture the stack
	  Error.captureStackTrace(obj)

	  // slice the stack
	  var stack = obj.stack.slice()

	  Error.prepareStackTrace = prep
	  Error.stackTraceLimit = limit

	  return stack[0].toString ? toString : __webpack_require__(451)
	})

	lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount() {
	  return EventEmitter.listenerCount || __webpack_require__(452)
	})

	/**
	 * Define a lazy property.
	 */

	function lazyProperty(obj, prop, getter) {
	  function get() {
	    var val = getter()

	    Object.defineProperty(obj, prop, {
	      configurable: true,
	      enumerable: true,
	      value: val
	    })

	    return val
	  }

	  Object.defineProperty(obj, prop, {
	    configurable: true,
	    enumerable: true,
	    get: get
	  })
	}

	/**
	 * Call toString() on the obj
	 */

	function toString(obj) {
	  return obj.toString()
	}


/***/ },
/* 449 */
/***/ function(module, exports) {

	module.exports = require("buffer");

/***/ },
/* 450 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 */

	module.exports = bufferConcat

	/**
	 * Concatenate an array of Buffers.
	 */

	function bufferConcat(bufs) {
	  var length = 0

	  for (var i = 0, len = bufs.length; i < len; i++) {
	    length += bufs[i].length
	  }

	  var buf = new Buffer(length)
	  var pos = 0

	  for (var i = 0, len = bufs.length; i < len; i++) {
	    bufs[i].copy(buf, pos)
	    pos += bufs[i].length
	  }

	  return buf
	}


/***/ },
/* 451 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 */

	module.exports = callSiteToString

	/**
	 * Format a CallSite file location to a string.
	 */

	function callSiteFileLocation(callSite) {
	  var fileName
	  var fileLocation = ''

	  if (callSite.isNative()) {
	    fileLocation = 'native'
	  } else if (callSite.isEval()) {
	    fileName = callSite.getScriptNameOrSourceURL()
	    if (!fileName) {
	      fileLocation = callSite.getEvalOrigin()
	    }
	  } else {
	    fileName = callSite.getFileName()
	  }

	  if (fileName) {
	    fileLocation += fileName

	    var lineNumber = callSite.getLineNumber()
	    if (lineNumber != null) {
	      fileLocation += ':' + lineNumber

	      var columnNumber = callSite.getColumnNumber()
	      if (columnNumber) {
	        fileLocation += ':' + columnNumber
	      }
	    }
	  }

	  return fileLocation || 'unknown source'
	}

	/**
	 * Format a CallSite to a string.
	 */

	function callSiteToString(callSite) {
	  var addSuffix = true
	  var fileLocation = callSiteFileLocation(callSite)
	  var functionName = callSite.getFunctionName()
	  var isConstructor = callSite.isConstructor()
	  var isMethodCall = !(callSite.isToplevel() || isConstructor)
	  var line = ''

	  if (isMethodCall) {
	    var methodName = callSite.getMethodName()
	    var typeName = getConstructorName(callSite)

	    if (functionName) {
	      if (typeName && functionName.indexOf(typeName) !== 0) {
	        line += typeName + '.'
	      }

	      line += functionName

	      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
	        line += ' [as ' + methodName + ']'
	      }
	    } else {
	      line += typeName + '.' + (methodName || '<anonymous>')
	    }
	  } else if (isConstructor) {
	    line += 'new ' + (functionName || '<anonymous>')
	  } else if (functionName) {
	    line += functionName
	  } else {
	    addSuffix = false
	    line += fileLocation
	  }

	  if (addSuffix) {
	    line += ' (' + fileLocation + ')'
	  }

	  return line
	}

	/**
	 * Get constructor name of reviver.
	 */

	function getConstructorName(obj) {
	  var receiver = obj.receiver
	  return (receiver.constructor && receiver.constructor.name) || null
	}


/***/ },
/* 452 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = eventListenerCount

	/**
	 * Get the count of listeners on an event emitter of a specific type.
	 */

	function eventListenerCount(emitter, type) {
	  return emitter.listeners(type).length
	}


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * parseurl
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(324)
	var parse = url.parse
	var Url = url.Url

	/**
	 * Pattern for a simple path case.
	 * See: https://github.com/joyent/node/pull/7878
	 */

	var simplePathRegExp = /^(\/\/?(?!\/)[^\?#\s]*)(\?[^#\s]*)?$/

	/**
	 * Exports.
	 */

	module.exports = parseurl
	module.exports.original = originalurl

	/**
	 * Parse the `req` url with memoization.
	 *
	 * @param {ServerRequest} req
	 * @return {Object}
	 * @api public
	 */

	function parseurl(req) {
	  var url = req.url

	  if (url === undefined) {
	    // URL is undefined
	    return undefined
	  }

	  var parsed = req._parsedUrl

	  if (fresh(url, parsed)) {
	    // Return cached URL parse
	    return parsed
	  }

	  // Parse the URL
	  parsed = fastparse(url)
	  parsed._raw = url

	  return req._parsedUrl = parsed
	};

	/**
	 * Parse the `req` original url with fallback and memoization.
	 *
	 * @param {ServerRequest} req
	 * @return {Object}
	 * @api public
	 */

	function originalurl(req) {
	  var url = req.originalUrl

	  if (typeof url !== 'string') {
	    // Fallback
	    return parseurl(req)
	  }

	  var parsed = req._parsedOriginalUrl

	  if (fresh(url, parsed)) {
	    // Return cached URL parse
	    return parsed
	  }

	  // Parse the URL
	  parsed = fastparse(url)
	  parsed._raw = url

	  return req._parsedOriginalUrl = parsed
	};

	/**
	 * Parse the `str` url with fast-path short-cut.
	 *
	 * @param {string} str
	 * @return {Object}
	 * @api private
	 */

	function fastparse(str) {
	  // Try fast path regexp
	  // See: https://github.com/joyent/node/pull/7878
	  var simplePath = typeof str === 'string' && simplePathRegExp.exec(str)

	  // Construct simple URL
	  if (simplePath) {
	    var pathname = simplePath[1]
	    var search = simplePath[2] || null
	    var url = Url !== undefined
	      ? new Url()
	      : {}
	    url.path = str
	    url.href = str
	    url.pathname = pathname
	    url.search = search
	    url.query = search && search.substr(1)

	    return url
	  }

	  return parse(str)
	}

	/**
	 * Determine if parsed is still fresh for url.
	 *
	 * @param {string} url
	 * @param {object} parsedUrl
	 * @return {boolean}
	 * @api private
	 */

	function fresh(url, parsedUrl) {
	  return typeof parsedUrl === 'object'
	    && parsedUrl !== null
	    && (Url === undefined || parsedUrl instanceof Url)
	    && parsedUrl._raw === url
	}


/***/ },
/* 454 */
/***/ function(module, exports) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Initialization middleware, exposing the
	 * request and response to each other, as well
	 * as defaulting the X-Powered-By header field.
	 *
	 * @param {Function} app
	 * @return {Function}
	 * @api private
	 */

	exports.init = function(app){
	  return function expressInit(req, res, next){
	    if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');
	    req.res = res;
	    res.req = req;
	    req.next = next;

	    req.__proto__ = app.request;
	    res.__proto__ = app.response;

	    res.locals = res.locals || Object.create(null);

	    next();
	  };
	};



/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 */

	var parseUrl = __webpack_require__(453);
	var qs = __webpack_require__(456);

	/**
	 * @param {Object} options
	 * @return {Function}
	 * @api public
	 */

	module.exports = function query(options) {
	  var opts = Object.create(options || null);
	  var queryparse = qs.parse;

	  if (typeof options === 'function') {
	    queryparse = options;
	    opts = undefined;
	  }

	  if (opts !== undefined) {
	    if (opts.allowDots === undefined) {
	      opts.allowDots = false;
	    }

	    if (opts.allowPrototypes === undefined) {
	      opts.allowPrototypes = true;
	    }
	  }

	  return function query(req, res, next){
	    if (!req.query) {
	      var val = parseUrl(req).query;
	      req.query = queryparse(val, opts);
	    }

	    next();
	  };
	};


/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(457);
	var Parse = __webpack_require__(459);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(458);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {

	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {

	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {

	            return prefix;
	        }
	    },
	    strictNullHandling: false
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, filter) {

	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    }
	    else if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        if (strictNullHandling) {
	            return Utils.encode(prefix);
	        }

	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Array.isArray(filter) ? filter : Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];

	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, filter));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, filter));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
	    var objKeys;
	    var filter;
	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    }
	    else if (Array.isArray(options.filter)) {
	        objKeys = filter = options.filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, filter));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 458 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};
	internals.hexTable = new Array(256);
	for (var h = 0; h < 256; ++h) {
	    internals.hexTable[h] = '%' + ((h < 16 ? '0' : '') + h.toString(16)).toUpperCase();
	}


	exports.arrayToObject = function (source, options) {

	    var obj = options.plainObjects ? Object.create(null) : {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source, options) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else if (typeof target === 'object') {
	            target[source] = true;
	        }
	        else {
	            target = [target, source];
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target, options);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!Object.prototype.hasOwnProperty.call(target, key)) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value, options);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};

	exports.encode = function (str) {

	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    if (typeof str !== 'string') {
	        str = '' + str;
	    }

	    var out = '';
	    for (var i = 0, il = str.length; i < il; ++i) {
	        var c = str.charCodeAt(i);

	        if (c === 0x2D || // -
	            c === 0x2E || // .
	            c === 0x5F || // _
	            c === 0x7E || // ~
	            (c >= 0x30 && c <= 0x39) || // 0-9
	            (c >= 0x41 && c <= 0x5A) || // a-z
	            (c >= 0x61 && c <= 0x7A)) { // A-Z

	            out += str[i];
	            continue;
	        }

	        if (c < 0x80) {
	            out += internals.hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
	            continue;
	        }

	        ++i;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));
	        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];
	    }

	    return out;
	};

	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {

	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	              obj.constructor.isBuffer &&
	              obj.constructor.isBuffer(obj));
	};


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(458);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000,
	    strictNullHandling: false,
	    plainObjects: false,
	    allowPrototypes: false
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';

	            if (options.strictNullHandling) {
	                obj[Utils.decode(part)] = null;
	            }
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (!Object.prototype.hasOwnProperty.call(obj, key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj;
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        obj = options.plainObjects ? Object.create(null) : {};
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            (options.parseArrays &&
	             index <= options.arrayLimit)) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // Transform dot notation to bracket notation

	    if (options.allowDots) {
	        key = key.replace(/\.([^\.\[]+)/g, '[$1]');
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects &&
	            Object.prototype.hasOwnProperty(segment[1])) {

	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!options.plainObjects &&
	            Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {

	            if (!options.allowPrototypes) {
	                continue;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.allowDots = options.allowDots !== false;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj, options);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var debug = __webpack_require__(413)('express:view');
	var path = __webpack_require__(389);
	var fs = __webpack_require__(350);
	var utils = __webpack_require__(461);

	/**
	 * Module variables.
	 * @private
	 */

	var dirname = path.dirname;
	var basename = path.basename;
	var extname = path.extname;
	var join = path.join;
	var resolve = path.resolve;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = View;

	/**
	 * Initialize a new `View` with the given `name`.
	 *
	 * Options:
	 *
	 *   - `defaultEngine` the default template engine name
	 *   - `engines` template engine require() cache
	 *   - `root` root path for view lookup
	 *
	 * @param {string} name
	 * @param {object} options
	 * @public
	 */

	function View(name, options) {
	  var opts = options || {};

	  this.defaultEngine = opts.defaultEngine;
	  this.ext = extname(name);
	  this.name = name;
	  this.root = opts.root;

	  if (!this.ext && !this.defaultEngine) {
	    throw new Error('No default engine was specified and no extension was provided.');
	  }

	  var fileName = name;

	  if (!this.ext) {
	    // get extension from default engine name
	    this.ext = this.defaultEngine[0] !== '.'
	      ? '.' + this.defaultEngine
	      : this.defaultEngine;

	    fileName += this.ext;
	  }

	  if (!opts.engines[this.ext]) {
	    // load engine
	    opts.engines[this.ext] = __webpack_require__(478)(this.ext.substr(1)).__express;
	  }

	  // store loaded engine
	  this.engine = opts.engines[this.ext];

	  // lookup path
	  this.path = this.lookup(fileName);
	}

	/**
	 * Lookup view by the given `name`
	 *
	 * @param {string} name
	 * @private
	 */

	View.prototype.lookup = function lookup(name) {
	  var path;
	  var roots = [].concat(this.root);

	  debug('lookup "%s"', name);

	  for (var i = 0; i < roots.length && !path; i++) {
	    var root = roots[i];

	    // resolve the path
	    var loc = resolve(root, name);
	    var dir = dirname(loc);
	    var file = basename(loc);

	    // resolve the file
	    path = this.resolve(dir, file);
	  }

	  return path;
	};

	/**
	 * Render with the given options.
	 *
	 * @param {object} options
	 * @param {function} callback
	 * @private
	 */

	View.prototype.render = function render(options, callback) {
	  debug('render "%s"', this.path);
	  this.engine(this.path, options, callback);
	};

	/**
	 * Resolve the file within the given directory.
	 *
	 * @param {string} dir
	 * @param {string} file
	 * @private
	 */

	View.prototype.resolve = function resolve(dir, file) {
	  var ext = this.ext;

	  // <path>.<ext>
	  var path = join(dir, file);
	  var stat = tryStat(path);

	  if (stat && stat.isFile()) {
	    return path;
	  }

	  // <path>/index.<ext>
	  path = join(dir, basename(file, ext), 'index' + ext);
	  stat = tryStat(path);

	  if (stat && stat.isFile()) {
	    return path;
	  }
	};

	/**
	 * Return a stat, maybe.
	 *
	 * @param {string} path
	 * @return {fs.Stats}
	 * @private
	 */

	function tryStat(path) {
	  debug('stat "%s"', path);

	  try {
	    return fs.statSync(path);
	  } catch (e) {
	    return undefined;
	  }
	}


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @api private
	 */

	var contentDisposition = __webpack_require__(462);
	var contentType = __webpack_require__(463);
	var deprecate = __webpack_require__(447)('express');
	var flatten = __webpack_require__(442);
	var mime = __webpack_require__(464).mime;
	var basename = __webpack_require__(389).basename;
	var etag = __webpack_require__(474);
	var proxyaddr = __webpack_require__(475);
	var qs = __webpack_require__(456);
	var querystring = __webpack_require__(477);

	/**
	 * Return strong ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */

	exports.etag = function (body, encoding) {
	  var buf = !Buffer.isBuffer(body)
	    ? new Buffer(body, encoding)
	    : body;

	  return etag(buf, {weak: false});
	};

	/**
	 * Return weak ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */

	exports.wetag = function wetag(body, encoding){
	  var buf = !Buffer.isBuffer(body)
	    ? new Buffer(body, encoding)
	    : body;

	  return etag(buf, {weak: true});
	};

	/**
	 * Check if `path` looks absolute.
	 *
	 * @param {String} path
	 * @return {Boolean}
	 * @api private
	 */

	exports.isAbsolute = function(path){
	  if ('/' == path[0]) return true;
	  if (':' == path[1] && '\\' == path[2]) return true;
	  if ('\\\\' == path.substring(0, 2)) return true; // Microsoft Azure absolute path
	};

	/**
	 * Flatten the given `arr`.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	exports.flatten = deprecate.function(flatten,
	  'utils.flatten: use array-flatten npm module instead');

	/**
	 * Normalize the given `type`, for example "html" becomes "text/html".
	 *
	 * @param {String} type
	 * @return {Object}
	 * @api private
	 */

	exports.normalizeType = function(type){
	  return ~type.indexOf('/')
	    ? acceptParams(type)
	    : { value: mime.lookup(type), params: {} };
	};

	/**
	 * Normalize `types`, for example "html" becomes "text/html".
	 *
	 * @param {Array} types
	 * @return {Array}
	 * @api private
	 */

	exports.normalizeTypes = function(types){
	  var ret = [];

	  for (var i = 0; i < types.length; ++i) {
	    ret.push(exports.normalizeType(types[i]));
	  }

	  return ret;
	};

	/**
	 * Generate Content-Disposition header appropriate for the filename.
	 * non-ascii filenames are urlencoded and a filename* parameter is added
	 *
	 * @param {String} filename
	 * @return {String}
	 * @api private
	 */

	exports.contentDisposition = deprecate.function(contentDisposition,
	  'utils.contentDisposition: use content-disposition npm module instead');

	/**
	 * Parse accept params `str` returning an
	 * object with `.value`, `.quality` and `.params`.
	 * also includes `.originalIndex` for stable sorting
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function acceptParams(str, index) {
	  var parts = str.split(/ *; */);
	  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };

	  for (var i = 1; i < parts.length; ++i) {
	    var pms = parts[i].split(/ *= */);
	    if ('q' == pms[0]) {
	      ret.quality = parseFloat(pms[1]);
	    } else {
	      ret.params[pms[0]] = pms[1];
	    }
	  }

	  return ret;
	}

	/**
	 * Compile "etag" value to function.
	 *
	 * @param  {Boolean|String|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileETag = function(val) {
	  var fn;

	  if (typeof val === 'function') {
	    return val;
	  }

	  switch (val) {
	    case true:
	      fn = exports.wetag;
	      break;
	    case false:
	      break;
	    case 'strong':
	      fn = exports.etag;
	      break;
	    case 'weak':
	      fn = exports.wetag;
	      break;
	    default:
	      throw new TypeError('unknown value for etag function: ' + val);
	  }

	  return fn;
	}

	/**
	 * Compile "query parser" value to function.
	 *
	 * @param  {String|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileQueryParser = function compileQueryParser(val) {
	  var fn;

	  if (typeof val === 'function') {
	    return val;
	  }

	  switch (val) {
	    case true:
	      fn = querystring.parse;
	      break;
	    case false:
	      fn = newObject;
	      break;
	    case 'extended':
	      fn = parseExtendedQueryString;
	      break;
	    case 'simple':
	      fn = querystring.parse;
	      break;
	    default:
	      throw new TypeError('unknown value for query parser function: ' + val);
	  }

	  return fn;
	}

	/**
	 * Compile "proxy trust" value to function.
	 *
	 * @param  {Boolean|String|Number|Array|Function} val
	 * @return {Function}
	 * @api private
	 */

	exports.compileTrust = function(val) {
	  if (typeof val === 'function') return val;

	  if (val === true) {
	    // Support plain true/false
	    return function(){ return true };
	  }

	  if (typeof val === 'number') {
	    // Support trusting hop count
	    return function(a, i){ return i < val };
	  }

	  if (typeof val === 'string') {
	    // Support comma-separated values
	    val = val.split(/ *, */);
	  }

	  return proxyaddr.compile(val || []);
	}

	/**
	 * Set the charset in a given Content-Type string.
	 *
	 * @param {String} type
	 * @param {String} charset
	 * @return {String}
	 * @api private
	 */

	exports.setCharset = function setCharset(type, charset) {
	  if (!type || !charset) {
	    return type;
	  }

	  // parse type
	  var parsed = contentType.parse(type);

	  // set charset
	  parsed.parameters.charset = charset;

	  // format type
	  return contentType.format(parsed);
	};

	/**
	 * Parse an extended query string with qs.
	 *
	 * @return {Object}
	 * @private
	 */

	function parseExtendedQueryString(str) {
	  return qs.parse(str, {
	    allowDots: false,
	    allowPrototypes: true
	  });
	}

	/**
	 * Return new empty object.
	 *
	 * @return {Object}
	 * @api private
	 */

	function newObject() {
	  return {};
	}


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * content-disposition
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 */

	module.exports = contentDisposition
	module.exports.parse = parse

	/**
	 * Module dependencies.
	 */

	var basename = __webpack_require__(389).basename

	/**
	 * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including "%")
	 */

	var encodeUriAttrCharRegExp = /[\x00-\x20"'\(\)*,\/:;<=>?@\[\\\]\{\}\x7f]/g

	/**
	 * RegExp to match percent encoding escape.
	 */

	var hexEscapeRegExp = /%[0-9A-Fa-f]{2}/
	var hexEscapeReplaceRegExp = /%([0-9A-Fa-f]{2})/g

	/**
	 * RegExp to match non-latin1 characters.
	 */

	var nonLatin1RegExp = /[^\x20-\x7e\xa0-\xff]/g

	/**
	 * RegExp to match quoted-pair in RFC 2616
	 *
	 * quoted-pair = "\" CHAR
	 * CHAR        = <any US-ASCII character (octets 0 - 127)>
	 */

	var qescRegExp = /\\([\u0000-\u007f])/g;

	/**
	 * RegExp to match chars that must be quoted-pair in RFC 2616
	 */

	var quoteRegExp = /([\\"])/g

	/**
	 * RegExp for various RFC 2616 grammar
	 *
	 * parameter     = token "=" ( token | quoted-string )
	 * token         = 1*<any CHAR except CTLs or separators>
	 * separators    = "(" | ")" | "<" | ">" | "@"
	 *               | "," | ";" | ":" | "\" | <">
	 *               | "/" | "[" | "]" | "?" | "="
	 *               | "{" | "}" | SP | HT
	 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
	 * qdtext        = <any TEXT except <">>
	 * quoted-pair   = "\" CHAR
	 * CHAR          = <any US-ASCII character (octets 0 - 127)>
	 * TEXT          = <any OCTET except CTLs, but including LWS>
	 * LWS           = [CRLF] 1*( SP | HT )
	 * CRLF          = CR LF
	 * CR            = <US-ASCII CR, carriage return (13)>
	 * LF            = <US-ASCII LF, linefeed (10)>
	 * SP            = <US-ASCII SP, space (32)>
	 * HT            = <US-ASCII HT, horizontal-tab (9)>
	 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
	 * OCTET         = <any 8-bit sequence of data>
	 */

	var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g
	var textRegExp = /^[\x20-\x7e\x80-\xff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/

	/**
	 * RegExp for various RFC 5987 grammar
	 *
	 * ext-value     = charset  "'" [ language ] "'" value-chars
	 * charset       = "UTF-8" / "ISO-8859-1" / mime-charset
	 * mime-charset  = 1*mime-charsetc
	 * mime-charsetc = ALPHA / DIGIT
	 *               / "!" / "#" / "$" / "%" / "&"
	 *               / "+" / "-" / "^" / "_" / "`"
	 *               / "{" / "}" / "~"
	 * language      = ( 2*3ALPHA [ extlang ] )
	 *               / 4ALPHA
	 *               / 5*8ALPHA
	 * extlang       = *3( "-" 3ALPHA )
	 * value-chars   = *( pct-encoded / attr-char )
	 * pct-encoded   = "%" HEXDIG HEXDIG
	 * attr-char     = ALPHA / DIGIT
	 *               / "!" / "#" / "$" / "&" / "+" / "-" / "."
	 *               / "^" / "_" / "`" / "|" / "~"
	 */

	var extValueRegExp = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+\-\.^_`|~])+)$/

	/**
	 * RegExp for various RFC 6266 grammar
	 *
	 * disposition-type = "inline" | "attachment" | disp-ext-type
	 * disp-ext-type    = token
	 * disposition-parm = filename-parm | disp-ext-parm
	 * filename-parm    = "filename" "=" value
	 *                  | "filename*" "=" ext-value
	 * disp-ext-parm    = token "=" value
	 *                  | ext-token "=" ext-value
	 * ext-token        = <the characters in token, followed by "*">
	 */

	var dispositionTypeRegExp = /^([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *(?:$|;)/

	/**
	 * Create an attachment Content-Disposition header.
	 *
	 * @param {string} [filename]
	 * @param {object} [options]
	 * @param {string} [options.type=attachment]
	 * @param {string|boolean} [options.fallback=true]
	 * @return {string}
	 * @api public
	 */

	function contentDisposition(filename, options) {
	  var opts = options || {}

	  // get type
	  var type = opts.type || 'attachment'

	  // get parameters
	  var params = createparams(filename, opts.fallback)

	  // format into string
	  return format(new ContentDisposition(type, params))
	}

	/**
	 * Create parameters object from filename and fallback.
	 *
	 * @param {string} [filename]
	 * @param {string|boolean} [fallback=true]
	 * @return {object}
	 * @api private
	 */

	function createparams(filename, fallback) {
	  if (filename === undefined) {
	    return
	  }

	  var params = {}

	  if (typeof filename !== 'string') {
	    throw new TypeError('filename must be a string')
	  }

	  // fallback defaults to true
	  if (fallback === undefined) {
	    fallback = true
	  }

	  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
	    throw new TypeError('fallback must be a string or boolean')
	  }

	  if (typeof fallback === 'string' && nonLatin1RegExp.test(fallback)) {
	    throw new TypeError('fallback must be ISO-8859-1 string')
	  }

	  // restrict to file base name
	  var name = basename(filename)

	  // determine if name is suitable for quoted string
	  var isQuotedString = textRegExp.test(name)

	  // generate fallback name
	  var fallbackName = typeof fallback !== 'string'
	    ? fallback && getlatin1(name)
	    : basename(fallback)
	  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name

	  // set extended filename parameter
	  if (hasFallback || !isQuotedString || hexEscapeRegExp.test(name)) {
	    params['filename*'] = name
	  }

	  // set filename parameter
	  if (isQuotedString || hasFallback) {
	    params.filename = hasFallback
	      ? fallbackName
	      : name
	  }

	  return params
	}

	/**
	 * Format object to Content-Disposition header.
	 *
	 * @param {object} obj
	 * @param {string} obj.type
	 * @param {object} [obj.parameters]
	 * @return {string}
	 * @api private
	 */

	function format(obj) {
	  var parameters = obj.parameters
	  var type = obj.type

	  if (!type || typeof type !== 'string' || !tokenRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }

	  // start with normalized type
	  var string = String(type).toLowerCase()

	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()

	    for (var i = 0; i < params.length; i++) {
	      param = params[i]

	      var val = param.substr(-1) === '*'
	        ? ustring(parameters[param])
	        : qstring(parameters[param])

	      string += '; ' + param + '=' + val
	    }
	  }

	  return string
	}

	/**
	 * Decode a RFC 6987 field value (gracefully).
	 *
	 * @param {string} str
	 * @return {string}
	 * @api private
	 */

	function decodefield(str) {
	  var match = extValueRegExp.exec(str)

	  if (!match) {
	    throw new TypeError('invalid extended field value')
	  }

	  var charset = match[1].toLowerCase()
	  var encoded = match[2]
	  var value

	  // to binary string
	  var binary = encoded.replace(hexEscapeReplaceRegExp, pdecode)

	  switch (charset) {
	    case 'iso-8859-1':
	      value = getlatin1(binary)
	      break
	    case 'utf-8':
	      value = new Buffer(binary, 'binary').toString('utf8')
	      break
	    default:
	      throw new TypeError('unsupported charset in extended field')
	  }

	  return value
	}

	/**
	 * Get ISO-8859-1 version of string.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */

	function getlatin1(val) {
	  // simple Unicode -> ISO-8859-1 transformation
	  return String(val).replace(nonLatin1RegExp, '?')
	}

	/**
	 * Parse Content-Disposition header string.
	 *
	 * @param {string} string
	 * @return {object}
	 * @api private
	 */

	function parse(string) {
	  if (!string || typeof string !== 'string') {
	    throw new TypeError('argument string is required')
	  }

	  var match = dispositionTypeRegExp.exec(string)

	  if (!match) {
	    throw new TypeError('invalid type format')
	  }

	  // normalize type
	  var index = match[0].length
	  var type = match[1].toLowerCase()

	  var key
	  var names = []
	  var params = {}
	  var value

	  // calculate index to start at
	  index = paramRegExp.lastIndex = match[0].substr(-1) === ';'
	    ? index - 1
	    : index

	  // match parameters
	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }

	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]

	    if (names.indexOf(key) !== -1) {
	      throw new TypeError('invalid duplicate parameter')
	    }

	    names.push(key)

	    if (key.indexOf('*') + 1 === key.length) {
	      // decode extended value
	      key = key.slice(0, -1)
	      value = decodefield(value)

	      // overwrite existing value
	      params[key] = value
	      continue
	    }

	    if (typeof params[key] === 'string') {
	      continue
	    }

	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }

	    params[key] = value
	  }

	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }

	  return new ContentDisposition(type, params)
	}

	/**
	 * Percent decode a single character.
	 *
	 * @param {string} str
	 * @param {string} hex
	 * @return {string}
	 * @api private
	 */

	function pdecode(str, hex) {
	  return String.fromCharCode(parseInt(hex, 16))
	}

	/**
	 * Percent encode a single character.
	 *
	 * @param {string} char
	 * @return {string}
	 * @api private
	 */

	function pencode(char) {
	  var hex = String(char)
	    .charCodeAt(0)
	    .toString(16)
	    .toUpperCase()
	  return hex.length === 1
	    ? '%0' + hex
	    : '%' + hex
	}

	/**
	 * Quote a string for HTTP.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */

	function qstring(val) {
	  var str = String(val)

	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}

	/**
	 * Encode a Unicode string for HTTP (RFC 5987).
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */

	function ustring(val) {
	  var str = String(val)

	  // percent encode as UTF-8
	  var encoded = encodeURIComponent(str)
	    .replace(encodeUriAttrCharRegExp, pencode)

	  return 'UTF-8\'\'' + encoded
	}

	/**
	 * Class for parsed Content-Disposition header for v8 optimization
	 */

	function ContentDisposition(type, parameters) {
	  this.type = type
	  this.parameters = parameters
	}


/***/ },
/* 463 */
/***/ function(module, exports) {

	/*!
	 * content-type
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
	 *
	 * parameter     = token "=" ( token / quoted-string )
	 * token         = 1*tchar
	 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
	 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
	 *               / DIGIT / ALPHA
	 *               ; any VCHAR, except delimiters
	 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
	 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
	 * obs-text      = %x80-FF
	 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
	 */
	var paramRegExp = /; *([!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) */g
	var textRegExp = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/

	/**
	 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
	 *
	 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
	 * obs-text    = %x80-FF
	 */
	var qescRegExp = /\\([\u000b\u0020-\u00ff])/g

	/**
	 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
	 */
	var quoteRegExp = /([\\"])/g

	/**
	 * RegExp to match type in RFC 6838
	 *
	 * media-type = type "/" subtype
	 * type       = token
	 * subtype    = token
	 */
	var typeRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+\/[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/

	/**
	 * Module exports.
	 * @public
	 */

	exports.format = format
	exports.parse = parse

	/**
	 * Format object to media type.
	 *
	 * @param {object} obj
	 * @return {string}
	 * @public
	 */

	function format(obj) {
	  if (!obj || typeof obj !== 'object') {
	    throw new TypeError('argument obj is required')
	  }

	  var parameters = obj.parameters
	  var type = obj.type

	  if (!type || !typeRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }

	  var string = type

	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()

	    for (var i = 0; i < params.length; i++) {
	      param = params[i]

	      if (!tokenRegExp.test(param)) {
	        throw new TypeError('invalid parameter name')
	      }

	      string += '; ' + param + '=' + qstring(parameters[param])
	    }
	  }

	  return string
	}

	/**
	 * Parse media type to object.
	 *
	 * @param {string|object} string
	 * @return {Object}
	 * @public
	 */

	function parse(string) {
	  if (!string) {
	    throw new TypeError('argument string is required')
	  }

	  if (typeof string === 'object') {
	    // support req/res-like objects as argument
	    string = getcontenttype(string)

	    if (typeof string !== 'string') {
	      throw new TypeError('content-type header is missing from object');
	    }
	  }

	  if (typeof string !== 'string') {
	    throw new TypeError('argument string is required to be a string')
	  }

	  var index = string.indexOf(';')
	  var type = index !== -1
	    ? string.substr(0, index).trim()
	    : string.trim()

	  if (!typeRegExp.test(type)) {
	    throw new TypeError('invalid media type')
	  }

	  var key
	  var match
	  var obj = new ContentType(type.toLowerCase())
	  var value

	  paramRegExp.lastIndex = index

	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }

	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]

	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }

	    obj.parameters[key] = value
	  }

	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }

	  return obj
	}

	/**
	 * Get content-type from req/res objects.
	 *
	 * @param {object}
	 * @return {Object}
	 * @private
	 */

	function getcontenttype(obj) {
	  if (typeof obj.getHeader === 'function') {
	    // res-like
	    return obj.getHeader('content-type')
	  }

	  if (typeof obj.headers === 'object') {
	    // req-like
	    return obj.headers && obj.headers['content-type']
	  }
	}

	/**
	 * Quote a string if necessary.
	 *
	 * @param {string} val
	 * @return {string}
	 * @private
	 */

	function qstring(val) {
	  var str = String(val)

	  // no need to quote tokens
	  if (tokenRegExp.test(str)) {
	    return str
	  }

	  if (str.length > 0 && !textRegExp.test(str)) {
	    throw new TypeError('invalid parameter value')
	  }

	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}

	/**
	 * Class to represent a content type.
	 * @private
	 */
	function ContentType(type) {
	  this.parameters = Object.create(null)
	  this.type = type
	}


/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * send
	 * Copyright(c) 2012 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var createError = __webpack_require__(465)
	var debug = __webpack_require__(413)('send')
	var deprecate = __webpack_require__(447)('send')
	var destroy = __webpack_require__(469)
	var escapeHtml = __webpack_require__(436)
	  , parseRange = __webpack_require__(470)
	  , Stream = __webpack_require__(322)
	  , mime = __webpack_require__(471)
	  , fresh = __webpack_require__(473)
	  , path = __webpack_require__(389)
	  , fs = __webpack_require__(350)
	  , normalize = path.normalize
	  , join = path.join
	var etag = __webpack_require__(474)
	var EventEmitter = __webpack_require__(374).EventEmitter;
	var ms = __webpack_require__(416);
	var onFinished = __webpack_require__(437)
	var statuses = __webpack_require__(466)

	/**
	 * Variables.
	 */
	var extname = path.extname
	var maxMaxAge = 60 * 60 * 24 * 365 * 1000; // 1 year
	var resolve = path.resolve
	var sep = path.sep
	var toString = Object.prototype.toString
	var upPathRegexp = /(?:^|[\\\/])\.\.(?:[\\\/]|$)/

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = send
	module.exports.mime = mime

	/**
	 * Shim EventEmitter.listenerCount for node.js < 0.10
	 */

	/* istanbul ignore next */
	var listenerCount = EventEmitter.listenerCount
	  || function(emitter, type){ return emitter.listeners(type).length; };

	/**
	 * Return a `SendStream` for `req` and `path`.
	 *
	 * @param {object} req
	 * @param {string} path
	 * @param {object} [options]
	 * @return {SendStream}
	 * @public
	 */

	function send(req, path, options) {
	  return new SendStream(req, path, options);
	}

	/**
	 * Initialize a `SendStream` with the given `path`.
	 *
	 * @param {Request} req
	 * @param {String} path
	 * @param {object} [options]
	 * @private
	 */

	function SendStream(req, path, options) {
	  var opts = options || {}

	  this.options = opts
	  this.path = path
	  this.req = req

	  this._etag = opts.etag !== undefined
	    ? Boolean(opts.etag)
	    : true

	  this._dotfiles = opts.dotfiles !== undefined
	    ? opts.dotfiles
	    : 'ignore'

	  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {
	    throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"')
	  }

	  this._hidden = Boolean(opts.hidden)

	  if (opts.hidden !== undefined) {
	    deprecate('hidden: use dotfiles: \'' + (this._hidden ? 'allow' : 'ignore') + '\' instead')
	  }

	  // legacy support
	  if (opts.dotfiles === undefined) {
	    this._dotfiles = undefined
	  }

	  this._extensions = opts.extensions !== undefined
	    ? normalizeList(opts.extensions, 'extensions option')
	    : []

	  this._index = opts.index !== undefined
	    ? normalizeList(opts.index, 'index option')
	    : ['index.html']

	  this._lastModified = opts.lastModified !== undefined
	    ? Boolean(opts.lastModified)
	    : true

	  this._maxage = opts.maxAge || opts.maxage
	  this._maxage = typeof this._maxage === 'string'
	    ? ms(this._maxage)
	    : Number(this._maxage)
	  this._maxage = !isNaN(this._maxage)
	    ? Math.min(Math.max(0, this._maxage), maxMaxAge)
	    : 0

	  this._root = opts.root
	    ? resolve(opts.root)
	    : null

	  if (!this._root && opts.from) {
	    this.from(opts.from)
	  }
	}

	/**
	 * Inherits from `Stream.prototype`.
	 */

	SendStream.prototype.__proto__ = Stream.prototype;

	/**
	 * Enable or disable etag generation.
	 *
	 * @param {Boolean} val
	 * @return {SendStream}
	 * @api public
	 */

	SendStream.prototype.etag = deprecate.function(function etag(val) {
	  val = Boolean(val);
	  debug('etag %s', val);
	  this._etag = val;
	  return this;
	}, 'send.etag: pass etag as option');

	/**
	 * Enable or disable "hidden" (dot) files.
	 *
	 * @param {Boolean} path
	 * @return {SendStream}
	 * @api public
	 */

	SendStream.prototype.hidden = deprecate.function(function hidden(val) {
	  val = Boolean(val);
	  debug('hidden %s', val);
	  this._hidden = val;
	  this._dotfiles = undefined
	  return this;
	}, 'send.hidden: use dotfiles option');

	/**
	 * Set index `paths`, set to a falsy
	 * value to disable index support.
	 *
	 * @param {String|Boolean|Array} paths
	 * @return {SendStream}
	 * @api public
	 */

	SendStream.prototype.index = deprecate.function(function index(paths) {
	  var index = !paths ? [] : normalizeList(paths, 'paths argument');
	  debug('index %o', paths);
	  this._index = index;
	  return this;
	}, 'send.index: pass index as option');

	/**
	 * Set root `path`.
	 *
	 * @param {String} path
	 * @return {SendStream}
	 * @api public
	 */

	SendStream.prototype.root = function(path){
	  path = String(path);
	  this._root = resolve(path)
	  return this;
	};

	SendStream.prototype.from = deprecate.function(SendStream.prototype.root,
	  'send.from: pass root as option');

	SendStream.prototype.root = deprecate.function(SendStream.prototype.root,
	  'send.root: pass root as option');

	/**
	 * Set max-age to `maxAge`.
	 *
	 * @param {Number} maxAge
	 * @return {SendStream}
	 * @api public
	 */

	SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
	  maxAge = typeof maxAge === 'string'
	    ? ms(maxAge)
	    : Number(maxAge);
	  if (isNaN(maxAge)) maxAge = 0;
	  if (Infinity == maxAge) maxAge = 60 * 60 * 24 * 365 * 1000;
	  debug('max-age %d', maxAge);
	  this._maxage = maxAge;
	  return this;
	}, 'send.maxage: pass maxAge as option');

	/**
	 * Emit error with `status`.
	 *
	 * @param {number} status
	 * @param {Error} [error]
	 * @private
	 */

	SendStream.prototype.error = function error(status, error) {
	  // emit if listeners instead of responding
	  if (listenerCount(this, 'error') !== 0) {
	    return this.emit('error', createError(error, status, {
	      expose: false
	    }))
	  }

	  var res = this.res
	  var msg = statuses[status]

	  // wipe all existing headers
	  res._headers = null

	  // send basic response
	  res.statusCode = status
	  res.setHeader('Content-Type', 'text/plain; charset=UTF-8')
	  res.setHeader('Content-Length', Buffer.byteLength(msg))
	  res.setHeader('X-Content-Type-Options', 'nosniff')
	  res.end(msg)
	}

	/**
	 * Check if the pathname ends with "/".
	 *
	 * @return {Boolean}
	 * @api private
	 */

	SendStream.prototype.hasTrailingSlash = function(){
	  return '/' == this.path[this.path.length - 1];
	};

	/**
	 * Check if this is a conditional GET request.
	 *
	 * @return {Boolean}
	 * @api private
	 */

	SendStream.prototype.isConditionalGET = function(){
	  return this.req.headers['if-none-match']
	    || this.req.headers['if-modified-since'];
	};

	/**
	 * Strip content-* header fields.
	 *
	 * @private
	 */

	SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
	  var res = this.res
	  var headers = Object.keys(res._headers || {})

	  for (var i = 0; i < headers.length; i++) {
	    var header = headers[i]
	    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {
	      res.removeHeader(header)
	    }
	  }
	}

	/**
	 * Respond with 304 not modified.
	 *
	 * @api private
	 */

	SendStream.prototype.notModified = function(){
	  var res = this.res;
	  debug('not modified');
	  this.removeContentHeaderFields();
	  res.statusCode = 304;
	  res.end();
	};

	/**
	 * Raise error that headers already sent.
	 *
	 * @api private
	 */

	SendStream.prototype.headersAlreadySent = function headersAlreadySent(){
	  var err = new Error('Can\'t set headers after they are sent.');
	  debug('headers already sent');
	  this.error(500, err);
	};

	/**
	 * Check if the request is cacheable, aka
	 * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
	 *
	 * @return {Boolean}
	 * @api private
	 */

	SendStream.prototype.isCachable = function(){
	  var res = this.res;
	  return (res.statusCode >= 200 && res.statusCode < 300) || 304 == res.statusCode;
	};

	/**
	 * Handle stat() error.
	 *
	 * @param {Error} error
	 * @private
	 */

	SendStream.prototype.onStatError = function onStatError(error) {
	  switch (error.code) {
	    case 'ENAMETOOLONG':
	    case 'ENOENT':
	    case 'ENOTDIR':
	      this.error(404, error)
	      break
	    default:
	      this.error(500, error)
	      break
	  }
	}

	/**
	 * Check if the cache is fresh.
	 *
	 * @return {Boolean}
	 * @api private
	 */

	SendStream.prototype.isFresh = function(){
	  return fresh(this.req.headers, this.res._headers);
	};

	/**
	 * Check if the range is fresh.
	 *
	 * @return {Boolean}
	 * @api private
	 */

	SendStream.prototype.isRangeFresh = function isRangeFresh(){
	  var ifRange = this.req.headers['if-range'];

	  if (!ifRange) return true;

	  return ~ifRange.indexOf('"')
	    ? ~ifRange.indexOf(this.res._headers['etag'])
	    : Date.parse(this.res._headers['last-modified']) <= Date.parse(ifRange);
	};

	/**
	 * Redirect to path.
	 *
	 * @param {string} path
	 * @private
	 */

	SendStream.prototype.redirect = function redirect(path) {
	  if (listenerCount(this, 'directory') !== 0) {
	    this.emit('directory')
	    return
	  }

	  if (this.hasTrailingSlash()) {
	    this.error(403)
	    return
	  }

	  var loc = path + '/'
	  var msg = 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>\n'
	  var res = this.res

	  // redirect
	  res.statusCode = 301
	  res.setHeader('Content-Type', 'text/html; charset=UTF-8')
	  res.setHeader('Content-Length', Buffer.byteLength(msg))
	  res.setHeader('X-Content-Type-Options', 'nosniff')
	  res.setHeader('Location', loc)
	  res.end(msg)
	}

	/**
	 * Pipe to `res.
	 *
	 * @param {Stream} res
	 * @return {Stream} res
	 * @api public
	 */

	SendStream.prototype.pipe = function(res){
	  var self = this
	    , args = arguments
	    , root = this._root;

	  // references
	  this.res = res;

	  // decode the path
	  var path = decode(this.path)
	  if (path === -1) return this.error(400)

	  // null byte(s)
	  if (~path.indexOf('\0')) return this.error(400);

	  var parts
	  if (root !== null) {
	    // malicious path
	    if (upPathRegexp.test(normalize('.' + sep + path))) {
	      debug('malicious path "%s"', path)
	      return this.error(403)
	    }

	    // join / normalize from optional root dir
	    path = normalize(join(root, path))
	    root = normalize(root + sep)

	    // explode path parts
	    parts = path.substr(root.length).split(sep)
	  } else {
	    // ".." is malicious without "root"
	    if (upPathRegexp.test(path)) {
	      debug('malicious path "%s"', path)
	      return this.error(403)
	    }

	    // explode path parts
	    parts = normalize(path).split(sep)

	    // resolve the path
	    path = resolve(path)
	  }

	  // dotfile handling
	  if (containsDotFile(parts)) {
	    var access = this._dotfiles

	    // legacy support
	    if (access === undefined) {
	      access = parts[parts.length - 1][0] === '.'
	        ? (this._hidden ? 'allow' : 'ignore')
	        : 'allow'
	    }

	    debug('%s dotfile "%s"', access, path)
	    switch (access) {
	      case 'allow':
	        break
	      case 'deny':
	        return this.error(403)
	      case 'ignore':
	      default:
	        return this.error(404)
	    }
	  }

	  // index file support
	  if (this._index.length && this.path[this.path.length - 1] === '/') {
	    this.sendIndex(path);
	    return res;
	  }

	  this.sendFile(path);
	  return res;
	};

	/**
	 * Transfer `path`.
	 *
	 * @param {String} path
	 * @api public
	 */

	SendStream.prototype.send = function(path, stat){
	  var len = stat.size;
	  var options = this.options
	  var opts = {}
	  var res = this.res;
	  var req = this.req;
	  var ranges = req.headers.range;
	  var offset = options.start || 0;

	  if (res._header) {
	    // impossible to send now
	    return this.headersAlreadySent();
	  }

	  debug('pipe "%s"', path)

	  // set header fields
	  this.setHeader(path, stat);

	  // set content-type
	  this.type(path);

	  // conditional GET support
	  if (this.isConditionalGET()
	    && this.isCachable()
	    && this.isFresh()) {
	    return this.notModified();
	  }

	  // adjust len to start/end options
	  len = Math.max(0, len - offset);
	  if (options.end !== undefined) {
	    var bytes = options.end - offset + 1;
	    if (len > bytes) len = bytes;
	  }

	  // Range support
	  if (ranges) {
	    ranges = parseRange(len, ranges);

	    // If-Range support
	    if (!this.isRangeFresh()) {
	      debug('range stale');
	      ranges = -2;
	    }

	    // unsatisfiable
	    if (-1 == ranges) {
	      debug('range unsatisfiable');
	      res.setHeader('Content-Range', 'bytes */' + stat.size);
	      return this.error(416);
	    }

	    // valid (syntactically invalid/multiple ranges are treated as a regular response)
	    if (-2 != ranges && ranges.length === 1) {
	      debug('range %j', ranges);

	      // Content-Range
	      res.statusCode = 206;
	      res.setHeader('Content-Range', 'bytes '
	        + ranges[0].start
	        + '-'
	        + ranges[0].end
	        + '/'
	        + len);

	      offset += ranges[0].start;
	      len = ranges[0].end - ranges[0].start + 1;
	    }
	  }

	  // clone options
	  for (var prop in options) {
	    opts[prop] = options[prop]
	  }

	  // set read options
	  opts.start = offset
	  opts.end = Math.max(offset, offset + len - 1)

	  // content-length
	  res.setHeader('Content-Length', len);

	  // HEAD support
	  if ('HEAD' == req.method) return res.end();

	  this.stream(path, opts)
	};

	/**
	 * Transfer file for `path`.
	 *
	 * @param {String} path
	 * @api private
	 */
	SendStream.prototype.sendFile = function sendFile(path) {
	  var i = 0
	  var self = this

	  debug('stat "%s"', path);
	  fs.stat(path, function onstat(err, stat) {
	    if (err && err.code === 'ENOENT'
	      && !extname(path)
	      && path[path.length - 1] !== sep) {
	      // not found, check extensions
	      return next(err)
	    }
	    if (err) return self.onStatError(err)
	    if (stat.isDirectory()) return self.redirect(self.path)
	    self.emit('file', path, stat)
	    self.send(path, stat)
	  })

	  function next(err) {
	    if (self._extensions.length <= i) {
	      return err
	        ? self.onStatError(err)
	        : self.error(404)
	    }

	    var p = path + '.' + self._extensions[i++]

	    debug('stat "%s"', p)
	    fs.stat(p, function (err, stat) {
	      if (err) return next(err)
	      if (stat.isDirectory()) return next()
	      self.emit('file', p, stat)
	      self.send(p, stat)
	    })
	  }
	}

	/**
	 * Transfer index for `path`.
	 *
	 * @param {String} path
	 * @api private
	 */
	SendStream.prototype.sendIndex = function sendIndex(path){
	  var i = -1;
	  var self = this;

	  function next(err){
	    if (++i >= self._index.length) {
	      if (err) return self.onStatError(err);
	      return self.error(404);
	    }

	    var p = join(path, self._index[i]);

	    debug('stat "%s"', p);
	    fs.stat(p, function(err, stat){
	      if (err) return next(err);
	      if (stat.isDirectory()) return next();
	      self.emit('file', p, stat);
	      self.send(p, stat);
	    });
	  }

	  next();
	};

	/**
	 * Stream `path` to the response.
	 *
	 * @param {String} path
	 * @param {Object} options
	 * @api private
	 */

	SendStream.prototype.stream = function(path, options){
	  // TODO: this is all lame, refactor meeee
	  var finished = false;
	  var self = this;
	  var res = this.res;
	  var req = this.req;

	  // pipe
	  var stream = fs.createReadStream(path, options);
	  this.emit('stream', stream);
	  stream.pipe(res);

	  // response finished, done with the fd
	  onFinished(res, function onfinished(){
	    finished = true;
	    destroy(stream);
	  });

	  // error handling code-smell
	  stream.on('error', function onerror(err){
	    // request already finished
	    if (finished) return;

	    // clean up stream
	    finished = true;
	    destroy(stream);

	    // error
	    self.onStatError(err);
	  });

	  // end
	  stream.on('end', function onend(){
	    self.emit('end');
	  });
	};

	/**
	 * Set content-type based on `path`
	 * if it hasn't been explicitly set.
	 *
	 * @param {String} path
	 * @api private
	 */

	SendStream.prototype.type = function(path){
	  var res = this.res;
	  if (res.getHeader('Content-Type')) return;
	  var type = mime.lookup(path);
	  var charset = mime.charsets.lookup(type);
	  debug('content-type %s', type);
	  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));
	};

	/**
	 * Set response header fields, most
	 * fields may be pre-defined.
	 *
	 * @param {String} path
	 * @param {Object} stat
	 * @api private
	 */

	SendStream.prototype.setHeader = function setHeader(path, stat){
	  var res = this.res;

	  this.emit('headers', res, path, stat);

	  if (!res.getHeader('Accept-Ranges')) res.setHeader('Accept-Ranges', 'bytes');
	  if (!res.getHeader('Cache-Control')) res.setHeader('Cache-Control', 'public, max-age=' + Math.floor(this._maxage / 1000));

	  if (this._lastModified && !res.getHeader('Last-Modified')) {
	    var modified = stat.mtime.toUTCString()
	    debug('modified %s', modified)
	    res.setHeader('Last-Modified', modified)
	  }

	  if (this._etag && !res.getHeader('ETag')) {
	    var val = etag(stat)
	    debug('etag %s', val)
	    res.setHeader('ETag', val)
	  }
	};

	/**
	 * Determine if path parts contain a dotfile.
	 *
	 * @api private
	 */

	function containsDotFile(parts) {
	  for (var i = 0; i < parts.length; i++) {
	    if (parts[i][0] === '.') {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * decodeURIComponent.
	 *
	 * Allows V8 to only deoptimize this fn instead of all
	 * of send().
	 *
	 * @param {String} path
	 * @api private
	 */

	function decode(path) {
	  try {
	    return decodeURIComponent(path)
	  } catch (err) {
	    return -1
	  }
	}

	/**
	 * Normalize the index option into an array.
	 *
	 * @param {boolean|string|array} val
	 * @param {string} name
	 * @private
	 */

	function normalizeList(val, name) {
	  var list = [].concat(val || [])

	  for (var i = 0; i < list.length; i++) {
	    if (typeof list[i] !== 'string') {
	      throw new TypeError(name + ' must be array of strings or false')
	    }
	  }

	  return list
	}


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	
	var statuses = __webpack_require__(466);
	var inherits = __webpack_require__(468);

	function toIdentifier(str) {
	  return str.split(' ').map(function (token) {
	    return token.slice(0, 1).toUpperCase() + token.slice(1)
	  }).join('').replace(/[^ _0-9a-z]/gi, '')
	}

	exports = module.exports = function httpError() {
	  // so much arity going on ~_~
	  var err;
	  var msg;
	  var status = 500;
	  var props = {};
	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i];
	    if (arg instanceof Error) {
	      err = arg;
	      status = err.status || err.statusCode || status;
	      continue;
	    }
	    switch (typeof arg) {
	      case 'string':
	        msg = arg;
	        break;
	      case 'number':
	        status = arg;
	        break;
	      case 'object':
	        props = arg;
	        break;
	    }
	  }

	  if (typeof status !== 'number' || !statuses[status]) {
	    status = 500
	  }

	  // constructor
	  var HttpError = exports[status]

	  if (!err) {
	    // create error
	    err = HttpError
	      ? new HttpError(msg)
	      : new Error(msg || statuses[status])
	    Error.captureStackTrace(err, httpError)
	  }

	  if (!HttpError || !(err instanceof HttpError)) {
	    // add properties to generic error
	    err.expose = status < 500
	    err.status = err.statusCode = status
	  }

	  for (var key in props) {
	    if (key !== 'status' && key !== 'statusCode') {
	      err[key] = props[key]
	    }
	  }

	  return err;
	};

	// create generic error objects
	var codes = statuses.codes.filter(function (num) {
	  return num >= 400;
	});

	codes.forEach(function (code) {
	  var name = toIdentifier(statuses[code])
	  var className = name.match(/Error$/) ? name : name + 'Error'

	  if (code >= 500) {
	    var ServerError = function ServerError(msg) {
	      var self = new Error(msg != null ? msg : statuses[code])
	      Error.captureStackTrace(self, ServerError)
	      self.__proto__ = ServerError.prototype
	      Object.defineProperty(self, 'name', {
	        enumerable: false,
	        configurable: true,
	        value: className,
	        writable: true
	      })
	      return self
	    }
	    inherits(ServerError, Error);
	    ServerError.prototype.status =
	    ServerError.prototype.statusCode = code;
	    ServerError.prototype.expose = false;
	    exports[code] =
	    exports[name] = ServerError
	    return;
	  }

	  var ClientError = function ClientError(msg) {
	    var self = new Error(msg != null ? msg : statuses[code])
	    Error.captureStackTrace(self, ClientError)
	    self.__proto__ = ClientError.prototype
	    Object.defineProperty(self, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    })
	    return self
	  }
	  inherits(ClientError, Error);
	  ClientError.prototype.status =
	  ClientError.prototype.statusCode = code;
	  ClientError.prototype.expose = true;
	  exports[code] =
	  exports[name] = ClientError
	  return;
	});

	// backwards-compatibility
	exports["I'mateapot"] = exports.ImATeapot


/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	
	var codes = __webpack_require__(467);

	module.exports = status;

	// [Integer...]
	status.codes = Object.keys(codes).map(function (code) {
	  code = ~~code;
	  var msg = codes[code];
	  status[code] = msg;
	  status[msg] = status[msg.toLowerCase()] = code;
	  return code;
	});

	// status codes for redirects
	status.redirect = {
	  300: true,
	  301: true,
	  302: true,
	  303: true,
	  305: true,
	  307: true,
	  308: true,
	};

	// status codes for empty bodies
	status.empty = {
	  204: true,
	  205: true,
	  304: true,
	};

	// status codes for when you should retry the request
	status.retry = {
	  502: true,
	  503: true,
	  504: true,
	};

	function status(code) {
	  if (typeof code === 'number') {
	    if (!status[code]) throw new Error('invalid status code: ' + code);
	    return code;
	  }

	  if (typeof code !== 'string') {
	    throw new TypeError('code must be a number or string');
	  }

	  // '403'
	  var n = parseInt(code, 10)
	  if (!isNaN(n)) {
	    if (!status[n]) throw new Error('invalid status code: ' + n);
	    return n;
	  }

	  n = status[code.toLowerCase()];
	  if (!n) throw new Error('invalid status message: "' + code + '"');
	  return n;
	}


/***/ },
/* 467 */
/***/ function(module, exports) {

	module.exports = {
		"100": "Continue",
		"101": "Switching Protocols",
		"102": "Processing",
		"200": "OK",
		"201": "Created",
		"202": "Accepted",
		"203": "Non-Authoritative Information",
		"204": "No Content",
		"205": "Reset Content",
		"206": "Partial Content",
		"207": "Multi-Status",
		"208": "Already Reported",
		"226": "IM Used",
		"300": "Multiple Choices",
		"301": "Moved Permanently",
		"302": "Found",
		"303": "See Other",
		"304": "Not Modified",
		"305": "Use Proxy",
		"306": "(Unused)",
		"307": "Temporary Redirect",
		"308": "Permanent Redirect",
		"400": "Bad Request",
		"401": "Unauthorized",
		"402": "Payment Required",
		"403": "Forbidden",
		"404": "Not Found",
		"405": "Method Not Allowed",
		"406": "Not Acceptable",
		"407": "Proxy Authentication Required",
		"408": "Request Timeout",
		"409": "Conflict",
		"410": "Gone",
		"411": "Length Required",
		"412": "Precondition Failed",
		"413": "Payload Too Large",
		"414": "URI Too Long",
		"415": "Unsupported Media Type",
		"416": "Range Not Satisfiable",
		"417": "Expectation Failed",
		"418": "I'm a teapot",
		"422": "Unprocessable Entity",
		"423": "Locked",
		"424": "Failed Dependency",
		"425": "Unordered Collection",
		"426": "Upgrade Required",
		"428": "Precondition Required",
		"429": "Too Many Requests",
		"431": "Request Header Fields Too Large",
		"451": "Unavailable For Legal Reasons",
		"500": "Internal Server Error",
		"501": "Not Implemented",
		"502": "Bad Gateway",
		"503": "Service Unavailable",
		"504": "Gateway Timeout",
		"505": "HTTP Version Not Supported",
		"506": "Variant Also Negotiates",
		"507": "Insufficient Storage",
		"508": "Loop Detected",
		"509": "Bandwidth Limit Exceeded",
		"510": "Not Extended",
		"511": "Network Authentication Required"
	};

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(325).inherits


/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * destroy
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var ReadStream = __webpack_require__(350).ReadStream
	var Stream = __webpack_require__(322)

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = destroy

	/**
	 * Destroy a stream.
	 *
	 * @param {object} stream
	 * @public
	 */

	function destroy(stream) {
	  if (stream instanceof ReadStream) {
	    return destroyReadStream(stream)
	  }

	  if (!(stream instanceof Stream)) {
	    return stream
	  }

	  if (typeof stream.destroy === 'function') {
	    stream.destroy()
	  }

	  return stream
	}

	/**
	 * Destroy a ReadStream.
	 *
	 * @param {object} stream
	 * @private
	 */

	function destroyReadStream(stream) {
	  stream.destroy()

	  if (typeof stream.close === 'function') {
	    // node.js core bug work-around
	    stream.on('open', onOpenClose)
	  }

	  return stream
	}

	/**
	 * On open handler to close stream.
	 * @private
	 */

	function onOpenClose() {
	  if (typeof this.fd === 'number') {
	    // actually close down the fd
	    this.close()
	  }
	}


/***/ },
/* 470 */
/***/ function(module, exports) {

	/*!
	 * range-parser
	 * Copyright(c) 2012-2014 TJ Holowaychuk
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = rangeParser;

	/**
	 * Parse "Range" header `str` relative to the given file `size`.
	 *
	 * @param {Number} size
	 * @param {String} str
	 * @return {Array}
	 * @public
	 */

	function rangeParser(size, str) {
	  var valid = true;
	  var i = str.indexOf('=');

	  if (-1 == i) return -2;

	  var arr = str.slice(i + 1).split(',').map(function(range){
	    var range = range.split('-')
	      , start = parseInt(range[0], 10)
	      , end = parseInt(range[1], 10);

	    // -nnn
	    if (isNaN(start)) {
	      start = size - end;
	      end = size - 1;
	    // nnn-
	    } else if (isNaN(end)) {
	      end = size - 1;
	    }

	    // limit last-byte-pos to current length
	    if (end > size - 1) end = size - 1;

	    // invalid
	    if (isNaN(start)
	      || isNaN(end)
	      || start > end
	      || start < 0) valid = false;

	    return {
	      start: start,
	      end: end
	    };
	  });

	  arr.type = str.slice(0, i);

	  return valid ? arr : -1;
	}


/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(389);
	var fs = __webpack_require__(350);

	function Mime() {
	  // Map of extension -> mime type
	  this.types = Object.create(null);

	  // Map of mime type -> extension
	  this.extensions = Object.create(null);
	}

	/**
	 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
	 * to an array of extensions associated with the type.  The first extension is
	 * used as the default extension for the type.
	 *
	 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
	 *
	 * @param map (Object) type definitions
	 */
	Mime.prototype.define = function (map) {
	  for (var type in map) {
	    var exts = map[type];
	    for (var i = 0; i < exts.length; i++) {
	      if (process.env.DEBUG_MIME && this.types[exts]) {
	        console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
	          this.types[exts] + ' to ' + type);
	      }

	      this.types[exts[i]] = type;
	    }

	    // Default extension is the first one we encounter
	    if (!this.extensions[type]) {
	      this.extensions[type] = exts[0];
	    }
	  }
	};

	/**
	 * Load an Apache2-style ".types" file
	 *
	 * This may be called multiple times (it's expected).  Where files declare
	 * overlapping types/extensions, the last file wins.
	 *
	 * @param file (String) path of file to load.
	 */
	Mime.prototype.load = function(file) {
	  this._loading = file;
	  // Read file and split into lines
	  var map = {},
	      content = fs.readFileSync(file, 'ascii'),
	      lines = content.split(/[\r\n]+/);

	  lines.forEach(function(line) {
	    // Clean up whitespace/comments, and split into fields
	    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
	    map[fields.shift()] = fields;
	  });

	  this.define(map);

	  this._loading = null;
	};

	/**
	 * Lookup a mime type based on extension
	 */
	Mime.prototype.lookup = function(path, fallback) {
	  var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();

	  return this.types[ext] || fallback || this.default_type;
	};

	/**
	 * Return file extension associated with a mime type
	 */
	Mime.prototype.extension = function(mimeType) {
	  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
	  return this.extensions[type];
	};

	// Default instance
	var mime = new Mime();

	// Define built-in types
	mime.define(__webpack_require__(472));

	// Default type
	mime.default_type = mime.lookup('bin');

	//
	// Additional API specific to the default instance
	//

	mime.Mime = Mime;

	/**
	 * Lookup a charset based on mime type.
	 */
	mime.charsets = {
	  lookup: function(mimeType, fallback) {
	    // Assume text types are utf8
	    return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
	  }
	};

	module.exports = mime;


/***/ },
/* 472 */
/***/ function(module, exports) {

	module.exports = {
		"application/andrew-inset": [
			"ez"
		],
		"application/applixware": [
			"aw"
		],
		"application/atom+xml": [
			"atom"
		],
		"application/atomcat+xml": [
			"atomcat"
		],
		"application/atomsvc+xml": [
			"atomsvc"
		],
		"application/ccxml+xml": [
			"ccxml"
		],
		"application/cdmi-capability": [
			"cdmia"
		],
		"application/cdmi-container": [
			"cdmic"
		],
		"application/cdmi-domain": [
			"cdmid"
		],
		"application/cdmi-object": [
			"cdmio"
		],
		"application/cdmi-queue": [
			"cdmiq"
		],
		"application/cu-seeme": [
			"cu"
		],
		"application/dash+xml": [
			"mdp"
		],
		"application/davmount+xml": [
			"davmount"
		],
		"application/docbook+xml": [
			"dbk"
		],
		"application/dssc+der": [
			"dssc"
		],
		"application/dssc+xml": [
			"xdssc"
		],
		"application/ecmascript": [
			"ecma"
		],
		"application/emma+xml": [
			"emma"
		],
		"application/epub+zip": [
			"epub"
		],
		"application/exi": [
			"exi"
		],
		"application/font-tdpfr": [
			"pfr"
		],
		"application/font-woff": [
			"woff"
		],
		"application/font-woff2": [
			"woff2"
		],
		"application/gml+xml": [
			"gml"
		],
		"application/gpx+xml": [
			"gpx"
		],
		"application/gxf": [
			"gxf"
		],
		"application/hyperstudio": [
			"stk"
		],
		"application/inkml+xml": [
			"ink",
			"inkml"
		],
		"application/ipfix": [
			"ipfix"
		],
		"application/java-archive": [
			"jar"
		],
		"application/java-serialized-object": [
			"ser"
		],
		"application/java-vm": [
			"class"
		],
		"application/javascript": [
			"js"
		],
		"application/json": [
			"json",
			"map"
		],
		"application/json5": [
			"json5"
		],
		"application/jsonml+json": [
			"jsonml"
		],
		"application/lost+xml": [
			"lostxml"
		],
		"application/mac-binhex40": [
			"hqx"
		],
		"application/mac-compactpro": [
			"cpt"
		],
		"application/mads+xml": [
			"mads"
		],
		"application/marc": [
			"mrc"
		],
		"application/marcxml+xml": [
			"mrcx"
		],
		"application/mathematica": [
			"ma",
			"nb",
			"mb"
		],
		"application/mathml+xml": [
			"mathml"
		],
		"application/mbox": [
			"mbox"
		],
		"application/mediaservercontrol+xml": [
			"mscml"
		],
		"application/metalink+xml": [
			"metalink"
		],
		"application/metalink4+xml": [
			"meta4"
		],
		"application/mets+xml": [
			"mets"
		],
		"application/mods+xml": [
			"mods"
		],
		"application/mp21": [
			"m21",
			"mp21"
		],
		"application/mp4": [
			"mp4s",
			"m4p"
		],
		"application/msword": [
			"doc",
			"dot"
		],
		"application/mxf": [
			"mxf"
		],
		"application/octet-stream": [
			"bin",
			"dms",
			"lrf",
			"mar",
			"so",
			"dist",
			"distz",
			"pkg",
			"bpk",
			"dump",
			"elc",
			"deploy",
			"buffer"
		],
		"application/oda": [
			"oda"
		],
		"application/oebps-package+xml": [
			"opf"
		],
		"application/ogg": [
			"ogx"
		],
		"application/omdoc+xml": [
			"omdoc"
		],
		"application/onenote": [
			"onetoc",
			"onetoc2",
			"onetmp",
			"onepkg"
		],
		"application/oxps": [
			"oxps"
		],
		"application/patch-ops-error+xml": [
			"xer"
		],
		"application/pdf": [
			"pdf"
		],
		"application/pgp-encrypted": [
			"pgp"
		],
		"application/pgp-signature": [
			"asc",
			"sig"
		],
		"application/pics-rules": [
			"prf"
		],
		"application/pkcs10": [
			"p10"
		],
		"application/pkcs7-mime": [
			"p7m",
			"p7c"
		],
		"application/pkcs7-signature": [
			"p7s"
		],
		"application/pkcs8": [
			"p8"
		],
		"application/pkix-attr-cert": [
			"ac"
		],
		"application/pkix-cert": [
			"cer"
		],
		"application/pkix-crl": [
			"crl"
		],
		"application/pkix-pkipath": [
			"pkipath"
		],
		"application/pkixcmp": [
			"pki"
		],
		"application/pls+xml": [
			"pls"
		],
		"application/postscript": [
			"ai",
			"eps",
			"ps"
		],
		"application/prs.cww": [
			"cww"
		],
		"application/pskc+xml": [
			"pskcxml"
		],
		"application/rdf+xml": [
			"rdf"
		],
		"application/reginfo+xml": [
			"rif"
		],
		"application/relax-ng-compact-syntax": [
			"rnc"
		],
		"application/resource-lists+xml": [
			"rl"
		],
		"application/resource-lists-diff+xml": [
			"rld"
		],
		"application/rls-services+xml": [
			"rs"
		],
		"application/rpki-ghostbusters": [
			"gbr"
		],
		"application/rpki-manifest": [
			"mft"
		],
		"application/rpki-roa": [
			"roa"
		],
		"application/rsd+xml": [
			"rsd"
		],
		"application/rss+xml": [
			"rss"
		],
		"application/rtf": [
			"rtf"
		],
		"application/sbml+xml": [
			"sbml"
		],
		"application/scvp-cv-request": [
			"scq"
		],
		"application/scvp-cv-response": [
			"scs"
		],
		"application/scvp-vp-request": [
			"spq"
		],
		"application/scvp-vp-response": [
			"spp"
		],
		"application/sdp": [
			"sdp"
		],
		"application/set-payment-initiation": [
			"setpay"
		],
		"application/set-registration-initiation": [
			"setreg"
		],
		"application/shf+xml": [
			"shf"
		],
		"application/smil+xml": [
			"smi",
			"smil"
		],
		"application/sparql-query": [
			"rq"
		],
		"application/sparql-results+xml": [
			"srx"
		],
		"application/srgs": [
			"gram"
		],
		"application/srgs+xml": [
			"grxml"
		],
		"application/sru+xml": [
			"sru"
		],
		"application/ssdl+xml": [
			"ssdl"
		],
		"application/ssml+xml": [
			"ssml"
		],
		"application/tei+xml": [
			"tei",
			"teicorpus"
		],
		"application/thraud+xml": [
			"tfi"
		],
		"application/timestamped-data": [
			"tsd"
		],
		"application/vnd.3gpp.pic-bw-large": [
			"plb"
		],
		"application/vnd.3gpp.pic-bw-small": [
			"psb"
		],
		"application/vnd.3gpp.pic-bw-var": [
			"pvb"
		],
		"application/vnd.3gpp2.tcap": [
			"tcap"
		],
		"application/vnd.3m.post-it-notes": [
			"pwn"
		],
		"application/vnd.accpac.simply.aso": [
			"aso"
		],
		"application/vnd.accpac.simply.imp": [
			"imp"
		],
		"application/vnd.acucobol": [
			"acu"
		],
		"application/vnd.acucorp": [
			"atc",
			"acutc"
		],
		"application/vnd.adobe.air-application-installer-package+zip": [
			"air"
		],
		"application/vnd.adobe.formscentral.fcdt": [
			"fcdt"
		],
		"application/vnd.adobe.fxp": [
			"fxp",
			"fxpl"
		],
		"application/vnd.adobe.xdp+xml": [
			"xdp"
		],
		"application/vnd.adobe.xfdf": [
			"xfdf"
		],
		"application/vnd.ahead.space": [
			"ahead"
		],
		"application/vnd.airzip.filesecure.azf": [
			"azf"
		],
		"application/vnd.airzip.filesecure.azs": [
			"azs"
		],
		"application/vnd.amazon.ebook": [
			"azw"
		],
		"application/vnd.americandynamics.acc": [
			"acc"
		],
		"application/vnd.amiga.ami": [
			"ami"
		],
		"application/vnd.android.package-archive": [
			"apk"
		],
		"application/vnd.anser-web-certificate-issue-initiation": [
			"cii"
		],
		"application/vnd.anser-web-funds-transfer-initiation": [
			"fti"
		],
		"application/vnd.antix.game-component": [
			"atx"
		],
		"application/vnd.apple.installer+xml": [
			"mpkg"
		],
		"application/vnd.apple.mpegurl": [
			"m3u8"
		],
		"application/vnd.aristanetworks.swi": [
			"swi"
		],
		"application/vnd.astraea-software.iota": [
			"iota"
		],
		"application/vnd.audiograph": [
			"aep"
		],
		"application/vnd.blueice.multipass": [
			"mpm"
		],
		"application/vnd.bmi": [
			"bmi"
		],
		"application/vnd.businessobjects": [
			"rep"
		],
		"application/vnd.chemdraw+xml": [
			"cdxml"
		],
		"application/vnd.chipnuts.karaoke-mmd": [
			"mmd"
		],
		"application/vnd.cinderella": [
			"cdy"
		],
		"application/vnd.claymore": [
			"cla"
		],
		"application/vnd.cloanto.rp9": [
			"rp9"
		],
		"application/vnd.clonk.c4group": [
			"c4g",
			"c4d",
			"c4f",
			"c4p",
			"c4u"
		],
		"application/vnd.cluetrust.cartomobile-config": [
			"c11amc"
		],
		"application/vnd.cluetrust.cartomobile-config-pkg": [
			"c11amz"
		],
		"application/vnd.commonspace": [
			"csp"
		],
		"application/vnd.contact.cmsg": [
			"cdbcmsg"
		],
		"application/vnd.cosmocaller": [
			"cmc"
		],
		"application/vnd.crick.clicker": [
			"clkx"
		],
		"application/vnd.crick.clicker.keyboard": [
			"clkk"
		],
		"application/vnd.crick.clicker.palette": [
			"clkp"
		],
		"application/vnd.crick.clicker.template": [
			"clkt"
		],
		"application/vnd.crick.clicker.wordbank": [
			"clkw"
		],
		"application/vnd.criticaltools.wbs+xml": [
			"wbs"
		],
		"application/vnd.ctc-posml": [
			"pml"
		],
		"application/vnd.cups-ppd": [
			"ppd"
		],
		"application/vnd.curl.car": [
			"car"
		],
		"application/vnd.curl.pcurl": [
			"pcurl"
		],
		"application/vnd.dart": [
			"dart"
		],
		"application/vnd.data-vision.rdz": [
			"rdz"
		],
		"application/vnd.dece.data": [
			"uvf",
			"uvvf",
			"uvd",
			"uvvd"
		],
		"application/vnd.dece.ttml+xml": [
			"uvt",
			"uvvt"
		],
		"application/vnd.dece.unspecified": [
			"uvx",
			"uvvx"
		],
		"application/vnd.dece.zip": [
			"uvz",
			"uvvz"
		],
		"application/vnd.denovo.fcselayout-link": [
			"fe_launch"
		],
		"application/vnd.dna": [
			"dna"
		],
		"application/vnd.dolby.mlp": [
			"mlp"
		],
		"application/vnd.dpgraph": [
			"dpg"
		],
		"application/vnd.dreamfactory": [
			"dfac"
		],
		"application/vnd.ds-keypoint": [
			"kpxx"
		],
		"application/vnd.dvb.ait": [
			"ait"
		],
		"application/vnd.dvb.service": [
			"svc"
		],
		"application/vnd.dynageo": [
			"geo"
		],
		"application/vnd.ecowin.chart": [
			"mag"
		],
		"application/vnd.enliven": [
			"nml"
		],
		"application/vnd.epson.esf": [
			"esf"
		],
		"application/vnd.epson.msf": [
			"msf"
		],
		"application/vnd.epson.quickanime": [
			"qam"
		],
		"application/vnd.epson.salt": [
			"slt"
		],
		"application/vnd.epson.ssf": [
			"ssf"
		],
		"application/vnd.eszigno3+xml": [
			"es3",
			"et3"
		],
		"application/vnd.ezpix-album": [
			"ez2"
		],
		"application/vnd.ezpix-package": [
			"ez3"
		],
		"application/vnd.fdf": [
			"fdf"
		],
		"application/vnd.fdsn.mseed": [
			"mseed"
		],
		"application/vnd.fdsn.seed": [
			"seed",
			"dataless"
		],
		"application/vnd.flographit": [
			"gph"
		],
		"application/vnd.fluxtime.clip": [
			"ftc"
		],
		"application/vnd.framemaker": [
			"fm",
			"frame",
			"maker",
			"book"
		],
		"application/vnd.frogans.fnc": [
			"fnc"
		],
		"application/vnd.frogans.ltf": [
			"ltf"
		],
		"application/vnd.fsc.weblaunch": [
			"fsc"
		],
		"application/vnd.fujitsu.oasys": [
			"oas"
		],
		"application/vnd.fujitsu.oasys2": [
			"oa2"
		],
		"application/vnd.fujitsu.oasys3": [
			"oa3"
		],
		"application/vnd.fujitsu.oasysgp": [
			"fg5"
		],
		"application/vnd.fujitsu.oasysprs": [
			"bh2"
		],
		"application/vnd.fujixerox.ddd": [
			"ddd"
		],
		"application/vnd.fujixerox.docuworks": [
			"xdw"
		],
		"application/vnd.fujixerox.docuworks.binder": [
			"xbd"
		],
		"application/vnd.fuzzysheet": [
			"fzs"
		],
		"application/vnd.genomatix.tuxedo": [
			"txd"
		],
		"application/vnd.geogebra.file": [
			"ggb"
		],
		"application/vnd.geogebra.tool": [
			"ggt"
		],
		"application/vnd.geometry-explorer": [
			"gex",
			"gre"
		],
		"application/vnd.geonext": [
			"gxt"
		],
		"application/vnd.geoplan": [
			"g2w"
		],
		"application/vnd.geospace": [
			"g3w"
		],
		"application/vnd.gmx": [
			"gmx"
		],
		"application/vnd.google-earth.kml+xml": [
			"kml"
		],
		"application/vnd.google-earth.kmz": [
			"kmz"
		],
		"application/vnd.grafeq": [
			"gqf",
			"gqs"
		],
		"application/vnd.groove-account": [
			"gac"
		],
		"application/vnd.groove-help": [
			"ghf"
		],
		"application/vnd.groove-identity-message": [
			"gim"
		],
		"application/vnd.groove-injector": [
			"grv"
		],
		"application/vnd.groove-tool-message": [
			"gtm"
		],
		"application/vnd.groove-tool-template": [
			"tpl"
		],
		"application/vnd.groove-vcard": [
			"vcg"
		],
		"application/vnd.hal+xml": [
			"hal"
		],
		"application/vnd.handheld-entertainment+xml": [
			"zmm"
		],
		"application/vnd.hbci": [
			"hbci"
		],
		"application/vnd.hhe.lesson-player": [
			"les"
		],
		"application/vnd.hp-hpgl": [
			"hpgl"
		],
		"application/vnd.hp-hpid": [
			"hpid"
		],
		"application/vnd.hp-hps": [
			"hps"
		],
		"application/vnd.hp-jlyt": [
			"jlt"
		],
		"application/vnd.hp-pcl": [
			"pcl"
		],
		"application/vnd.hp-pclxl": [
			"pclxl"
		],
		"application/vnd.ibm.minipay": [
			"mpy"
		],
		"application/vnd.ibm.modcap": [
			"afp",
			"listafp",
			"list3820"
		],
		"application/vnd.ibm.rights-management": [
			"irm"
		],
		"application/vnd.ibm.secure-container": [
			"sc"
		],
		"application/vnd.iccprofile": [
			"icc",
			"icm"
		],
		"application/vnd.igloader": [
			"igl"
		],
		"application/vnd.immervision-ivp": [
			"ivp"
		],
		"application/vnd.immervision-ivu": [
			"ivu"
		],
		"application/vnd.insors.igm": [
			"igm"
		],
		"application/vnd.intercon.formnet": [
			"xpw",
			"xpx"
		],
		"application/vnd.intergeo": [
			"i2g"
		],
		"application/vnd.intu.qbo": [
			"qbo"
		],
		"application/vnd.intu.qfx": [
			"qfx"
		],
		"application/vnd.ipunplugged.rcprofile": [
			"rcprofile"
		],
		"application/vnd.irepository.package+xml": [
			"irp"
		],
		"application/vnd.is-xpr": [
			"xpr"
		],
		"application/vnd.isac.fcs": [
			"fcs"
		],
		"application/vnd.jam": [
			"jam"
		],
		"application/vnd.jcp.javame.midlet-rms": [
			"rms"
		],
		"application/vnd.jisp": [
			"jisp"
		],
		"application/vnd.joost.joda-archive": [
			"joda"
		],
		"application/vnd.kahootz": [
			"ktz",
			"ktr"
		],
		"application/vnd.kde.karbon": [
			"karbon"
		],
		"application/vnd.kde.kchart": [
			"chrt"
		],
		"application/vnd.kde.kformula": [
			"kfo"
		],
		"application/vnd.kde.kivio": [
			"flw"
		],
		"application/vnd.kde.kontour": [
			"kon"
		],
		"application/vnd.kde.kpresenter": [
			"kpr",
			"kpt"
		],
		"application/vnd.kde.kspread": [
			"ksp"
		],
		"application/vnd.kde.kword": [
			"kwd",
			"kwt"
		],
		"application/vnd.kenameaapp": [
			"htke"
		],
		"application/vnd.kidspiration": [
			"kia"
		],
		"application/vnd.kinar": [
			"kne",
			"knp"
		],
		"application/vnd.koan": [
			"skp",
			"skd",
			"skt",
			"skm"
		],
		"application/vnd.kodak-descriptor": [
			"sse"
		],
		"application/vnd.las.las+xml": [
			"lasxml"
		],
		"application/vnd.llamagraphics.life-balance.desktop": [
			"lbd"
		],
		"application/vnd.llamagraphics.life-balance.exchange+xml": [
			"lbe"
		],
		"application/vnd.lotus-1-2-3": [
			"123"
		],
		"application/vnd.lotus-approach": [
			"apr"
		],
		"application/vnd.lotus-freelance": [
			"pre"
		],
		"application/vnd.lotus-notes": [
			"nsf"
		],
		"application/vnd.lotus-organizer": [
			"org"
		],
		"application/vnd.lotus-screencam": [
			"scm"
		],
		"application/vnd.lotus-wordpro": [
			"lwp"
		],
		"application/vnd.macports.portpkg": [
			"portpkg"
		],
		"application/vnd.mcd": [
			"mcd"
		],
		"application/vnd.medcalcdata": [
			"mc1"
		],
		"application/vnd.mediastation.cdkey": [
			"cdkey"
		],
		"application/vnd.mfer": [
			"mwf"
		],
		"application/vnd.mfmp": [
			"mfm"
		],
		"application/vnd.micrografx.flo": [
			"flo"
		],
		"application/vnd.micrografx.igx": [
			"igx"
		],
		"application/vnd.mif": [
			"mif"
		],
		"application/vnd.mobius.daf": [
			"daf"
		],
		"application/vnd.mobius.dis": [
			"dis"
		],
		"application/vnd.mobius.mbk": [
			"mbk"
		],
		"application/vnd.mobius.mqy": [
			"mqy"
		],
		"application/vnd.mobius.msl": [
			"msl"
		],
		"application/vnd.mobius.plc": [
			"plc"
		],
		"application/vnd.mobius.txf": [
			"txf"
		],
		"application/vnd.mophun.application": [
			"mpn"
		],
		"application/vnd.mophun.certificate": [
			"mpc"
		],
		"application/vnd.mozilla.xul+xml": [
			"xul"
		],
		"application/vnd.ms-artgalry": [
			"cil"
		],
		"application/vnd.ms-cab-compressed": [
			"cab"
		],
		"application/vnd.ms-excel": [
			"xls",
			"xlm",
			"xla",
			"xlc",
			"xlt",
			"xlw"
		],
		"application/vnd.ms-excel.addin.macroenabled.12": [
			"xlam"
		],
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": [
			"xlsb"
		],
		"application/vnd.ms-excel.sheet.macroenabled.12": [
			"xlsm"
		],
		"application/vnd.ms-excel.template.macroenabled.12": [
			"xltm"
		],
		"application/vnd.ms-fontobject": [
			"eot"
		],
		"application/vnd.ms-htmlhelp": [
			"chm"
		],
		"application/vnd.ms-ims": [
			"ims"
		],
		"application/vnd.ms-lrm": [
			"lrm"
		],
		"application/vnd.ms-officetheme": [
			"thmx"
		],
		"application/vnd.ms-pki.seccat": [
			"cat"
		],
		"application/vnd.ms-pki.stl": [
			"stl"
		],
		"application/vnd.ms-powerpoint": [
			"ppt",
			"pps",
			"pot"
		],
		"application/vnd.ms-powerpoint.addin.macroenabled.12": [
			"ppam"
		],
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": [
			"pptm"
		],
		"application/vnd.ms-powerpoint.slide.macroenabled.12": [
			"sldm"
		],
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": [
			"ppsm"
		],
		"application/vnd.ms-powerpoint.template.macroenabled.12": [
			"potm"
		],
		"application/vnd.ms-project": [
			"mpp",
			"mpt"
		],
		"application/vnd.ms-word.document.macroenabled.12": [
			"docm"
		],
		"application/vnd.ms-word.template.macroenabled.12": [
			"dotm"
		],
		"application/vnd.ms-works": [
			"wps",
			"wks",
			"wcm",
			"wdb"
		],
		"application/vnd.ms-wpl": [
			"wpl"
		],
		"application/vnd.ms-xpsdocument": [
			"xps"
		],
		"application/vnd.mseq": [
			"mseq"
		],
		"application/vnd.musician": [
			"mus"
		],
		"application/vnd.muvee.style": [
			"msty"
		],
		"application/vnd.mynfc": [
			"taglet"
		],
		"application/vnd.neurolanguage.nlu": [
			"nlu"
		],
		"application/vnd.nitf": [
			"ntf",
			"nitf"
		],
		"application/vnd.noblenet-directory": [
			"nnd"
		],
		"application/vnd.noblenet-sealer": [
			"nns"
		],
		"application/vnd.noblenet-web": [
			"nnw"
		],
		"application/vnd.nokia.n-gage.data": [
			"ngdat"
		],
		"application/vnd.nokia.radio-preset": [
			"rpst"
		],
		"application/vnd.nokia.radio-presets": [
			"rpss"
		],
		"application/vnd.novadigm.edm": [
			"edm"
		],
		"application/vnd.novadigm.edx": [
			"edx"
		],
		"application/vnd.novadigm.ext": [
			"ext"
		],
		"application/vnd.oasis.opendocument.chart": [
			"odc"
		],
		"application/vnd.oasis.opendocument.chart-template": [
			"otc"
		],
		"application/vnd.oasis.opendocument.database": [
			"odb"
		],
		"application/vnd.oasis.opendocument.formula": [
			"odf"
		],
		"application/vnd.oasis.opendocument.formula-template": [
			"odft"
		],
		"application/vnd.oasis.opendocument.graphics": [
			"odg"
		],
		"application/vnd.oasis.opendocument.graphics-template": [
			"otg"
		],
		"application/vnd.oasis.opendocument.image": [
			"odi"
		],
		"application/vnd.oasis.opendocument.image-template": [
			"oti"
		],
		"application/vnd.oasis.opendocument.presentation": [
			"odp"
		],
		"application/vnd.oasis.opendocument.presentation-template": [
			"otp"
		],
		"application/vnd.oasis.opendocument.spreadsheet": [
			"ods"
		],
		"application/vnd.oasis.opendocument.spreadsheet-template": [
			"ots"
		],
		"application/vnd.oasis.opendocument.text": [
			"odt"
		],
		"application/vnd.oasis.opendocument.text-master": [
			"odm"
		],
		"application/vnd.oasis.opendocument.text-template": [
			"ott"
		],
		"application/vnd.oasis.opendocument.text-web": [
			"oth"
		],
		"application/vnd.olpc-sugar": [
			"xo"
		],
		"application/vnd.oma.dd2+xml": [
			"dd2"
		],
		"application/vnd.openofficeorg.extension": [
			"oxt"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": [
			"pptx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.slide": [
			"sldx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": [
			"ppsx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.template": [
			"potx"
		],
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
			"xlsx"
		],
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": [
			"xltx"
		],
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
			"docx"
		],
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": [
			"dotx"
		],
		"application/vnd.osgeo.mapguide.package": [
			"mgp"
		],
		"application/vnd.osgi.dp": [
			"dp"
		],
		"application/vnd.osgi.subsystem": [
			"esa"
		],
		"application/vnd.palm": [
			"pdb",
			"pqa",
			"oprc"
		],
		"application/vnd.pawaafile": [
			"paw"
		],
		"application/vnd.pg.format": [
			"str"
		],
		"application/vnd.pg.osasli": [
			"ei6"
		],
		"application/vnd.picsel": [
			"efif"
		],
		"application/vnd.pmi.widget": [
			"wg"
		],
		"application/vnd.pocketlearn": [
			"plf"
		],
		"application/vnd.powerbuilder6": [
			"pbd"
		],
		"application/vnd.previewsystems.box": [
			"box"
		],
		"application/vnd.proteus.magazine": [
			"mgz"
		],
		"application/vnd.publishare-delta-tree": [
			"qps"
		],
		"application/vnd.pvi.ptid1": [
			"ptid"
		],
		"application/vnd.quark.quarkxpress": [
			"qxd",
			"qxt",
			"qwd",
			"qwt",
			"qxl",
			"qxb"
		],
		"application/vnd.realvnc.bed": [
			"bed"
		],
		"application/vnd.recordare.musicxml": [
			"mxl"
		],
		"application/vnd.recordare.musicxml+xml": [
			"musicxml"
		],
		"application/vnd.rig.cryptonote": [
			"cryptonote"
		],
		"application/vnd.rim.cod": [
			"cod"
		],
		"application/vnd.rn-realmedia": [
			"rm"
		],
		"application/vnd.rn-realmedia-vbr": [
			"rmvb"
		],
		"application/vnd.route66.link66+xml": [
			"link66"
		],
		"application/vnd.sailingtracker.track": [
			"st"
		],
		"application/vnd.seemail": [
			"see"
		],
		"application/vnd.sema": [
			"sema"
		],
		"application/vnd.semd": [
			"semd"
		],
		"application/vnd.semf": [
			"semf"
		],
		"application/vnd.shana.informed.formdata": [
			"ifm"
		],
		"application/vnd.shana.informed.formtemplate": [
			"itp"
		],
		"application/vnd.shana.informed.interchange": [
			"iif"
		],
		"application/vnd.shana.informed.package": [
			"ipk"
		],
		"application/vnd.simtech-mindmapper": [
			"twd",
			"twds"
		],
		"application/vnd.smaf": [
			"mmf"
		],
		"application/vnd.smart.teacher": [
			"teacher"
		],
		"application/vnd.solent.sdkm+xml": [
			"sdkm",
			"sdkd"
		],
		"application/vnd.spotfire.dxp": [
			"dxp"
		],
		"application/vnd.spotfire.sfs": [
			"sfs"
		],
		"application/vnd.stardivision.calc": [
			"sdc"
		],
		"application/vnd.stardivision.draw": [
			"sda"
		],
		"application/vnd.stardivision.impress": [
			"sdd"
		],
		"application/vnd.stardivision.math": [
			"smf"
		],
		"application/vnd.stardivision.writer": [
			"sdw",
			"vor"
		],
		"application/vnd.stardivision.writer-global": [
			"sgl"
		],
		"application/vnd.stepmania.package": [
			"smzip"
		],
		"application/vnd.stepmania.stepchart": [
			"sm"
		],
		"application/vnd.sun.xml.calc": [
			"sxc"
		],
		"application/vnd.sun.xml.calc.template": [
			"stc"
		],
		"application/vnd.sun.xml.draw": [
			"sxd"
		],
		"application/vnd.sun.xml.draw.template": [
			"std"
		],
		"application/vnd.sun.xml.impress": [
			"sxi"
		],
		"application/vnd.sun.xml.impress.template": [
			"sti"
		],
		"application/vnd.sun.xml.math": [
			"sxm"
		],
		"application/vnd.sun.xml.writer": [
			"sxw"
		],
		"application/vnd.sun.xml.writer.global": [
			"sxg"
		],
		"application/vnd.sun.xml.writer.template": [
			"stw"
		],
		"application/vnd.sus-calendar": [
			"sus",
			"susp"
		],
		"application/vnd.svd": [
			"svd"
		],
		"application/vnd.symbian.install": [
			"sis",
			"sisx"
		],
		"application/vnd.syncml+xml": [
			"xsm"
		],
		"application/vnd.syncml.dm+wbxml": [
			"bdm"
		],
		"application/vnd.syncml.dm+xml": [
			"xdm"
		],
		"application/vnd.tao.intent-module-archive": [
			"tao"
		],
		"application/vnd.tcpdump.pcap": [
			"pcap",
			"cap",
			"dmp"
		],
		"application/vnd.tmobile-livetv": [
			"tmo"
		],
		"application/vnd.trid.tpt": [
			"tpt"
		],
		"application/vnd.triscape.mxs": [
			"mxs"
		],
		"application/vnd.trueapp": [
			"tra"
		],
		"application/vnd.ufdl": [
			"ufd",
			"ufdl"
		],
		"application/vnd.uiq.theme": [
			"utz"
		],
		"application/vnd.umajin": [
			"umj"
		],
		"application/vnd.unity": [
			"unityweb"
		],
		"application/vnd.uoml+xml": [
			"uoml"
		],
		"application/vnd.vcx": [
			"vcx"
		],
		"application/vnd.visio": [
			"vsd",
			"vst",
			"vss",
			"vsw"
		],
		"application/vnd.visionary": [
			"vis"
		],
		"application/vnd.vsf": [
			"vsf"
		],
		"application/vnd.wap.wbxml": [
			"wbxml"
		],
		"application/vnd.wap.wmlc": [
			"wmlc"
		],
		"application/vnd.wap.wmlscriptc": [
			"wmlsc"
		],
		"application/vnd.webturbo": [
			"wtb"
		],
		"application/vnd.wolfram.player": [
			"nbp"
		],
		"application/vnd.wordperfect": [
			"wpd"
		],
		"application/vnd.wqd": [
			"wqd"
		],
		"application/vnd.wt.stf": [
			"stf"
		],
		"application/vnd.xara": [
			"xar"
		],
		"application/vnd.xfdl": [
			"xfdl"
		],
		"application/vnd.yamaha.hv-dic": [
			"hvd"
		],
		"application/vnd.yamaha.hv-script": [
			"hvs"
		],
		"application/vnd.yamaha.hv-voice": [
			"hvp"
		],
		"application/vnd.yamaha.openscoreformat": [
			"osf"
		],
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": [
			"osfpvg"
		],
		"application/vnd.yamaha.smaf-audio": [
			"saf"
		],
		"application/vnd.yamaha.smaf-phrase": [
			"spf"
		],
		"application/vnd.yellowriver-custom-menu": [
			"cmp"
		],
		"application/vnd.zul": [
			"zir",
			"zirz"
		],
		"application/vnd.zzazz.deck+xml": [
			"zaz"
		],
		"application/voicexml+xml": [
			"vxml"
		],
		"application/widget": [
			"wgt"
		],
		"application/winhlp": [
			"hlp"
		],
		"application/wsdl+xml": [
			"wsdl"
		],
		"application/wspolicy+xml": [
			"wspolicy"
		],
		"application/x-7z-compressed": [
			"7z"
		],
		"application/x-abiword": [
			"abw"
		],
		"application/x-ace-compressed": [
			"ace"
		],
		"application/x-apple-diskimage": [
			"dmg"
		],
		"application/x-authorware-bin": [
			"aab",
			"x32",
			"u32",
			"vox"
		],
		"application/x-authorware-map": [
			"aam"
		],
		"application/x-authorware-seg": [
			"aas"
		],
		"application/x-bcpio": [
			"bcpio"
		],
		"application/x-bittorrent": [
			"torrent"
		],
		"application/x-blorb": [
			"blb",
			"blorb"
		],
		"application/x-bzip": [
			"bz"
		],
		"application/x-bzip2": [
			"bz2",
			"boz"
		],
		"application/x-cbr": [
			"cbr",
			"cba",
			"cbt",
			"cbz",
			"cb7"
		],
		"application/x-cdlink": [
			"vcd"
		],
		"application/x-cfs-compressed": [
			"cfs"
		],
		"application/x-chat": [
			"chat"
		],
		"application/x-chess-pgn": [
			"pgn"
		],
		"application/x-chrome-extension": [
			"crx"
		],
		"application/x-conference": [
			"nsc"
		],
		"application/x-cpio": [
			"cpio"
		],
		"application/x-csh": [
			"csh"
		],
		"application/x-debian-package": [
			"deb",
			"udeb"
		],
		"application/x-dgc-compressed": [
			"dgc"
		],
		"application/x-director": [
			"dir",
			"dcr",
			"dxr",
			"cst",
			"cct",
			"cxt",
			"w3d",
			"fgd",
			"swa"
		],
		"application/x-doom": [
			"wad"
		],
		"application/x-dtbncx+xml": [
			"ncx"
		],
		"application/x-dtbook+xml": [
			"dtb"
		],
		"application/x-dtbresource+xml": [
			"res"
		],
		"application/x-dvi": [
			"dvi"
		],
		"application/x-envoy": [
			"evy"
		],
		"application/x-eva": [
			"eva"
		],
		"application/x-font-bdf": [
			"bdf"
		],
		"application/x-font-ghostscript": [
			"gsf"
		],
		"application/x-font-linux-psf": [
			"psf"
		],
		"application/x-font-otf": [
			"otf"
		],
		"application/x-font-pcf": [
			"pcf"
		],
		"application/x-font-snf": [
			"snf"
		],
		"application/x-font-ttf": [
			"ttf",
			"ttc"
		],
		"application/x-font-type1": [
			"pfa",
			"pfb",
			"pfm",
			"afm"
		],
		"application/x-freearc": [
			"arc"
		],
		"application/x-futuresplash": [
			"spl"
		],
		"application/x-gca-compressed": [
			"gca"
		],
		"application/x-glulx": [
			"ulx"
		],
		"application/x-gnumeric": [
			"gnumeric"
		],
		"application/x-gramps-xml": [
			"gramps"
		],
		"application/x-gtar": [
			"gtar"
		],
		"application/x-hdf": [
			"hdf"
		],
		"application/x-install-instructions": [
			"install"
		],
		"application/x-iso9660-image": [
			"iso"
		],
		"application/x-java-jnlp-file": [
			"jnlp"
		],
		"application/x-latex": [
			"latex"
		],
		"application/x-lua-bytecode": [
			"luac"
		],
		"application/x-lzh-compressed": [
			"lzh",
			"lha"
		],
		"application/x-mie": [
			"mie"
		],
		"application/x-mobipocket-ebook": [
			"prc",
			"mobi"
		],
		"application/x-ms-application": [
			"application"
		],
		"application/x-ms-shortcut": [
			"lnk"
		],
		"application/x-ms-wmd": [
			"wmd"
		],
		"application/x-ms-wmz": [
			"wmz"
		],
		"application/x-ms-xbap": [
			"xbap"
		],
		"application/x-msaccess": [
			"mdb"
		],
		"application/x-msbinder": [
			"obd"
		],
		"application/x-mscardfile": [
			"crd"
		],
		"application/x-msclip": [
			"clp"
		],
		"application/x-msdownload": [
			"exe",
			"dll",
			"com",
			"bat",
			"msi"
		],
		"application/x-msmediaview": [
			"mvb",
			"m13",
			"m14"
		],
		"application/x-msmetafile": [
			"wmf",
			"wmz",
			"emf",
			"emz"
		],
		"application/x-msmoney": [
			"mny"
		],
		"application/x-mspublisher": [
			"pub"
		],
		"application/x-msschedule": [
			"scd"
		],
		"application/x-msterminal": [
			"trm"
		],
		"application/x-mswrite": [
			"wri"
		],
		"application/x-netcdf": [
			"nc",
			"cdf"
		],
		"application/x-nzb": [
			"nzb"
		],
		"application/x-pkcs12": [
			"p12",
			"pfx"
		],
		"application/x-pkcs7-certificates": [
			"p7b",
			"spc"
		],
		"application/x-pkcs7-certreqresp": [
			"p7r"
		],
		"application/x-rar-compressed": [
			"rar"
		],
		"application/x-research-info-systems": [
			"ris"
		],
		"application/x-sh": [
			"sh"
		],
		"application/x-shar": [
			"shar"
		],
		"application/x-shockwave-flash": [
			"swf"
		],
		"application/x-silverlight-app": [
			"xap"
		],
		"application/x-sql": [
			"sql"
		],
		"application/x-stuffit": [
			"sit"
		],
		"application/x-stuffitx": [
			"sitx"
		],
		"application/x-subrip": [
			"srt"
		],
		"application/x-sv4cpio": [
			"sv4cpio"
		],
		"application/x-sv4crc": [
			"sv4crc"
		],
		"application/x-t3vm-image": [
			"t3"
		],
		"application/x-tads": [
			"gam"
		],
		"application/x-tar": [
			"tar"
		],
		"application/x-tcl": [
			"tcl"
		],
		"application/x-tex": [
			"tex"
		],
		"application/x-tex-tfm": [
			"tfm"
		],
		"application/x-texinfo": [
			"texinfo",
			"texi"
		],
		"application/x-tgif": [
			"obj"
		],
		"application/x-ustar": [
			"ustar"
		],
		"application/x-wais-source": [
			"src"
		],
		"application/x-web-app-manifest+json": [
			"webapp"
		],
		"application/x-x509-ca-cert": [
			"der",
			"crt"
		],
		"application/x-xfig": [
			"fig"
		],
		"application/x-xliff+xml": [
			"xlf"
		],
		"application/x-xpinstall": [
			"xpi"
		],
		"application/x-xz": [
			"xz"
		],
		"application/x-zmachine": [
			"z1",
			"z2",
			"z3",
			"z4",
			"z5",
			"z6",
			"z7",
			"z8"
		],
		"application/xaml+xml": [
			"xaml"
		],
		"application/xcap-diff+xml": [
			"xdf"
		],
		"application/xenc+xml": [
			"xenc"
		],
		"application/xhtml+xml": [
			"xhtml",
			"xht"
		],
		"application/xml": [
			"xml",
			"xsl",
			"xsd"
		],
		"application/xml-dtd": [
			"dtd"
		],
		"application/xop+xml": [
			"xop"
		],
		"application/xproc+xml": [
			"xpl"
		],
		"application/xslt+xml": [
			"xslt"
		],
		"application/xspf+xml": [
			"xspf"
		],
		"application/xv+xml": [
			"mxml",
			"xhvml",
			"xvml",
			"xvm"
		],
		"application/yang": [
			"yang"
		],
		"application/yin+xml": [
			"yin"
		],
		"application/zip": [
			"zip"
		],
		"audio/adpcm": [
			"adp"
		],
		"audio/basic": [
			"au",
			"snd"
		],
		"audio/midi": [
			"mid",
			"midi",
			"kar",
			"rmi"
		],
		"audio/mp4": [
			"mp4a",
			"m4a"
		],
		"audio/mpeg": [
			"mpga",
			"mp2",
			"mp2a",
			"mp3",
			"m2a",
			"m3a"
		],
		"audio/ogg": [
			"oga",
			"ogg",
			"spx"
		],
		"audio/s3m": [
			"s3m"
		],
		"audio/silk": [
			"sil"
		],
		"audio/vnd.dece.audio": [
			"uva",
			"uvva"
		],
		"audio/vnd.digital-winds": [
			"eol"
		],
		"audio/vnd.dra": [
			"dra"
		],
		"audio/vnd.dts": [
			"dts"
		],
		"audio/vnd.dts.hd": [
			"dtshd"
		],
		"audio/vnd.lucent.voice": [
			"lvp"
		],
		"audio/vnd.ms-playready.media.pya": [
			"pya"
		],
		"audio/vnd.nuera.ecelp4800": [
			"ecelp4800"
		],
		"audio/vnd.nuera.ecelp7470": [
			"ecelp7470"
		],
		"audio/vnd.nuera.ecelp9600": [
			"ecelp9600"
		],
		"audio/vnd.rip": [
			"rip"
		],
		"audio/webm": [
			"weba"
		],
		"audio/x-aac": [
			"aac"
		],
		"audio/x-aiff": [
			"aif",
			"aiff",
			"aifc"
		],
		"audio/x-caf": [
			"caf"
		],
		"audio/x-flac": [
			"flac"
		],
		"audio/x-matroska": [
			"mka"
		],
		"audio/x-mpegurl": [
			"m3u"
		],
		"audio/x-ms-wax": [
			"wax"
		],
		"audio/x-ms-wma": [
			"wma"
		],
		"audio/x-pn-realaudio": [
			"ram",
			"ra"
		],
		"audio/x-pn-realaudio-plugin": [
			"rmp"
		],
		"audio/x-wav": [
			"wav"
		],
		"audio/xm": [
			"xm"
		],
		"chemical/x-cdx": [
			"cdx"
		],
		"chemical/x-cif": [
			"cif"
		],
		"chemical/x-cmdf": [
			"cmdf"
		],
		"chemical/x-cml": [
			"cml"
		],
		"chemical/x-csml": [
			"csml"
		],
		"chemical/x-xyz": [
			"xyz"
		],
		"font/opentype": [
			"otf"
		],
		"image/bmp": [
			"bmp"
		],
		"image/cgm": [
			"cgm"
		],
		"image/g3fax": [
			"g3"
		],
		"image/gif": [
			"gif"
		],
		"image/ief": [
			"ief"
		],
		"image/jpeg": [
			"jpeg",
			"jpg",
			"jpe"
		],
		"image/ktx": [
			"ktx"
		],
		"image/png": [
			"png"
		],
		"image/prs.btif": [
			"btif"
		],
		"image/sgi": [
			"sgi"
		],
		"image/svg+xml": [
			"svg",
			"svgz"
		],
		"image/tiff": [
			"tiff",
			"tif"
		],
		"image/vnd.adobe.photoshop": [
			"psd"
		],
		"image/vnd.dece.graphic": [
			"uvi",
			"uvvi",
			"uvg",
			"uvvg"
		],
		"image/vnd.djvu": [
			"djvu",
			"djv"
		],
		"image/vnd.dvb.subtitle": [
			"sub"
		],
		"image/vnd.dwg": [
			"dwg"
		],
		"image/vnd.dxf": [
			"dxf"
		],
		"image/vnd.fastbidsheet": [
			"fbs"
		],
		"image/vnd.fpx": [
			"fpx"
		],
		"image/vnd.fst": [
			"fst"
		],
		"image/vnd.fujixerox.edmics-mmr": [
			"mmr"
		],
		"image/vnd.fujixerox.edmics-rlc": [
			"rlc"
		],
		"image/vnd.ms-modi": [
			"mdi"
		],
		"image/vnd.ms-photo": [
			"wdp"
		],
		"image/vnd.net-fpx": [
			"npx"
		],
		"image/vnd.wap.wbmp": [
			"wbmp"
		],
		"image/vnd.xiff": [
			"xif"
		],
		"image/webp": [
			"webp"
		],
		"image/x-3ds": [
			"3ds"
		],
		"image/x-cmu-raster": [
			"ras"
		],
		"image/x-cmx": [
			"cmx"
		],
		"image/x-freehand": [
			"fh",
			"fhc",
			"fh4",
			"fh5",
			"fh7"
		],
		"image/x-icon": [
			"ico"
		],
		"image/x-mrsid-image": [
			"sid"
		],
		"image/x-pcx": [
			"pcx"
		],
		"image/x-pict": [
			"pic",
			"pct"
		],
		"image/x-portable-anymap": [
			"pnm"
		],
		"image/x-portable-bitmap": [
			"pbm"
		],
		"image/x-portable-graymap": [
			"pgm"
		],
		"image/x-portable-pixmap": [
			"ppm"
		],
		"image/x-rgb": [
			"rgb"
		],
		"image/x-tga": [
			"tga"
		],
		"image/x-xbitmap": [
			"xbm"
		],
		"image/x-xpixmap": [
			"xpm"
		],
		"image/x-xwindowdump": [
			"xwd"
		],
		"message/rfc822": [
			"eml",
			"mime"
		],
		"model/iges": [
			"igs",
			"iges"
		],
		"model/mesh": [
			"msh",
			"mesh",
			"silo"
		],
		"model/vnd.collada+xml": [
			"dae"
		],
		"model/vnd.dwf": [
			"dwf"
		],
		"model/vnd.gdl": [
			"gdl"
		],
		"model/vnd.gtw": [
			"gtw"
		],
		"model/vnd.mts": [
			"mts"
		],
		"model/vnd.vtu": [
			"vtu"
		],
		"model/vrml": [
			"wrl",
			"vrml"
		],
		"model/x3d+binary": [
			"x3db",
			"x3dbz"
		],
		"model/x3d+vrml": [
			"x3dv",
			"x3dvz"
		],
		"model/x3d+xml": [
			"x3d",
			"x3dz"
		],
		"text/cache-manifest": [
			"appcache",
			"manifest"
		],
		"text/calendar": [
			"ics",
			"ifb"
		],
		"text/coffeescript": [
			"coffee"
		],
		"text/css": [
			"css"
		],
		"text/csv": [
			"csv"
		],
		"text/hjson": [
			"hjson"
		],
		"text/html": [
			"html",
			"htm"
		],
		"text/jade": [
			"jade"
		],
		"text/jsx": [
			"jsx"
		],
		"text/less": [
			"less"
		],
		"text/n3": [
			"n3"
		],
		"text/plain": [
			"txt",
			"text",
			"conf",
			"def",
			"list",
			"log",
			"in",
			"ini"
		],
		"text/prs.lines.tag": [
			"dsc"
		],
		"text/richtext": [
			"rtx"
		],
		"text/sgml": [
			"sgml",
			"sgm"
		],
		"text/stylus": [
			"stylus",
			"styl"
		],
		"text/tab-separated-values": [
			"tsv"
		],
		"text/troff": [
			"t",
			"tr",
			"roff",
			"man",
			"me",
			"ms"
		],
		"text/turtle": [
			"ttl"
		],
		"text/uri-list": [
			"uri",
			"uris",
			"urls"
		],
		"text/vcard": [
			"vcard"
		],
		"text/vnd.curl": [
			"curl"
		],
		"text/vnd.curl.dcurl": [
			"dcurl"
		],
		"text/vnd.curl.mcurl": [
			"mcurl"
		],
		"text/vnd.curl.scurl": [
			"scurl"
		],
		"text/vnd.dvb.subtitle": [
			"sub"
		],
		"text/vnd.fly": [
			"fly"
		],
		"text/vnd.fmi.flexstor": [
			"flx"
		],
		"text/vnd.graphviz": [
			"gv"
		],
		"text/vnd.in3d.3dml": [
			"3dml"
		],
		"text/vnd.in3d.spot": [
			"spot"
		],
		"text/vnd.sun.j2me.app-descriptor": [
			"jad"
		],
		"text/vnd.wap.wml": [
			"wml"
		],
		"text/vnd.wap.wmlscript": [
			"wmls"
		],
		"text/vtt": [
			"vtt"
		],
		"text/x-asm": [
			"s",
			"asm"
		],
		"text/x-c": [
			"c",
			"cc",
			"cxx",
			"cpp",
			"h",
			"hh",
			"dic"
		],
		"text/x-component": [
			"htc"
		],
		"text/x-fortran": [
			"f",
			"for",
			"f77",
			"f90"
		],
		"text/x-handlebars-template": [
			"hbs"
		],
		"text/x-java-source": [
			"java"
		],
		"text/x-lua": [
			"lua"
		],
		"text/x-markdown": [
			"markdown",
			"md",
			"mkd"
		],
		"text/x-nfo": [
			"nfo"
		],
		"text/x-opml": [
			"opml"
		],
		"text/x-pascal": [
			"p",
			"pas"
		],
		"text/x-sass": [
			"sass"
		],
		"text/x-scss": [
			"scss"
		],
		"text/x-setext": [
			"etx"
		],
		"text/x-sfv": [
			"sfv"
		],
		"text/x-uuencode": [
			"uu"
		],
		"text/x-vcalendar": [
			"vcs"
		],
		"text/x-vcard": [
			"vcf"
		],
		"text/yaml": [
			"yaml",
			"yml"
		],
		"video/3gpp": [
			"3gp"
		],
		"video/3gpp2": [
			"3g2"
		],
		"video/h261": [
			"h261"
		],
		"video/h263": [
			"h263"
		],
		"video/h264": [
			"h264"
		],
		"video/jpeg": [
			"jpgv"
		],
		"video/jpm": [
			"jpm",
			"jpgm"
		],
		"video/mj2": [
			"mj2",
			"mjp2"
		],
		"video/mp2t": [
			"ts"
		],
		"video/mp4": [
			"mp4",
			"mp4v",
			"mpg4"
		],
		"video/mpeg": [
			"mpeg",
			"mpg",
			"mpe",
			"m1v",
			"m2v"
		],
		"video/ogg": [
			"ogv"
		],
		"video/quicktime": [
			"qt",
			"mov"
		],
		"video/vnd.dece.hd": [
			"uvh",
			"uvvh"
		],
		"video/vnd.dece.mobile": [
			"uvm",
			"uvvm"
		],
		"video/vnd.dece.pd": [
			"uvp",
			"uvvp"
		],
		"video/vnd.dece.sd": [
			"uvs",
			"uvvs"
		],
		"video/vnd.dece.video": [
			"uvv",
			"uvvv"
		],
		"video/vnd.dvb.file": [
			"dvb"
		],
		"video/vnd.fvt": [
			"fvt"
		],
		"video/vnd.mpegurl": [
			"mxu",
			"m4u"
		],
		"video/vnd.ms-playready.media.pyv": [
			"pyv"
		],
		"video/vnd.uvvu.mp4": [
			"uvu",
			"uvvu"
		],
		"video/vnd.vivo": [
			"viv"
		],
		"video/webm": [
			"webm"
		],
		"video/x-f4v": [
			"f4v"
		],
		"video/x-fli": [
			"fli"
		],
		"video/x-flv": [
			"flv"
		],
		"video/x-m4v": [
			"m4v"
		],
		"video/x-matroska": [
			"mkv",
			"mk3d",
			"mks"
		],
		"video/x-mng": [
			"mng"
		],
		"video/x-ms-asf": [
			"asf",
			"asx"
		],
		"video/x-ms-vob": [
			"vob"
		],
		"video/x-ms-wm": [
			"wm"
		],
		"video/x-ms-wmv": [
			"wmv"
		],
		"video/x-ms-wmx": [
			"wmx"
		],
		"video/x-ms-wvx": [
			"wvx"
		],
		"video/x-msvideo": [
			"avi"
		],
		"video/x-sgi-movie": [
			"movie"
		],
		"video/x-smv": [
			"smv"
		],
		"x-conference/x-cooltalk": [
			"ice"
		]
	};

/***/ },
/* 473 */
/***/ function(module, exports) {

	
	/**
	 * Expose `fresh()`.
	 */

	module.exports = fresh;

	/**
	 * Check freshness of `req` and `res` headers.
	 *
	 * When the cache is "fresh" __true__ is returned,
	 * otherwise __false__ is returned to indicate that
	 * the cache is now stale.
	 *
	 * @param {Object} req
	 * @param {Object} res
	 * @return {Boolean}
	 * @api public
	 */

	function fresh(req, res) {
	  // defaults
	  var etagMatches = true;
	  var notModified = true;

	  // fields
	  var modifiedSince = req['if-modified-since'];
	  var noneMatch = req['if-none-match'];
	  var lastModified = res['last-modified'];
	  var etag = res['etag'];
	  var cc = req['cache-control'];

	  // unconditional request
	  if (!modifiedSince && !noneMatch) return false;

	  // check for no-cache cache request directive
	  if (cc && cc.indexOf('no-cache') !== -1) return false;  

	  // parse if-none-match
	  if (noneMatch) noneMatch = noneMatch.split(/ *, */);

	  // if-none-match
	  if (noneMatch) {
	    etagMatches = noneMatch.some(function (match) {
	      return match === '*' || match === etag || match === 'W/' + etag;
	    });
	  }

	  // if-modified-since
	  if (modifiedSince) {
	    modifiedSince = new Date(modifiedSince);
	    lastModified = new Date(lastModified);
	    notModified = lastModified <= modifiedSince;
	  }

	  return !! (etagMatches && notModified);
	}


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * etag
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = etag

	/**
	 * Module dependencies.
	 * @private
	 */

	var crypto = __webpack_require__(400)
	var Stats = __webpack_require__(350).Stats

	/**
	 * Module variables.
	 * @private
	 */

	var base64PadCharRegExp = /=+$/
	var toString = Object.prototype.toString

	/**
	 * Generate an entity tag.
	 *
	 * @param {Buffer|string} entity
	 * @return {string}
	 * @private
	 */

	function entitytag(entity) {
	  if (entity.length === 0) {
	    // fast-path empty
	    return '"0-1B2M2Y8AsgTpgAmY7PhCfg"'
	  }

	  // compute hash of entity
	  var hash = crypto
	    .createHash('md5')
	    .update(entity, 'utf8')
	    .digest('base64')
	    .replace(base64PadCharRegExp, '')

	  // compute length of entity
	  var len = typeof entity === 'string'
	    ? Buffer.byteLength(entity, 'utf8')
	    : entity.length

	  return '"' + len.toString(16) + '-' + hash + '"'
	}

	/**
	 * Create a simple ETag.
	 *
	 * @param {string|Buffer|Stats} entity
	 * @param {object} [options]
	 * @param {boolean} [options.weak]
	 * @return {String}
	 * @public
	 */

	function etag(entity, options) {
	  if (entity == null) {
	    throw new TypeError('argument entity is required')
	  }

	  // support fs.Stats object
	  var isStats = isstats(entity)
	  var weak = options && typeof options.weak === 'boolean'
	    ? options.weak
	    : isStats

	  // validate argument
	  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
	    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')
	  }

	  // generate entity tag
	  var tag = isStats
	    ? stattag(entity)
	    : entitytag(entity)

	  return weak
	    ? 'W/' + tag
	    : tag
	}

	/**
	 * Determine if object is a Stats object.
	 *
	 * @param {object} obj
	 * @return {boolean}
	 * @api private
	 */

	function isstats(obj) {
	  // genuine fs.Stats
	  if (typeof Stats === 'function' && obj instanceof Stats) {
	    return true
	  }

	  // quack quack
	  return obj && typeof obj === 'object'
	    && 'ctime' in obj && toString.call(obj.ctime) === '[object Date]'
	    && 'mtime' in obj && toString.call(obj.mtime) === '[object Date]'
	    && 'ino' in obj && typeof obj.ino === 'number'
	    && 'size' in obj && typeof obj.size === 'number'
	}

	/**
	 * Generate a tag for a stat.
	 *
	 * @param {object} stat
	 * @return {string}
	 * @private
	 */

	function stattag(stat) {
	  var mtime = stat.mtime.getTime().toString(16)
	  var size = stat.size.toString(16)

	  return '"' + size + '-' + mtime + '"'
	}


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * proxy-addr
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 */

	module.exports = proxyaddr;
	module.exports.all = alladdrs;
	module.exports.compile = compile;

	/**
	 * Module dependencies.
	 */

	var forwarded = __webpack_require__(476);
	var ipaddr = __webpack_require__(387);

	/**
	 * Variables.
	 */

	var digitre = /^[0-9]+$/;
	var isip = ipaddr.isValid;
	var parseip = ipaddr.parse;

	/**
	 * Pre-defined IP ranges.
	 */

	var ipranges = {
	  linklocal: ['169.254.0.0/16', 'fe80::/10'],
	  loopback: ['127.0.0.1/8', '::1/128'],
	  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
	};

	/**
	 * Get all addresses in the request, optionally stopping
	 * at the first untrusted.
	 *
	 * @param {Object} request
	 * @param {Function|Array|String} [trust]
	 * @api public
	 */

	function alladdrs(req, trust) {
	  // get addresses
	  var addrs = forwarded(req);

	  if (!trust) {
	    // Return all addresses
	    return addrs;
	  }

	  if (typeof trust !== 'function') {
	    trust = compile(trust);
	  }

	  for (var i = 0; i < addrs.length - 1; i++) {
	    if (trust(addrs[i], i)) continue;

	    addrs.length = i + 1;
	  }

	  return addrs;
	}

	/**
	 * Compile argument into trust function.
	 *
	 * @param {Array|String} val
	 * @api private
	 */

	function compile(val) {
	  if (!val) {
	    throw new TypeError('argument is required');
	  }

	  var trust = typeof val === 'string'
	    ? [val]
	    : val;

	  if (!Array.isArray(trust)) {
	    throw new TypeError('unsupported trust argument');
	  }

	  for (var i = 0; i < trust.length; i++) {
	    val = trust[i];

	    if (!ipranges.hasOwnProperty(val)) {
	      continue;
	    }

	    // Splice in pre-defined range
	    val = ipranges[val];
	    trust.splice.apply(trust, [i, 1].concat(val));
	    i += val.length - 1;
	  }

	  return compileTrust(compileRangeSubnets(trust));
	}

	/**
	 * Compile `arr` elements into range subnets.
	 *
	 * @param {Array} arr
	 * @api private
	 */

	function compileRangeSubnets(arr) {
	  var rangeSubnets = new Array(arr.length);

	  for (var i = 0; i < arr.length; i++) {
	    rangeSubnets[i] = parseipNotation(arr[i]);
	  }

	  return rangeSubnets;
	}

	/**
	 * Compile range subnet array into trust function.
	 *
	 * @param {Array} rangeSubnets
	 * @api private
	 */

	function compileTrust(rangeSubnets) {
	  // Return optimized function based on length
	  var len = rangeSubnets.length;
	  return len === 0
	    ? trustNone
	    : len === 1
	    ? trustSingle(rangeSubnets[0])
	    : trustMulti(rangeSubnets);
	}

	/**
	 * Parse IP notation string into range subnet.
	 *
	 * @param {String} note
	 * @api private
	 */

	function parseipNotation(note) {
	  var ip;
	  var kind;
	  var max;
	  var pos = note.lastIndexOf('/');
	  var range;

	  ip = pos !== -1
	    ? note.substring(0, pos)
	    : note;

	  if (!isip(ip)) {
	    throw new TypeError('invalid IP address: ' + ip);
	  }

	  ip = parseip(ip);

	  kind = ip.kind();
	  max = kind === 'ipv6'
	    ? 128
	    : 32;

	  range = pos !== -1
	    ? note.substring(pos + 1, note.length)
	    : max;

	  if (typeof range !== 'number') {
	    range = digitre.test(range)
	      ? parseInt(range, 10)
	      : isip(range)
	      ? parseNetmask(range)
	      : 0;
	  }

	  if (ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
	    // Store as IPv4
	    ip = ip.toIPv4Address();
	    range = range <= max
	      ? range - 96
	      : range;
	  }

	  if (range <= 0 || range > max) {
	    throw new TypeError('invalid range on address: ' + note);
	  }

	  return [ip, range];
	}

	/**
	 * Parse netmask string into CIDR range.
	 *
	 * @param {String} note
	 * @api private
	 */

	function parseNetmask(netmask) {
	  var ip = parseip(netmask);
	  var parts;
	  var size;

	  switch (ip.kind()) {
	    case 'ipv4':
	      parts = ip.octets;
	      size = 8;
	      break;
	    case 'ipv6':
	      parts = ip.parts;
	      size = 16;
	      break;
	  }

	  var max = Math.pow(2, size) - 1;
	  var part;
	  var range = 0;

	  for (var i = 0; i < parts.length; i++) {
	    part = parts[i] & max;

	    if (part === max) {
	      range += size;
	      continue;
	    }

	    while (part) {
	      part = (part << 1) & max;
	      range += 1;
	    }

	    break;
	  }

	  return range;
	}

	/**
	 * Determine address of proxied request.
	 *
	 * @param {Object} request
	 * @param {Function|Array|String} trust
	 * @api public
	 */

	function proxyaddr(req, trust) {
	  if (!req) {
	    throw new TypeError('req argument is required');
	  }

	  if (!trust) {
	    throw new TypeError('trust argument is required');
	  }

	  var addrs = alladdrs(req, trust);
	  var addr = addrs[addrs.length - 1];

	  return addr;
	}

	/**
	 * Static trust function to trust nothing.
	 *
	 * @api private
	 */

	function trustNone() {
	  return false;
	}

	/**
	 * Compile trust function for multiple subnets.
	 *
	 * @param {Array} subnets
	 * @api private
	 */

	function trustMulti(subnets) {
	  return function trust(addr) {
	    if (!isip(addr)) return false;

	    var ip = parseip(addr);
	    var ipv4;
	    var kind = ip.kind();
	    var subnet;
	    var subnetip;
	    var subnetkind;
	    var subnetrange;
	    var trusted;

	    for (var i = 0; i < subnets.length; i++) {
	      subnet = subnets[i];
	      subnetip = subnet[0];
	      subnetkind = subnetip.kind();
	      subnetrange = subnet[1];
	      trusted = ip;

	      if (kind !== subnetkind) {
	        if (kind !== 'ipv6' || subnetkind !== 'ipv4' || !ip.isIPv4MappedAddress()) {
	          continue;
	        }

	        // Store addr as IPv4
	        ipv4 = ipv4 || ip.toIPv4Address();
	        trusted = ipv4;
	      }

	      if (trusted.match(subnetip, subnetrange)) return true;
	    }

	    return false;
	  };
	}

	/**
	 * Compile trust function for single subnet.
	 *
	 * @param {Object} subnet
	 * @api private
	 */

	function trustSingle(subnet) {
	  var subnetip = subnet[0];
	  var subnetkind = subnetip.kind();
	  var subnetisipv4 = subnetkind === 'ipv4';
	  var subnetrange = subnet[1];

	  return function trust(addr) {
	    if (!isip(addr)) return false;

	    var ip = parseip(addr);
	    var kind = ip.kind();

	    return kind === subnetkind
	      ? ip.match(subnetip, subnetrange)
	      : subnetisipv4 && kind === 'ipv6' && ip.isIPv4MappedAddress()
	      ? ip.toIPv4Address().match(subnetip, subnetrange)
	      : false;
	  };
	}


/***/ },
/* 476 */
/***/ function(module, exports) {

	/*!
	 * forwarded
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 */

	module.exports = forwarded

	/**
	 * Get all addresses in the request, using the `X-Forwarded-For` header.
	 *
	 * @param {Object} req
	 * @api public
	 */

	function forwarded(req) {
	  if (!req) {
	    throw new TypeError('argument req is required')
	  }

	  // simple header parsing
	  var proxyAddrs = (req.headers['x-forwarded-for'] || '')
	    .split(/ *, */)
	    .filter(Boolean)
	    .reverse()
	  var socketAddr = req.connection.remoteAddress
	  var addrs = [socketAddr].concat(proxyAddrs)

	  // return all addresses
	  return addrs
	}


/***/ },
/* 477 */
/***/ function(module, exports) {

	module.exports = require("querystring");

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./application": 434,
		"./application.js": 434,
		"./express": 432,
		"./express.js": 432,
		"./middleware/init": 454,
		"./middleware/init.js": 454,
		"./middleware/query": 455,
		"./middleware/query.js": 455,
		"./request": 479,
		"./request.js": 479,
		"./response": 488,
		"./response.js": 488,
		"./router/index": 440,
		"./router/index.js": 440,
		"./router/layer": 443,
		"./router/layer.js": 443,
		"./router/route": 441,
		"./router/route.js": 441,
		"./utils": 461,
		"./utils.js": 461,
		"./view": 460,
		"./view.js": 460
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 478;


/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var accepts = __webpack_require__(480);
	var deprecate = __webpack_require__(447)('express');
	var isIP = __webpack_require__(323).isIP;
	var typeis = __webpack_require__(486);
	var http = __webpack_require__(326);
	var fresh = __webpack_require__(473);
	var parseRange = __webpack_require__(470);
	var parse = __webpack_require__(453);
	var proxyaddr = __webpack_require__(475);

	/**
	 * Request prototype.
	 */

	var req = exports = module.exports = {
	  __proto__: http.IncomingMessage.prototype
	};

	/**
	 * Return request header.
	 *
	 * The `Referrer` header field is special-cased,
	 * both `Referrer` and `Referer` are interchangeable.
	 *
	 * Examples:
	 *
	 *     req.get('Content-Type');
	 *     // => "text/plain"
	 *
	 *     req.get('content-type');
	 *     // => "text/plain"
	 *
	 *     req.get('Something');
	 *     // => undefined
	 *
	 * Aliased as `req.header()`.
	 *
	 * @param {String} name
	 * @return {String}
	 * @public
	 */

	req.get =
	req.header = function header(name) {
	  var lc = name.toLowerCase();

	  switch (lc) {
	    case 'referer':
	    case 'referrer':
	      return this.headers.referrer
	        || this.headers.referer;
	    default:
	      return this.headers[lc];
	  }
	};

	/**
	 * To do: update docs.
	 *
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single MIME type string
	 * such as "application/json", an extension name
	 * such as "json", a comma-delimited list such as "json, html, text/plain",
	 * an argument list such as `"json", "html", "text/plain"`,
	 * or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given, the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     req.accepts('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     req.accepts('html');
	 *     // => "html"
	 *     req.accepts('text/html');
	 *     // => "text/html"
	 *     req.accepts('json, text');
	 *     // => "json"
	 *     req.accepts('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     req.accepts('image/png');
	 *     req.accepts('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     req.accepts(['html', 'json']);
	 *     req.accepts('html', 'json');
	 *     req.accepts('html, json');
	 *     // => "json"
	 *
	 * @param {String|Array} type(s)
	 * @return {String|Array|Boolean}
	 * @public
	 */

	req.accepts = function(){
	  var accept = accepts(this);
	  return accept.types.apply(accept, arguments);
	};

	/**
	 * Check if the given `encoding`s are accepted.
	 *
	 * @param {String} ...encoding
	 * @return {String|Array}
	 * @public
	 */

	req.acceptsEncodings = function(){
	  var accept = accepts(this);
	  return accept.encodings.apply(accept, arguments);
	};

	req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
	  'req.acceptsEncoding: Use acceptsEncodings instead');

	/**
	 * Check if the given `charset`s are acceptable,
	 * otherwise you should respond with 406 "Not Acceptable".
	 *
	 * @param {String} ...charset
	 * @return {String|Array}
	 * @public
	 */

	req.acceptsCharsets = function(){
	  var accept = accepts(this);
	  return accept.charsets.apply(accept, arguments);
	};

	req.acceptsCharset = deprecate.function(req.acceptsCharsets,
	  'req.acceptsCharset: Use acceptsCharsets instead');

	/**
	 * Check if the given `lang`s are acceptable,
	 * otherwise you should respond with 406 "Not Acceptable".
	 *
	 * @param {String} ...lang
	 * @return {String|Array}
	 * @public
	 */

	req.acceptsLanguages = function(){
	  var accept = accepts(this);
	  return accept.languages.apply(accept, arguments);
	};

	req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
	  'req.acceptsLanguage: Use acceptsLanguages instead');

	/**
	 * Parse Range header field,
	 * capping to the given `size`.
	 *
	 * Unspecified ranges such as "0-" require
	 * knowledge of your resource length. In
	 * the case of a byte range this is of course
	 * the total number of bytes. If the Range
	 * header field is not given `null` is returned,
	 * `-1` when unsatisfiable, `-2` when syntactically invalid.
	 *
	 * NOTE: remember that ranges are inclusive, so
	 * for example "Range: users=0-3" should respond
	 * with 4 users when available, not 3.
	 *
	 * @param {Number} size
	 * @return {Array}
	 * @public
	 */

	req.range = function(size){
	  var range = this.get('Range');
	  if (!range) return;
	  return parseRange(size, range);
	};

	/**
	 * Return the value of param `name` when present or `defaultValue`.
	 *
	 *  - Checks route placeholders, ex: _/user/:id_
	 *  - Checks body params, ex: id=12, {"id":12}
	 *  - Checks query string params, ex: ?id=12
	 *
	 * To utilize request bodies, `req.body`
	 * should be an object. This can be done by using
	 * the `bodyParser()` middleware.
	 *
	 * @param {String} name
	 * @param {Mixed} [defaultValue]
	 * @return {String}
	 * @public
	 */

	req.param = function param(name, defaultValue) {
	  var params = this.params || {};
	  var body = this.body || {};
	  var query = this.query || {};

	  var args = arguments.length === 1
	    ? 'name'
	    : 'name, default';
	  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');

	  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
	  if (null != body[name]) return body[name];
	  if (null != query[name]) return query[name];

	  return defaultValue;
	};

	/**
	 * Check if the incoming request contains the "Content-Type"
	 * header field, and it contains the give mime `type`.
	 *
	 * Examples:
	 *
	 *      // With Content-Type: text/html; charset=utf-8
	 *      req.is('html');
	 *      req.is('text/html');
	 *      req.is('text/*');
	 *      // => true
	 *
	 *      // When Content-Type is application/json
	 *      req.is('json');
	 *      req.is('application/json');
	 *      req.is('application/*');
	 *      // => true
	 *
	 *      req.is('html');
	 *      // => false
	 *
	 * @param {String|Array} types...
	 * @return {String|false|null}
	 * @public
	 */

	req.is = function is(types) {
	  var arr = types;

	  // support flattened arguments
	  if (!Array.isArray(types)) {
	    arr = new Array(arguments.length);
	    for (var i = 0; i < arr.length; i++) {
	      arr[i] = arguments[i];
	    }
	  }

	  return typeis(this, arr);
	};

	/**
	 * Return the protocol string "http" or "https"
	 * when requested with TLS. When the "trust proxy"
	 * setting trusts the socket address, the
	 * "X-Forwarded-Proto" header field will be trusted
	 * and used if present.
	 *
	 * If you're running behind a reverse proxy that
	 * supplies https for you this may be enabled.
	 *
	 * @return {String}
	 * @public
	 */

	defineGetter(req, 'protocol', function protocol(){
	  var proto = this.connection.encrypted
	    ? 'https'
	    : 'http';
	  var trust = this.app.get('trust proxy fn');

	  if (!trust(this.connection.remoteAddress, 0)) {
	    return proto;
	  }

	  // Note: X-Forwarded-Proto is normally only ever a
	  //       single value, but this is to be safe.
	  proto = this.get('X-Forwarded-Proto') || proto;
	  return proto.split(/\s*,\s*/)[0];
	});

	/**
	 * Short-hand for:
	 *
	 *    req.protocol == 'https'
	 *
	 * @return {Boolean}
	 * @public
	 */

	defineGetter(req, 'secure', function secure(){
	  return this.protocol === 'https';
	});

	/**
	 * Return the remote address from the trusted proxy.
	 *
	 * The is the remote address on the socket unless
	 * "trust proxy" is set.
	 *
	 * @return {String}
	 * @public
	 */

	defineGetter(req, 'ip', function ip(){
	  var trust = this.app.get('trust proxy fn');
	  return proxyaddr(this, trust);
	});

	/**
	 * When "trust proxy" is set, trusted proxy addresses + client.
	 *
	 * For example if the value were "client, proxy1, proxy2"
	 * you would receive the array `["client", "proxy1", "proxy2"]`
	 * where "proxy2" is the furthest down-stream and "proxy1" and
	 * "proxy2" were trusted.
	 *
	 * @return {Array}
	 * @public
	 */

	defineGetter(req, 'ips', function ips() {
	  var trust = this.app.get('trust proxy fn');
	  var addrs = proxyaddr.all(this, trust);
	  return addrs.slice(1).reverse();
	});

	/**
	 * Return subdomains as an array.
	 *
	 * Subdomains are the dot-separated parts of the host before the main domain of
	 * the app. By default, the domain of the app is assumed to be the last two
	 * parts of the host. This can be changed by setting "subdomain offset".
	 *
	 * For example, if the domain is "tobi.ferrets.example.com":
	 * If "subdomain offset" is not set, req.subdomains is `["ferrets", "tobi"]`.
	 * If "subdomain offset" is 3, req.subdomains is `["tobi"]`.
	 *
	 * @return {Array}
	 * @public
	 */

	defineGetter(req, 'subdomains', function subdomains() {
	  var hostname = this.hostname;

	  if (!hostname) return [];

	  var offset = this.app.get('subdomain offset');
	  var subdomains = !isIP(hostname)
	    ? hostname.split('.').reverse()
	    : [hostname];

	  return subdomains.slice(offset);
	});

	/**
	 * Short-hand for `url.parse(req.url).pathname`.
	 *
	 * @return {String}
	 * @public
	 */

	defineGetter(req, 'path', function path() {
	  return parse(this).pathname;
	});

	/**
	 * Parse the "Host" header field to a hostname.
	 *
	 * When the "trust proxy" setting trusts the socket
	 * address, the "X-Forwarded-Host" header field will
	 * be trusted.
	 *
	 * @return {String}
	 * @public
	 */

	defineGetter(req, 'hostname', function hostname(){
	  var trust = this.app.get('trust proxy fn');
	  var host = this.get('X-Forwarded-Host');

	  if (!host || !trust(this.connection.remoteAddress, 0)) {
	    host = this.get('Host');
	  }

	  if (!host) return;

	  // IPv6 literal support
	  var offset = host[0] === '['
	    ? host.indexOf(']') + 1
	    : 0;
	  var index = host.indexOf(':', offset);

	  return index !== -1
	    ? host.substring(0, index)
	    : host;
	});

	// TODO: change req.host to return host in next major

	defineGetter(req, 'host', deprecate.function(function host(){
	  return this.hostname;
	}, 'req.host: Use req.hostname instead'));

	/**
	 * Check if the request is fresh, aka
	 * Last-Modified and/or the ETag
	 * still match.
	 *
	 * @return {Boolean}
	 * @public
	 */

	defineGetter(req, 'fresh', function(){
	  var method = this.method;
	  var s = this.res.statusCode;

	  // GET or HEAD for weak freshness validation only
	  if ('GET' != method && 'HEAD' != method) return false;

	  // 2xx or 304 as per rfc2616 14.26
	  if ((s >= 200 && s < 300) || 304 == s) {
	    return fresh(this.headers, (this.res._headers || {}));
	  }

	  return false;
	});

	/**
	 * Check if the request is stale, aka
	 * "Last-Modified" and / or the "ETag" for the
	 * resource has changed.
	 *
	 * @return {Boolean}
	 * @public
	 */

	defineGetter(req, 'stale', function stale(){
	  return !this.fresh;
	});

	/**
	 * Check if the request was an _XMLHttpRequest_.
	 *
	 * @return {Boolean}
	 * @public
	 */

	defineGetter(req, 'xhr', function xhr(){
	  var val = this.get('X-Requested-With') || '';
	  return val.toLowerCase() === 'xmlhttprequest';
	});

	/**
	 * Helper function for creating a getter on an object.
	 *
	 * @param {Object} obj
	 * @param {String} name
	 * @param {Function} getter
	 * @private
	 */
	function defineGetter(obj, name, getter) {
	  Object.defineProperty(obj, name, {
	    configurable: true,
	    enumerable: true,
	    get: getter
	  });
	};


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * accepts
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var Negotiator = __webpack_require__(481)
	var mime = __webpack_require__(408)

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = Accepts

	/**
	 * Create a new Accepts object for the given req.
	 *
	 * @param {object} req
	 * @public
	 */

	function Accepts(req) {
	  if (!(this instanceof Accepts))
	    return new Accepts(req)

	  this.headers = req.headers
	  this.negotiator = new Negotiator(req)
	}

	/**
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single mime type string
	 * such as "application/json", the extension name
	 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     this.types('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('html');
	 *     // => "html"
	 *     this.types('text/html');
	 *     // => "text/html"
	 *     this.types('json', 'text');
	 *     // => "json"
	 *     this.types('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('image/png');
	 *     this.types('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     this.types(['html', 'json']);
	 *     this.types('html', 'json');
	 *     // => "json"
	 *
	 * @param {String|Array} types...
	 * @return {String|Array|Boolean}
	 * @public
	 */

	Accepts.prototype.type =
	Accepts.prototype.types = function (types_) {
	  var types = types_

	  // support flattened arguments
	  if (types && !Array.isArray(types)) {
	    types = new Array(arguments.length)
	    for (var i = 0; i < types.length; i++) {
	      types[i] = arguments[i]
	    }
	  }

	  // no types, return all requested types
	  if (!types || types.length === 0) {
	    return this.negotiator.mediaTypes()
	  }

	  if (!this.headers.accept) return types[0];
	  var mimes = types.map(extToMime);
	  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
	  var first = accepts[0];
	  if (!first) return false;
	  return types[mimes.indexOf(first)];
	}

	/**
	 * Return accepted encodings or best fit based on `encodings`.
	 *
	 * Given `Accept-Encoding: gzip, deflate`
	 * an array sorted by quality is returned:
	 *
	 *     ['gzip', 'deflate']
	 *
	 * @param {String|Array} encodings...
	 * @return {String|Array}
	 * @public
	 */

	Accepts.prototype.encoding =
	Accepts.prototype.encodings = function (encodings_) {
	  var encodings = encodings_

	  // support flattened arguments
	  if (encodings && !Array.isArray(encodings)) {
	    encodings = new Array(arguments.length)
	    for (var i = 0; i < encodings.length; i++) {
	      encodings[i] = arguments[i]
	    }
	  }

	  // no encodings, return all requested encodings
	  if (!encodings || encodings.length === 0) {
	    return this.negotiator.encodings()
	  }

	  return this.negotiator.encodings(encodings)[0] || false
	}

	/**
	 * Return accepted charsets or best fit based on `charsets`.
	 *
	 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
	 * an array sorted by quality is returned:
	 *
	 *     ['utf-8', 'utf-7', 'iso-8859-1']
	 *
	 * @param {String|Array} charsets...
	 * @return {String|Array}
	 * @public
	 */

	Accepts.prototype.charset =
	Accepts.prototype.charsets = function (charsets_) {
	  var charsets = charsets_

	  // support flattened arguments
	  if (charsets && !Array.isArray(charsets)) {
	    charsets = new Array(arguments.length)
	    for (var i = 0; i < charsets.length; i++) {
	      charsets[i] = arguments[i]
	    }
	  }

	  // no charsets, return all requested charsets
	  if (!charsets || charsets.length === 0) {
	    return this.negotiator.charsets()
	  }

	  return this.negotiator.charsets(charsets)[0] || false
	}

	/**
	 * Return accepted languages or best fit based on `langs`.
	 *
	 * Given `Accept-Language: en;q=0.8, es, pt`
	 * an array sorted by quality is returned:
	 *
	 *     ['es', 'pt', 'en']
	 *
	 * @param {String|Array} langs...
	 * @return {Array|String}
	 * @public
	 */

	Accepts.prototype.lang =
	Accepts.prototype.langs =
	Accepts.prototype.language =
	Accepts.prototype.languages = function (languages_) {
	  var languages = languages_

	  // support flattened arguments
	  if (languages && !Array.isArray(languages)) {
	    languages = new Array(arguments.length)
	    for (var i = 0; i < languages.length; i++) {
	      languages[i] = arguments[i]
	    }
	  }

	  // no languages, return all requested languages
	  if (!languages || languages.length === 0) {
	    return this.negotiator.languages()
	  }

	  return this.negotiator.languages(languages)[0] || false
	}

	/**
	 * Convert extnames to mime.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */

	function extToMime(type) {
	  return type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type
	}

	/**
	 * Check if mime is valid.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */

	function validMime(type) {
	  return typeof type === 'string';
	}


/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	
	var preferredCharsets = __webpack_require__(482);
	var preferredEncodings = __webpack_require__(483);
	var preferredLanguages = __webpack_require__(484);
	var preferredMediaTypes = __webpack_require__(485);

	module.exports = Negotiator;
	Negotiator.Negotiator = Negotiator;

	function Negotiator(request) {
	  if (!(this instanceof Negotiator)) {
	    return new Negotiator(request);
	  }

	  this.request = request;
	}

	Negotiator.prototype.charset = function charset(available) {
	  var set = this.charsets(available);
	  return set && set[0];
	};

	Negotiator.prototype.charsets = function charsets(available) {
	  return preferredCharsets(this.request.headers['accept-charset'], available);
	};

	Negotiator.prototype.encoding = function encoding(available) {
	  var set = this.encodings(available);
	  return set && set[0];
	};

	Negotiator.prototype.encodings = function encodings(available) {
	  return preferredEncodings(this.request.headers['accept-encoding'], available);
	};

	Negotiator.prototype.language = function language(available) {
	  var set = this.languages(available);
	  return set && set[0];
	};

	Negotiator.prototype.languages = function languages(available) {
	  return preferredLanguages(this.request.headers['accept-language'], available);
	};

	Negotiator.prototype.mediaType = function mediaType(available) {
	  var set = this.mediaTypes(available);
	  return set && set[0];
	};

	Negotiator.prototype.mediaTypes = function mediaTypes(available) {
	  return preferredMediaTypes(this.request.headers.accept, available);
	};

	// Backwards compatibility
	Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
	Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
	Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
	Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
	Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
	Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
	Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
	Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;


/***/ },
/* 482 */
/***/ function(module, exports) {

	module.exports = preferredCharsets;
	preferredCharsets.preferredCharsets = preferredCharsets;

	function parseAcceptCharset(accept) {
	  var accepts = accept.split(',');

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var charset = parseCharset(accepts[i].trim(), i);

	    if (charset) {
	      accepts[j++] = charset;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	function parseCharset(s, i) {
	  var match = s.match(/^\s*(\S+?)\s*(?:;(.*))?$/);
	  if (!match) return null;

	  var charset = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }

	  return {
	    charset: charset,
	    q: q,
	    i: i
	  };
	}

	function getCharsetPriority(charset, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(charset, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	function specify(charset, spec, index) {
	  var s = 0;
	  if(spec.charset.toLowerCase() === charset.toLowerCase()){
	    s |= 1;
	  } else if (spec.charset !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	}

	function preferredCharsets(accept, provided) {
	  // RFC 2616 sec 14.2: no header = *
	  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

	  if (!provided) {
	    // sorted list of all charsets
	    return accepts.filter(isQuality).sort(compareSpecs).map(function getCharset(spec) {
	      return spec.charset;
	    });
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getCharsetPriority(type, accepts, index);
	  });

	  // sorted list of accepted charsets
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 483 */
/***/ function(module, exports) {

	module.exports = preferredEncodings;
	preferredEncodings.preferredEncodings = preferredEncodings;

	function parseAcceptEncoding(accept) {
	  var accepts = accept.split(',');
	  var hasIdentity = false;
	  var minQuality = 1;

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var encoding = parseEncoding(accepts[i].trim(), i);

	    if (encoding) {
	      accepts[j++] = encoding;
	      hasIdentity = hasIdentity || specify('identity', encoding);
	      minQuality = Math.min(minQuality, encoding.q || 1);
	    }
	  }

	  if (!hasIdentity) {
	    /*
	     * If identity doesn't explicitly appear in the accept-encoding header,
	     * it's added to the list of acceptable encoding with the lowest q
	     */
	    accepts[j++] = {
	      encoding: 'identity',
	      q: minQuality,
	      i: i
	    };
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	function parseEncoding(s, i) {
	  var match = s.match(/^\s*(\S+?)\s*(?:;(.*))?$/);

	  if (!match) return null;

	  var encoding = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';');
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }

	  return {
	    encoding: encoding,
	    q: q,
	    i: i
	  };
	}

	function getEncodingPriority(encoding, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(encoding, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	function specify(encoding, spec, index) {
	  var s = 0;
	  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
	    s |= 1;
	  } else if (spec.encoding !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};

	function preferredEncodings(accept, provided) {
	  var accepts = parseAcceptEncoding(accept || '');

	  if (!provided) {
	    // sorted list of all encodings
	    return accepts.filter(isQuality).sort(compareSpecs).map(function getEncoding(spec) {
	      return spec.encoding;
	    });
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getEncodingPriority(type, accepts, index);
	  });

	  // sorted list of accepted encodings
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 484 */
/***/ function(module, exports) {

	module.exports = preferredLanguages;
	preferredLanguages.preferredLanguages = preferredLanguages;

	function parseAcceptLanguage(accept) {
	  var accepts = accept.split(',');

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var langauge = parseLanguage(accepts[i].trim(), i);

	    if (langauge) {
	      accepts[j++] = langauge;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	}

	function parseLanguage(s, i) {
	  var match = s.match(/^\s*(\S+?)(?:-(\S+?))?\s*(?:;(.*))?$/);
	  if (!match) return null;

	  var prefix = match[1],
	      suffix = match[2],
	      full = prefix;

	  if (suffix) full += "-" + suffix;

	  var q = 1;
	  if (match[3]) {
	    var params = match[3].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].split('=');
	      if (p[0] === 'q') q = parseFloat(p[1]);
	    }
	  }

	  return {
	    prefix: prefix,
	    suffix: suffix,
	    q: q,
	    i: i,
	    full: full
	  };
	}

	function getLanguagePriority(language, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(language, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	function specify(language, spec, index) {
	  var p = parseLanguage(language)
	  if (!p) return null;
	  var s = 0;
	  if(spec.full.toLowerCase() === p.full.toLowerCase()){
	    s |= 4;
	  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
	    s |= 2;
	  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
	    s |= 1;
	  } else if (spec.full !== '*' ) {
	    return null
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};

	function preferredLanguages(accept, provided) {
	  // RFC 2616 sec 14.4: no header = *
	  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

	  if (!provided) {
	    // sorted list of all languages
	    return accepts.filter(isQuality).sort(compareSpecs).map(function getLanguage(spec) {
	      return spec.full;
	    });
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getLanguagePriority(type, accepts, index);
	  });

	  // sorted list of accepted languages
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 485 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	module.exports = preferredMediaTypes;
	preferredMediaTypes.preferredMediaTypes = preferredMediaTypes;

	function parseAccept(accept) {
	  var accepts = splitMediaTypes(accept);

	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var mediaType = parseMediaType(accepts[i].trim(), i);

	    if (mediaType) {
	      accepts[j++] = mediaType;
	    }
	  }

	  // trim accepts
	  accepts.length = j;

	  return accepts;
	};

	function parseMediaType(s, i) {
	  var match = s.match(/\s*(\S+?)\/([^;\s]+)\s*(?:;(.*))?/);
	  if (!match) return null;

	  var type = match[1],
	      subtype = match[2],
	      full = "" + type + "/" + subtype,
	      params = {},
	      q = 1;

	  if (match[3]) {
	    params = match[3].split(';').map(function(s) {
	      return s.trim().split('=');
	    }).reduce(function (set, p) {
	      var name = p[0].toLowerCase();
	      var value = p[1];

	      set[name] = value && value[0] === '"' && value[value.length - 1] === '"'
	        ? value.substr(1, value.length - 2)
	        : value;

	      return set;
	    }, params);

	    if (params.q != null) {
	      q = parseFloat(params.q);
	      delete params.q;
	    }
	  }

	  return {
	    type: type,
	    subtype: subtype,
	    params: params,
	    q: q,
	    i: i,
	    full: full
	  };
	}

	function getMediaTypePriority(type, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};

	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(type, accepted[i], index);

	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }

	  return priority;
	}

	function specify(type, spec, index) {
	  var p = parseMediaType(type);
	  var s = 0;

	  if (!p) {
	    return null;
	  }

	  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
	    s |= 4
	  } else if(spec.type != '*') {
	    return null;
	  }

	  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
	    s |= 2
	  } else if(spec.subtype != '*') {
	    return null;
	  }

	  var keys = Object.keys(spec.params);
	  if (keys.length > 0) {
	    if (keys.every(function (k) {
	      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
	    })) {
	      s |= 1
	    } else {
	      return null
	    }
	  }

	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s,
	  }

	}

	function preferredMediaTypes(accept, provided) {
	  // RFC 2616 sec 14.2: no header = */*
	  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

	  if (!provided) {
	    // sorted list of all types
	    return accepts.filter(isQuality).sort(compareSpecs).map(function getType(spec) {
	      return spec.full;
	    });
	  }

	  var priorities = provided.map(function getPriority(type, index) {
	    return getMediaTypePriority(type, accepts, index);
	  });

	  // sorted list of accepted types
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}

	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}

	function isQuality(spec) {
	  return spec.q > 0;
	}

	function quoteCount(string) {
	  var count = 0;
	  var index = 0;

	  while ((index = string.indexOf('"', index)) !== -1) {
	    count++;
	    index++;
	  }

	  return count;
	}

	function splitMediaTypes(accept) {
	  var accepts = accept.split(',');

	  for (var i = 1, j = 0; i < accepts.length; i++) {
	    if (quoteCount(accepts[j]) % 2 == 0) {
	      accepts[++j] = accepts[i];
	    } else {
	      accepts[j] += ',' + accepts[i];
	    }
	  }

	  // trim accepts
	  accepts.length = j + 1;

	  return accepts;
	}


/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * type-is
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var typer = __webpack_require__(487)
	var mime = __webpack_require__(408)

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = typeofrequest
	module.exports.is = typeis
	module.exports.hasBody = hasbody
	module.exports.normalize = normalize
	module.exports.match = mimeMatch

	/**
	 * Compare a `value` content-type with `types`.
	 * Each `type` can be an extension like `html`,
	 * a special shortcut like `multipart` or `urlencoded`,
	 * or a mime type.
	 *
	 * If no types match, `false` is returned.
	 * Otherwise, the first `type` that matches is returned.
	 *
	 * @param {String} value
	 * @param {Array} types
	 * @public
	 */

	function typeis(value, types_) {
	  var i
	  var types = types_

	  // remove parameters and normalize
	  var val = tryNormalizeType(value)

	  // no type or invalid
	  if (!val) {
	    return false
	  }

	  // support flattened arguments
	  if (types && !Array.isArray(types)) {
	    types = new Array(arguments.length - 1)
	    for (i = 0; i < types.length; i++) {
	      types[i] = arguments[i + 1]
	    }
	  }

	  // no types, return the content type
	  if (!types || !types.length) {
	    return val
	  }

	  var type
	  for (i = 0; i < types.length; i++) {
	    if (mimeMatch(normalize(type = types[i]), val)) {
	      return type[0] === '+' || type.indexOf('*') !== -1
	        ? val
	        : type
	    }
	  }

	  // no matches
	  return false
	}

	/**
	 * Check if a request has a request body.
	 * A request with a body __must__ either have `transfer-encoding`
	 * or `content-length` headers set.
	 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
	 *
	 * @param {Object} request
	 * @return {Boolean}
	 * @public
	 */

	function hasbody(req) {
	  return req.headers['transfer-encoding'] !== undefined
	    || !isNaN(req.headers['content-length'])
	}

	/**
	 * Check if the incoming request contains the "Content-Type"
	 * header field, and it contains any of the give mime `type`s.
	 * If there is no request body, `null` is returned.
	 * If there is no content type, `false` is returned.
	 * Otherwise, it returns the first `type` that matches.
	 *
	 * Examples:
	 *
	 *     // With Content-Type: text/html; charset=utf-8
	 *     this.is('html'); // => 'html'
	 *     this.is('text/html'); // => 'text/html'
	 *     this.is('text/*', 'application/json'); // => 'text/html'
	 *
	 *     // When Content-Type is application/json
	 *     this.is('json', 'urlencoded'); // => 'json'
	 *     this.is('application/json'); // => 'application/json'
	 *     this.is('html', 'application/*'); // => 'application/json'
	 *
	 *     this.is('html'); // => false
	 *
	 * @param {String|Array} types...
	 * @return {String|false|null}
	 * @public
	 */

	function typeofrequest(req, types_) {
	  var types = types_

	  // no body
	  if (!hasbody(req)) {
	    return null
	  }

	  // support flattened arguments
	  if (arguments.length > 2) {
	    types = new Array(arguments.length - 1)
	    for (var i = 0; i < types.length; i++) {
	      types[i] = arguments[i + 1]
	    }
	  }

	  // request content type
	  var value = req.headers['content-type']

	  return typeis(value, types)
	}

	/**
	 * Normalize a mime type.
	 * If it's a shorthand, expand it to a valid mime type.
	 *
	 * In general, you probably want:
	 *
	 *   var type = is(req, ['urlencoded', 'json', 'multipart']);
	 *
	 * Then use the appropriate body parsers.
	 * These three are the most common request body types
	 * and are thus ensured to work.
	 *
	 * @param {String} type
	 * @private
	 */

	function normalize(type) {
	  if (typeof type !== 'string') {
	    // invalid type
	    return false
	  }

	  switch (type) {
	    case 'urlencoded':
	      return 'application/x-www-form-urlencoded'
	    case 'multipart':
	      return 'multipart/*'
	  }

	  if (type[0] === '+') {
	    // "+json" -> "*/*+json" expando
	    return '*/*' + type
	  }

	  return type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type
	}

	/**
	 * Check if `expected` mime type
	 * matches `actual` mime type with
	 * wildcard and +suffix support.
	 *
	 * @param {String} expected
	 * @param {String} actual
	 * @return {Boolean}
	 * @private
	 */

	function mimeMatch(expected, actual) {
	  // invalid type
	  if (expected === false) {
	    return false
	  }

	  // split types
	  var actualParts = actual.split('/')
	  var expectedParts = expected.split('/')

	  // invalid format
	  if (actualParts.length !== 2 || expectedParts.length !== 2) {
	    return false
	  }

	  // validate type
	  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
	    return false
	  }

	  // validate suffix wildcard
	  if (expectedParts[1].substr(0, 2) === '*+') {
	    return expectedParts[1].length <= actualParts[1].length + 1
	      && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)
	  }

	  // validate subtype
	  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
	    return false
	  }

	  return true
	}

	/**
	 * Normalize a type and remove parameters.
	 *
	 * @param {string} value
	 * @return {string}
	 * @private
	 */

	function normalizeType(value) {
	  // parse the type
	  var type = typer.parse(value)

	  // remove the parameters
	  type.parameters = undefined

	  // reformat it
	  return typer.format(type)
	}

	/**
	 * Try to normalize a type and remove parameters.
	 *
	 * @param {string} value
	 * @return {string}
	 * @private
	 */

	function tryNormalizeType(value) {
	  try {
	    return normalizeType(value)
	  } catch (err) {
	    return null
	  }
	}


/***/ },
/* 487 */
/***/ function(module, exports) {

	/*!
	 * media-typer
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
	 *
	 * parameter     = token "=" ( token | quoted-string )
	 * token         = 1*<any CHAR except CTLs or separators>
	 * separators    = "(" | ")" | "<" | ">" | "@"
	 *               | "," | ";" | ":" | "\" | <">
	 *               | "/" | "[" | "]" | "?" | "="
	 *               | "{" | "}" | SP | HT
	 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
	 * qdtext        = <any TEXT except <">>
	 * quoted-pair   = "\" CHAR
	 * CHAR          = <any US-ASCII character (octets 0 - 127)>
	 * TEXT          = <any OCTET except CTLs, but including LWS>
	 * LWS           = [CRLF] 1*( SP | HT )
	 * CRLF          = CR LF
	 * CR            = <US-ASCII CR, carriage return (13)>
	 * LF            = <US-ASCII LF, linefeed (10)>
	 * SP            = <US-ASCII SP, space (32)>
	 * SHT           = <US-ASCII HT, horizontal-tab (9)>
	 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
	 * OCTET         = <any 8-bit sequence of data>
	 */
	var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
	var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/

	/**
	 * RegExp to match quoted-pair in RFC 2616
	 *
	 * quoted-pair = "\" CHAR
	 * CHAR        = <any US-ASCII character (octets 0 - 127)>
	 */
	var qescRegExp = /\\([\u0000-\u007f])/g;

	/**
	 * RegExp to match chars that must be quoted-pair in RFC 2616
	 */
	var quoteRegExp = /([\\"])/g;

	/**
	 * RegExp to match type in RFC 6838
	 *
	 * type-name = restricted-name
	 * subtype-name = restricted-name
	 * restricted-name = restricted-name-first *126restricted-name-chars
	 * restricted-name-first  = ALPHA / DIGIT
	 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
	 *                          "$" / "&" / "-" / "^" / "_"
	 * restricted-name-chars =/ "." ; Characters before first dot always
	 *                              ; specify a facet name
	 * restricted-name-chars =/ "+" ; Characters after last plus always
	 *                              ; specify a structured syntax suffix
	 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
	 * DIGIT =  %x30-39             ; 0-9
	 */
	var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/
	var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/
	var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

	/**
	 * Module exports.
	 */

	exports.format = format
	exports.parse = parse

	/**
	 * Format object to media type.
	 *
	 * @param {object} obj
	 * @return {string}
	 * @api public
	 */

	function format(obj) {
	  if (!obj || typeof obj !== 'object') {
	    throw new TypeError('argument obj is required')
	  }

	  var parameters = obj.parameters
	  var subtype = obj.subtype
	  var suffix = obj.suffix
	  var type = obj.type

	  if (!type || !typeNameRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }

	  if (!subtype || !subtypeNameRegExp.test(subtype)) {
	    throw new TypeError('invalid subtype')
	  }

	  // format as type/subtype
	  var string = type + '/' + subtype

	  // append +suffix
	  if (suffix) {
	    if (!typeNameRegExp.test(suffix)) {
	      throw new TypeError('invalid suffix')
	    }

	    string += '+' + suffix
	  }

	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()

	    for (var i = 0; i < params.length; i++) {
	      param = params[i]

	      if (!tokenRegExp.test(param)) {
	        throw new TypeError('invalid parameter name')
	      }

	      string += '; ' + param + '=' + qstring(parameters[param])
	    }
	  }

	  return string
	}

	/**
	 * Parse media type to object.
	 *
	 * @param {string|object} string
	 * @return {Object}
	 * @api public
	 */

	function parse(string) {
	  if (!string) {
	    throw new TypeError('argument string is required')
	  }

	  // support req/res-like objects as argument
	  if (typeof string === 'object') {
	    string = getcontenttype(string)
	  }

	  if (typeof string !== 'string') {
	    throw new TypeError('argument string is required to be a string')
	  }

	  var index = string.indexOf(';')
	  var type = index !== -1
	    ? string.substr(0, index)
	    : string

	  var key
	  var match
	  var obj = splitType(type)
	  var params = {}
	  var value

	  paramRegExp.lastIndex = index

	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }

	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]

	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }

	    params[key] = value
	  }

	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }

	  obj.parameters = params

	  return obj
	}

	/**
	 * Get content-type from req/res objects.
	 *
	 * @param {object}
	 * @return {Object}
	 * @api private
	 */

	function getcontenttype(obj) {
	  if (typeof obj.getHeader === 'function') {
	    // res-like
	    return obj.getHeader('content-type')
	  }

	  if (typeof obj.headers === 'object') {
	    // req-like
	    return obj.headers && obj.headers['content-type']
	  }
	}

	/**
	 * Quote a string if necessary.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */

	function qstring(val) {
	  var str = String(val)

	  // no need to quote tokens
	  if (tokenRegExp.test(str)) {
	    return str
	  }

	  if (str.length > 0 && !textRegExp.test(str)) {
	    throw new TypeError('invalid parameter value')
	  }

	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}

	/**
	 * Simply "type/subtype+siffx" into parts.
	 *
	 * @param {string} string
	 * @return {Object}
	 * @api private
	 */

	function splitType(string) {
	  var match = typeRegExp.exec(string.toLowerCase())

	  if (!match) {
	    throw new TypeError('invalid media type')
	  }

	  var type = match[1]
	  var subtype = match[2]
	  var suffix

	  // suffix after last +
	  var index = subtype.lastIndexOf('+')
	  if (index !== -1) {
	    suffix = subtype.substr(index + 1)
	    subtype = subtype.substr(0, index)
	  }

	  var obj = {
	    type: type,
	    subtype: subtype,
	    suffix: suffix
	  }

	  return obj
	}


/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module dependencies.
	 * @private
	 */

	var contentDisposition = __webpack_require__(462);
	var deprecate = __webpack_require__(447)('express');
	var escapeHtml = __webpack_require__(436);
	var http = __webpack_require__(326);
	var isAbsolute = __webpack_require__(461).isAbsolute;
	var onFinished = __webpack_require__(437);
	var path = __webpack_require__(389);
	var merge = __webpack_require__(446);
	var sign = __webpack_require__(399).sign;
	var normalizeType = __webpack_require__(461).normalizeType;
	var normalizeTypes = __webpack_require__(461).normalizeTypes;
	var setCharset = __webpack_require__(461).setCharset;
	var statusCodes = http.STATUS_CODES;
	var cookie = __webpack_require__(489);
	var send = __webpack_require__(464);
	var extname = path.extname;
	var mime = send.mime;
	var resolve = path.resolve;
	var vary = __webpack_require__(490);

	/**
	 * Response prototype.
	 */

	var res = module.exports = {
	  __proto__: http.ServerResponse.prototype
	};

	/**
	 * Module variables.
	 * @private
	 */

	var charsetRegExp = /;\s*charset\s*=/;

	/**
	 * Set status `code`.
	 *
	 * @param {Number} code
	 * @return {ServerResponse}
	 * @public
	 */

	res.status = function status(code) {
	  this.statusCode = code;
	  return this;
	};

	/**
	 * Set Link header field with the given `links`.
	 *
	 * Examples:
	 *
	 *    res.links({
	 *      next: 'http://api.example.com/users?page=2',
	 *      last: 'http://api.example.com/users?page=5'
	 *    });
	 *
	 * @param {Object} links
	 * @return {ServerResponse}
	 * @public
	 */

	res.links = function(links){
	  var link = this.get('Link') || '';
	  if (link) link += ', ';
	  return this.set('Link', link + Object.keys(links).map(function(rel){
	    return '<' + links[rel] + '>; rel="' + rel + '"';
	  }).join(', '));
	};

	/**
	 * Send a response.
	 *
	 * Examples:
	 *
	 *     res.send(new Buffer('wahoo'));
	 *     res.send({ some: 'json' });
	 *     res.send('<p>some html</p>');
	 *
	 * @param {string|number|boolean|object|Buffer} body
	 * @public
	 */

	res.send = function send(body) {
	  var chunk = body;
	  var encoding;
	  var len;
	  var req = this.req;
	  var type;

	  // settings
	  var app = this.app;

	  // allow status / body
	  if (arguments.length === 2) {
	    // res.send(body, status) backwards compat
	    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
	      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
	      this.statusCode = arguments[0];
	      chunk = arguments[1];
	    }
	  }

	  // disambiguate res.send(status) and res.send(status, num)
	  if (typeof chunk === 'number' && arguments.length === 1) {
	    // res.send(status) will set status message as text string
	    if (!this.get('Content-Type')) {
	      this.type('txt');
	    }

	    deprecate('res.send(status): Use res.sendStatus(status) instead');
	    this.statusCode = chunk;
	    chunk = statusCodes[chunk];
	  }

	  switch (typeof chunk) {
	    // string defaulting to html
	    case 'string':
	      if (!this.get('Content-Type')) {
	        this.type('html');
	      }
	      break;
	    case 'boolean':
	    case 'number':
	    case 'object':
	      if (chunk === null) {
	        chunk = '';
	      } else if (Buffer.isBuffer(chunk)) {
	        if (!this.get('Content-Type')) {
	          this.type('bin');
	        }
	      } else {
	        return this.json(chunk);
	      }
	      break;
	  }

	  // write strings in utf-8
	  if (typeof chunk === 'string') {
	    encoding = 'utf8';
	    type = this.get('Content-Type');

	    // reflect this in content-type
	    if (typeof type === 'string') {
	      this.set('Content-Type', setCharset(type, 'utf-8'));
	    }
	  }

	  // populate Content-Length
	  if (chunk !== undefined) {
	    if (!Buffer.isBuffer(chunk)) {
	      // convert chunk to Buffer; saves later double conversions
	      chunk = new Buffer(chunk, encoding);
	      encoding = undefined;
	    }

	    len = chunk.length;
	    this.set('Content-Length', len);
	  }

	  // populate ETag
	  var etag;
	  var generateETag = len !== undefined && app.get('etag fn');
	  if (typeof generateETag === 'function' && !this.get('ETag')) {
	    if ((etag = generateETag(chunk, encoding))) {
	      this.set('ETag', etag);
	    }
	  }

	  // freshness
	  if (req.fresh) this.statusCode = 304;

	  // strip irrelevant headers
	  if (204 == this.statusCode || 304 == this.statusCode) {
	    this.removeHeader('Content-Type');
	    this.removeHeader('Content-Length');
	    this.removeHeader('Transfer-Encoding');
	    chunk = '';
	  }

	  if (req.method === 'HEAD') {
	    // skip body for HEAD
	    this.end();
	  } else {
	    // respond
	    this.end(chunk, encoding);
	  }

	  return this;
	};

	/**
	 * Send JSON response.
	 *
	 * Examples:
	 *
	 *     res.json(null);
	 *     res.json({ user: 'tj' });
	 *
	 * @param {string|number|boolean|object} obj
	 * @public
	 */

	res.json = function json(obj) {
	  var val = obj;

	  // allow status / body
	  if (arguments.length === 2) {
	    // res.json(body, status) backwards compat
	    if (typeof arguments[1] === 'number') {
	      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[0];
	      val = arguments[1];
	    }
	  }

	  // settings
	  var app = this.app;
	  var replacer = app.get('json replacer');
	  var spaces = app.get('json spaces');
	  var body = JSON.stringify(val, replacer, spaces);

	  // content-type
	  if (!this.get('Content-Type')) {
	    this.set('Content-Type', 'application/json');
	  }

	  return this.send(body);
	};

	/**
	 * Send JSON response with JSONP callback support.
	 *
	 * Examples:
	 *
	 *     res.jsonp(null);
	 *     res.jsonp({ user: 'tj' });
	 *
	 * @param {string|number|boolean|object} obj
	 * @public
	 */

	res.jsonp = function jsonp(obj) {
	  var val = obj;

	  // allow status / body
	  if (arguments.length === 2) {
	    // res.json(body, status) backwards compat
	    if (typeof arguments[1] === 'number') {
	      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
	      this.statusCode = arguments[0];
	      val = arguments[1];
	    }
	  }

	  // settings
	  var app = this.app;
	  var replacer = app.get('json replacer');
	  var spaces = app.get('json spaces');
	  var body = JSON.stringify(val, replacer, spaces);
	  var callback = this.req.query[app.get('jsonp callback name')];

	  // content-type
	  if (!this.get('Content-Type')) {
	    this.set('X-Content-Type-Options', 'nosniff');
	    this.set('Content-Type', 'application/json');
	  }

	  // fixup callback
	  if (Array.isArray(callback)) {
	    callback = callback[0];
	  }

	  // jsonp
	  if (typeof callback === 'string' && callback.length !== 0) {
	    this.charset = 'utf-8';
	    this.set('X-Content-Type-Options', 'nosniff');
	    this.set('Content-Type', 'text/javascript');

	    // restrict callback charset
	    callback = callback.replace(/[^\[\]\w$.]/g, '');

	    // replace chars not allowed in JavaScript that are in JSON
	    body = body
	      .replace(/\u2028/g, '\\u2028')
	      .replace(/\u2029/g, '\\u2029');

	    // the /**/ is a specific security mitigation for "Rosetta Flash JSONP abuse"
	    // the typeof check is just to reduce client error noise
	    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
	  }

	  return this.send(body);
	};

	/**
	 * Send given HTTP status code.
	 *
	 * Sets the response status to `statusCode` and the body of the
	 * response to the standard description from node's http.STATUS_CODES
	 * or the statusCode number if no description.
	 *
	 * Examples:
	 *
	 *     res.sendStatus(200);
	 *
	 * @param {number} statusCode
	 * @public
	 */

	res.sendStatus = function sendStatus(statusCode) {
	  var body = statusCodes[statusCode] || String(statusCode);

	  this.statusCode = statusCode;
	  this.type('txt');

	  return this.send(body);
	};

	/**
	 * Transfer the file at the given `path`.
	 *
	 * Automatically sets the _Content-Type_ response header field.
	 * The callback `callback(err)` is invoked when the transfer is complete
	 * or when an error occurs. Be sure to check `res.sentHeader`
	 * if you wish to attempt responding, as the header and some data
	 * may have already been transferred.
	 *
	 * Options:
	 *
	 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
	 *   - `root`     root directory for relative filenames
	 *   - `headers`  object of headers to serve with file
	 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
	 *
	 * Other options are passed along to `send`.
	 *
	 * Examples:
	 *
	 *  The following example illustrates how `res.sendFile()` may
	 *  be used as an alternative for the `static()` middleware for
	 *  dynamic situations. The code backing `res.sendFile()` is actually
	 *  the same code, so HTTP cache support etc is identical.
	 *
	 *     app.get('/user/:uid/photos/:file', function(req, res){
	 *       var uid = req.params.uid
	 *         , file = req.params.file;
	 *
	 *       req.user.mayViewFilesFrom(uid, function(yes){
	 *         if (yes) {
	 *           res.sendFile('/uploads/' + uid + '/' + file);
	 *         } else {
	 *           res.send(403, 'Sorry! you cant see that.');
	 *         }
	 *       });
	 *     });
	 *
	 * @public
	 */

	res.sendFile = function sendFile(path, options, callback) {
	  var done = callback;
	  var req = this.req;
	  var res = this;
	  var next = req.next;
	  var opts = options || {};

	  if (!path) {
	    throw new TypeError('path argument is required to res.sendFile');
	  }

	  // support function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  if (!opts.root && !isAbsolute(path)) {
	    throw new TypeError('path must be absolute or specify root to res.sendFile');
	  }

	  // create file stream
	  var pathname = encodeURI(path);
	  var file = send(req, pathname, opts);

	  // transfer
	  sendfile(res, file, opts, function (err) {
	    if (done) return done(err);
	    if (err && err.code === 'EISDIR') return next();

	    // next() all but write errors
	    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
	      next(err);
	    }
	  });
	};

	/**
	 * Transfer the file at the given `path`.
	 *
	 * Automatically sets the _Content-Type_ response header field.
	 * The callback `callback(err)` is invoked when the transfer is complete
	 * or when an error occurs. Be sure to check `res.sentHeader`
	 * if you wish to attempt responding, as the header and some data
	 * may have already been transferred.
	 *
	 * Options:
	 *
	 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
	 *   - `root`     root directory for relative filenames
	 *   - `headers`  object of headers to serve with file
	 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
	 *
	 * Other options are passed along to `send`.
	 *
	 * Examples:
	 *
	 *  The following example illustrates how `res.sendfile()` may
	 *  be used as an alternative for the `static()` middleware for
	 *  dynamic situations. The code backing `res.sendfile()` is actually
	 *  the same code, so HTTP cache support etc is identical.
	 *
	 *     app.get('/user/:uid/photos/:file', function(req, res){
	 *       var uid = req.params.uid
	 *         , file = req.params.file;
	 *
	 *       req.user.mayViewFilesFrom(uid, function(yes){
	 *         if (yes) {
	 *           res.sendfile('/uploads/' + uid + '/' + file);
	 *         } else {
	 *           res.send(403, 'Sorry! you cant see that.');
	 *         }
	 *       });
	 *     });
	 *
	 * @public
	 */

	res.sendfile = function (path, options, callback) {
	  var done = callback;
	  var req = this.req;
	  var res = this;
	  var next = req.next;
	  var opts = options || {};

	  // support function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  // create file stream
	  var file = send(req, path, opts);

	  // transfer
	  sendfile(res, file, opts, function (err) {
	    if (done) return done(err);
	    if (err && err.code === 'EISDIR') return next();

	    // next() all but write errors
	    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
	      next(err);
	    }
	  });
	};

	res.sendfile = deprecate.function(res.sendfile,
	  'res.sendfile: Use res.sendFile instead');

	/**
	 * Transfer the file at the given `path` as an attachment.
	 *
	 * Optionally providing an alternate attachment `filename`,
	 * and optional callback `callback(err)`. The callback is invoked
	 * when the data transfer is complete, or when an error has
	 * ocurred. Be sure to check `res.headersSent` if you plan to respond.
	 *
	 * This method uses `res.sendfile()`.
	 *
	 * @public
	 */

	res.download = function download(path, filename, callback) {
	  var done = callback;
	  var name = filename;

	  // support function as second arg
	  if (typeof filename === 'function') {
	    done = filename;
	    name = null;
	  }

	  // set Content-Disposition when file is sent
	  var headers = {
	    'Content-Disposition': contentDisposition(name || path)
	  };

	  // Resolve the full path for sendFile
	  var fullPath = resolve(path);

	  return this.sendFile(fullPath, { headers: headers }, done);
	};

	/**
	 * Set _Content-Type_ response header with `type` through `mime.lookup()`
	 * when it does not contain "/", or set the Content-Type to `type` otherwise.
	 *
	 * Examples:
	 *
	 *     res.type('.html');
	 *     res.type('html');
	 *     res.type('json');
	 *     res.type('application/json');
	 *     res.type('png');
	 *
	 * @param {String} type
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.contentType =
	res.type = function contentType(type) {
	  var ct = type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type;

	  return this.set('Content-Type', ct);
	};

	/**
	 * Respond to the Acceptable formats using an `obj`
	 * of mime-type callbacks.
	 *
	 * This method uses `req.accepted`, an array of
	 * acceptable types ordered by their quality values.
	 * When "Accept" is not present the _first_ callback
	 * is invoked, otherwise the first match is used. When
	 * no match is performed the server responds with
	 * 406 "Not Acceptable".
	 *
	 * Content-Type is set for you, however if you choose
	 * you may alter this within the callback using `res.type()`
	 * or `res.set('Content-Type', ...)`.
	 *
	 *    res.format({
	 *      'text/plain': function(){
	 *        res.send('hey');
	 *      },
	 *
	 *      'text/html': function(){
	 *        res.send('<p>hey</p>');
	 *      },
	 *
	 *      'appliation/json': function(){
	 *        res.send({ message: 'hey' });
	 *      }
	 *    });
	 *
	 * In addition to canonicalized MIME types you may
	 * also use extnames mapped to these types:
	 *
	 *    res.format({
	 *      text: function(){
	 *        res.send('hey');
	 *      },
	 *
	 *      html: function(){
	 *        res.send('<p>hey</p>');
	 *      },
	 *
	 *      json: function(){
	 *        res.send({ message: 'hey' });
	 *      }
	 *    });
	 *
	 * By default Express passes an `Error`
	 * with a `.status` of 406 to `next(err)`
	 * if a match is not made. If you provide
	 * a `.default` callback it will be invoked
	 * instead.
	 *
	 * @param {Object} obj
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.format = function(obj){
	  var req = this.req;
	  var next = req.next;

	  var fn = obj.default;
	  if (fn) delete obj.default;
	  var keys = Object.keys(obj);

	  var key = keys.length > 0
	    ? req.accepts(keys)
	    : false;

	  this.vary("Accept");

	  if (key) {
	    this.set('Content-Type', normalizeType(key).value);
	    obj[key](req, this, next);
	  } else if (fn) {
	    fn();
	  } else {
	    var err = new Error('Not Acceptable');
	    err.status = err.statusCode = 406;
	    err.types = normalizeTypes(keys).map(function(o){ return o.value });
	    next(err);
	  }

	  return this;
	};

	/**
	 * Set _Content-Disposition_ header to _attachment_ with optional `filename`.
	 *
	 * @param {String} filename
	 * @return {ServerResponse}
	 * @public
	 */

	res.attachment = function attachment(filename) {
	  if (filename) {
	    this.type(extname(filename));
	  }

	  this.set('Content-Disposition', contentDisposition(filename));

	  return this;
	};

	/**
	 * Append additional header `field` with value `val`.
	 *
	 * Example:
	 *
	 *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
	 *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
	 *    res.append('Warning', '199 Miscellaneous warning');
	 *
	 * @param {String} field
	 * @param {String|Array} val
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.append = function append(field, val) {
	  var prev = this.get(field);
	  var value = val;

	  if (prev) {
	    // concat the new and prev vals
	    value = Array.isArray(prev) ? prev.concat(val)
	      : Array.isArray(val) ? [prev].concat(val)
	      : [prev, val];
	  }

	  return this.set(field, value);
	};

	/**
	 * Set header `field` to `val`, or pass
	 * an object of header fields.
	 *
	 * Examples:
	 *
	 *    res.set('Foo', ['bar', 'baz']);
	 *    res.set('Accept', 'application/json');
	 *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });
	 *
	 * Aliased as `res.header()`.
	 *
	 * @param {String|Object} field
	 * @param {String|Array} val
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.set =
	res.header = function header(field, val) {
	  if (arguments.length === 2) {
	    var value = Array.isArray(val)
	      ? val.map(String)
	      : String(val);

	    // add charset to content-type
	    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
	      var charset = mime.charsets.lookup(value.split(';')[0]);
	      if (charset) value += '; charset=' + charset.toLowerCase();
	    }

	    this.setHeader(field, value);
	  } else {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	  }
	  return this;
	};

	/**
	 * Get value for header `field`.
	 *
	 * @param {String} field
	 * @return {String}
	 * @public
	 */

	res.get = function(field){
	  return this.getHeader(field);
	};

	/**
	 * Clear cookie `name`.
	 *
	 * @param {String} name
	 * @param {Object} options
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.clearCookie = function clearCookie(name, options) {
	  var opts = merge({ expires: new Date(1), path: '/' }, options);

	  return this.cookie(name, '', opts);
	};

	/**
	 * Set cookie `name` to `value`, with the given `options`.
	 *
	 * Options:
	 *
	 *    - `maxAge`   max-age in milliseconds, converted to `expires`
	 *    - `signed`   sign the cookie
	 *    - `path`     defaults to "/"
	 *
	 * Examples:
	 *
	 *    // "Remember Me" for 15 minutes
	 *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });
	 *
	 *    // save as above
	 *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
	 *
	 * @param {String} name
	 * @param {String|Object} value
	 * @param {Options} options
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.cookie = function (name, value, options) {
	  var opts = merge({}, options);
	  var secret = this.req.secret;
	  var signed = opts.signed;

	  if (signed && !secret) {
	    throw new Error('cookieParser("secret") required for signed cookies');
	  }

	  var val = typeof value === 'object'
	    ? 'j:' + JSON.stringify(value)
	    : String(value);

	  if (signed) {
	    val = 's:' + sign(val, secret);
	  }

	  if ('maxAge' in opts) {
	    opts.expires = new Date(Date.now() + opts.maxAge);
	    opts.maxAge /= 1000;
	  }

	  if (opts.path == null) {
	    opts.path = '/';
	  }

	  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));

	  return this;
	};

	/**
	 * Set the location header to `url`.
	 *
	 * The given `url` can also be "back", which redirects
	 * to the _Referrer_ or _Referer_ headers or "/".
	 *
	 * Examples:
	 *
	 *    res.location('/foo/bar').;
	 *    res.location('http://example.com');
	 *    res.location('../login');
	 *
	 * @param {String} url
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.location = function location(url) {
	  var loc = url;

	  // "back" is an alias for the referrer
	  if (url === 'back') {
	    loc = this.req.get('Referrer') || '/';
	  }

	  // set location
	  this.set('Location', loc);
	  return this;
	};

	/**
	 * Redirect to the given `url` with optional response `status`
	 * defaulting to 302.
	 *
	 * The resulting `url` is determined by `res.location()`, so
	 * it will play nicely with mounted apps, relative paths,
	 * `"back"` etc.
	 *
	 * Examples:
	 *
	 *    res.redirect('/foo/bar');
	 *    res.redirect('http://example.com');
	 *    res.redirect(301, 'http://example.com');
	 *    res.redirect('../login'); // /blog/post/1 -> /blog/login
	 *
	 * @public
	 */

	res.redirect = function redirect(url) {
	  var address = url;
	  var body;
	  var status = 302;

	  // allow status / url
	  if (arguments.length === 2) {
	    if (typeof arguments[0] === 'number') {
	      status = arguments[0];
	      address = arguments[1];
	    } else {
	      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
	      status = arguments[1];
	    }
	  }

	  // Set location header
	  this.location(address);
	  address = this.get('Location');

	  // Support text/{plain,html} by default
	  this.format({
	    text: function(){
	      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
	    },

	    html: function(){
	      var u = escapeHtml(address);
	      body = '<p>' + statusCodes[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>';
	    },

	    default: function(){
	      body = '';
	    }
	  });

	  // Respond
	  this.statusCode = status;
	  this.set('Content-Length', Buffer.byteLength(body));

	  if (this.req.method === 'HEAD') {
	    this.end();
	  } else {
	    this.end(body);
	  }
	};

	/**
	 * Add `field` to Vary. If already present in the Vary set, then
	 * this call is simply ignored.
	 *
	 * @param {Array|String} field
	 * @return {ServerResponse} for chaining
	 * @public
	 */

	res.vary = function(field){
	  // checks for back-compat
	  if (!field || (Array.isArray(field) && !field.length)) {
	    deprecate('res.vary(): Provide a field name');
	    return this;
	  }

	  vary(this, field);

	  return this;
	};

	/**
	 * Render `view` with the given `options` and optional callback `fn`.
	 * When a callback function is given a response will _not_ be made
	 * automatically, otherwise a response of _200_ and _text/html_ is given.
	 *
	 * Options:
	 *
	 *  - `cache`     boolean hinting to the engine it should cache
	 *  - `filename`  filename of the view being rendered
	 *
	 * @public
	 */

	res.render = function render(view, options, callback) {
	  var app = this.req.app;
	  var done = callback;
	  var opts = options || {};
	  var req = this.req;
	  var self = this;

	  // support callback function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }

	  // merge res.locals
	  opts._locals = self.locals;

	  // default callback to respond
	  done = done || function (err, str) {
	    if (err) return req.next(err);
	    self.send(str);
	  };

	  // render
	  app.render(view, opts, done);
	};

	// pipe the send file stream
	function sendfile(res, file, options, callback) {
	  var done = false;
	  var streaming;

	  // request aborted
	  function onaborted() {
	    if (done) return;
	    done = true;

	    var err = new Error('Request aborted');
	    err.code = 'ECONNABORTED';
	    callback(err);
	  }

	  // directory
	  function ondirectory() {
	    if (done) return;
	    done = true;

	    var err = new Error('EISDIR, read');
	    err.code = 'EISDIR';
	    callback(err);
	  }

	  // errors
	  function onerror(err) {
	    if (done) return;
	    done = true;
	    callback(err);
	  }

	  // ended
	  function onend() {
	    if (done) return;
	    done = true;
	    callback();
	  }

	  // file
	  function onfile() {
	    streaming = false;
	  }

	  // finished
	  function onfinish(err) {
	    if (err && err.code === 'ECONNRESET') return onaborted();
	    if (err) return onerror(err);
	    if (done) return;

	    setImmediate(function () {
	      if (streaming !== false && !done) {
	        onaborted();
	        return;
	      }

	      if (done) return;
	      done = true;
	      callback();
	    });
	  }

	  // streaming
	  function onstream() {
	    streaming = true;
	  }

	  file.on('directory', ondirectory);
	  file.on('end', onend);
	  file.on('error', onerror);
	  file.on('file', onfile);
	  file.on('stream', onstream);
	  onFinished(res, onfinish);

	  if (options.headers) {
	    // set headers on successful transfer
	    file.on('headers', function headers(res) {
	      var obj = options.headers;
	      var keys = Object.keys(obj);

	      for (var i = 0; i < keys.length; i++) {
	        var k = keys[i];
	        res.setHeader(k, obj[k]);
	      }
	    });
	  }

	  // pipe
	  file.pipe(res);
	}


/***/ },
/* 489 */
/***/ function(module, exports) {

	/*!
	 * cookie
	 * Copyright(c) 2012-2014 Roman Shtylman
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 * @public
	 */

	exports.parse = parse;
	exports.serialize = serialize;

	/**
	 * Module variables.
	 * @private
	 */

	var decode = decodeURIComponent;
	var encode = encodeURIComponent;

	/**
	 * RegExp to match field-content in RFC 7230 sec 3.2
	 *
	 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	 * field-vchar   = VCHAR / obs-text
	 * obs-text      = %x80-FF
	 */

	var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

	/**
	 * Parse a cookie header.
	 *
	 * Parse the given cookie header string into an object
	 * The object has the various cookies as keys(names) => values
	 *
	 * @param {string} str
	 * @param {object} [options]
	 * @return {object}
	 * @public
	 */

	function parse(str, options) {
	  if (typeof str !== 'string') {
	    throw new TypeError('argument str must be a string');
	  }

	  var obj = {}
	  var opt = options || {};
	  var pairs = str.split(/; */);
	  var dec = opt.decode || decode;

	  pairs.forEach(function(pair) {
	    var eq_idx = pair.indexOf('=')

	    // skip things that don't look like key=value
	    if (eq_idx < 0) {
	      return;
	    }

	    var key = pair.substr(0, eq_idx).trim()
	    var val = pair.substr(++eq_idx, pair.length).trim();

	    // quoted values
	    if ('"' == val[0]) {
	      val = val.slice(1, -1);
	    }

	    // only assign once
	    if (undefined == obj[key]) {
	      obj[key] = tryDecode(val, dec);
	    }
	  });

	  return obj;
	}

	/**
	 * Serialize data into a cookie header.
	 *
	 * Serialize the a name value pair into a cookie string suitable for
	 * http headers. An optional options object specified cookie parameters.
	 *
	 * serialize('foo', 'bar', { httpOnly: true })
	 *   => "foo=bar; httpOnly"
	 *
	 * @param {string} name
	 * @param {string} val
	 * @param {object} [options]
	 * @return {string}
	 * @public
	 */

	function serialize(name, val, options) {
	  var opt = options || {};
	  var enc = opt.encode || encode;

	  if (!fieldContentRegExp.test(name)) {
	    throw new TypeError('argument name is invalid');
	  }

	  var value = enc(val);

	  if (value && !fieldContentRegExp.test(value)) {
	    throw new TypeError('argument val is invalid');
	  }

	  var pairs = [name + '=' + value];

	  if (null != opt.maxAge) {
	    var maxAge = opt.maxAge - 0;
	    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
	    pairs.push('Max-Age=' + maxAge);
	  }

	  if (opt.domain) {
	    if (!fieldContentRegExp.test(opt.domain)) {
	      throw new TypeError('option domain is invalid');
	    }

	    pairs.push('Domain=' + opt.domain);
	  }

	  if (opt.path) {
	    if (!fieldContentRegExp.test(opt.path)) {
	      throw new TypeError('option path is invalid');
	    }

	    pairs.push('Path=' + opt.path);
	  }

	  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());
	  if (opt.httpOnly) pairs.push('HttpOnly');
	  if (opt.secure) pairs.push('Secure');

	  return pairs.join('; ');
	}

	/**
	 * Try decoding a string using a decoding function.
	 *
	 * @param {string} str
	 * @param {function} decode
	 * @private
	 */

	function tryDecode(str, decode) {
	  try {
	    return decode(str);
	  } catch (e) {
	    return str;
	  }
	}


/***/ },
/* 490 */
/***/ function(module, exports) {

	/*!
	 * vary
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict';

	/**
	 * Module exports.
	 */

	module.exports = vary;
	module.exports.append = append;

	/**
	 * Variables.
	 */

	var separators = /[\(\)<>@,;:\\"\/\[\]\?=\{\}\u0020\u0009]/;

	/**
	 * Append a field to a vary header.
	 *
	 * @param {String} header
	 * @param {String|Array} field
	 * @return {String}
	 * @api public
	 */

	function append(header, field) {
	  if (typeof header !== 'string') {
	    throw new TypeError('header argument is required');
	  }

	  if (!field) {
	    throw new TypeError('field argument is required');
	  }

	  // get fields array
	  var fields = !Array.isArray(field)
	    ? parse(String(field))
	    : field;

	  // assert on invalid fields
	  for (var i = 0; i < fields.length; i++) {
	    if (separators.test(fields[i])) {
	      throw new TypeError('field argument contains an invalid header');
	    }
	  }

	  // existing, unspecified vary
	  if (header === '*') {
	    return header;
	  }

	  // enumerate current values
	  var val = header;
	  var vals = parse(header.toLowerCase());

	  // unspecified vary
	  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
	    return '*';
	  }

	  for (var i = 0; i < fields.length; i++) {
	    var fld = fields[i].toLowerCase();

	    // append value (case-preserving)
	    if (vals.indexOf(fld) === -1) {
	      vals.push(fld);
	      val = val
	        ? val + ', ' + fields[i]
	        : fields[i];
	    }
	  }

	  return val;
	}

	/**
	 * Parse a vary header into an array.
	 *
	 * @param {String} header
	 * @return {Array}
	 * @api private
	 */

	function parse(header) {
	  return header.trim().split(/ *, */);
	}

	/**
	 * Mark that a request is varied on a header field.
	 *
	 * @param {Object} res
	 * @param {String|Array} field
	 * @api public
	 */

	function vary(res, field) {
	  if (!res || !res.getHeader || !res.setHeader) {
	    // quack quack
	    throw new TypeError('res argument is required');
	  }

	  // get existing header
	  var val = res.getHeader('Vary') || ''
	  var header = Array.isArray(val)
	    ? val.join(', ')
	    : String(val);

	  // set new header
	  if ((val = append(header, field))) {
	    res.setHeader('Vary', val);
	  }
	}


/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * serve-static
	 * Copyright(c) 2010 Sencha Inc.
	 * Copyright(c) 2011 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module dependencies.
	 * @private
	 */

	var escapeHtml = __webpack_require__(436)
	var parseUrl = __webpack_require__(453)
	var resolve = __webpack_require__(389).resolve
	var send = __webpack_require__(464)
	var url = __webpack_require__(324)

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = serveStatic
	module.exports.mime = send.mime

	/**
	 * @param {string} root
	 * @param {object} [options]
	 * @return {function}
	 * @public
	 */

	function serveStatic(root, options) {
	  if (!root) {
	    throw new TypeError('root path required')
	  }

	  if (typeof root !== 'string') {
	    throw new TypeError('root path must be a string')
	  }

	  // copy options object
	  var opts = Object.create(options || null)

	  // fall-though
	  var fallthrough = opts.fallthrough !== false

	  // default redirect
	  var redirect = opts.redirect !== false

	  // headers listener
	  var setHeaders = opts.setHeaders

	  if (setHeaders && typeof setHeaders !== 'function') {
	    throw new TypeError('option setHeaders must be function')
	  }

	  // setup options for send
	  opts.maxage = opts.maxage || opts.maxAge || 0
	  opts.root = resolve(root)

	  // construct directory listener
	  var onDirectory = redirect
	    ? createRedirectDirectoryListener()
	    : createNotFoundDirectoryListener()

	  return function serveStatic(req, res, next) {
	    if (req.method !== 'GET' && req.method !== 'HEAD') {
	      if (fallthrough) {
	        return next()
	      }

	      // method not allowed
	      res.statusCode = 405
	      res.setHeader('Allow', 'GET, HEAD')
	      res.setHeader('Content-Length', '0')
	      res.end()
	      return
	    }

	    var forwardError = !fallthrough
	    var originalUrl = parseUrl.original(req)
	    var path = parseUrl(req).pathname

	    // make sure redirect occurs at mount
	    if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {
	      path = ''
	    }

	    // create send stream
	    var stream = send(req, path, opts)

	    // add directory handler
	    stream.on('directory', onDirectory)

	    // add headers listener
	    if (setHeaders) {
	      stream.on('headers', setHeaders)
	    }

	    // add file listener for fallthrough
	    if (fallthrough) {
	      stream.on('file', function onFile() {
	        // once file is determined, always forward error
	        forwardError = true
	      })
	    }

	    // forward errors
	    stream.on('error', function error(err) {
	      if (forwardError || !(err.statusCode < 500)) {
	        next(err)
	        return
	      }

	      next()
	    })

	    // pipe
	    stream.pipe(res)
	  }
	}

	/**
	 * Collapse all leading slashes into a single slash
	 * @private
	 */
	function collapseLeadingSlashes(str) {
	  for (var i = 0; i < str.length; i++) {
	    if (str[i] !== '/') {
	      break
	    }
	  }

	  return i > 1
	    ? '/' + str.substr(i)
	    : str
	}

	/**
	 * Create a directory listener that just 404s.
	 * @private
	 */

	function createNotFoundDirectoryListener() {
	  return function notFound() {
	    this.error(404)
	  }
	}

	/**
	 * Create a directory listener that performs a redirect.
	 * @private
	 */

	function createRedirectDirectoryListener() {
	  return function redirect() {
	    if (this.hasTrailingSlash()) {
	      this.error(404)
	      return
	    }

	    // get original URL
	    var originalUrl = parseUrl.original(this.req)

	    // append trailing slash
	    originalUrl.path = null
	    originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/')

	    // reformat the URL
	    var loc = url.format(originalUrl)
	    var msg = 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>\n'
	    var res = this.res

	    // send redirect response
	    res.statusCode = 303
	    res.setHeader('Content-Type', 'text/html; charset=UTF-8')
	    res.setHeader('Content-Length', Buffer.byteLength(msg))
	    res.setHeader('X-Content-Type-Options', 'nosniff')
	    res.setHeader('Location', loc)
	    res.end(msg)
	  }
	}


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var express = __webpack_require__(431);

	express.Router.rewrite = express.application.rewrite = function rewrite(what, rewriter) {
	  return this.all(what, function (request, _, next) {
	    request.url = typeof rewriter == "function" ? rewriter(request.url) : rewriter;
	    next();
	  });
	};

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = function (_ref) {
	  var request = _ref.request;
	  return __(
	    "html",
	    null,
	    __(
	      "head",
	      null,
	      __("meta", { name: "viewport", content: "initial-scale=1.0" }),
	      __(
	        "title",
	        null,
	        "Neroelectronics"
	      ),
	      __(
	        "style",
	        { type: "text/css" },
	        "\n\tbody {\n\t\tfont-size: 130%;\n\t}\n\t#DETAILS_CONTAINER {\n\t\tfont-size: 75%;\n\t}\n\timg {\n\t\twidth: 1em;\n\t\tbottom: -0.2em;\n\t\tposition: relative;\n\t}\n\ta {\n\t\twhite-space: nowrap;\n\t}\n\t"
	      )
	    ),
	    __(
	      "body",
	      null,
	      function () {
	        var UA = request.headers["user-agent"];

	        var WhereAmI = "";
	        if (/Mac OS/.test(UA)) WhereAmI = "apple";else if (/Android/.test(UA)) WhereAmI = "android";

	        var Safari = __(
	          "a",
	          { href: "https://www.apple.com/safari/" },
	          __("img", { src: "./Safari.png" }),
	          "Safari"
	        );
	        var Chrome = __(
	          "a",
	          { href: "http://www.google.com/chrome/" },
	          __("img", { src: "./GoogleChrome.png" }),
	          "Chrome"
	        );
	        var Firefox = __(
	          "a",
	          { href: "https://www.mozilla.org/firefox/" },
	          __("img", { src: "./Firefox.png" }),
	          "Firefox"
	        );
	        var Browsers = WhereAmI == "apple" ? [Safari] : WhereAmI == "TODO:" ? [Chrome, Firefox] : // default
	        [Chrome];

	        var Browser = Browsers.length == 1 ? __(
	          "span",
	          null,
	          "браузер ",
	          Browsers[0],
	          " актуальной версии"
	        ) : __(
	          "span",
	          null,
	          "браузеры ",
	          Browsers.slice(0, -2).map(function (b) {
	            return __(
	              "span",
	              null,
	              b,
	              ", "
	            );
	          }),
	          Browsers[Browsers.length - 2],
	          " либо ",
	          Browsers[Browsers.length - 1],
	          " актуальных версий"
	        );

	        function checkCycledRelease(releaseVersion, releaseDate, releaseCycleInDays) {
	          actualVersion = releaseVersion + Math.floor((new Date() - new Date(releaseDate)) / ((releaseCycleInDays + 4) * 24 * 3600 * 1000)) + ".0";
	          if (Number(thisVersion) < Number(actualVersion)) showDetails = true;
	        }

	        var showDetails = void 0,
	            browserName = void 0,
	            thisVersion = void 0,
	            actualVersion = void 0;
	        if (/\sChrome\//.test(UA)) {
	          browserName = Chrome;
	          thisVersion = UA.match(/Chrome\/(\d+\.\d+)/)[1];
	          checkCycledRelease(46, "Oct 15 2015", 6 * 7);
	        }
	        if (/\sFirefox\//.test(UA)) {
	          browserName = Firefox;
	          thisVersion = UA.match(/Firefox\/(\d+\.\d+)/)[1];
	          checkCycledRelease(41, "Oct 15 2015", 6 * 7);
	        }

	        return __(
	          "div",
	          null,
	          __(
	            "p",
	            null,
	            "Для подключения к \"Умному дому\" необходимо использовать ",
	            Browser,
	            "."
	          ),
	          !showDetails ? null : __(
	            "p",
	            { id: "DETAILS_CONTAINER" },
	            __(
	              "script",
	              null,
	              ";void " + script + "();"
	            ),
	            __(
	              "a",
	              { id: "HREF", href: "javascript:details()" },
	              "подробнее"
	            ),
	            __(
	              "span",
	              { id: "DETAILS", style: "display: none;" },
	              "Вы используете браузер ",
	              browserName,
	              " версии ",
	              thisVersion,
	              ". Пожалуйста, обновите Ваш браузер до версии не менее ",
	              actualVersion,
	              "."
	            )
	          )
	        );
	      }(),
	      __(
	        "p",
	        null,
	        "Пожалуйста, убедитесь, что Вы используете совместимый с \"Умным домом\" браузер и что Ваш браузер обновлён."
	      ),
	      __(
	        "p",
	        null,
	        __(
	          "a",
	          { href: "/" },
	          "Вернуться"
	        )
	      )
	    )
	  );
	};

	function script() {
	  window.details = function () {
	    window.DETAILS.style.display = null;
	    window.HREF.style.display = "none";
	  };
	}
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__( 494 ).createElement))

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.load = exports.createElement = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.assignDOM = assignDOM;
	exports.register = register;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _localUtils = __webpack_require__(332);

	var lu = _interopRequireWildcard(_localUtils);

	var _cc = __webpack_require__(421);

	var cc = _interopRequireWildcard(_cc);

	var _ra = __webpack_require__(420);

	var _ra2 = _interopRequireDefault(_ra);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _morphdom = __webpack_require__(495);

	var _morphdom2 = _interopRequireDefault(_morphdom);

	var _styleParse = __webpack_require__(496);

	var _styleParse2 = _interopRequireDefault(_styleParse);

	var _log = __webpack_require__(498);

	var Log = _interopRequireWildcard(_log);

	var _dom = __webpack_require__(499);

	var _dom2 = _interopRequireDefault(_dom);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var log = Log.open("ui");


	var createTextNode = function createTextNode(text) {
	  return _dom2.default.document.createTextNode(String(text).normalize());
	};

	function toNode(child, node) {
	  restart: for (;;) {
	    child = child && typeof child.valueOf == "function" ? child.valueOf() : child;
	    if (Array.isArray(child)) {
	      if (child.length == 0) return null;
	      if (child.length == 1) {
	        child = child[0];
	        continue restart;
	      }
	      if (!node) node = _dom2.default.document.createDocumentFragment();
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = child[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var c = _step.value;

	          if (c) toNode(c, node);
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      child = node;
	    } else {
	      if (isString(child)) child = createTextNode(child);
	      if (node) {
	        node.appendChild(child);
	        child = node;
	      }
	    }
	    return child;
	  }
	}

	var requestReflow = typeof global.cancelAnimationFrame == "function" ? global.requestAnimationFrame : setTimeout;

	var requestDocumentTouch = function () {
	  // workaround of weblit/blink bug: sometimes document updates but does not redraw its state after className of some element is changed
	  var timeout = void 0;
	  var touchDocument = function touchDocument() {
	    // trying to force reflow
	    var div = _dom2.default.document.createElement("__DUMMY__");
	    div.style.position = "fixed";
	    div.style.right = div.style.bottom = "1px";
	    div.style.width = div.style.height = "1px";
	    // TODO: ATTENTION: check that alpha-channel do not freeze animations on page
	    div.style.backgroundColor = "rgba( 0, 0, 0, 0.01 )";
	    div.style.pointerEvents = "none";
	    div.style.zIndex = 1e99;
	    _dom2.default.document.body.appendChild(div);
	    setTimeout(function () {
	      _dom2.default.document.body.removeChild(div);
	      timeout = null;
	    }, 80); // 80ms seems to be enough. if it is equal to 1 than no effect is present.
	  };
	  return function () {
	    return timeout || (timeout = setTimeout(touchDocument));
	  };
	}();

	var waitUntilReflow = function () {
	  var frame = null;
	  var reflow = function reflow() {
	    return requestReflow(function () {
	      frame = null;
	      requestDocumentTouch();
	    });
	  };
	  return function () {
	    return frame || (frame = _bluebird2.default.try(reflow));
	  };
	}();

	function fcalc(f, cb) {
	  if (typeof f != "function") cb(f);else {
	    (function () {
	      var immediately = true;
	      setImmediate(function () {
	        return immediately = false;
	      });
	      (0, _ra2.default)(regeneratorRuntime.mark(function _callee() {
	        var ret;
	        return regeneratorRuntime.wrap(function _callee$(_context2) {
	          while (1) switch (_context2.prev = _context2.next) {
	            case 0:
	              if (!immediately) {
	                _context2.next = 4;
	                break;
	              }

	              requestDocumentTouch();
	              _context2.next = 6;
	              break;

	            case 4:
	              _context2.next = 6;
	              return waitUntilReflow();

	            case 6:
	              _context2.prev = 6;
	              ret = f();

	              if (!(ret && ret.next && ret.throw)) {
	                _context2.next = 12;
	                break;
	              }

	              _context2.next = 11;
	              return ret;

	            case 11:
	              ret = _context2.sent;

	            case 12:
	              cb(ret);
	              _context2.next = 18;
	              break;

	            case 15:
	              _context2.prev = 15;
	              _context2.t0 = _context2["catch"](6);

	              console.error(_context2.t0.stack || _context2.t0);

	            case 18:
	            case "end":
	              return _context2.stop();
	          }
	        }, _callee, this, [[6, 15]]);
	      }));
	    })();
	  }
	}

	function setContent(control, content) {
	  var cb = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	  fcalc(content, function (content) {
	    var c = toNode(filterContent(content));
	    if (c) {
	      control.innerHTML = "";
	      control.appendChild(c);
	    } else control.innerHTML = "";
	    cb && cb();
	  });
	}

	function toAttrString(value) {
	  if (Array.isArray(value)) return value.map(toAttrString).join(" ");else if (value) return "" + value;else return "";
	}

	function appendContent(content, f) {
	  if (!f) f = _dom2.default.document.createDocumentFragment();
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = content[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var c = _step2.value;

	      if (c == null || c == "") continue;else if (typeof c == "function") {
	        var p = _dom2.default.document.createElement("span");
	        setContent(p, c);
	        f.appendChild(p);
	      } else if (c instanceof _dom2.default.Node) f.appendChild(getActualNode(c));else if (!isString(c) && c[Symbol.iterator]) appendContent(c, f);else f.appendChild(createTextNode(c));
	    }
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }

	  return f;
	}

	var GeneratorFunctionPrototype = Object.getPrototypeOf(regeneratorRuntime.mark(function _callee2() {
	  return regeneratorRuntime.wrap(function _callee2$(_context3) {
	    while (1) switch (_context3.prev = _context3.next) {
	      case 0:
	      case "end":
	        return _context3.stop();
	    }
	  }, _callee2, this);
	}));

	var attachEventHandlers = function attachEventHandlers(target, event, handlers) {
	  if (handlers != null) if (!Array.isArray(handlers)) target.addEventListener(event, handlers);else {
	    var _iteratorNormalCompletion3 = true;
	    var _didIteratorError3 = false;
	    var _iteratorError3 = undefined;

	    try {
	      for (var _iterator3 = handlers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	        var handler = _step3.value;

	        target.addEventListener(event, handler);
	      }
	    } catch (err) {
	      _didIteratorError3 = true;
	      _iteratorError3 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	          _iterator3.return();
	        }
	      } finally {
	        if (_didIteratorError3) {
	          throw _iteratorError3;
	        }
	      }
	    }
	  }
	};

	// TODO: attach events when inserting into DOM and detach when removing
	var attachForeignEventHandlers = function attachForeignEventHandlers(target, context, event, handlers) {
	  return attachEventHandlers(target, event, (Array.isArray(handlers) ? handlers : [handlers]).map(function (handler) {
	    return handler.bind(context);
	  }));
	};

	var doHandleCreated = function doHandleCreated(target, handler) {
	  process.nextTick(function () {
	    return handler.call(target, {
	      type: "handlecreated",
	      target: target,
	      srcElement: target,
	      currentTarget: target
	    });
	  });
	};

	var onHandleEvents = new WeakMap();

	var notifyHandleCreated = function notifyHandleCreated(target, handlers) {
	  if (handlers != null) {
	    onHandleEvents.set(target, handlers);
	    if (!Array.isArray(handlers)) doHandleCreated(target, handlers);else {
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = handlers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var handler = _step4.value;

	          doHandleCreated(target, handler);
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }
	    }
	  }
	};

	var isString = function isString(value) {
	  return typeof value == "string" || value instanceof String;
	};
	var split = function split(value) {
	  return value.split(/[\s\t\v\f\r\n]+/);
	};

	var attributePresent = function attributePresent(attributes, name) {
	  return !!attributes && (!!attributes[name] || attributePresent(attributes._, name));
	};

	var getList = function getList(attributes, name) {
	  var ret = "";
	  while (attributes) {
	    var _context;

	    if ((_context = attributes, Object.prototype.hasOwnProperty).call(_context, name)) {
	      ret += " ";
	      ret += attributes[name];
	    }
	    if ((_context = attributes, Object.prototype.hasOwnProperty).call(_context, "_")) attributes = attributes._;else break;
	  }
	  return ret;
	};

	function filterContent(content) {
	  var ret = [];
	  void function walk(content) {
	    if (content == null || content == "") return;else if (Array.isArray(content)) // just Arrays, not iterables, because the can depend on observables
	      content.forEach(walk);else ret.push(getActualNode(content));
	  }(content);
	  return ret;
	}

	function isFunction(content) {
	  return content.length == 1 && typeof content[0] == "function";
	}

	function contentToArray(content) {
	  if (content instanceof _dom2.default.DocumentFragment) return [].concat(_toConsumableArray(content.childNodes));else if (Array.isArray(content)) return content;else return [content];
	}

	var EMPTY_ARRAY = [];

	var isReactive = function isReactive(p) {
	  return p instanceof _ra2.default.Cell;
	};

	var classesFunc = function classesFunc(reactive) {
	  return (0, _ra2.default)(function () {
	    return getClassesObject(parseClasses(lu.valueOf(reactive)));
	  });
	};

	var setClassKey = function setClassKey(classes, key, value) {
	  if (!value || typeof value === "boolean") classes[key] = !!value;else classes[key + value] = true;
	};

	var reactiveClassFields = function reactiveClassFields(obj) {
	  var ret = Object.create(null);
	  var _iteratorNormalCompletion5 = true;
	  var _didIteratorError5 = false;
	  var _iteratorError5 = undefined;

	  try {
	    for (var _iterator5 = lodash.toPairs(obj)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	      var _step5$value = _slicedToArray(_step5.value, 2);

	      var key = _step5$value[0];
	      var value = _step5$value[1];

	      if (typeof value == "function") ret[key] = (0, _ra2.default)(value);else if (isReactive(value)) ret[key] = value;else setClassKey(ret, key, value);
	    }
	  } catch (err) {
	    _didIteratorError5 = true;
	    _iteratorError5 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion5 && _iterator5.return) {
	        _iterator5.return();
	      }
	    } finally {
	      if (_didIteratorError5) {
	        throw _iteratorError5;
	      }
	    }
	  }

	  return ret;
	};

	var parseClasses = function parseClasses(classes) {
	  var buffer = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	  var makeBuffer = function makeBuffer() {
	    if (buffer == null) buffer = [];
	    return buffer;
	  };
	  if (classes == null) void null;else if (Array.isArray(classes)) {
	    var _iteratorNormalCompletion6 = true;
	    var _didIteratorError6 = false;
	    var _iteratorError6 = undefined;

	    try {
	      for (var _iterator6 = classes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	        var c = _step6.value;

	        buffer = parseClasses(c, buffer);
	      }
	    } catch (err) {
	      _didIteratorError6 = true;
	      _iteratorError6 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	          _iterator6.return();
	        }
	      } finally {
	        if (_didIteratorError6) {
	          throw _iteratorError6;
	        }
	      }
	    }
	  } else if (typeof classes == "string") {
	    var ret = null;
	    var _iteratorNormalCompletion7 = true;
	    var _didIteratorError7 = false;
	    var _iteratorError7 = undefined;

	    try {
	      for (var _iterator7 = split(classes).filter(Boolean)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	        var _c = _step7.value;

	        if (ret == null) ret = Object.create(null);
	        ret[_c] = true;
	      }
	    } catch (err) {
	      _didIteratorError7 = true;
	      _iteratorError7 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion7 && _iterator7.return) {
	          _iterator7.return();
	        }
	      } finally {
	        if (_didIteratorError7) {
	          throw _iteratorError7;
	        }
	      }
	    }

	    if (ret != null) makeBuffer().push(ret);
	  } else if (typeof classes == "function") makeBuffer().push(classesFunc((0, _ra2.default)(classes)));else if (isReactive(classes)) makeBuffer().push(classesFunc(classes));else makeBuffer().push(reactiveClassFields(classes));
	  return buffer;
	};

	var classValueToBoolean = function classValueToBoolean(value) {
	  return !!value && !(typeof value == "string" && /^(null|undefined|false|NaN|\-?0)$/.test(value));
	};

	var getClassesObject = function getClassesObject(array, constantOnly) {
	  var ret = null;
	  if (array) {
	    var _iteratorNormalCompletion8 = true;
	    var _didIteratorError8 = false;
	    var _iteratorError8 = undefined;

	    try {
	      for (var _iterator8 = array[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	        var obj = _step8.value;

	        if (constantOnly && isReactive(obj)) continue;
	        obj = lu.valueOf(obj);
	        var _iteratorNormalCompletion9 = true;
	        var _didIteratorError9 = false;
	        var _iteratorError9 = undefined;

	        try {
	          for (var _iterator9 = lodash.toPairs(obj)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	            var _step9$value = _slicedToArray(_step9.value, 2);

	            var key = _step9$value[0];
	            var value = _step9$value[1];

	            if (!ret) ret = Object.create(null);
	            if (constantOnly && isReactive(value)) ret[key] = false;else setClassKey(ret, key, value);
	          }
	        } catch (err) {
	          _didIteratorError9 = true;
	          _iteratorError9 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion9 && _iterator9.return) {
	              _iterator9.return();
	            }
	          } finally {
	            if (_didIteratorError9) {
	              throw _iteratorError9;
	            }
	          }
	        }
	      }
	    } catch (err) {
	      _didIteratorError8 = true;
	      _iteratorError8 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion8 && _iterator8.return) {
	          _iterator8.return();
	        }
	      } finally {
	        if (_didIteratorError8) {
	          throw _iteratorError8;
	        }
	      }
	    }
	  }return ret;
	};

	var getClassesArray = function getClassesArray(array, constantOnly) {
	  return (// must be not sorted!!!!
	    // to ensure classes plugins are applied in correct order
	    lodash.toPairs(getClassesObject(array, constantOnly)).filter(function (_ref) {
	      var _ref2 = _slicedToArray(_ref, 2);

	      var value = _ref2[1];
	      return classValueToBoolean(value);
	    }).map(function (_ref3) {
	      var _ref4 = _slicedToArray(_ref3, 2);

	      var name = _ref4[0];
	      var value = _ref4[1];
	      return typeof value == "string" ? name + value : name;
	    })
	  );
	};

	var getClassesString = function getClassesString(array, constantOnly) {
	  return getClassesArray(array, constantOnly).sort().join(" ");
	};

	var stylesFunc = function stylesFunc(reactive) {
	  return (0, _ra2.default)(function () {
	    return getStylesObject(parseStyles(lu.valueOf(reactive)));
	  });
	};

	var reactiveStyleFields = function reactiveStyleFields(obj) {
	  var ret = Object.create(null);
	  var _iteratorNormalCompletion10 = true;
	  var _didIteratorError10 = false;
	  var _iteratorError10 = undefined;

	  try {
	    for (var _iterator10 = lodash.toPairs(obj)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	      var _step10$value = _slicedToArray(_step10.value, 2);

	      var key = _step10$value[0];
	      var value = _step10$value[1];

	      if (typeof value == "function") ret[key] = (0, _ra2.default)(value);else ret[key] = value;
	    }
	  } catch (err) {
	    _didIteratorError10 = true;
	    _iteratorError10 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion10 && _iterator10.return) {
	        _iterator10.return();
	      }
	    } finally {
	      if (_didIteratorError10) {
	        throw _iteratorError10;
	      }
	    }
	  }

	  return ret;
	};

	var parseStyles = function parseStyles(styles) {
	  var buffer = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	  var makeBuffer = function makeBuffer() {
	    if (buffer == null) buffer = [];
	    return buffer;
	  };
	  if (styles == null) void null;else if (Array.isArray(styles)) {
	    var _iteratorNormalCompletion11 = true;
	    var _didIteratorError11 = false;
	    var _iteratorError11 = undefined;

	    try {
	      for (var _iterator11 = styles[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	        var c = _step11.value;

	        buffer = parseStyles(c, buffer);
	      }
	    } catch (err) {
	      _didIteratorError11 = true;
	      _iteratorError11 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion11 && _iterator11.return) {
	          _iterator11.return();
	        }
	      } finally {
	        if (_didIteratorError11) {
	          throw _iteratorError11;
	        }
	      }
	    }
	  } else if (typeof styles == "string") {
	    var ret = (0, _styleParse2.default)(styles);
	    if (ret != null) makeBuffer().push(ret);
	  } else if (typeof styles == "function") makeBuffer().push(stylesFunc((0, _ra2.default)(styles)));else if (isReactive(styles)) makeBuffer().push(stylesFunc(styles));else makeBuffer().push(reactiveStyleFields(styles));
	  return buffer;
	};

	var styleValuePresent = function styleValuePresent(value) {
	  return value != null && !(typeof value == "string" && /^(null|undefined|NaN)$/.test(value));
	};

	// TODO: check <div style={{top:0}}/>

	var getStylesObject = function getStylesObject(array, constantOnly) {
	  var ret = Object.create(null);
	  var _iteratorNormalCompletion12 = true;
	  var _didIteratorError12 = false;
	  var _iteratorError12 = undefined;

	  try {
	    for (var _iterator12 = array[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	      var obj = _step12.value;

	      if (constantOnly && isReactive(obj)) continue;
	      obj = lu.valueOf(obj);
	      var _iteratorNormalCompletion13 = true;
	      var _didIteratorError13 = false;
	      var _iteratorError13 = undefined;

	      try {
	        for (var _iterator13 = lodash.toPairs(obj)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	          var _step13$value = _slicedToArray(_step13.value, 2);

	          var name = _step13$value[0];
	          var value = _step13$value[1];

	          if (constantOnly && isReactive(value)) ret[name] = false;else ret[name] = lu.valueOf(value);
	        }
	      } catch (err) {
	        _didIteratorError13 = true;
	        _iteratorError13 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion13 && _iterator13.return) {
	            _iterator13.return();
	          }
	        } finally {
	          if (_didIteratorError13) {
	            throw _iteratorError13;
	          }
	        }
	      }
	    }
	  } catch (err) {
	    _didIteratorError12 = true;
	    _iteratorError12 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion12 && _iterator12.return) {
	        _iterator12.return();
	      }
	    } finally {
	      if (_didIteratorError12) {
	        throw _iteratorError12;
	      }
	    }
	  }

	  return ret;
	};

	var getStyles = function getStyles(array, constantOnly) {
	  var ret = lodash.toPairs(getStylesObject(array, constantOnly));
	  var _iteratorNormalCompletion14 = true;
	  var _didIteratorError14 = false;
	  var _iteratorError14 = undefined;

	  try {
	    for (var _iterator14 = ret[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
	      var s = _step14.value;

	      if (!styleValuePresent(s[1])) s[1] = null;
	    }
	  } catch (err) {
	    _didIteratorError14 = true;
	    _iteratorError14 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion14 && _iterator14.return) {
	        _iterator14.return();
	      }
	    } finally {
	      if (_didIteratorError14) {
	        throw _iteratorError14;
	      }
	    }
	  }

	  return ret;
	};

	var getStylesString = function getStylesString(array, constantOnly) {
	  return getStyles(array, constantOnly).filter(function (_ref5) {
	    var _ref6 = _slicedToArray(_ref5, 2);

	    var value = _ref6[1];
	    return value != null;
	  }).map(function (_ref7) {
	    var _ref8 = _slicedToArray(_ref7, 2);

	    var name = _ref8[0];
	    var value = _ref8[1];
	    return name + ":" + value + ";";
	  }).join("");
	};

	var makeAttributes = function makeAttributes(attributes) {
	  var ret = null;
	  var classes = null;
	  var style = null;
	  var getRet = function getRet() {
	    if (ret == null) ret = Object.create(null);
	    return ret;
	  };
	  void function walk(attributes) {
	    var _style;

	    var _iteratorNormalCompletion15 = true;
	    var _didIteratorError15 = false;
	    var _iteratorError15 = undefined;

	    try {
	      for (var _iterator15 = lodash.toPairs(attributes)[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
	        var _step15$value = _slicedToArray(_step15.value, 2);

	        var name = _step15$value[0];
	        var value = _step15$value[1];

	        switch (name) {
	          case "_":
	            walk(value);
	            break;
	          case "class":
	            if (value != null) if (classes == null) classes = parseClasses(value);else {
	              var _classes;

	              var parsed = parseClasses(value);
	              if (parsed) (_classes = classes).push.apply(_classes, _toConsumableArray(parsed));
	            }
	            break;
	          case "style":
	            if (value != null) if (style == null) style = parseStyles(value);else (_style = style).push.apply(_style, _toConsumableArray(parseStyles(value)));
	            break;
	          default:
	            getRet()[name] = value;
	        }
	      }
	    } catch (err) {
	      _didIteratorError15 = true;
	      _iteratorError15 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion15 && _iterator15.return) {
	          _iterator15.return();
	        }
	      } finally {
	        if (_didIteratorError15) {
	          throw _iteratorError15;
	        }
	      }
	    }
	  }(attributes);
	  if (classes && classes.length) getRet().class = classes;
	  if (style) getRet().style = style;
	  return ret;
	};

	function setClassValue(node, classes) {
	  var set = function set() {
	    var className = getClassesString(classes);
	    if (node().className != className) node().className = className;
	  };
	  if (classes.some(function (c) {
	    return isReactive(c) || lodash.values(c).some(isReactive);
	  })) (0, _ra2.default)(set);else set();
	}

	function setStyleValue(node, styles) {
	  var set = function set() {
	    var s = getStyles(styles);
	    var _iteratorNormalCompletion16 = true;
	    var _didIteratorError16 = false;
	    var _iteratorError16 = undefined;

	    try {
	      for (var _iterator16 = s[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
	        var _step16$value = _slicedToArray(_step16.value, 2);

	        var name = _step16$value[0];
	        var value = _step16$value[1];

	        if (node().style[name] != value) node().style[name] = value;
	      }
	    } catch (err) {
	      _didIteratorError16 = true;
	      _iteratorError16 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion16 && _iterator16.return) {
	          _iterator16.return();
	        }
	      } finally {
	        if (_didIteratorError16) {
	          throw _iteratorError16;
	        }
	      }
	    }
	  };
	  if (styles.some(function (c) {
	    if (isReactive(c)) return true;
	    var _iteratorNormalCompletion17 = true;
	    var _didIteratorError17 = false;
	    var _iteratorError17 = undefined;

	    try {
	      for (var _iterator17 = lodash.values(c)[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
	        var v = _step17.value;

	        if (isReactive(v)) return true;
	      }
	    } catch (err) {
	      _didIteratorError17 = true;
	      _iteratorError17 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion17 && _iterator17.return) {
	          _iterator17.return();
	        }
	      } finally {
	        if (_didIteratorError17) {
	          throw _iteratorError17;
	        }
	      }
	    }

	    return false;
	  })) (0, _ra2.default)(set);else set();
	}

	function push(target, value) {
	  if (value == null) return target;else if (target == null) {
	    if (!Array.isArray(value)) return value;else return [].concat(_toConsumableArray(value));
	  } else if (!Array.isArray(target)) {
	    if (!Array.isArray(value)) return [target, value];else return [target].concat(_toConsumableArray(value));
	  } else {
	    if (!Array.isArray(value)) target.push(value);else target.push.apply(target, _toConsumableArray(value));
	    return target;
	  }
	}

	function createElement(name, attributes, content) {
	  if (attributes) attributes = makeAttributes(attributes);
	  if (typeof name == "string" && Classes[name]) return Classes[name](attributes, content);
	  content = filterContent(content);
	  if (typeof name == "function") return name(attributes || 0, isFunction(content) ? content : contentToArray(appendContent(content)));
	  var onUserHandleCreated = void 0;
	  var onHandleCreated = void 0;
	  var isDocumentFragment = name == "document-fragment" || name == "";
	  // TODO: use & return document.createDocumentFragment instead of div & array
	  var ret = isDocumentFragment ? _dom2.default.document.createElement("document-fragment") : _dom2.default.document.createElement(name);
	  var node = function node() {
	    return ret = getActualNode(ret);
	  };
	  // ret.id = `tmp_${ UID() }`
	  var classes = attributes && attributes.class || EMPTY_ARRAY;

	  if (classes.length) {
	    var initialClasses = getClassesArray(classes, true);
	    var identifiers = initialClasses.map(function (cl) {
	      return name + "." + cl;
	    }).reverse();
	    var constructing = getList(attributes, "constructing");
	    var constructors = constructing.split(/[\s\r\n]+/).filter(Boolean);
	    var _iteratorNormalCompletion18 = true;
	    var _didIteratorError18 = false;
	    var _iteratorError18 = undefined;

	    try {
	      for (var _iterator18 = identifiers[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
	        var i = _step18.value;

	        if (Classes[i] && constructors.indexOf(i) < 0) return createElement(Classes[i], Object.assign({}, attributes, { constructing: constructing + " " + i }), content);
	      }
	    } catch (err) {
	      _didIteratorError18 = true;
	      _iteratorError18 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion18 && _iterator18.return) {
	          _iterator18.return();
	        }
	      } finally {
	        if (_didIteratorError18) {
	          throw _iteratorError18;
	        }
	      }
	    }

	    ret.className = initialClasses.join(" ");
	    setClassValue(node, classes);
	  }

	  if (attributes != null) {
	    var match = null;
	    var _iteratorNormalCompletion19 = true;
	    var _didIteratorError19 = false;
	    var _iteratorError19 = undefined;

	    try {
	      var _loop = function _loop() {
	        var _step19$value = _slicedToArray(_step19.value, 2);

	        var name = _step19$value[0];
	        var value = _step19$value[1];

	        if (name == "class") return "continue";else if (/^constructing(\:|$)/.test(name)) return "continue";else if (name == "style") setStyleValue(node, value);else if (match = name.match(/^on(.*)$/)) {
	          if (value != null) {
	            (function () {
	              var event = match[1];
	              if (event == "handlecreated") onUserHandleCreated = push(onUserHandleCreated, value);else onHandleCreated = push(onHandleCreated, event == "windowresize" ? function () {
	                attachForeignEventHandlers(window, this, "resize", value);
	              } : function () {
	                attachEventHandlers(this, event, value);
	              });
	            })();
	          }
	        } else {
	          fcalc(value, function (value) {
	            value = toAttrString(value);
	            if (node().getAttribute(name) != value) {
	              node().setAttribute(name, value);
	              // if ( global.__XXX )
	              // value::_LOG()
	            }
	          });
	        }
	      };

	      for (var _iterator19 = lodash.toPairs(attributes)[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
	        var _ret2 = _loop();

	        if (_ret2 === "continue") continue;
	      }
	    } catch (err) {
	      _didIteratorError19 = true;
	      _iteratorError19 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion19 && _iterator19.return) {
	          _iterator19.return();
	        }
	      } finally {
	        if (_didIteratorError19) {
	          throw _iteratorError19;
	        }
	      }
	    }
	  }

	  switch (content.length) {
	    case 0:
	      break;
	    case 1:
	      setContent(ret, content[0]);
	      break;
	    default:
	      ret.appendChild(appendContent(content));
	      break;
	  }

	  onHandleCreated = push(onHandleCreated, onUserHandleCreated);

	  if (onHandleCreated != null) notifyHandleCreated(ret, onHandleCreated);

	  if (isDocumentFragment) ret = [].concat(_toConsumableArray(ret.childNodes));

	  return ret;
	}

	var _lastModule = void 0;

	exports.createElement = createElementFromModule;

	function createElementFromModule(name, attributes) {
	  for (var _len = arguments.length, content = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    content[_key - 2] = arguments[_key];
	  }

	  var ret = createElement(name, attributes, content);
	  _lastModule = ret;
	  return ret;
	}

	var actualNodes = new WeakMap();

	function getActualNode(node) {
	  var a = void 0;
	  while (a = actualNodes.get(node)) {
	    node = a;
	  }return node;
	}

	var assignDOMOptions = {
	  onBeforeMorphEl: function onBeforeMorphEl(dest, source) {
	    if (source != dest) {
	      if (actualNodes.get(source)) throw new Error("node already appended");
	      actualNodes.set(source, dest);
	      notifyHandleCreated(dest, onHandleEvents.get(source));
	    }
	  }
	};

	function assignDOM(dest, source) {
	  var _ref9 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  var _ref9$childrenOnly = _ref9.childrenOnly;
	  var childrenOnly = _ref9$childrenOnly === undefined ? false : _ref9$childrenOnly;
	  var _ref9$immediately = _ref9.immediately;
	  var immediately = _ref9$immediately === undefined ? false : _ref9$immediately;

	  dest = getActualNode(dest);
	  if (!global.CustomEvent || dest.dispatchEvent(new global.CustomEvent("assignDOM", { bubbles: true, cancelable: true, detail: { source: source, childrenOnly: childrenOnly } }))) {
	    var assign = function assign() {
	      (0, _morphdom2.default)(dest, source, _extends({ childrenOnly: childrenOnly }, assignDOMOptions));
	      global.CustomEvent && dest.dispatchEvent(new global.CustomEvent("assignedDOM", { bubbles: true, cancelable: false, detail: { source: source, childrenOnly: childrenOnly } }));
	    };
	    if (immediately) assign();else setImmediate(assign);
	  }
	}

	var load = exports.load = function load(module) {
	  return module && module.component || _lastModule;
	};

	var Classes = Object.create(null);

	function register(selector, constructor) {
	  if (typeof selector == "string") selector = _defineProperty({}, selector, constructor);
	  var _iteratorNormalCompletion20 = true;
	  var _didIteratorError20 = false;
	  var _iteratorError20 = undefined;

	  try {
	    for (var _iterator20 = lodash.toPairs(selector)[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
	      var _step20$value = _slicedToArray(_step20.value, 2);

	      var s = _step20$value[0];
	      var c = _step20$value[1];

	      var st = s.trim();
	      if (st.match(/^(([^\s\.\r\n]+)\.([^\s\.\r\n]+))|([^\s\.\r\n]+)$/)) {
	        if (Classes[st]) {
	          // TODO: allow multiple handlers for a selector
	          throw new Error("selector \"" + st + "\" already registered");
	        }
	        Classes[st] = c;
	      } else throw new Error("unsupported selector");
	    }
	  } catch (err) {
	    _didIteratorError20 = true;
	    _iteratorError20 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion20 && _iterator20.return) {
	        _iterator20.return();
	      }
	    } finally {
	      if (_didIteratorError20) {
	        throw _iteratorError20;
	      }
	    }
	  }
	}

	var makeRaProperty = function makeRaProperty(_ref10) {
	  var classes = _ref10.classes;
	  var names = _ref10.names;
	  var events = _ref10.events;

	  names = lodash.toPairs(names).map(function (_ref11) {
	    var _ref12 = _slicedToArray(_ref11, 2);

	    var exportName = _ref12[0];
	    var internalName = _ref12[1];
	    return { exportName: exportName, internalName: internalName, privateName: "_" + exportName };
	  });
	  var doUpdate = function doUpdate() {
	    var _iteratorNormalCompletion21 = true;
	    var _didIteratorError21 = false;
	    var _iteratorError21 = undefined;

	    try {
	      for (var _iterator21 = names[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
	        var _step21$value = _step21.value;
	        var internalName = _step21$value.internalName;
	        var privateName = _step21$value.privateName;

	        var prop = this[privateName];
	        if (prop != null) prop.assign(this[internalName]);
	      }
	    } catch (err) {
	      _didIteratorError21 = true;
	      _iteratorError21 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion21 && _iterator21.return) {
	          _iterator21.return();
	        }
	      } finally {
	        if (_didIteratorError21) {
	          throw _iteratorError21;
	        }
	      }
	    }
	  };
	  var throttled = lodash.throttle(doUpdate);
	  var updateRaValues = function updateRaValues() {
	    doUpdate.call(this);
	    throttled.call(this);
	  };
	  var _iteratorNormalCompletion22 = true;
	  var _didIteratorError22 = false;
	  var _iteratorError22 = undefined;

	  try {
	    var _loop2 = function _loop2() {
	      var _step22$value = _step22.value;
	      var exportName = _step22$value.exportName;
	      var internalName = _step22$value.internalName;
	      var privateName = _step22$value.privateName;

	      var descr = {
	        get: function get() {
	          var _this = this;

	          if (!this[privateName]) _ra2.default.noTouch(function () {
	            _this[privateName] = (0, _ra2.default)();
	            _this[privateName].assign(_this[internalName]);
	            var _iteratorNormalCompletion23 = true;
	            var _didIteratorError23 = false;
	            var _iteratorError23 = undefined;

	            try {
	              for (var _iterator23 = events[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
	                var event = _step23.value;

	                _this.addEventListener(event, updateRaValues);
	              }
	            } catch (err) {
	              _didIteratorError23 = true;
	              _iteratorError23 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion23 && _iterator23.return) {
	                  _iterator23.return();
	                }
	              } finally {
	                if (_didIteratorError23) {
	                  throw _iteratorError23;
	                }
	              }
	            }
	          });
	          return this[privateName].valueOf();
	        },
	        set: function set(value) {
	          if (this[internalName] != value) {
	            this[internalName] = value;
	            if (this[privateName]) this[privateName].assign(this[internalName]);
	          }
	        },

	        configurable: true
	      };
	      var _iteratorNormalCompletion24 = true;
	      var _didIteratorError24 = false;
	      var _iteratorError24 = undefined;

	      try {
	        for (var _iterator24 = classes[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
	          var c = _step24.value;

	          c && Object.defineProperty(c.prototype, exportName, descr);
	        }
	      } catch (err) {
	        _didIteratorError24 = true;
	        _iteratorError24 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion24 && _iterator24.return) {
	            _iterator24.return();
	          }
	        } finally {
	          if (_didIteratorError24) {
	            throw _iteratorError24;
	          }
	        }
	      }
	    };

	    for (var _iterator22 = names[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
	      _loop2();
	    }
	  } catch (err) {
	    _didIteratorError22 = true;
	    _iteratorError22 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion22 && _iterator22.return) {
	        _iterator22.return();
	      }
	    } finally {
	      if (_didIteratorError22) {
	        throw _iteratorError22;
	      }
	    }
	  }
	};

	makeRaProperty({
	  classes: [global.HTMLInputElement, global.HTMLTextAreaElement],
	  names: { raValue: "value" },
	  events: ["change", "keypress", "keydown", "keyup", "touchstart", "touchmove", "touchend", "touchcancel", "mousedown", "mouseup", "blur", "focus"]
	});

	makeRaProperty({
	  classes: [global.Node],
	  names: { raScrollTop: "scrollTop", raScrollLeft: "scrollLeft" },
	  events: ["scroll", "change", "keypress", "keydown", "keyup", "touchstart", "touchmove", "touchend", "touchcancel", "mousedown", "mouseup", "blur", "focus"]
	});

/***/ },
/* 495 */
/***/ function(module, exports) {

	// Create a range object for efficently rendering strings to elements.
	var range;

	var testEl = typeof document !== 'undefined' ? document.body || document.createElement('div') : {};

	// Fixes https://github.com/patrick-steele-idem/morphdom/issues/32 (IE7+ support)
	// <=IE7 does not support el.hasAttribute(name)
	var hasAttribute;
	if (testEl.hasAttribute) {
	    hasAttribute = function hasAttribute(el, name) {
	        return el.hasAttribute(name);
	    };
	} else {
	    hasAttribute = function hasAttribute(el, name) {
	        return el.getAttributeNode(name);
	    };
	}

	function empty(o) {
	    for (var k in o) {
	        if (o.hasOwnProperty(k)) {
	            return false;
	        }
	    }

	    return true;
	}
	function toElement(str) {
	    if (!range && document.createRange) {
	        range = document.createRange();
	        range.selectNode(document.body);
	    }

	    var fragment;
	    if (range && range.createContextualFragment) {
	        fragment = range.createContextualFragment(str);
	    } else {
	        fragment = document.createElement('body');
	        fragment.innerHTML = str;
	    }
	    return fragment.childNodes[0];
	}

	var specialElHandlers = {
	    /**
	     * Needed for IE. Apparently IE doesn't think
	     * that "selected" is an attribute when reading
	     * over the attributes using selectEl.attributes
	     */
	    OPTION: function(fromEl, toEl) {
	        if ((fromEl.selected = toEl.selected)) {
	            fromEl.setAttribute('selected', '');
	        } else {
	            fromEl.removeAttribute('selected', '');
	        }
	    },
	    /**
	     * The "value" attribute is special for the <input> element
	     * since it sets the initial value. Changing the "value"
	     * attribute without changing the "value" property will have
	     * no effect since it is only used to the set the initial value.
	     * Similar for the "checked" attribute.
	     */
	    INPUT: function(fromEl, toEl) {
	        fromEl.checked = toEl.checked;

	        if (fromEl.value != toEl.value) {
	            fromEl.value = toEl.value;
	        }

	        if (!hasAttribute(toEl, 'checked')) {
	            fromEl.removeAttribute('checked');
	        }

	        if (!hasAttribute(toEl, 'value')) {
	            fromEl.removeAttribute('value');
	        }
	    },

	    TEXTAREA: function(fromEl, toEl) {
	        var newValue = toEl.value;
	        if (fromEl.value != newValue) {
	            fromEl.value = newValue;
	        }

	        if (fromEl.firstChild) {
	            fromEl.firstChild.nodeValue = newValue;
	        }
	    }
	};

	function noop() {}

	/**
	 * Loop over all of the attributes on the target node and make sure the
	 * original DOM node has the same attributes. If an attribute
	 * found on the original node is not on the new node then remove it from
	 * the original node
	 * @param  {HTMLElement} fromNode
	 * @param  {HTMLElement} toNode
	 */
	function morphAttrs(fromNode, toNode) {
	    var attrs = toNode.attributes;
	    var i;
	    var attr;
	    var attrName;
	    var attrValue;
	    var foundAttrs = {};

	    for (i=attrs.length-1; i>=0; i--) {
	        attr = attrs[i];
	        if (attr.specified !== false) {
	            attrName = attr.name;
	            attrValue = attr.value;
	            foundAttrs[attrName] = true;

	            if (fromNode.getAttribute(attrName) !== attrValue) {
	                fromNode.setAttribute(attrName, attrValue);
	            }
	        }
	    }

	    // Delete any extra attributes found on the original DOM element that weren't
	    // found on the target element.
	    attrs = fromNode.attributes;

	    for (i=attrs.length-1; i>=0; i--) {
	        attr = attrs[i];
	        if (attr.specified !== false) {
	            attrName = attr.name;
	            if (!foundAttrs.hasOwnProperty(attrName)) {
	                fromNode.removeAttribute(attrName);
	            }
	        }
	    }
	}

	/**
	 * Copies the children of one DOM element to another DOM element
	 */
	function moveChildren(fromEl, toEl) {
	    var curChild = fromEl.firstChild;
	    while(curChild) {
	        var nextChild = curChild.nextSibling;
	        toEl.appendChild(curChild);
	        curChild = nextChild;
	    }
	    return toEl;
	}

	function defaultGetNodeKey(node) {
	    return node.id;
	}

	function morphdom(fromNode, toNode, options) {
	    if (!options) {
	        options = {};
	    }

	    if (typeof toNode === 'string') {
	        toNode = toElement(toNode);
	    }

	    var savedEls = {}; // Used to save off DOM elements with IDs
	    var unmatchedEls = {};
	    var getNodeKey = options.getNodeKey || defaultGetNodeKey;
	    var onNodeDiscarded = options.onNodeDiscarded || noop;
	    var onBeforeMorphEl = options.onBeforeMorphEl || noop;
	    var onBeforeMorphElChildren = options.onBeforeMorphElChildren || noop;
	    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
	    var childrenOnly = options.childrenOnly === true;
	    var movedEls = [];

	    function removeNodeHelper(node, nestedInSavedEl) {
	        var id = getNodeKey(node);
	        // If the node has an ID then save it off since we will want
	        // to reuse it in case the target DOM tree has a DOM element
	        // with the same ID
	        if (id) {
	            savedEls[id] = node;
	        } else if (!nestedInSavedEl) {
	            // If we are not nested in a saved element then we know that this node has been
	            // completely discarded and will not exist in the final DOM.
	            onNodeDiscarded(node);
	        }

	        if (node.nodeType === 1) {
	            var curChild = node.firstChild;
	            while(curChild) {
	                removeNodeHelper(curChild, nestedInSavedEl || id);
	                curChild = curChild.nextSibling;
	            }
	        }
	    }

	    function walkDiscardedChildNodes(node) {
	        if (node.nodeType === 1) {
	            var curChild = node.firstChild;
	            while(curChild) {


	                if (!getNodeKey(curChild)) {
	                    // We only want to handle nodes that don't have an ID to avoid double
	                    // walking the same saved element.

	                    onNodeDiscarded(curChild);

	                    // Walk recursively
	                    walkDiscardedChildNodes(curChild);
	                }

	                curChild = curChild.nextSibling;
	            }
	        }
	    }

	    function removeNode(node, parentNode, alreadyVisited) {
	        if (onBeforeNodeDiscarded(node) === false) {
	            return;
	        }

	        parentNode.removeChild(node);
	        if (alreadyVisited) {
	            if (!getNodeKey(node)) {
	                onNodeDiscarded(node);
	                walkDiscardedChildNodes(node);
	            }
	        } else {
	            removeNodeHelper(node);
	        }
	    }

	    function morphEl(fromEl, toEl, alreadyVisited, childrenOnly) {
	        var toElKey = getNodeKey(toEl);
	        if (toElKey) {
	            // If an element with an ID is being morphed then it is will be in the final
	            // DOM so clear it out of the saved elements collection
	            delete savedEls[toElKey];
	        }

	        if (!childrenOnly) {
	            if (onBeforeMorphEl(fromEl, toEl) === false) {
	                return;
	            }

	            morphAttrs(fromEl, toEl);

	            if (onBeforeMorphElChildren(fromEl, toEl) === false) {
	                return;
	            }
	        }

	        if (fromEl.tagName != 'TEXTAREA') {
	            var curToNodeChild = toEl.firstChild;
	            var curFromNodeChild = fromEl.firstChild;
	            var curToNodeId;

	            var fromNextSibling;
	            var toNextSibling;
	            var savedEl;
	            var unmatchedEl;

	            outer: while(curToNodeChild) {
	                toNextSibling = curToNodeChild.nextSibling;
	                curToNodeId = getNodeKey(curToNodeChild);

	                while(curFromNodeChild) {
	                    var curFromNodeId = getNodeKey(curFromNodeChild);
	                    fromNextSibling = curFromNodeChild.nextSibling;

	                    if (!alreadyVisited) {
	                        if (curFromNodeId && (unmatchedEl = unmatchedEls[curFromNodeId])) {
	                            unmatchedEl.parentNode.replaceChild(curFromNodeChild, unmatchedEl);
	                            morphEl(curFromNodeChild, unmatchedEl, alreadyVisited);
	                            curFromNodeChild = fromNextSibling;
	                            continue;
	                        }
	                    }

	                    var curFromNodeType = curFromNodeChild.nodeType;

	                    if (curFromNodeType === curToNodeChild.nodeType) {
	                        var isCompatible = false;

	                        if (curFromNodeType === 1) { // Both nodes being compared are Element nodes
	                            if (curFromNodeChild.tagName === curToNodeChild.tagName) {
	                                // We have compatible DOM elements
	                                if (curFromNodeId || curToNodeId) {
	                                    // If either DOM element has an ID then we handle
	                                    // those differently since we want to match up
	                                    // by ID
	                                    if (curToNodeId === curFromNodeId) {
	                                        isCompatible = true;
	                                    }
	                                } else {
	                                    isCompatible = true;
	                                }
	                            }

	                            if (isCompatible) {
	                                // We found compatible DOM elements so transform the current "from" node
	                                // to match the current target DOM node.
	                                morphEl(curFromNodeChild, curToNodeChild, alreadyVisited);
	                            }
	                        } else if (curFromNodeType === 3) { // Both nodes being compared are Text nodes
	                            isCompatible = true;
	                            // Simply update nodeValue on the original node to change the text value
	                            curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
	                        }

	                        if (isCompatible) {
	                            curToNodeChild = toNextSibling;
	                            curFromNodeChild = fromNextSibling;
	                            continue outer;
	                        }
	                    }

	                    // No compatible match so remove the old node from the DOM and continue trying
	                    // to find a match in the original DOM
	                    removeNode(curFromNodeChild, fromEl, alreadyVisited);
	                    curFromNodeChild = fromNextSibling;
	                }

	                if (curToNodeId) {
	                    if ((savedEl = savedEls[curToNodeId])) {
	                        morphEl(savedEl, curToNodeChild, true);
	                        curToNodeChild = savedEl; // We want to append the saved element instead
	                    } else {
	                        // The current DOM element in the target tree has an ID
	                        // but we did not find a match in any of the corresponding
	                        // siblings. We just put the target element in the old DOM tree
	                        // but if we later find an element in the old DOM tree that has
	                        // a matching ID then we will replace the target element
	                        // with the corresponding old element and morph the old element
	                        unmatchedEls[curToNodeId] = curToNodeChild;
	                    }
	                }

	                // If we got this far then we did not find a candidate match for our "to node"
	                // and we exhausted all of the children "from" nodes. Therefore, we will just
	                // append the current "to node" to the end
	                fromEl.appendChild(curToNodeChild);

	                if (curToNodeChild.nodeType === 1 && (curToNodeId || curToNodeChild.firstChild)) {
	                    // The element that was just added to the original DOM may have
	                    // some nested elements with a key/ID that needs to be matched up
	                    // with other elements. We'll add the element to a list so that we
	                    // can later process the nested elements if there are any unmatched
	                    // keyed elements that were discarded
	                    movedEls.push(curToNodeChild);
	                }

	                curToNodeChild = toNextSibling;
	                curFromNodeChild = fromNextSibling;
	            }

	            // We have processed all of the "to nodes". If curFromNodeChild is non-null then
	            // we still have some from nodes left over that need to be removed
	            while(curFromNodeChild) {
	                fromNextSibling = curFromNodeChild.nextSibling;
	                removeNode(curFromNodeChild, fromEl, alreadyVisited);
	                curFromNodeChild = fromNextSibling;
	            }
	        }

	        var specialElHandler = specialElHandlers[fromEl.tagName];
	        if (specialElHandler) {
	            specialElHandler(fromEl, toEl);
	        }
	    } // END: morphEl(...)

	    var morphedNode = fromNode;
	    var morphedNodeType = morphedNode.nodeType;
	    var toNodeType = toNode.nodeType;

	    if (!childrenOnly) {
	        // Handle the case where we are given two DOM nodes that are not
	        // compatible (e.g. <div> --> <span> or <div> --> TEXT)
	        if (morphedNodeType === 1) {
	            if (toNodeType === 1) {
	                if (fromNode.tagName !== toNode.tagName) {
	                    onNodeDiscarded(fromNode);
	                    morphedNode = moveChildren(fromNode, document.createElement(toNode.tagName));
	                }
	            } else {
	                // Going from an element node to a text node
	                morphedNode = toNode;
	            }
	        } else if (morphedNodeType === 3) { // Text node
	            if (toNodeType === 3) {
	                morphedNode.nodeValue = toNode.nodeValue;
	                return morphedNode;
	            } else {
	                // Text node to something else
	                morphedNode = toNode;
	            }
	        }
	    }

	    if (morphedNode === toNode) {
	        // The "to node" was not compatible with the "from node"
	        // so we had to toss out the "from node" and use the "to node"
	        onNodeDiscarded(fromNode);
	    } else {
	        morphEl(morphedNode, toNode, false, childrenOnly);

	        /**
	         * What we will do here is walk the tree for the DOM element
	         * that was moved from the target DOM tree to the original
	         * DOM tree and we will look for keyed elements that could
	         * be matched to keyed elements that were earlier discarded.
	         * If we find a match then we will move the saved element
	         * into the final DOM tree
	         */
	        var handleMovedEl = function(el) {
	            var curChild = el.firstChild;
	            while(curChild) {
	                var nextSibling = curChild.nextSibling;

	                var key = getNodeKey(curChild);
	                if (key) {
	                    var savedEl = savedEls[key];
	                    if (savedEl && (curChild.tagName === savedEl.tagName)) {
	                        curChild.parentNode.replaceChild(savedEl, curChild);
	                        morphEl(savedEl, curChild, true /* already visited the saved el tree */);
	                        curChild = nextSibling;
	                        if (empty(savedEls)) {
	                            return false;
	                        }
	                        continue;
	                    }
	                }

	                if (curChild.nodeType === 1) {
	                    handleMovedEl(curChild);
	                }

	                curChild = nextSibling;
	            }
	        };

	        // The loop below is used to possibly match up any discarded
	        // elements in the original DOM tree with elemenets from the
	        // target tree that were moved over without visiting their
	        // children
	        if (!empty(savedEls)) {
	            handleMovedElsLoop:
	            while (movedEls.length) {
	                var movedElsTemp = movedEls;
	                movedEls = [];
	                for (var i=0; i<movedElsTemp.length; i++) {
	                    if (handleMovedEl(movedElsTemp[i]) === false) {
	                        // There are no more unmatched elements so completely end
	                        // the loop
	                        break handleMovedElsLoop;
	                    }
	                }
	            }
	        }

	        // Fire the "onNodeDiscarded" event for any saved elements
	        // that never found a new home in the morphed DOM
	        for (var savedElId in savedEls) {
	            if (savedEls.hasOwnProperty(savedElId)) {
	                var savedEl = savedEls[savedElId];
	                onNodeDiscarded(savedEl);
	                walkDiscardedChildNodes(savedEl);
	            }
	        }
	    }

	    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
	        // If we had to swap out the from node with a new node because the old
	        // node was not compatible with the target node then we need to
	        // replace the old DOM node in the original DOM tree. This is only
	        // possible if the original DOM node was part of a DOM tree which
	        // we know is the case if it has a parent node.
	        fromNode.parentNode.replaceChild(morphedNode, fromNode);
	    }

	    return morphedNode;
	}

	module.exports = morphdom;


/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _parse = __webpack_require__(497);

	var _parse2 = _interopRequireDefault(_parse);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (style /*: string*/) {
	  var css = (0, _parse2.default)("x{" + style + "}");
	  var stylesheet = css && css.stylesheet;
	  var rules = stylesheet && stylesheet.rules;
	  var rule0 = rules && rules[0];
	  var declarations = rule0 && rule0.declarations;
	  if (false || !css || css.type != "stylesheet" || !stylesheet || stylesheet.parsingErrors && stylesheet.parsingErrors.length != 0 || !rules || rules.length != 1 || !rule0 || rule0.type != "rule" || !rule0.selectors || rule0.selectors.length != 1 || rule0.selectors[0] != "x" || !Array.isArray(declarations)) throw new Error("error: not a style sheet or syntax error. parsing errors: " + JSON.stringify(stylesheet && stylesheet.parsingErrors));
	  return declarations.reduce(function (ret, prop) {
	    if (prop.type == "declaration") ret[prop.property] = prop.value;
	    return ret;
	  }, Object.create(null));
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 497 */
/***/ function(module, exports) {

	// http://www.w3.org/TR/CSS21/grammar.html
	// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
	var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g

	module.exports = function(css, options){
	  options = options || {};

	  /**
	   * Positional.
	   */

	  var lineno = 1;
	  var column = 1;

	  /**
	   * Update lineno and column based on `str`.
	   */

	  function updatePosition(str) {
	    var lines = str.match(/\n/g);
	    if (lines) lineno += lines.length;
	    var i = str.lastIndexOf('\n');
	    column = ~i ? str.length - i : column + str.length;
	  }

	  /**
	   * Mark position and patch `node.position`.
	   */

	  function position() {
	    var start = { line: lineno, column: column };
	    return function(node){
	      node.position = new Position(start);
	      whitespace();
	      return node;
	    };
	  }

	  /**
	   * Store position information for a node
	   */

	  function Position(start) {
	    this.start = start;
	    this.end = { line: lineno, column: column };
	    this.source = options.source;
	  }

	  /**
	   * Non-enumerable source string
	   */

	  Position.prototype.content = css;

	  /**
	   * Error `msg`.
	   */

	  var errorsList = [];

	  function error(msg) {
	    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
	    err.reason = msg;
	    err.filename = options.source;
	    err.line = lineno;
	    err.column = column;
	    err.source = css;

	    if (options.silent) {
	      errorsList.push(err);
	    } else {
	      throw err;
	    }
	  }

	  /**
	   * Parse stylesheet.
	   */

	  function stylesheet() {
	    var rulesList = rules();

	    return {
	      type: 'stylesheet',
	      stylesheet: {
	        rules: rulesList,
	        parsingErrors: errorsList
	      }
	    };
	  }

	  /**
	   * Opening brace.
	   */

	  function open() {
	    return match(/^{\s*/);
	  }

	  /**
	   * Closing brace.
	   */

	  function close() {
	    return match(/^}/);
	  }

	  /**
	   * Parse ruleset.
	   */

	  function rules() {
	    var node;
	    var rules = [];
	    whitespace();
	    comments(rules);
	    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
	      if (node !== false) {
	        rules.push(node);
	        comments(rules);
	      }
	    }
	    return rules;
	  }

	  /**
	   * Match `re` and return captures.
	   */

	  function match(re) {
	    var m = re.exec(css);
	    if (!m) return;
	    var str = m[0];
	    updatePosition(str);
	    css = css.slice(str.length);
	    return m;
	  }

	  /**
	   * Parse whitespace.
	   */

	  function whitespace() {
	    match(/^\s*/);
	  }

	  /**
	   * Parse comments;
	   */

	  function comments(rules) {
	    var c;
	    rules = rules || [];
	    while (c = comment()) {
	      if (c !== false) {
	        rules.push(c);
	      }
	    }
	    return rules;
	  }

	  /**
	   * Parse comment.
	   */

	  function comment() {
	    var pos = position();
	    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;

	    var i = 2;
	    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;
	    i += 2;

	    if ("" === css.charAt(i-1)) {
	      return error('End of comment missing');
	    }

	    var str = css.slice(2, i - 2);
	    column += 2;
	    updatePosition(str);
	    css = css.slice(i);
	    column += 2;

	    return pos({
	      type: 'comment',
	      comment: str
	    });
	  }

	  /**
	   * Parse selector.
	   */

	  function selector() {
	    var m = match(/^([^{]+)/);
	    if (!m) return;
	    /* @fix Remove all comments from selectors
	     * http://ostermiller.org/findcomment.html */
	    return trim(m[0])
	      .replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '')
	      .replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
	        return m.replace(/,/g, '\u200C');
	      })
	      .split(/\s*(?![^(]*\)),\s*/)
	      .map(function(s) {
	        return s.replace(/\u200C/g, ',');
	      });
	  }

	  /**
	   * Parse declaration.
	   */

	  function declaration() {
	    var pos = position();

	    // prop
	    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
	    if (!prop) return;
	    prop = trim(prop[0]);

	    // :
	    if (!match(/^:\s*/)) return error("property missing ':'");

	    // val
	    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);

	    var ret = pos({
	      type: 'declaration',
	      property: prop.replace(commentre, ''),
	      value: val ? trim(val[0]).replace(commentre, '') : ''
	    });

	    // ;
	    match(/^[;\s]*/);

	    return ret;
	  }

	  /**
	   * Parse declarations.
	   */

	  function declarations() {
	    var decls = [];

	    if (!open()) return error("missing '{'");
	    comments(decls);

	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      if (decl !== false) {
	        decls.push(decl);
	        comments(decls);
	      }
	    }

	    if (!close()) return error("missing '}'");
	    return decls;
	  }

	  /**
	   * Parse keyframe.
	   */

	  function keyframe() {
	    var m;
	    var vals = [];
	    var pos = position();

	    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
	      vals.push(m[1]);
	      match(/^,\s*/);
	    }

	    if (!vals.length) return;

	    return pos({
	      type: 'keyframe',
	      values: vals,
	      declarations: declarations()
	    });
	  }

	  /**
	   * Parse keyframes.
	   */

	  function atkeyframes() {
	    var pos = position();
	    var m = match(/^@([-\w]+)?keyframes\s*/);

	    if (!m) return;
	    var vendor = m[1];

	    // identifier
	    var m = match(/^([-\w]+)\s*/);
	    if (!m) return error("@keyframes missing name");
	    var name = m[1];

	    if (!open()) return error("@keyframes missing '{'");

	    var frame;
	    var frames = comments();
	    while (frame = keyframe()) {
	      frames.push(frame);
	      frames = frames.concat(comments());
	    }

	    if (!close()) return error("@keyframes missing '}'");

	    return pos({
	      type: 'keyframes',
	      name: name,
	      vendor: vendor,
	      keyframes: frames
	    });
	  }

	  /**
	   * Parse supports.
	   */

	  function atsupports() {
	    var pos = position();
	    var m = match(/^@supports *([^{]+)/);

	    if (!m) return;
	    var supports = trim(m[1]);

	    if (!open()) return error("@supports missing '{'");

	    var style = comments().concat(rules());

	    if (!close()) return error("@supports missing '}'");

	    return pos({
	      type: 'supports',
	      supports: supports,
	      rules: style
	    });
	  }

	  /**
	   * Parse host.
	   */

	  function athost() {
	    var pos = position();
	    var m = match(/^@host\s*/);

	    if (!m) return;

	    if (!open()) return error("@host missing '{'");

	    var style = comments().concat(rules());

	    if (!close()) return error("@host missing '}'");

	    return pos({
	      type: 'host',
	      rules: style
	    });
	  }

	  /**
	   * Parse media.
	   */

	  function atmedia() {
	    var pos = position();
	    var m = match(/^@media *([^{]+)/);

	    if (!m) return;
	    var media = trim(m[1]);

	    if (!open()) return error("@media missing '{'");

	    var style = comments().concat(rules());

	    if (!close()) return error("@media missing '}'");

	    return pos({
	      type: 'media',
	      media: media,
	      rules: style
	    });
	  }


	  /**
	   * Parse custom-media.
	   */

	  function atcustommedia() {
	    var pos = position();
	    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
	    if (!m) return;

	    return pos({
	      type: 'custom-media',
	      name: trim(m[1]),
	      media: trim(m[2])
	    });
	  }

	  /**
	   * Parse paged media.
	   */

	  function atpage() {
	    var pos = position();
	    var m = match(/^@page */);
	    if (!m) return;

	    var sel = selector() || [];

	    if (!open()) return error("@page missing '{'");
	    var decls = comments();

	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      decls.push(decl);
	      decls = decls.concat(comments());
	    }

	    if (!close()) return error("@page missing '}'");

	    return pos({
	      type: 'page',
	      selectors: sel,
	      declarations: decls
	    });
	  }

	  /**
	   * Parse document.
	   */

	  function atdocument() {
	    var pos = position();
	    var m = match(/^@([-\w]+)?document *([^{]+)/);
	    if (!m) return;

	    var vendor = trim(m[1]);
	    var doc = trim(m[2]);

	    if (!open()) return error("@document missing '{'");

	    var style = comments().concat(rules());

	    if (!close()) return error("@document missing '}'");

	    return pos({
	      type: 'document',
	      document: doc,
	      vendor: vendor,
	      rules: style
	    });
	  }

	  /**
	   * Parse font-face.
	   */

	  function atfontface() {
	    var pos = position();
	    var m = match(/^@font-face\s*/);
	    if (!m) return;

	    if (!open()) return error("@font-face missing '{'");
	    var decls = comments();

	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      decls.push(decl);
	      decls = decls.concat(comments());
	    }

	    if (!close()) return error("@font-face missing '}'");

	    return pos({
	      type: 'font-face',
	      declarations: decls
	    });
	  }

	  /**
	   * Parse import
	   */

	  var atimport = _compileAtrule('import');

	  /**
	   * Parse charset
	   */

	  var atcharset = _compileAtrule('charset');

	  /**
	   * Parse namespace
	   */

	  var atnamespace = _compileAtrule('namespace');

	  /**
	   * Parse non-block at-rules
	   */


	  function _compileAtrule(name) {
	    var re = new RegExp('^@' + name + '\\s*([^;]+);');
	    return function() {
	      var pos = position();
	      var m = match(re);
	      if (!m) return;
	      var ret = { type: name };
	      ret[name] = m[1].trim();
	      return pos(ret);
	    }
	  }

	  /**
	   * Parse at rule.
	   */

	  function atrule() {
	    if (css[0] != '@') return;

	    return atkeyframes()
	      || atmedia()
	      || atcustommedia()
	      || atsupports()
	      || atimport()
	      || atcharset()
	      || atnamespace()
	      || atdocument()
	      || atpage()
	      || athost()
	      || atfontface();
	  }

	  /**
	   * Parse rule.
	   */

	  function rule() {
	    var pos = position();
	    var sel = selector();

	    if (!sel) return error('selector missing');
	    comments();

	    return pos({
	      type: 'rule',
	      selectors: sel,
	      declarations: declarations()
	    });
	  }

	  return addParent(stylesheet());
	};

	/**
	 * Trim `str`.
	 */

	function trim(str) {
	  return str ? str.replace(/^\s+|\s+$/g, '') : '';
	}

	/**
	 * Adds non-enumerable parent node reference to each node.
	 */

	function addParent(obj, parent) {
	  var isNode = obj && typeof obj.type === 'string';
	  var childParent = isNode ? obj : parent;

	  for (var k in obj) {
	    var value = obj[k];
	    if (Array.isArray(value)) {
	      value.forEach(function(v) { addParent(v, childParent); });
	    } else if (value && typeof value === 'object') {
	      addParent(value, childParent);
	    }
	  }

	  if (isNode) {
	    Object.defineProperty(obj, 'parent', {
	      configurable: true,
	      writable: true,
	      enumerable: false,
	      value: parent || null
	    });
	  }

	  return obj;
	}


/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setStream = exports.open = exports.fatal = exports.error = exports.log = exports.trace = undefined;

	var _context;

	__webpack_require__(357);

	// options

	var options = {
	  // min: `error`,
	  min: "log",
	  log: 1,
	  stub: {},
	  srv: 1 && {
	    ws: 0 && {},
	    boss: 1 && {},
	    modem: 0 && {
	      proxy: 1 && {
	        data: 1 && {},
	        log: 1 && {}
	      }
	    }
	  },
	  modem: 0 && {
	    transform: 1 && {}
	  },
	  boss: 1 && {},
	  http: 1 && {},
	  ui: 0 && {
	    event: 0 && {}
	  },
	  client: {}
	};

	// end of options

	var log_stream = process.stderr || { write: (_context = console).log.bind(_context) };

	var prefixes = {
	  trace: "TRACE ".green,
	  error: "ERROR ".yellow,
	  fatal: "FATAL ".red
	};

	var values = {};
	var current = 0;
	var main = Object.create(null);
	var method = function method(name) {
	  values[name] = ++current;
	  return main[name] = Log.bind(null, name);
	};

	function getValue(kind) {
	  return values[kind] || values.log || 0;
	}

	function Log() {
	  var l = options;
	  if (l === false || l === 0) return;
	  var kind = arguments[0];
	  if (getValue(kind) < getValue(options.min)) return;
	  for (var i = 1; i < arguments.length - 1; ++i) {
	    l = l[arguments[i]];
	    if (l === false || l === 0) return;
	    if (l == null) break;
	  }
	  var path = "";
	  for (var _i = 1; _i < arguments.length - 1; ++_i) {
	    path += " ";
	    path += arguments[_i];
	  }
	  var msg = arguments[arguments.length - 1];
	  log_stream.write("" + (prefixes[kind] || "") + ("" + new Date().toISOString().replace("T", ";").replace("Z", "") + path + ":").gray + " " + msg + "\n");
	  log_stream.flush && log_stream.flush();
	}

	// order of methods does matter. The later the important.

	var trace = exports.trace = method("trace");

	var log = exports.log = method("log");

	var error = exports.error = method("error");

	var fatal = exports.fatal = method("fatal");

	var open = exports.open = function open() {
	  var ret = Object.create(null);
	  ret.open = open;

	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  for (var kind in main) {
	    var _kind;

	    ret[kind] = (_kind = this[kind]).bind.apply(_kind, [null].concat(args));
	  }return ret;
	}.bind(main);

	var setStream = exports.setStream = function setStream(stream) {
	  return log_stream = stream;
	};

	log("log", "start", JSON.stringify(process.argv));

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _ref;

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _xml2 = __webpack_require__(500);

	var _xml3 = _interopRequireDefault(_xml2);

	var _styleParse = __webpack_require__(496);

	var _styleParse2 = _interopRequireDefault(_styleParse);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _xml = Symbol("_xml");

	var dom = Object.create(null);
	exports.default = dom;


	dom.Node = function () {
	  function _class() {
	    _classCallCheck(this, _class);

	    this._parent = null;
	    this._events = {};
	  }

	  _createClass(_class, [{
	    key: "addEventListener",
	    value: function addEventListener(type, cb, useCapture) {
	      if (useCapture) throw new Error("unsupported");
	      var e = this._events;
	      if (e[type] == null) e[type] = [];
	      e[type].push(cb);
	    }
	  }, {
	    key: "removeEventListener",
	    value: function removeEventListener(type, cb, useCapture) {
	      if (useCapture) throw new Error("unsupported");
	      var e = this._events;
	      if (e[type] == null) return;
	      e[type] = e[type].filter(function (x) {
	        return x != cb;
	      });
	    }
	  }, {
	    key: "dispatchEvent",
	    value: function dispatchEvent(event) {
	      if (event._target == null) event._target = this;
	      var e = this._events[event._type];
	      if (e) {
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = e[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var cb = _step.value;

	            cb(event);
	            if (event._prevented) return false;
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }
	      }return !this._parent || this._parent.dispatchEvent(event);
	    }
	  }, {
	    key: "_appendTo",
	    value: function _appendTo(parent) {
	      if (this._parent) this._parent.removeChild(this);
	      parent.childNodes._children.push(this);
	      this._parent = parent;
	    }
	  }, {
	    key: "_enum",
	    value: regeneratorRuntime.mark(function _enum(pred) {
	      return regeneratorRuntime.wrap(function _enum$(_context) {
	        while (1) switch (_context.prev = _context.next) {
	          case 0:
	            if (!pred(this)) {
	              _context.next = 3;
	              break;
	            }

	            _context.next = 3;
	            return this;

	          case 3:
	          case "end":
	            return _context.stop();
	        }
	      }, _enum, this);
	    })
	  }, {
	    key: "getElementsByTagName",
	    value: function getElementsByTagName(name) {
	      var _this = this;

	      return this._enum(function (c) {
	        return c != _this && c.tagName == name;
	      });
	    }
	  }, {
	    key: "textContent",
	    get: function get() {
	      return "";
	    }
	  }, {
	    key: "outerHTML",
	    get: function get() {
	      return _xml3.default.stringify(this[_xml](), { wrapScripts: true, noSelfClosingTags: true });
	    }
	  }, {
	    key: "nextSibling",
	    get: function get() {
	      return this._parent && this._parent.childNodes._children[this._parent.childNodes._children.indexOf(this) + 1];
	    }
	  }, {
	    key: "nodeValue",
	    get: function get() {
	      return null;
	    }
	  }]);

	  return _class;
	}();

	dom.Node.ELEMENT_NODE = 1; // An Element node such as <p> or <div>.
	dom.Node.TEXT_NODE = 3; // The actual Text of Element or Attr.
	dom.Node.PROCESSING_INSTRUCTION_NODE = 7; // A ProcessingInstruction of an XML document such as <?xml-stylesheet ... ?> declaration.
	dom.Node.COMMENT_NODE = 8; // A Comment node.
	dom.Node.DOCUMENT_NODE = 9; // A Document node.
	dom.Node.DOCUMENT_TYPE_NODE = 10; // A DocumentType node e.g. <!DOCTYPE html> for HTML5 documents.
	dom.Node.DOCUMENT_FRAGMENT_NODE = 11; // A DocumentFragment node.

	dom.Text = function (_dom$Node) {
	  _inherits(_class2, _dom$Node);

	  function _class2(text) {
	    _classCallCheck(this, _class2);

	    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class2).call(this));

	    _this2._text = text;
	    return _this2;
	  }

	  _createClass(_class2, [{
	    key: _xml,
	    value: function value() {
	      return this._text;
	    }
	  }, {
	    key: "wholeText",
	    get: function get() {
	      return this._text;
	    }
	  }, {
	    key: "textContent",
	    get: function get() {
	      return this._text;
	    }
	  }, {
	    key: "nodeType",
	    get: function get() {
	      return dom.Node.TEXT_NODE;
	    }
	  }, {
	    key: "nodeValue",
	    get: function get() {
	      return this._text;
	    }
	  }]);

	  return _class2;
	}(dom.Node);

	var ParentNode = function (_dom$Node2) {
	  _inherits(ParentNode, _dom$Node2);

	  function ParentNode() {
	    _classCallCheck(this, ParentNode);

	    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(ParentNode).call(this));

	    _this3.childNodes = new dom.NodeList();
	    return _this3;
	  }

	  _createClass(ParentNode, [{
	    key: "appendChild",
	    value: function appendChild(child) {
	      child._appendTo(this);
	    }
	  }, {
	    key: "removeChild",
	    value: function removeChild(child) {
	      if (child._parent != this) throw new Error("unsupported");
	      child._parent = null;
	      this.childNodes._children = this.childNodes._children.filter(function (c) {
	        return c != child;
	      });
	    }
	  }, {
	    key: "_enum",
	    value: regeneratorRuntime.mark(function _enum(pred) {
	      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, c;

	      return regeneratorRuntime.wrap(function _enum$(_context2) {
	        while (1) switch (_context2.prev = _context2.next) {
	          case 0:
	            return _context2.delegateYield(_get(Object.getPrototypeOf(ParentNode.prototype), "_enum", this).call(this, pred), "t0", 1);

	          case 1:
	            _iteratorNormalCompletion2 = true;
	            _didIteratorError2 = false;
	            _iteratorError2 = undefined;
	            _context2.prev = 4;
	            _iterator2 = this.childNodes[Symbol.iterator]();

	          case 6:
	            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	              _context2.next = 12;
	              break;
	            }

	            c = _step2.value;
	            return _context2.delegateYield(c._enum(pred), "t1", 9);

	          case 9:
	            _iteratorNormalCompletion2 = true;
	            _context2.next = 6;
	            break;

	          case 12:
	            _context2.next = 18;
	            break;

	          case 14:
	            _context2.prev = 14;
	            _context2.t2 = _context2["catch"](4);
	            _didIteratorError2 = true;
	            _iteratorError2 = _context2.t2;

	          case 18:
	            _context2.prev = 18;
	            _context2.prev = 19;

	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	              _iterator2.return();
	            }

	          case 21:
	            _context2.prev = 21;

	            if (!_didIteratorError2) {
	              _context2.next = 24;
	              break;
	            }

	            throw _iteratorError2;

	          case 24:
	            return _context2.finish(21);

	          case 25:
	            return _context2.finish(18);

	          case 26:
	          case "end":
	            return _context2.stop();
	        }
	      }, _enum, this, [[4, 14, 18, 26], [19,, 21, 25]]);
	    })
	  }, {
	    key: "textContent",
	    get: function get() {
	      return [].concat(_toConsumableArray(this.childNodes)).map(function (t) {
	        return t.textContent;
	      }).join("");
	    }
	  }, {
	    key: "firstChild",
	    get: function get() {
	      return this.childNodes._children[0];
	    }
	  }]);

	  return ParentNode;
	}(dom.Node);

	dom.DocumentFragment = function (_ParentNode) {
	  _inherits(_class3, _ParentNode);

	  function _class3() {
	    _classCallCheck(this, _class3);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(_class3).apply(this, arguments));
	  }

	  _createClass(_class3, [{
	    key: "_appendTo",
	    value: function _appendTo(parent) {
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = this.childNodes._children.splice(0)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var c = _step3.value;

	          c._appendTo(parent);
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	    }
	  }, {
	    key: "nodeType",
	    get: function get() {
	      return dom.Node.DOCUMENT_FRAGMENT_NODE;
	    }
	  }]);

	  return _class3;
	}(ParentNode);

	dom.Style = function () {
	  function _class4(parent) {
	    _classCallCheck(this, _class4);

	    this._parent = parent;
	  }

	  return _class4;
	}();

	// Object.keys(document.createElement('div').style)+''
	// Object.keys(document.createElement('div').style.__proto__)+''
	var styleProps = {

	  Chrome: "alignContent,alignItems,alignSelf,alignmentBaseline,all,animation,animationDelay,animationDirection,animationDuration,animationFillMode,animationIterationCount,animationName,animationPlayState,animationTimingFunction,backfaceVisibility,background,backgroundAttachment,backgroundBlendMode,backgroundClip,backgroundColor,backgroundImage,backgroundOrigin,backgroundPosition,backgroundPositionX,backgroundPositionY,backgroundRepeat,backgroundRepeatX,backgroundRepeatY,backgroundSize,baselineShift,border,borderBottom,borderBottomColor,borderBottomLeftRadius,borderBottomRightRadius,borderBottomStyle,borderBottomWidth,borderCollapse,borderColor,borderImage,borderImageOutset,borderImageRepeat,borderImageSlice,borderImageSource,borderImageWidth,borderLeft,borderLeftColor,borderLeftStyle,borderLeftWidth,borderRadius,borderRight,borderRightColor,borderRightStyle,borderRightWidth,borderSpacing,borderStyle,borderTop,borderTopColor,borderTopLeftRadius,borderTopRightRadius,borderTopStyle,borderTopWidth,borderWidth,bottom,boxShadow,boxSizing,breakAfter,breakBefore,breakInside,bufferedRendering,captionSide,clear,clip,clipPath,clipRule,color,colorInterpolation,colorInterpolationFilters,colorRendering,columnCount,columnFill,columnGap,columnRule,columnRuleColor,columnRuleStyle,columnRuleWidth,columnSpan,columnWidth,columns,content,counterIncrement,counterReset,cursor,cx,cy,direction,display,dominantBaseline,emptyCells,fill,fillOpacity,fillRule,filter,flex,flexBasis,flexDirection,flexFlow,flexGrow,flexShrink,flexWrap,float,floodColor,floodOpacity,font,fontFamily,fontFeatureSettings,fontKerning,fontSize,fontStretch,fontStyle,fontVariant,fontVariantLigatures,fontWeight,height,imageRendering,isolation,justifyContent,left,letterSpacing,lightingColor,lineHeight,listStyle,listStyleImage,listStylePosition,listStyleType,margin,marginBottom,marginLeft,marginRight,marginTop,marker,markerEnd,markerMid,markerStart,mask,maskType,maxHeight,maxWidth,maxZoom,minHeight,minWidth,minZoom,mixBlendMode,motion,motionOffset,motionPath,motionRotation,objectFit,objectPosition,opacity,order,orientation,orphans,outline,outlineColor,outlineOffset,outlineStyle,outlineWidth,overflow,overflowWrap,overflowX,overflowY,padding,paddingBottom,paddingLeft,paddingRight,paddingTop,page,pageBreakAfter,pageBreakBefore,pageBreakInside,paintOrder,perspective,perspectiveOrigin,pointerEvents,position,quotes,r,resize,right,rx,ry,shapeImageThreshold,shapeMargin,shapeOutside,shapeRendering,size,speak,src,stopColor,stopOpacity,stroke,strokeDasharray,strokeDashoffset,strokeLinecap,strokeLinejoin,strokeMiterlimit,strokeOpacity,strokeWidth,tabSize,tableLayout,textAlign,textAlignLast,textAnchor,textCombineUpright,textDecoration,textIndent,textOrientation,textOverflow,textRendering,textShadow,textTransform,top,touchAction,transform,transformOrigin,transformStyle,transition,transitionDelay,transitionDuration,transitionProperty,transitionTimingFunction,unicodeBidi,unicodeRange,userZoom,vectorEffect,verticalAlign,visibility,webkitAppRegion,webkitAppearance,webkitBackgroundClip,webkitBackgroundComposite,webkitBackgroundOrigin,webkitBorderAfter,webkitBorderAfterColor,webkitBorderAfterStyle,webkitBorderAfterWidth,webkitBorderBefore,webkitBorderBeforeColor,webkitBorderBeforeStyle,webkitBorderBeforeWidth,webkitBorderEnd,webkitBorderEndColor,webkitBorderEndStyle,webkitBorderEndWidth,webkitBorderHorizontalSpacing,webkitBorderImage,webkitBorderStart,webkitBorderStartColor,webkitBorderStartStyle,webkitBorderStartWidth,webkitBorderVerticalSpacing,webkitBoxAlign,webkitBoxDecorationBreak,webkitBoxDirection,webkitBoxFlex,webkitBoxFlexGroup,webkitBoxLines,webkitBoxOrdinalGroup,webkitBoxOrient,webkitBoxPack,webkitBoxReflect,webkitClipPath,webkitColumnBreakAfter,webkitColumnBreakBefore,webkitColumnBreakInside,webkitFilter,webkitFontSizeDelta,webkitFontSmoothing,webkitHighlight,webkitHyphenateCharacter,webkitLineBreak,webkitLineClamp,webkitLocale,webkitLogicalHeight,webkitLogicalWidth,webkitMarginAfter,webkitMarginAfterCollapse,webkitMarginBefore,webkitMarginBeforeCollapse,webkitMarginBottomCollapse,webkitMarginCollapse,webkitMarginEnd,webkitMarginStart,webkitMarginTopCollapse,webkitMask,webkitMaskBoxImage,webkitMaskBoxImageOutset,webkitMaskBoxImageRepeat,webkitMaskBoxImageSlice,webkitMaskBoxImageSource,webkitMaskBoxImageWidth,webkitMaskClip,webkitMaskComposite,webkitMaskImage,webkitMaskOrigin,webkitMaskPosition,webkitMaskPositionX,webkitMaskPositionY,webkitMaskRepeat,webkitMaskRepeatX,webkitMaskRepeatY,webkitMaskSize,webkitMaxLogicalHeight,webkitMaxLogicalWidth,webkitMinLogicalHeight,webkitMinLogicalWidth,webkitPaddingAfter,webkitPaddingBefore,webkitPaddingEnd,webkitPaddingStart,webkitPerspectiveOriginX,webkitPerspectiveOriginY,webkitPrintColorAdjust,webkitRtlOrdering,webkitRubyPosition,webkitTapHighlightColor,webkitTextCombine,webkitTextDecorationsInEffect,webkitTextEmphasis,webkitTextEmphasisColor,webkitTextEmphasisPosition,webkitTextEmphasisStyle,webkitTextFillColor,webkitTextOrientation,webkitTextSecurity,webkitTextStroke,webkitTextStrokeColor,webkitTextStrokeWidth,webkitTransformOriginX,webkitTransformOriginY,webkitTransformOriginZ,webkitUserDrag,webkitUserModify,webkitUserSelect,webkitWritingMode,whiteSpace,widows,width,willChange,wordBreak,wordSpacing,wordWrap,writingMode,x,y,zIndex,zoom",

	  Firefox: "MozAppearance,MozOutlineRadius,MozOutlineRadiusTopleft,MozOutlineRadiusTopright,MozOutlineRadiusBottomright,MozOutlineRadiusBottomleft,MozTabSize,all,animation,animationDelay,animation-delay,animationDirection,animation-direction,animationDuration,animation-duration,animationFillMode,animation-fill-mode,animationIterationCount,animation-iteration-count,animationName,animation-name,animationPlayState,animation-play-state,animationTimingFunction,animation-timing-function,background,backgroundAttachment,background-attachment,backgroundClip,background-clip,backgroundColor,background-color,backgroundImage,background-image,backgroundBlendMode,background-blend-mode,backgroundOrigin,background-origin,backgroundPosition,background-position,backgroundRepeat,background-repeat,backgroundSize,background-size,MozBinding,blockSize,block-size,border,borderBlockEnd,border-block-end,borderBlockStart,border-block-start,borderBlockEndColor,border-block-end-color,borderBlockEndStyle,border-block-end-style,borderBlockEndWidth,border-block-end-width,borderBlockStartColor,border-block-start-color,borderBlockStartStyle,border-block-start-style,borderBlockStartWidth,border-block-start-width,borderBottom,border-bottom,borderBottomColor,border-bottom-color,MozBorderBottomColors,borderBottomStyle,border-bottom-style,borderBottomWidth,border-bottom-width,borderCollapse,border-collapse,borderColor,border-color,borderImage,border-image,borderImageSource,border-image-source,borderImageSlice,border-image-slice,borderImageWidth,border-image-width,borderImageOutset,border-image-outset,borderImageRepeat,border-image-repeat,borderInlineEnd,border-inline-end,borderInlineEndColor,border-inline-end-color,borderInlineEndStyle,border-inline-end-style,borderInlineEndWidth,border-inline-end-width,borderInlineStart,border-inline-start,borderInlineStartColor,border-inline-start-color,borderInlineStartStyle,border-inline-start-style,borderInlineStartWidth,border-inline-start-width,borderLeft,border-left,borderLeftColor,border-left-color,MozBorderLeftColors,borderLeftStyle,border-left-style,borderLeftWidth,border-left-width,borderRight,border-right,borderRightColor,border-right-color,MozBorderRightColors,borderRightStyle,border-right-style,borderRightWidth,border-right-width,borderSpacing,border-spacing,borderStyle,border-style,borderTop,border-top,borderTopColor,border-top-color,MozBorderTopColors,borderTopStyle,border-top-style,borderTopWidth,border-top-width,borderWidth,border-width,borderRadius,border-radius,borderTopLeftRadius,border-top-left-radius,borderTopRightRadius,border-top-right-radius,borderBottomRightRadius,border-bottom-right-radius,borderBottomLeftRadius,border-bottom-left-radius,bottom,boxDecorationBreak,box-decoration-break,boxShadow,box-shadow,boxSizing,box-sizing,captionSide,caption-side,clear,clip,color,MozColumns,MozColumnCount,MozColumnFill,MozColumnWidth,MozColumnGap,MozColumnRule,MozColumnRuleColor,MozColumnRuleStyle,MozColumnRuleWidth,content,counterIncrement,counter-increment,counterReset,counter-reset,cursor,direction,display,emptyCells,empty-cells,alignContent,align-content,alignItems,align-items,alignSelf,align-self,flex,flexBasis,flex-basis,flexDirection,flex-direction,flexFlow,flex-flow,flexGrow,flex-grow,flexShrink,flex-shrink,flexWrap,flex-wrap,order,justifyContent,justify-content,justifyItems,justify-items,justifySelf,justify-self,cssFloat,float,MozFloatEdge,font,fontFamily,font-family,fontFeatureSettings,font-feature-settings,fontKerning,font-kerning,fontLanguageOverride,font-language-override,fontSize,font-size,fontSizeAdjust,font-size-adjust,fontStretch,font-stretch,fontStyle,font-style,fontSynthesis,font-synthesis,fontVariant,font-variant,fontVariantAlternates,font-variant-alternates,fontVariantCaps,font-variant-caps,fontVariantEastAsian,font-variant-east-asian,fontVariantLigatures,font-variant-ligatures,fontVariantNumeric,font-variant-numeric,fontVariantPosition,font-variant-position,fontWeight,font-weight,MozForceBrokenImageIcon,height,imageOrientation,image-orientation,MozImageRegion,imeMode,ime-mode,inlineSize,inline-size,left,letterSpacing,letter-spacing,lineHeight,line-height,listStyle,list-style,listStyleImage,list-style-image,listStylePosition,list-style-position,listStyleType,list-style-type,margin,marginBlockEnd,margin-block-end,marginBlockStart,margin-block-start,marginBottom,margin-bottom,marginInlineEnd,margin-inline-end,marginInlineStart,margin-inline-start,marginLeft,margin-left,marginRight,margin-right,marginTop,margin-top,markerOffset,marker-offset,maxBlockSize,max-block-size,maxHeight,max-height,maxInlineSize,max-inline-size,maxWidth,max-width,minHeight,min-height,minBlockSize,min-block-size,minInlineSize,min-inline-size,minWidth,min-width,mixBlendMode,mix-blend-mode,isolation,objectFit,object-fit,objectPosition,object-position,offsetBlockEnd,offset-block-end,offsetBlockStart,offset-block-start,offsetInlineEnd,offset-inline-end,offsetInlineStart,offset-inline-start,opacity,MozOrient,outline,outlineColor,outline-color,outlineStyle,outline-style,outlineWidth,outline-width,outlineOffset,outline-offset,overflow,overflowX,overflow-x,overflowY,overflow-y,padding,paddingBlockEnd,padding-block-end,paddingBlockStart,padding-block-start,paddingBottom,padding-bottom,paddingInlineEnd,padding-inline-end,paddingInlineStart,padding-inline-start,paddingLeft,padding-left,paddingRight,padding-right,paddingTop,padding-top,pageBreakAfter,page-break-after,pageBreakBefore,page-break-before,pageBreakInside,page-break-inside,paintOrder,paint-order,pointerEvents,pointer-events,position,quotes,resize,right,rubyAlign,ruby-align,rubyPosition,ruby-position,scrollBehavior,scroll-behavior,scrollSnapCoordinate,scroll-snap-coordinate,scrollSnapDestination,scroll-snap-destination,scrollSnapPointsX,scroll-snap-points-x,scrollSnapPointsY,scroll-snap-points-y,scrollSnapType,scroll-snap-type,scrollSnapTypeX,scroll-snap-type-x,scrollSnapTypeY,scroll-snap-type-y,tableLayout,table-layout,textAlign,text-align,MozTextAlignLast,textDecoration,text-decoration,textDecorationColor,text-decoration-color,textDecorationLine,text-decoration-line,textDecorationStyle,text-decoration-style,textIndent,text-indent,textOrientation,text-orientation,textOverflow,text-overflow,textShadow,text-shadow,MozTextSizeAdjust,textTransform,text-transform,transform,transformOrigin,transform-origin,perspectiveOrigin,perspective-origin,perspective,transformStyle,transform-style,backfaceVisibility,backface-visibility,top,transition,transitionDelay,transition-delay,transitionDuration,transition-duration,transitionProperty,transition-property,transitionTimingFunction,transition-timing-function,unicodeBidi,unicode-bidi,MozUserFocus,MozUserInput,MozUserModify,MozUserSelect,verticalAlign,vertical-align,visibility,whiteSpace,white-space,width,MozWindowDragging,wordBreak,word-break,wordSpacing,word-spacing,wordWrap,word-wrap,hyphens,writingMode,writing-mode,zIndex,z-index,MozBoxAlign,MozBoxDirection,MozBoxFlex,MozBoxOrient,MozBoxPack,MozBoxOrdinalGroup,MozStackSizing,clipPath,clip-path,clipRule,clip-rule,colorInterpolation,color-interpolation,colorInterpolationFilters,color-interpolation-filters,dominantBaseline,dominant-baseline,fill,fillOpacity,fill-opacity,fillRule,fill-rule,filter,floodColor,flood-color,floodOpacity,flood-opacity,imageRendering,image-rendering,lightingColor,lighting-color,marker,markerEnd,marker-end,markerMid,marker-mid,markerStart,marker-start,mask,maskType,mask-type,shapeRendering,shape-rendering,stopColor,stop-color,stopOpacity,stop-opacity,stroke,strokeDasharray,stroke-dasharray,strokeDashoffset,stroke-dashoffset,strokeLinecap,stroke-linecap,strokeLinejoin,stroke-linejoin,strokeMiterlimit,stroke-miterlimit,strokeOpacity,stroke-opacity,strokeWidth,stroke-width,textAnchor,text-anchor,textRendering,text-rendering,vectorEffect,vector-effect,willChange,will-change,MozTransform,MozTransformOrigin,MozPerspectiveOrigin,MozPerspective,MozTransformStyle,MozBackfaceVisibility,MozBorderImage,MozTransition,MozTransitionDelay,MozTransitionDuration,MozTransitionProperty,MozTransitionTimingFunction,MozAnimation,MozAnimationDelay,MozAnimationDirection,MozAnimationDuration,MozAnimationFillMode,MozAnimationIterationCount,MozAnimationName,MozAnimationPlayState,MozAnimationTimingFunction,MozBoxSizing,MozFontFeatureSettings,MozFontLanguageOverride,MozPaddingEnd,MozPaddingStart,MozMarginEnd,MozMarginStart,MozBorderEnd,MozBorderEndColor,MozBorderEndStyle,MozBorderEndWidth,MozBorderStart,MozBorderStartColor,MozBorderStartStyle,MozBorderStartWidth,MozHyphens"
	};

	Object.defineProperties(dom.Style.prototype, lodash.fromPairs((_ref = []).concat.apply(_ref, _toConsumableArray(String(lodash.values(styleProps)).split(",").sort().filter(function (_, i, a) {
	  return i == 0 || a[i] != a[i - 1];
	}) // leave unique values
	.map(dashCase).map(function (dashed) {
	  return dashed.replace(/^(webkit|\-\w+)\-/, "");
	}).map(function (dashed, i, a) {
	  return [[dashed, {
	    get: function get() {
	      return (0, _styleParse2.default)(this._parent.getAttribute("style") || "")[dashed];
	    },
	    set: function set(value) {
	      var s = (0, _styleParse2.default)(this._parent.getAttribute("style") || "");
	      if (value == null) delete s[dashed];else s[dashed] = value;
	      this._parent.setAttribute("style", lodash.toPairs(s).map(function (_ref2) {
	        var _ref3 = _slicedToArray(_ref2, 2);

	        var name = _ref3[0];
	        var value = _ref3[1];
	        return name + ":" + value + ";";
	      }).join(""));
	    }
	  }], dashed != camelCase(dashed) && [camelCase(dashed), {
	    get: function get() {
	      return this[dashed];
	    },
	    set: function set(value) {
	      this[dashed] = value;
	    }
	  }]];
	}))).filter(Boolean)));

	var ClassList = function ClassList(parent) {
	  _classCallCheck(this, ClassList);

	  this._parent = parent;
	};

	dom.NodeList = function () {
	  function _class5() {
	    _classCallCheck(this, _class5);

	    this._children = [];
	  }

	  _createClass(_class5, [{
	    key: Symbol.iterator,
	    value: function value() {
	      return this._children[Symbol.iterator]();
	    }
	  }, {
	    key: "item",
	    value: function item(i) {
	      return this._children[i];
	    }
	  }, {
	    key: "length",
	    get: function get() {
	      return this._children.length;
	    }
	  }]);

	  return _class5;
	}();

	var DataSet = function DataSet(node) {
	  _classCallCheck(this, DataSet);

	  this._node = node;
	};

	dom.__dataset__ = function (n) {
	  var d = "data-" + n;
	  Object.defineProperty(DataSet.prototype, n, {
	    configurable: true,
	    get: function get() {
	      return this._node.getAttribute(d);
	    },
	    set: function set(value) {
	      this._node.setAttribute(d, value);
	    }
	  });
	};

	var _arr = ["name", "type", "jsx", "id"];
	for (var _i = 0; _i < _arr.length; _i++) {
	  var n = _arr[_i];
	  dom.__dataset__(n);
	}dom.Element = function (_ParentNode2) {
	  _inherits(_class6, _ParentNode2);

	  function _class6(name) {
	    _classCallCheck(this, _class6);

	    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class6).call(this));

	    _this5._name = name;
	    _this5.attributes = [];
	    _this5.dataset = new DataSet(_this5);
	    _this5.style = new dom.Style(_this5);
	    _this5.classList = new ClassList(_this5);
	    return _this5;
	  }

	  _createClass(_class6, [{
	    key: "getAttributeNode",
	    value: function getAttributeNode() {
	      throw new Error("unimplemented: getAttributeNode");
	    }
	  }, {
	    key: "hasAttribute",
	    value: function hasAttribute(name) {
	      return this.attributes.findIndex(function (a) {
	        return a.name == name;
	      }) >= 0;
	    }
	  }, {
	    key: "getAttribute",
	    value: function getAttribute(name) {
	      var a = this.attributes.find(function (a) {
	        return a.name == name;
	      });
	      return a && a.value;
	    }
	  }, {
	    key: "setAttribute",
	    value: function setAttribute(name, value) {
	      var a = this.attributes.find(function (a) {
	        return a.name == name;
	      });
	      if (a) a.value = value;else this.attributes.push({ name: name, value: value, specified: true, isId: name == "id" });
	    }
	  }, {
	    key: "removeAttribute",
	    value: function removeAttribute(name) {
	      var i = this.attributes.findIndex(function (a) {
	        return a.name == name;
	      });
	      if (i >= 0) this.attributes.splice(i, 1);
	    }
	    // get innerHTML() {
	    // 	return XML.stringify( this[ _xml ](), { wrapScripts: true } )
	    // }

	  }, {
	    key: _xml,
	    value: function value() {
	      var attributes = lodash.fromPairs(this.attributes.map(function (a) {
	        return [a.name, a.value];
	      }));
	      if (!attributes.class) delete attributes.class;
	      if (!attributes.style) delete attributes.style;
	      return {
	        name: this._name,
	        attributes: attributes,
	        content: [].concat(_toConsumableArray(this.childNodes)).map(function (p) {
	          return p[_xml]();
	        })
	      };
	    }
	  }, {
	    key: "tagName",
	    get: function get() {
	      return this._name;
	    }
	  }, {
	    key: "className",
	    get: function get() {
	      return this.getAttribute("class");
	    },
	    set: function set(value) {
	      this.setAttribute("class", value);
	    }
	  }, {
	    key: "id",
	    get: function get() {
	      return this.getAttribute("id");
	    },
	    set: function set(value) {
	      this.setAttribute("id", value);
	    }
	  }, {
	    key: "innerHTML",
	    set: function set(value) {
	      if (value) throw new Error("unsupported");
	      this.childNodes._children.length = 0;
	    }
	  }, {
	    key: "nodeType",
	    get: function get() {
	      return dom.Node.ELEMENT_NODE;
	    }
	  }]);

	  return _class6;
	}(ParentNode);

	dom.HTMLTemplateElement = function (_dom$Element) {
	  _inherits(_class7, _dom$Element);

	  function _class7() {
	    _classCallCheck(this, _class7);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(_class7).apply(this, arguments));
	  }

	  return _class7;
	}(dom.Element);

	dom.Document = function (_dom$Node3) {
	  _inherits(_class8, _dom$Node3);

	  function _class8() {
	    _classCallCheck(this, _class8);

	    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class8).call(this));

	    _this7.documentElement = null;
	    _this7.cookie = "";
	    return _this7;
	  }

	  _createClass(_class8, [{
	    key: "createTextNode",
	    value: function createTextNode(text) {
	      return new dom.Text(text);
	    }
	  }, {
	    key: "createDocumentFragment",
	    value: function createDocumentFragment() {
	      return new dom.DocumentFragment();
	    }
	  }, {
	    key: "createElement",
	    value: function createElement(name) {
	      if (name == "__DUMMY__") return new __DUMMY__();else return new dom.Element(name);
	    }
	  }, {
	    key: "_getElementByTagName",
	    value: function _getElementByTagName(tagName) {
	      var ret = void 0;
	      if (this.documentElement) {
	        ;

	        var _documentElement$getE = this.documentElement.getElementsByTagName(tagName);

	        var _documentElement$getE2 = _slicedToArray(_documentElement$getE, 1);

	        ret = _documentElement$getE2[0];
	      }return ret;
	    }
	  }, {
	    key: "head",
	    get: function get() {
	      return this._getElementByTagName("head");
	    }
	  }, {
	    key: "body",
	    get: function get() {
	      return this._getElementByTagName("body");
	    }
	  }, {
	    key: "nodeType",
	    get: function get() {
	      return dom.Node.DOCUMENT_NODE;
	    }
	  }]);

	  return _class8;
	}(dom.Node);

	var __DUMMY__ = function (_dom$Element2) {
	  _inherits(__DUMMY__, _dom$Element2);

	  function __DUMMY__() {
	    _classCallCheck(this, __DUMMY__);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(__DUMMY__).apply(this, arguments));
	  }

	  _createClass(__DUMMY__, [{
	    key: "_appendTo",
	    value: function _appendTo() {}
	  }]);

	  return __DUMMY__;
	}(dom.Element);

	dom.HTMLCollection = function (_dom$Node4) {
	  _inherits(_class9, _dom$Node4);

	  function _class9() {
	    _classCallCheck(this, _class9);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(_class9).apply(this, arguments));
	  }

	  return _class9;
	}(dom.Node);

	dom.Event = function () {
	  function _class10(type, options) {
	    _classCallCheck(this, _class10);

	    this._type = type;
	    this._bubbles = options.bubbles;
	    this._cancelable = options.cancelable;
	    this._prevented = false;
	    this._target = null;
	  }
	  // get type() { return this._type }
	  // get bubbles() { return this._bubbles }


	  _createClass(_class10, [{
	    key: "preventDefault",
	    value: function preventDefault() {
	      if (this._cancelable) this._prevented = true;
	    }
	  }, {
	    key: "cancelable",
	    get: function get() {
	      return this._cancelable;
	    }
	  }, {
	    key: "target",
	    get: function get() {
	      return this._target;
	    }
	  }]);

	  return _class10;
	}();

	dom.CustomEvent = function (_dom$Event) {
	  _inherits(_class11, _dom$Event);

	  function _class11(type, options) {
	    _classCallCheck(this, _class11);

	    var _this10 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class11).call(this, type, options));

	    _this10._detail = options.detail;
	    return _this10;
	  }

	  _createClass(_class11, [{
	    key: "detail",
	    get: function get() {
	      return this._detail;
	    }
	  }]);

	  return _class11;
	}(dom.Event);

	function camelCase(name) {
	  return name.replace(/\-([a-z])/g, function (_, ch) {
	    return ch.toUpperCase();
	  });
	}

	function dashCase(name) {
	  return name.replace(/[A-Z]/g, function (ch) {
	    return "-" + ch.toLowerCase();
	  });
	}

	dom.document = new dom.Document();
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _entities;

	var _sax = __webpack_require__(501);

	var sax = _interopRequireWildcard(_sax);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var entities = (_entities = {}, _defineProperty(_entities, "&", "&amp;"), _defineProperty(_entities, "<", "&lt;"), _defineProperty(_entities, "\"", "&quot;"), _entities);

	var ATTRIBUTE = /[&<"]/g;
	var BODY = /[&<]/g;
	var substitute = function substitute(char) {
	  return entities[char];
	};

	var encode = function encode(subst, str) {
	  subst.lastIndex = 0;
	  return String(str).replace(subst, substitute);
	};

	var isObject = function isObject(obj) {
	  return obj && typeof obj == "object" && !(obj instanceof Buffer);
	};
	var readOpt = function readOpt(opt, def) {
	  return opt === undefined ? def : opt;
	};

	var isEmptyString = function isEmptyString(str) {
	  return typeof str == "string" && Boolean(str.match(/^(\s|\r|\n)*$/));
	};

	var first = function first(obj) {
	  return Array.isArray(obj) ? obj[0] : obj;
	};

	var XML = function () {
	  function XML(name, attributes, content) {
	    _classCallCheck(this, XML);

	    this.name = name;
	    this.attributes = attributes == null ? undefined : Object.assign(Object.create(null), attributes);
	    this.content = content == null ? undefined : typeof content == "string" ? content : [].concat(_toConsumableArray(content));
	  }

	  _createClass(XML, [{
	    key: "toString",
	    value: function toString(opt) {
	      return XML.stringify(this, opt);
	    }
	  }], [{
	    key: "getScriptText",
	    value: function getScriptText(text) {
	      return text.match(/^(?:\s|\r|\n|\/\*(?:\s|\r|\n)*\*\/)*((?:.|\r|\n)*?)(?:\s|\r|\n|\/\*(?:\s|\r|\n)*\*\/)*$/)[1];
	    }
	  }, {
	    key: "enum",
	    value: regeneratorRuntime.mark(function _enum(node, includingSelf) {
	      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, n;

	      return regeneratorRuntime.wrap(function _enum$(_context) {
	        while (1) switch (_context.prev = _context.next) {
	          case 0:
	            if (!node) {
	              _context.next = 33;
	              break;
	            }

	            if (!Array.isArray(node)) {
	              _context.next = 29;
	              break;
	            }

	            _iteratorNormalCompletion = true;
	            _didIteratorError = false;
	            _iteratorError = undefined;
	            _context.prev = 5;
	            _iterator = node[Symbol.iterator]();

	          case 7:
	            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	              _context.next = 13;
	              break;
	            }

	            n = _step.value;
	            return _context.delegateYield(XML.enum(n, true), "t0", 10);

	          case 10:
	            _iteratorNormalCompletion = true;
	            _context.next = 7;
	            break;

	          case 13:
	            _context.next = 19;
	            break;

	          case 15:
	            _context.prev = 15;
	            _context.t1 = _context["catch"](5);
	            _didIteratorError = true;
	            _iteratorError = _context.t1;

	          case 19:
	            _context.prev = 19;
	            _context.prev = 20;

	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }

	          case 22:
	            _context.prev = 22;

	            if (!_didIteratorError) {
	              _context.next = 25;
	              break;
	            }

	            throw _iteratorError;

	          case 25:
	            return _context.finish(22);

	          case 26:
	            return _context.finish(19);

	          case 27:
	            _context.next = 33;
	            break;

	          case 29:
	            if (!(includingSelf !== false)) {
	              _context.next = 32;
	              break;
	            }

	            _context.next = 32;
	            return node;

	          case 32:
	            return _context.delegateYield(XML.enum(node.content, true), "t2", 33);

	          case 33:
	          case "end":
	            return _context.stop();
	        }
	      }, _enum, this, [[5, 15, 19, 27], [20,, 22, 26]]);
	    })
	  }, {
	    key: "type",
	    value: function type(node) {
	      return !node ? null : typeof node == "object" ? Array.isArray(node) ? "collection" : "tag" : "text";
	    }
	  }, {
	    key: "appendChild",
	    value: function appendChild(node, child) {
	      if (Array.isArray(node.content)) node.content.push(child);else if (!node.content) node.content = child;else node.content = [node.content, child];
	    }
	  }, {
	    key: "isJavascriptType",
	    value: function isJavascriptType(type) {
	      return !type || type == "text/javascript" || type == "application/javascript" || type == "module";
	    }
	  }, {
	    key: "isModuleType",
	    value: function isModuleType(type) {
	      return type == "module";
	    }
	  }, {
	    key: "isCSSType",
	    value: function isCSSType(type) {
	      return !type || type == "text/css";
	    }
	  }, {
	    key: "stringify",
	    value: function stringify(xml, opt) {

	      var noEncodeScripts = readOpt((opt || undefined) && opt.noEncodeScripts, false);
	      var wrapScripts = readOpt((opt || undefined) && opt.wrapScripts, false);
	      var noSelfClosingTags = readOpt((opt || undefined) && opt.noSelfClosingTags, false);
	      var serviceSymbols = readOpt((opt || undefined) && opt.serviceSymbols, false);

	      function enc(subst, str) {
	        var ret = encode(subst, str);
	        if (serviceSymbols) ret = ret.replace(serviceSymbols, function (ch) {
	          return "&#" + ch.charCodeAt(0) + ";";
	        });
	        return ret;
	      }

	      var ret = "";

	      void function appendNode(xml, parent) {
	        switch (XML.type(xml)) {
	          case "collection":
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	              for (var _iterator2 = xml[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var x = _step2.value;

	                appendNode(x, parent);
	              }
	            } catch (err) {
	              _didIteratorError2 = true;
	              _iteratorError2 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                  _iterator2.return();
	                }
	              } finally {
	                if (_didIteratorError2) {
	                  throw _iteratorError2;
	                }
	              }
	            }

	            break;
	          case "text":
	            if (xml) {
	              var isScript = parent && parent.name == "script";
	              var isStyle = parent && parent.name == "style";
	              var type = parent && parent.attributes && parent.attributes.type;
	              if (noEncodeScripts && (isScript || isStyle)) ret += xml;else if (wrapScripts && (isScript && (XML.isJavascriptType(type) || XML.isModuleType(type)) || isStyle && XML.isCSSType(type)) && /<|&|^\/\*\*\/(.|\r|\n)*\/\*\*\/$/.exec(xml)) ret += "/*<![CDATA[*/\n" + XML.getScriptText(xml) + "\n/*]]>*/";else ret += enc(BODY, xml);
	            }
	            break;
	          case "tag":
	            ret += "<" + xml.name;
	            if (xml.attributes) {
	              var _iteratorNormalCompletion3 = true;
	              var _didIteratorError3 = false;
	              var _iteratorError3 = undefined;

	              try {
	                for (var _iterator3 = lodash.toPairs(xml.attributes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                  var _step3$value = _slicedToArray(_step3.value, 2);

	                  var name = _step3$value[0];
	                  var value = _step3$value[1];

	                  if (value != null) ret += " " + name + "=\"" + enc(ATTRIBUTE, value) + "\"";
	                }
	              } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	              } finally {
	                try {
	                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                  }
	                } finally {
	                  if (_didIteratorError3) {
	                    throw _iteratorError3;
	                  }
	                }
	              }
	            }if (xml.content == null && !noSelfClosingTags) ret += "/>";else {
	              ret += ">";
	              appendNode(xml.content, xml);
	              ret += "</" + xml.name + ">";
	            }
	            break;
	        }
	      }(xml, null);

	      return ret;
	    }
	  }, {
	    key: "parse",
	    value: function parse(text, strict) {
	      // sax.createStream is suxx.
	      if (strict === undefined) strict = true;
	      var opt = strict ? null : { lowercase: true };

	      var root = new XML("ROOT");
	      var tags = [root];

	      var push = function push(data) {
	        var current = tags[tags.length - 1];
	        if (!current.content) current.content = typeof data == "string" ? data : [data];else if (data) {
	          if (typeof data == "string" && typeof current.content == "string") {
	            if (current.content) current.content += data;else current.content = data;
	          } else if (typeof data == "string" && typeof current.content[current.content.length - 1] == "string") current.content[current.content.length - 1] += data;else {
	            if (typeof current.content == "string") current.content = [current.content];
	            current.content.push(data);
	          }
	        }
	      };

	      var parser = sax.parser(strict, opt);
	      parser.error = null;
	      parser.ondoctype = parser.onprocessinginstruction = parser.onsgmldeclaration = parser.oncomment = parser.onopennamespace = parser.onclosenamespace = parser.onopencdata = parser.onclosecdata = parser.onattribute = lodash.noop;
	      parser.onerror = function (data) {
	        throw data;
	      };
	      parser.ontext = parser.oncdata = parser.onscript = function (data) {
	        return push(data);
	      };
	      parser.onopentag = function (t) {
	        var node = new XML(t.name, t.attributes, t.isSelfClosing ? undefined : "");
	        push(node);
	        tags.push(node);
	      };
	      parser.onclosetag = function () {
	        return tags.pop();
	      };
	      parser.write("<ROOT2>" + text + "</ROOT2>").close(); // workaround of sax conditions.
	      if (parser.error) throw parser.error;

	      var root2 = first(root.content);
	      var ret = root2.content;
	      if (Array.isArray(ret)) {
	        while (ret.length && isEmptyString(ret[0])) {
	          ret.shift();
	        }while (ret.length && isEmptyString(ret[ret.length - 1])) {
	          ret.pop();
	        }
	      }
	      if (Array.isArray(ret) && ret.length <= 1) return ret[0] || "";else return ret;
	    }
	  }]);

	  return XML;
	}();

	exports.default = XML;
	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	;(function (sax) { // wrapper for non-node envs
	  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
	  sax.SAXParser = SAXParser
	  sax.SAXStream = SAXStream
	  sax.createStream = createStream

	  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
	  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
	  // since that's the earliest that a buffer overrun could occur.  This way, checks are
	  // as rare as required, but as often as necessary to ensure never crossing this bound.
	  // Furthermore, buffers are only tested at most once per write(), so passing a very
	  // large string into write() might have undesirable effects, but this is manageable by
	  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
	  // edge case, result in creating at most one complete copy of the string passed in.
	  // Set to Infinity to have unlimited buffers.
	  sax.MAX_BUFFER_LENGTH = 64 * 1024

	  var buffers = [
	    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
	    'procInstName', 'procInstBody', 'entity', 'attribName',
	    'attribValue', 'cdata', 'script'
	  ]

	  sax.EVENTS = [
	    'text',
	    'processinginstruction',
	    'sgmldeclaration',
	    'doctype',
	    'comment',
	    'opentagstart',
	    'attribute',
	    'opentag',
	    'closetag',
	    'opencdata',
	    'cdata',
	    'closecdata',
	    'error',
	    'end',
	    'ready',
	    'script',
	    'opennamespace',
	    'closenamespace'
	  ]

	  function SAXParser (strict, opt) {
	    if (!(this instanceof SAXParser)) {
	      return new SAXParser(strict, opt)
	    }

	    var parser = this
	    clearBuffers(parser)
	    parser.q = parser.c = ''
	    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
	    parser.opt = opt || {}
	    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
	    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
	    parser.tags = []
	    parser.closed = parser.closedRoot = parser.sawRoot = false
	    parser.tag = parser.error = null
	    parser.strict = !!strict
	    parser.noscript = !!(strict || parser.opt.noscript)
	    parser.state = S.BEGIN
	    parser.strictEntities = parser.opt.strictEntities
	    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
	    parser.attribList = []

	    // namespaces form a prototype chain.
	    // it always points at the current tag,
	    // which protos to its parent tag.
	    if (parser.opt.xmlns) {
	      parser.ns = Object.create(rootNS)
	    }

	    // mostly just for error reporting
	    parser.trackPosition = parser.opt.position !== false
	    if (parser.trackPosition) {
	      parser.position = parser.line = parser.column = 0
	    }
	    emit(parser, 'onready')
	  }

	  if (!Object.create) {
	    Object.create = function (o) {
	      function F () {}
	      F.prototype = o
	      var newf = new F()
	      return newf
	    }
	  }

	  if (!Object.keys) {
	    Object.keys = function (o) {
	      var a = []
	      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
	      return a
	    }
	  }

	  function checkBufferLength (parser) {
	    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
	    var maxActual = 0
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      var len = parser[buffers[i]].length
	      if (len > maxAllowed) {
	        // Text/cdata nodes can get big, and since they're buffered,
	        // we can get here under normal conditions.
	        // Avoid issues by emitting the text node now,
	        // so at least it won't get any bigger.
	        switch (buffers[i]) {
	          case 'textNode':
	            closeText(parser)
	            break

	          case 'cdata':
	            emitNode(parser, 'oncdata', parser.cdata)
	            parser.cdata = ''
	            break

	          case 'script':
	            emitNode(parser, 'onscript', parser.script)
	            parser.script = ''
	            break

	          default:
	            error(parser, 'Max buffer length exceeded: ' + buffers[i])
	        }
	      }
	      maxActual = Math.max(maxActual, len)
	    }
	    // schedule the next check for the earliest possible buffer overrun.
	    var m = sax.MAX_BUFFER_LENGTH - maxActual
	    parser.bufferCheckPosition = m + parser.position
	  }

	  function clearBuffers (parser) {
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      parser[buffers[i]] = ''
	    }
	  }

	  function flushBuffers (parser) {
	    closeText(parser)
	    if (parser.cdata !== '') {
	      emitNode(parser, 'oncdata', parser.cdata)
	      parser.cdata = ''
	    }
	    if (parser.script !== '') {
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }
	  }

	  SAXParser.prototype = {
	    end: function () { end(this) },
	    write: write,
	    resume: function () { this.error = null; return this },
	    close: function () { return this.write(null) },
	    flush: function () { flushBuffers(this) }
	  }

	  var Stream
	  try {
	    Stream = __webpack_require__(322).Stream
	  } catch (ex) {
	    Stream = function () {}
	  }

	  var streamWraps = sax.EVENTS.filter(function (ev) {
	    return ev !== 'error' && ev !== 'end'
	  })

	  function createStream (strict, opt) {
	    return new SAXStream(strict, opt)
	  }

	  function SAXStream (strict, opt) {
	    if (!(this instanceof SAXStream)) {
	      return new SAXStream(strict, opt)
	    }

	    Stream.apply(this)

	    this._parser = new SAXParser(strict, opt)
	    this.writable = true
	    this.readable = true

	    var me = this

	    this._parser.onend = function () {
	      me.emit('end')
	    }

	    this._parser.onerror = function (er) {
	      me.emit('error', er)

	      // if didn't throw, then means error was handled.
	      // go ahead and clear error, so we can write again.
	      me._parser.error = null
	    }

	    this._decoder = null

	    streamWraps.forEach(function (ev) {
	      Object.defineProperty(me, 'on' + ev, {
	        get: function () {
	          return me._parser['on' + ev]
	        },
	        set: function (h) {
	          if (!h) {
	            me.removeAllListeners(ev)
	            me._parser['on' + ev] = h
	            return h
	          }
	          me.on(ev, h)
	        },
	        enumerable: true,
	        configurable: false
	      })
	    })
	  }

	  SAXStream.prototype = Object.create(Stream.prototype, {
	    constructor: {
	      value: SAXStream
	    }
	  })

	  SAXStream.prototype.write = function (data) {
	    if (typeof Buffer === 'function' &&
	      typeof Buffer.isBuffer === 'function' &&
	      Buffer.isBuffer(data)) {
	      if (!this._decoder) {
	        var SD = __webpack_require__(428).StringDecoder
	        this._decoder = new SD('utf8')
	      }
	      data = this._decoder.write(data)
	    }

	    this._parser.write(data.toString())
	    this.emit('data', data)
	    return true
	  }

	  SAXStream.prototype.end = function (chunk) {
	    if (chunk && chunk.length) {
	      this.write(chunk)
	    }
	    this._parser.end()
	    return true
	  }

	  SAXStream.prototype.on = function (ev, handler) {
	    var me = this
	    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
	      me._parser['on' + ev] = function () {
	        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
	        args.splice(0, 0, ev)
	        me.emit.apply(me, args)
	      }
	    }

	    return Stream.prototype.on.call(me, ev, handler)
	  }

	  // character classes and tokens
	  var whitespace = '\r\n\t '

	  // this really needs to be replaced with character classes.
	  // XML allows all manner of ridiculous numbers and digits.
	  var number = '0124356789'
	  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

	  // (Letter | "_" | ":")
	  var quote = '\'"'
	  var attribEnd = whitespace + '>'
	  var CDATA = '[CDATA['
	  var DOCTYPE = 'DOCTYPE'
	  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
	  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
	  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

	  // turn all the string character sets into character class objects.
	  whitespace = charClass(whitespace)
	  number = charClass(number)
	  letter = charClass(letter)

	  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
	  // This implementation works on strings, a single character at a time
	  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
	  // without a significant breaking change to either this  parser, or the
	  // JavaScript language.  Implementation of an emoji-capable xml parser
	  // is left as an exercise for the reader.
	  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

	  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
	  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  quote = charClass(quote)
	  attribEnd = charClass(attribEnd)

	  function charClass (str) {
	    return str.split('').reduce(function (s, c) {
	      s[c] = true
	      return s
	    }, {})
	  }

	  function isRegExp (c) {
	    return Object.prototype.toString.call(c) === '[object RegExp]'
	  }

	  function is (charclass, c) {
	    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
	  }

	  function not (charclass, c) {
	    return !is(charclass, c)
	  }

	  var S = 0
	  sax.STATE = {
	    BEGIN: S++, // leading byte order mark or whitespace
	    BEGIN_WHITESPACE: S++, // leading whitespace
	    TEXT: S++, // general stuff
	    TEXT_ENTITY: S++, // &amp and such.
	    OPEN_WAKA: S++, // <
	    SGML_DECL: S++, // <!BLARG
	    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
	    DOCTYPE: S++, // <!DOCTYPE
	    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
	    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
	    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
	    COMMENT_STARTING: S++, // <!-
	    COMMENT: S++, // <!--
	    COMMENT_ENDING: S++, // <!-- blah -
	    COMMENT_ENDED: S++, // <!-- blah --
	    CDATA: S++, // <![CDATA[ something
	    CDATA_ENDING: S++, // ]
	    CDATA_ENDING_2: S++, // ]]
	    PROC_INST: S++, // <?hi
	    PROC_INST_BODY: S++, // <?hi there
	    PROC_INST_ENDING: S++, // <?hi "there" ?
	    OPEN_TAG: S++, // <strong
	    OPEN_TAG_SLASH: S++, // <strong /
	    ATTRIB: S++, // <a
	    ATTRIB_NAME: S++, // <a foo
	    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
	    ATTRIB_VALUE: S++, // <a foo=
	    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
	    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
	    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
	    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
	    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
	    CLOSE_TAG: S++, // </a
	    CLOSE_TAG_SAW_WHITE: S++, // </a   >
	    SCRIPT: S++, // <script> ...
	    SCRIPT_ENDING: S++ // <script> ... <
	  }

	  sax.XML_ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'"
	  }

	  sax.ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'",
	    'AElig': 198,
	    'Aacute': 193,
	    'Acirc': 194,
	    'Agrave': 192,
	    'Aring': 197,
	    'Atilde': 195,
	    'Auml': 196,
	    'Ccedil': 199,
	    'ETH': 208,
	    'Eacute': 201,
	    'Ecirc': 202,
	    'Egrave': 200,
	    'Euml': 203,
	    'Iacute': 205,
	    'Icirc': 206,
	    'Igrave': 204,
	    'Iuml': 207,
	    'Ntilde': 209,
	    'Oacute': 211,
	    'Ocirc': 212,
	    'Ograve': 210,
	    'Oslash': 216,
	    'Otilde': 213,
	    'Ouml': 214,
	    'THORN': 222,
	    'Uacute': 218,
	    'Ucirc': 219,
	    'Ugrave': 217,
	    'Uuml': 220,
	    'Yacute': 221,
	    'aacute': 225,
	    'acirc': 226,
	    'aelig': 230,
	    'agrave': 224,
	    'aring': 229,
	    'atilde': 227,
	    'auml': 228,
	    'ccedil': 231,
	    'eacute': 233,
	    'ecirc': 234,
	    'egrave': 232,
	    'eth': 240,
	    'euml': 235,
	    'iacute': 237,
	    'icirc': 238,
	    'igrave': 236,
	    'iuml': 239,
	    'ntilde': 241,
	    'oacute': 243,
	    'ocirc': 244,
	    'ograve': 242,
	    'oslash': 248,
	    'otilde': 245,
	    'ouml': 246,
	    'szlig': 223,
	    'thorn': 254,
	    'uacute': 250,
	    'ucirc': 251,
	    'ugrave': 249,
	    'uuml': 252,
	    'yacute': 253,
	    'yuml': 255,
	    'copy': 169,
	    'reg': 174,
	    'nbsp': 160,
	    'iexcl': 161,
	    'cent': 162,
	    'pound': 163,
	    'curren': 164,
	    'yen': 165,
	    'brvbar': 166,
	    'sect': 167,
	    'uml': 168,
	    'ordf': 170,
	    'laquo': 171,
	    'not': 172,
	    'shy': 173,
	    'macr': 175,
	    'deg': 176,
	    'plusmn': 177,
	    'sup1': 185,
	    'sup2': 178,
	    'sup3': 179,
	    'acute': 180,
	    'micro': 181,
	    'para': 182,
	    'middot': 183,
	    'cedil': 184,
	    'ordm': 186,
	    'raquo': 187,
	    'frac14': 188,
	    'frac12': 189,
	    'frac34': 190,
	    'iquest': 191,
	    'times': 215,
	    'divide': 247,
	    'OElig': 338,
	    'oelig': 339,
	    'Scaron': 352,
	    'scaron': 353,
	    'Yuml': 376,
	    'fnof': 402,
	    'circ': 710,
	    'tilde': 732,
	    'Alpha': 913,
	    'Beta': 914,
	    'Gamma': 915,
	    'Delta': 916,
	    'Epsilon': 917,
	    'Zeta': 918,
	    'Eta': 919,
	    'Theta': 920,
	    'Iota': 921,
	    'Kappa': 922,
	    'Lambda': 923,
	    'Mu': 924,
	    'Nu': 925,
	    'Xi': 926,
	    'Omicron': 927,
	    'Pi': 928,
	    'Rho': 929,
	    'Sigma': 931,
	    'Tau': 932,
	    'Upsilon': 933,
	    'Phi': 934,
	    'Chi': 935,
	    'Psi': 936,
	    'Omega': 937,
	    'alpha': 945,
	    'beta': 946,
	    'gamma': 947,
	    'delta': 948,
	    'epsilon': 949,
	    'zeta': 950,
	    'eta': 951,
	    'theta': 952,
	    'iota': 953,
	    'kappa': 954,
	    'lambda': 955,
	    'mu': 956,
	    'nu': 957,
	    'xi': 958,
	    'omicron': 959,
	    'pi': 960,
	    'rho': 961,
	    'sigmaf': 962,
	    'sigma': 963,
	    'tau': 964,
	    'upsilon': 965,
	    'phi': 966,
	    'chi': 967,
	    'psi': 968,
	    'omega': 969,
	    'thetasym': 977,
	    'upsih': 978,
	    'piv': 982,
	    'ensp': 8194,
	    'emsp': 8195,
	    'thinsp': 8201,
	    'zwnj': 8204,
	    'zwj': 8205,
	    'lrm': 8206,
	    'rlm': 8207,
	    'ndash': 8211,
	    'mdash': 8212,
	    'lsquo': 8216,
	    'rsquo': 8217,
	    'sbquo': 8218,
	    'ldquo': 8220,
	    'rdquo': 8221,
	    'bdquo': 8222,
	    'dagger': 8224,
	    'Dagger': 8225,
	    'bull': 8226,
	    'hellip': 8230,
	    'permil': 8240,
	    'prime': 8242,
	    'Prime': 8243,
	    'lsaquo': 8249,
	    'rsaquo': 8250,
	    'oline': 8254,
	    'frasl': 8260,
	    'euro': 8364,
	    'image': 8465,
	    'weierp': 8472,
	    'real': 8476,
	    'trade': 8482,
	    'alefsym': 8501,
	    'larr': 8592,
	    'uarr': 8593,
	    'rarr': 8594,
	    'darr': 8595,
	    'harr': 8596,
	    'crarr': 8629,
	    'lArr': 8656,
	    'uArr': 8657,
	    'rArr': 8658,
	    'dArr': 8659,
	    'hArr': 8660,
	    'forall': 8704,
	    'part': 8706,
	    'exist': 8707,
	    'empty': 8709,
	    'nabla': 8711,
	    'isin': 8712,
	    'notin': 8713,
	    'ni': 8715,
	    'prod': 8719,
	    'sum': 8721,
	    'minus': 8722,
	    'lowast': 8727,
	    'radic': 8730,
	    'prop': 8733,
	    'infin': 8734,
	    'ang': 8736,
	    'and': 8743,
	    'or': 8744,
	    'cap': 8745,
	    'cup': 8746,
	    'int': 8747,
	    'there4': 8756,
	    'sim': 8764,
	    'cong': 8773,
	    'asymp': 8776,
	    'ne': 8800,
	    'equiv': 8801,
	    'le': 8804,
	    'ge': 8805,
	    'sub': 8834,
	    'sup': 8835,
	    'nsub': 8836,
	    'sube': 8838,
	    'supe': 8839,
	    'oplus': 8853,
	    'otimes': 8855,
	    'perp': 8869,
	    'sdot': 8901,
	    'lceil': 8968,
	    'rceil': 8969,
	    'lfloor': 8970,
	    'rfloor': 8971,
	    'lang': 9001,
	    'rang': 9002,
	    'loz': 9674,
	    'spades': 9824,
	    'clubs': 9827,
	    'hearts': 9829,
	    'diams': 9830
	  }

	  Object.keys(sax.ENTITIES).forEach(function (key) {
	    var e = sax.ENTITIES[key]
	    var s = typeof e === 'number' ? String.fromCharCode(e) : e
	    sax.ENTITIES[key] = s
	  })

	  for (var s in sax.STATE) {
	    sax.STATE[sax.STATE[s]] = s
	  }

	  // shorthand
	  S = sax.STATE

	  function emit (parser, event, data) {
	    parser[event] && parser[event](data)
	  }

	  function emitNode (parser, nodeType, data) {
	    if (parser.textNode) closeText(parser)
	    emit(parser, nodeType, data)
	  }

	  function closeText (parser) {
	    parser.textNode = textopts(parser.opt, parser.textNode)
	    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
	    parser.textNode = ''
	  }

	  function textopts (opt, text) {
	    if (opt.trim) text = text.trim()
	    if (opt.normalize) text = text.replace(/\s+/g, ' ')
	    return text
	  }

	  function error (parser, er) {
	    closeText(parser)
	    if (parser.trackPosition) {
	      er += '\nLine: ' + parser.line +
	        '\nColumn: ' + parser.column +
	        '\nChar: ' + parser.c
	    }
	    er = new Error(er)
	    parser.error = er
	    emit(parser, 'onerror', er)
	    return parser
	  }

	  function end (parser) {
	    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
	    if ((parser.state !== S.BEGIN) &&
	      (parser.state !== S.BEGIN_WHITESPACE) &&
	      (parser.state !== S.TEXT)) {
	      error(parser, 'Unexpected end')
	    }
	    closeText(parser)
	    parser.c = ''
	    parser.closed = true
	    emit(parser, 'onend')
	    SAXParser.call(parser, parser.strict, parser.opt)
	    return parser
	  }

	  function strictFail (parser, message) {
	    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
	      throw new Error('bad call to strictFail')
	    }
	    if (parser.strict) {
	      error(parser, message)
	    }
	  }

	  function newTag (parser) {
	    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
	    var parent = parser.tags[parser.tags.length - 1] || parser
	    var tag = parser.tag = { name: parser.tagName, attributes: {} }

	    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
	    if (parser.opt.xmlns) {
	      tag.ns = parent.ns
	    }
	    parser.attribList.length = 0
	    emitNode(parser, 'onopentagstart', tag)
	  }

	  function qname (name, attribute) {
	    var i = name.indexOf(':')
	    var qualName = i < 0 ? [ '', name ] : name.split(':')
	    var prefix = qualName[0]
	    var local = qualName[1]

	    // <x "xmlns"="http://foo">
	    if (attribute && name === 'xmlns') {
	      prefix = 'xmlns'
	      local = ''
	    }

	    return { prefix: prefix, local: local }
	  }

	  function attrib (parser) {
	    if (!parser.strict) {
	      parser.attribName = parser.attribName[parser.looseCase]()
	    }

	    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
	      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
	      parser.attribName = parser.attribValue = ''
	      return
	    }

	    if (parser.opt.xmlns) {
	      var qn = qname(parser.attribName, true)
	      var prefix = qn.prefix
	      var local = qn.local

	      if (prefix === 'xmlns') {
	        // namespace binding attribute. push the binding into scope
	        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
	          strictFail(parser,
	            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
	          strictFail(parser,
	            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else {
	          var tag = parser.tag
	          var parent = parser.tags[parser.tags.length - 1] || parser
	          if (tag.ns === parent.ns) {
	            tag.ns = Object.create(parent.ns)
	          }
	          tag.ns[local] = parser.attribValue
	        }
	      }

	      // defer onattribute events until all attributes have been seen
	      // so any new bindings can take effect. preserve attribute order
	      // so deferred events can be emitted in document order
	      parser.attribList.push([parser.attribName, parser.attribValue])
	    } else {
	      // in non-xmlns mode, we can emit the event right away
	      parser.tag.attributes[parser.attribName] = parser.attribValue
	      emitNode(parser, 'onattribute', {
	        name: parser.attribName,
	        value: parser.attribValue
	      })
	    }

	    parser.attribName = parser.attribValue = ''
	  }

	  function openTag (parser, selfClosing) {
	    if (parser.opt.xmlns) {
	      // emit namespace binding events
	      var tag = parser.tag

	      // add namespace info to tag
	      var qn = qname(parser.tagName)
	      tag.prefix = qn.prefix
	      tag.local = qn.local
	      tag.uri = tag.ns[qn.prefix] || ''

	      if (tag.prefix && !tag.uri) {
	        strictFail(parser, 'Unbound namespace prefix: ' +
	          JSON.stringify(parser.tagName))
	        tag.uri = qn.prefix
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (tag.ns && parent.ns !== tag.ns) {
	        Object.keys(tag.ns).forEach(function (p) {
	          emitNode(parser, 'onopennamespace', {
	            prefix: p,
	            uri: tag.ns[p]
	          })
	        })
	      }

	      // handle deferred onattribute events
	      // Note: do not apply default ns to attributes:
	      //   http://www.w3.org/TR/REC-xml-names/#defaulting
	      for (var i = 0, l = parser.attribList.length; i < l; i++) {
	        var nv = parser.attribList[i]
	        var name = nv[0]
	        var value = nv[1]
	        var qualName = qname(name, true)
	        var prefix = qualName.prefix
	        var local = qualName.local
	        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
	        var a = {
	          name: name,
	          value: value,
	          prefix: prefix,
	          local: local,
	          uri: uri
	        }

	        // if there's any attributes with an undefined namespace,
	        // then fail on them now.
	        if (prefix && prefix !== 'xmlns' && !uri) {
	          strictFail(parser, 'Unbound namespace prefix: ' +
	            JSON.stringify(prefix))
	          a.uri = prefix
	        }
	        parser.tag.attributes[name] = a
	        emitNode(parser, 'onattribute', a)
	      }
	      parser.attribList.length = 0
	    }

	    parser.tag.isSelfClosing = !!selfClosing

	    // process the tag
	    parser.sawRoot = true
	    parser.tags.push(parser.tag)
	    emitNode(parser, 'onopentag', parser.tag)
	    if (!selfClosing) {
	      // special case for <script> in non-strict mode.
	      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
	        parser.state = S.SCRIPT
	      } else {
	        parser.state = S.TEXT
	      }
	      parser.tag = null
	      parser.tagName = ''
	    }
	    parser.attribName = parser.attribValue = ''
	    parser.attribList.length = 0
	  }

	  function closeTag (parser) {
	    if (!parser.tagName) {
	      strictFail(parser, 'Weird empty close tag.')
	      parser.textNode += '</>'
	      parser.state = S.TEXT
	      return
	    }

	    if (parser.script) {
	      if (parser.tagName !== 'script') {
	        parser.script += '</' + parser.tagName + '>'
	        parser.tagName = ''
	        parser.state = S.SCRIPT
	        return
	      }
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }

	    // first make sure that the closing tag actually exists.
	    // <a><b></c></b></a> will close everything, otherwise.
	    var t = parser.tags.length
	    var tagName = parser.tagName
	    if (!parser.strict) {
	      tagName = tagName[parser.looseCase]()
	    }
	    var closeTo = tagName
	    while (t--) {
	      var close = parser.tags[t]
	      if (close.name !== closeTo) {
	        // fail the first time in strict mode
	        strictFail(parser, 'Unexpected close tag')
	      } else {
	        break
	      }
	    }

	    // didn't find it.  we already failed for strict, so just abort.
	    if (t < 0) {
	      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
	      parser.textNode += '</' + parser.tagName + '>'
	      parser.state = S.TEXT
	      return
	    }
	    parser.tagName = tagName
	    var s = parser.tags.length
	    while (s-- > t) {
	      var tag = parser.tag = parser.tags.pop()
	      parser.tagName = parser.tag.name
	      emitNode(parser, 'onclosetag', parser.tagName)

	      var x = {}
	      for (var i in tag.ns) {
	        x[i] = tag.ns[i]
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (parser.opt.xmlns && tag.ns !== parent.ns) {
	        // remove namespace bindings introduced by tag
	        Object.keys(tag.ns).forEach(function (p) {
	          var n = tag.ns[p]
	          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
	        })
	      }
	    }
	    if (t === 0) parser.closedRoot = true
	    parser.tagName = parser.attribValue = parser.attribName = ''
	    parser.attribList.length = 0
	    parser.state = S.TEXT
	  }

	  function parseEntity (parser) {
	    var entity = parser.entity
	    var entityLC = entity.toLowerCase()
	    var num
	    var numStr = ''

	    if (parser.ENTITIES[entity]) {
	      return parser.ENTITIES[entity]
	    }
	    if (parser.ENTITIES[entityLC]) {
	      return parser.ENTITIES[entityLC]
	    }
	    entity = entityLC
	    if (entity.charAt(0) === '#') {
	      if (entity.charAt(1) === 'x') {
	        entity = entity.slice(2)
	        num = parseInt(entity, 16)
	        numStr = num.toString(16)
	      } else {
	        entity = entity.slice(1)
	        num = parseInt(entity, 10)
	        numStr = num.toString(10)
	      }
	    }
	    entity = entity.replace(/^0+/, '')
	    if (numStr.toLowerCase() !== entity) {
	      strictFail(parser, 'Invalid character entity')
	      return '&' + parser.entity + ';'
	    }

	    return String.fromCodePoint(num)
	  }

	  function beginWhiteSpace (parser, c) {
	    if (c === '<') {
	      parser.state = S.OPEN_WAKA
	      parser.startTagPosition = parser.position
	    } else if (not(whitespace, c)) {
	      // have to process this as a text node.
	      // weird, but happens.
	      strictFail(parser, 'Non-whitespace before first tag.')
	      parser.textNode = c
	      parser.state = S.TEXT
	    }
	  }

	  function charAt (chunk, i) {
	    var result = ''
	    if (i < chunk.length) {
	      result = chunk.charAt(i)
	    }
	    return result
	  }

	  function write (chunk) {
	    var parser = this
	    if (this.error) {
	      throw this.error
	    }
	    if (parser.closed) {
	      return error(parser,
	        'Cannot write after close. Assign an onready handler.')
	    }
	    if (chunk === null) {
	      return end(parser)
	    }
	    if (typeof chunk === 'object') {
	      chunk = chunk.toString()
	    }
	    var i = 0
	    var c = ''
	    while (true) {
	      c = charAt(chunk, i++)
	      parser.c = c
	      if (!c) {
	        break
	      }
	      if (parser.trackPosition) {
	        parser.position++
	        if (c === '\n') {
	          parser.line++
	          parser.column = 0
	        } else {
	          parser.column++
	        }
	      }
	      switch (parser.state) {
	        case S.BEGIN:
	          parser.state = S.BEGIN_WHITESPACE
	          if (c === '\uFEFF') {
	            continue
	          }
	          beginWhiteSpace(parser, c)
	          continue

	        case S.BEGIN_WHITESPACE:
	          beginWhiteSpace(parser, c)
	          continue

	        case S.TEXT:
	          if (parser.sawRoot && !parser.closedRoot) {
	            var starti = i - 1
	            while (c && c !== '<' && c !== '&') {
	              c = charAt(chunk, i++)
	              if (c && parser.trackPosition) {
	                parser.position++
	                if (c === '\n') {
	                  parser.line++
	                  parser.column = 0
	                } else {
	                  parser.column++
	                }
	              }
	            }
	            parser.textNode += chunk.substring(starti, i - 1)
	          }
	          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
	            parser.state = S.OPEN_WAKA
	            parser.startTagPosition = parser.position
	          } else {
	            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
	              strictFail(parser, 'Text data outside of root node.')
	            }
	            if (c === '&') {
	              parser.state = S.TEXT_ENTITY
	            } else {
	              parser.textNode += c
	            }
	          }
	          continue

	        case S.SCRIPT:
	          // only non-strict
	          if (c === '<') {
	            parser.state = S.SCRIPT_ENDING
	          } else {
	            parser.script += c
	          }
	          continue

	        case S.SCRIPT_ENDING:
	          if (c === '/') {
	            parser.state = S.CLOSE_TAG
	          } else {
	            parser.script += '<' + c
	            parser.state = S.SCRIPT
	          }
	          continue

	        case S.OPEN_WAKA:
	          // either a /, ?, !, or text is coming next.
	          if (c === '!') {
	            parser.state = S.SGML_DECL
	            parser.sgmlDecl = ''
	          } else if (is(whitespace, c)) {
	            // wait for it...
	          } else if (is(nameStart, c)) {
	            parser.state = S.OPEN_TAG
	            parser.tagName = c
	          } else if (c === '/') {
	            parser.state = S.CLOSE_TAG
	            parser.tagName = ''
	          } else if (c === '?') {
	            parser.state = S.PROC_INST
	            parser.procInstName = parser.procInstBody = ''
	          } else {
	            strictFail(parser, 'Unencoded <')
	            // if there was some whitespace, then add that in.
	            if (parser.startTagPosition + 1 < parser.position) {
	              var pad = parser.position - parser.startTagPosition
	              c = new Array(pad).join(' ') + c
	            }
	            parser.textNode += '<' + c
	            parser.state = S.TEXT
	          }
	          continue

	        case S.SGML_DECL:
	          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
	            emitNode(parser, 'onopencdata')
	            parser.state = S.CDATA
	            parser.sgmlDecl = ''
	            parser.cdata = ''
	          } else if (parser.sgmlDecl + c === '--') {
	            parser.state = S.COMMENT
	            parser.comment = ''
	            parser.sgmlDecl = ''
	          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
	            parser.state = S.DOCTYPE
	            if (parser.doctype || parser.sawRoot) {
	              strictFail(parser,
	                'Inappropriately located doctype declaration')
	            }
	            parser.doctype = ''
	            parser.sgmlDecl = ''
	          } else if (c === '>') {
	            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
	            parser.sgmlDecl = ''
	            parser.state = S.TEXT
	          } else if (is(quote, c)) {
	            parser.state = S.SGML_DECL_QUOTED
	            parser.sgmlDecl += c
	          } else {
	            parser.sgmlDecl += c
	          }
	          continue

	        case S.SGML_DECL_QUOTED:
	          if (c === parser.q) {
	            parser.state = S.SGML_DECL
	            parser.q = ''
	          }
	          parser.sgmlDecl += c
	          continue

	        case S.DOCTYPE:
	          if (c === '>') {
	            parser.state = S.TEXT
	            emitNode(parser, 'ondoctype', parser.doctype)
	            parser.doctype = true // just remember that we saw it.
	          } else {
	            parser.doctype += c
	            if (c === '[') {
	              parser.state = S.DOCTYPE_DTD
	            } else if (is(quote, c)) {
	              parser.state = S.DOCTYPE_QUOTED
	              parser.q = c
	            }
	          }
	          continue

	        case S.DOCTYPE_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.q = ''
	            parser.state = S.DOCTYPE
	          }
	          continue

	        case S.DOCTYPE_DTD:
	          parser.doctype += c
	          if (c === ']') {
	            parser.state = S.DOCTYPE
	          } else if (is(quote, c)) {
	            parser.state = S.DOCTYPE_DTD_QUOTED
	            parser.q = c
	          }
	          continue

	        case S.DOCTYPE_DTD_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.state = S.DOCTYPE_DTD
	            parser.q = ''
	          }
	          continue

	        case S.COMMENT:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDING
	          } else {
	            parser.comment += c
	          }
	          continue

	        case S.COMMENT_ENDING:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDED
	            parser.comment = textopts(parser.opt, parser.comment)
	            if (parser.comment) {
	              emitNode(parser, 'oncomment', parser.comment)
	            }
	            parser.comment = ''
	          } else {
	            parser.comment += '-' + c
	            parser.state = S.COMMENT
	          }
	          continue

	        case S.COMMENT_ENDED:
	          if (c !== '>') {
	            strictFail(parser, 'Malformed comment')
	            // allow <!-- blah -- bloo --> in non-strict mode,
	            // which is a comment of " blah -- bloo "
	            parser.comment += '--' + c
	            parser.state = S.COMMENT
	          } else {
	            parser.state = S.TEXT
	          }
	          continue

	        case S.CDATA:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING
	          } else {
	            parser.cdata += c
	          }
	          continue

	        case S.CDATA_ENDING:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING_2
	          } else {
	            parser.cdata += ']' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.CDATA_ENDING_2:
	          if (c === '>') {
	            if (parser.cdata) {
	              emitNode(parser, 'oncdata', parser.cdata)
	            }
	            emitNode(parser, 'onclosecdata')
	            parser.cdata = ''
	            parser.state = S.TEXT
	          } else if (c === ']') {
	            parser.cdata += ']'
	          } else {
	            parser.cdata += ']]' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.PROC_INST:
	          if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else if (is(whitespace, c)) {
	            parser.state = S.PROC_INST_BODY
	          } else {
	            parser.procInstName += c
	          }
	          continue

	        case S.PROC_INST_BODY:
	          if (!parser.procInstBody && is(whitespace, c)) {
	            continue
	          } else if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else {
	            parser.procInstBody += c
	          }
	          continue

	        case S.PROC_INST_ENDING:
	          if (c === '>') {
	            emitNode(parser, 'onprocessinginstruction', {
	              name: parser.procInstName,
	              body: parser.procInstBody
	            })
	            parser.procInstName = parser.procInstBody = ''
	            parser.state = S.TEXT
	          } else {
	            parser.procInstBody += '?' + c
	            parser.state = S.PROC_INST_BODY
	          }
	          continue

	        case S.OPEN_TAG:
	          if (is(nameBody, c)) {
	            parser.tagName += c
	          } else {
	            newTag(parser)
	            if (c === '>') {
	              openTag(parser)
	            } else if (c === '/') {
	              parser.state = S.OPEN_TAG_SLASH
	            } else {
	              if (not(whitespace, c)) {
	                strictFail(parser, 'Invalid character in tag name')
	              }
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.OPEN_TAG_SLASH:
	          if (c === '>') {
	            openTag(parser, true)
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Forward-slash in opening tag not followed by >')
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.ATTRIB:
	          // haven't read the attribute name yet.
	          if (is(whitespace, c)) {
	            continue
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (c === '>') {
	            strictFail(parser, 'Attribute without value')
	            parser.attribValue = parser.attribName
	            attrib(parser)
	            openTag(parser)
	          } else if (is(whitespace, c)) {
	            parser.state = S.ATTRIB_NAME_SAW_WHITE
	          } else if (is(nameBody, c)) {
	            parser.attribName += c
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME_SAW_WHITE:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (is(whitespace, c)) {
	            continue
	          } else {
	            strictFail(parser, 'Attribute without value')
	            parser.tag.attributes[parser.attribName] = ''
	            parser.attribValue = ''
	            emitNode(parser, 'onattribute', {
	              name: parser.attribName,
	              value: ''
	            })
	            parser.attribName = ''
	            if (c === '>') {
	              openTag(parser)
	            } else if (is(nameStart, c)) {
	              parser.attribName = c
	              parser.state = S.ATTRIB_NAME
	            } else {
	              strictFail(parser, 'Invalid attribute name')
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.ATTRIB_VALUE:
	          if (is(whitespace, c)) {
	            continue
	          } else if (is(quote, c)) {
	            parser.q = c
	            parser.state = S.ATTRIB_VALUE_QUOTED
	          } else {
	            strictFail(parser, 'Unquoted attribute value')
	            parser.state = S.ATTRIB_VALUE_UNQUOTED
	            parser.attribValue = c
	          }
	          continue

	        case S.ATTRIB_VALUE_QUOTED:
	          if (c !== parser.q) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_Q
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          parser.q = ''
	          parser.state = S.ATTRIB_VALUE_CLOSED
	          continue

	        case S.ATTRIB_VALUE_CLOSED:
	          if (is(whitespace, c)) {
	            parser.state = S.ATTRIB
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            strictFail(parser, 'No whitespace between attributes')
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_VALUE_UNQUOTED:
	          if (not(attribEnd, c)) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_U
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          if (c === '>') {
	            openTag(parser)
	          } else {
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.CLOSE_TAG:
	          if (!parser.tagName) {
	            if (is(whitespace, c)) {
	              continue
	            } else if (not(nameStart, c)) {
	              if (parser.script) {
	                parser.script += '</' + c
	                parser.state = S.SCRIPT
	              } else {
	                strictFail(parser, 'Invalid tagname in closing tag.')
	              }
	            } else {
	              parser.tagName = c
	            }
	          } else if (c === '>') {
	            closeTag(parser)
	          } else if (is(nameBody, c)) {
	            parser.tagName += c
	          } else if (parser.script) {
	            parser.script += '</' + parser.tagName
	            parser.tagName = ''
	            parser.state = S.SCRIPT
	          } else {
	            if (not(whitespace, c)) {
	              strictFail(parser, 'Invalid tagname in closing tag')
	            }
	            parser.state = S.CLOSE_TAG_SAW_WHITE
	          }
	          continue

	        case S.CLOSE_TAG_SAW_WHITE:
	          if (is(whitespace, c)) {
	            continue
	          }
	          if (c === '>') {
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Invalid characters in closing tag')
	          }
	          continue

	        case S.TEXT_ENTITY:
	        case S.ATTRIB_VALUE_ENTITY_Q:
	        case S.ATTRIB_VALUE_ENTITY_U:
	          var returnState
	          var buffer
	          switch (parser.state) {
	            case S.TEXT_ENTITY:
	              returnState = S.TEXT
	              buffer = 'textNode'
	              break

	            case S.ATTRIB_VALUE_ENTITY_Q:
	              returnState = S.ATTRIB_VALUE_QUOTED
	              buffer = 'attribValue'
	              break

	            case S.ATTRIB_VALUE_ENTITY_U:
	              returnState = S.ATTRIB_VALUE_UNQUOTED
	              buffer = 'attribValue'
	              break
	          }

	          if (c === ';') {
	            parser[buffer] += parseEntity(parser)
	            parser.entity = ''
	            parser.state = returnState
	          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
	            parser.entity += c
	          } else {
	            strictFail(parser, 'Invalid character in entity name')
	            parser[buffer] += '&' + parser.entity + c
	            parser.entity = ''
	            parser.state = returnState
	          }

	          continue

	        default:
	          throw new Error(parser, 'Unknown state: ' + parser.state)
	      }
	    } // while

	    if (parser.position >= parser.bufferCheckPosition) {
	      checkBufferLength(parser)
	    }
	    return parser
	  }

	  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
	  if (!String.fromCodePoint) {
	    (function () {
	      var stringFromCharCode = String.fromCharCode
	      var floor = Math.floor
	      var fromCodePoint = function () {
	        var MAX_SIZE = 0x4000
	        var codeUnits = []
	        var highSurrogate
	        var lowSurrogate
	        var index = -1
	        var length = arguments.length
	        if (!length) {
	          return ''
	        }
	        var result = ''
	        while (++index < length) {
	          var codePoint = Number(arguments[index])
	          if (
	            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	            codePoint < 0 || // not a valid Unicode code point
	            codePoint > 0x10FFFF || // not a valid Unicode code point
	            floor(codePoint) !== codePoint // not an integer
	          ) {
	            throw RangeError('Invalid code point: ' + codePoint)
	          }
	          if (codePoint <= 0xFFFF) { // BMP code point
	            codeUnits.push(codePoint)
	          } else { // Astral code point; split in surrogate halves
	            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	            codePoint -= 0x10000
	            highSurrogate = (codePoint >> 10) + 0xD800
	            lowSurrogate = (codePoint % 0x400) + 0xDC00
	            codeUnits.push(highSurrogate, lowSurrogate)
	          }
	          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
	            result += stringFromCharCode.apply(null, codeUnits)
	            codeUnits.length = 0
	          }
	        }
	        return result
	      }
	      if (Object.defineProperty) {
	        Object.defineProperty(String, 'fromCodePoint', {
	          value: fromCodePoint,
	          configurable: true,
	          writable: true
	        })
	      } else {
	        String.fromCodePoint = fromCodePoint
	      }
	    }())
	  }
	})( false ? this.sax = {} : exports)


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _path = __webpack_require__(389);

	var path = _interopRequireWildcard(_path);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _yamljs = __webpack_require__(344);

	var YAML = _interopRequireWildcard(_yamljs);

	var _localUtils = __webpack_require__(332);

	var lu = _interopRequireWildcard(_localUtils);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	global._LOG = true;

	var logger = __webpack_require__(503);

	var log = __webpack_require__(498).open("http");

	var clientNamesPath = path.resolve("./clients");

	// require( `watchStop` )
	// 	( clientNamesPath )

	var clientNames = Object.create(null);
	var clientFile = lu.catch(function () {
	  return YAML.load(clientNamesPath);
	}, lu.returnNull);
	var clientDebug = clientFile && clientFile.debug && clientFile.debug.split(/\s+/) || [];
	if (clientFile) {
	  delete clientFile.debug;
	  lodash.forEach(clientFile, function (ids, name) {
	    ids.split(/\s+/).filter(Boolean).forEach(function (id) {
	      return clientNames[id] = name;
	    });
	  });
	}
	var clients = Object.create(null);

	var timeout = 3600000;
	setInterval(function () {
	  var now = Date.now();
	  lodash.forEach(clients, function (date, instanceID) {
	    if (now - date > timeout) delete clients[instanceID];
	  });
	}, timeout);

	logger.token("cookie", function (request) {
	  return request.headers.cookie;
	});
	logger.token("startTime", function (request) {
	  return request.startTime;
	});
	logger.token("requestTime", function (request) {
	  return lu.formatms(new Date() - request.startTime) + "s";
	});
	logger.token("instanceID", function (request) {
	  return request.clientID;
	});

	logger.token("manifestHeaders", function (request, response) {
	  if (!request.url.match(/\.manifest(\?|$)/)) return "";
	  var ret = "\n" + request.method + " " + request.url;
	  request.rawHeaders.forEach(function (str, index) {
	    ret += index % 2 ? ": " : "\n";
	    ret += str;
	  });
	  return ret;
	});

	var L = logger(":remote-addr".blue + " " + ":instanceID".blue + " :remote-user [:date] \"" + ":method".green + " " + ":url".cyan + " HTTP/:http-version\" " + ":status".green + " :res[content-length] \":referrer\" \":user-agent\" " + ":requestTime".yellow + ":manifestHeaders", { stream: { write: function write(buf) {
	      return log.log(String(buf));
	    } } });

	var cookieInfinite = { expires: new Date("Fri, 31-Dec-9999 23:59:59 GMT") };

	exports.default = function (request, response, next) {

	  var instanceID = void 0;
	  if (request.cookies) {
	    var debug = !!process.env.DEVELOPMENT || function () {
	      instanceID = request.cookies.instanceID;
	      if (!instanceID) {
	        instanceID = request.cookies.instanceID = (0, _uid2.default)();
	        log.log(("new client connected: " + instanceID).red);
	        response.cookie("instanceID", instanceID, cookieInfinite);
	      }
	      clients[instanceID] = Date.now();
	      var name = clientNames[instanceID];
	      return clientDebug.indexOf(instanceID) >= 0 || name && clientDebug.indexOf(name) >= 0;
	    }();
	    if (!!debug != !!request.cookies.instanceDebug) if (debug) response.cookie("instanceDebug", "debug", cookieInfinite);else response.clearCookie("instanceDebug");
	  }

	  if (global._LOG) {
	    log.log(request.method + " " + request.url.green);
	    request.startTime = new Date();
	    request.clientID = instanceID && (clientNames[instanceID] || instanceID) || '?';
	    L(request, response, next);
	  } else next();
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * morgan
	 * Copyright(c) 2010 Sencha Inc.
	 * Copyright(c) 2011 TJ Holowaychuk
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = morgan
	module.exports.compile = compile
	module.exports.format = format
	module.exports.token = token

	/**
	 * Module dependencies.
	 * @private
	 */

	var auth = __webpack_require__(504)
	var debug = __webpack_require__(413)('morgan')
	var deprecate = __webpack_require__(447)('morgan')
	var onFinished = __webpack_require__(437)
	var onHeaders = __webpack_require__(417)

	/**
	 * Array of CLF month names.
	 * @private
	 */

	var clfmonth = [
	  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
	]

	/**
	 * Default log buffer duration.
	 * @private
	 */

	var defaultBufferDuration = 1000;

	/**
	 * Create a logger middleware.
	 *
	 * @public
	 * @param {String|Function} format
	 * @param {Object} [options]
	 * @return {Function} middleware
	 */

	function morgan(format, options) {
	  var fmt = format
	  var opts = options || {}

	  if (format && typeof format === 'object') {
	    opts = format
	    fmt = opts.format || 'default'

	    // smart deprecation message
	    deprecate('morgan(options): use morgan(' + (typeof fmt === 'string' ? JSON.stringify(fmt) : 'format') + ', options) instead')
	  }

	  if (fmt === undefined) {
	    deprecate('undefined format: specify a format')
	  }

	  // output on request instead of response
	  var immediate = opts.immediate

	  // check if log entry should be skipped
	  var skip = opts.skip || false

	  // format function
	  var formatLine = typeof fmt !== 'function'
	    ? getFormatFunction(fmt)
	    : fmt

	  // stream
	  var buffer = opts.buffer
	  var stream = opts.stream || process.stdout

	  // buffering support
	  if (buffer) {
	    deprecate('buffer option')

	    // flush interval
	    var interval = typeof buffer !== 'number'
	      ? defaultBufferDuration
	      : buffer

	    // swap the stream
	    stream = createBufferStream(stream, interval)
	  }

	  return function logger(req, res, next) {
	    // request data
	    req._startAt = undefined
	    req._startTime = undefined
	    req._remoteAddress = getip(req)

	    // response data
	    res._startAt = undefined
	    res._startTime = undefined

	    // record request start
	    recordStartTime.call(req)

	    function logRequest() {
	      if (skip !== false && skip(req, res)) {
	        debug('skip request')
	        return
	      }

	      var line = formatLine(morgan, req, res)

	      if (null == line) {
	        debug('skip line')
	        return
	      }

	      debug('log request')
	      stream.write(line + '\n')
	    };

	    if (immediate) {
	      // immediate log
	      logRequest()
	    } else {
	      // record response start
	      onHeaders(res, recordStartTime)

	      // log when response finished
	      onFinished(res, logRequest)
	    }

	    next();
	  };
	}

	/**
	 * Apache combined log format.
	 */

	morgan.format('combined', ':remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"')

	/**
	 * Apache common log format.
	 */

	morgan.format('common', ':remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length]')

	/**
	 * Default format.
	 */

	morgan.format('default', ':remote-addr - :remote-user [:date] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"')
	deprecate.property(morgan, 'default', 'default format: use combined format')

	/**
	 * Short format.
	 */

	morgan.format('short', ':remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms')

	/**
	 * Tiny format.
	 */

	morgan.format('tiny', ':method :url :status :res[content-length] - :response-time ms')

	/**
	 * dev (colored)
	 */

	morgan.format('dev', function developmentFormatLine(tokens, req, res) {
	  // get the status code if response written
	  var status = res._header
	    ? res.statusCode
	    : undefined

	  // get status color
	  var color = status >= 500 ? 31 // red
	    : status >= 400 ? 33 // yellow
	    : status >= 300 ? 36 // cyan
	    : status >= 200 ? 32 // green
	    : 0 // no color

	  // get colored function
	  var fn = developmentFormatLine[color]

	  if (!fn) {
	    // compile
	    fn = developmentFormatLine[color] = compile('\x1b[0m:method :url \x1b['
	      + color + 'm:status \x1b[0m:response-time ms - :res[content-length]\x1b[0m')
	  }

	  return fn(tokens, req, res)
	})

	/**
	 * request url
	 */

	morgan.token('url', function getUrlToken(req) {
	  return req.originalUrl || req.url
	})

	/**
	 * request method
	 */

	morgan.token('method', function getMethodToken(req) {
	  return req.method;
	});

	/**
	 * response time in milliseconds
	 */

	morgan.token('response-time', function getResponseTimeToken(req, res, digits) {
	  if (!req._startAt || !res._startAt) {
	    // missing request and/or response start time
	    return
	  }

	  // calculate diff
	  var ms = (res._startAt[0] - req._startAt[0]) * 1e3
	    + (res._startAt[1] - req._startAt[1]) * 1e-6

	  // return truncated value
	  return ms.toFixed(digits === undefined ? 3 : digits)
	})

	/**
	 * current date
	 */

	morgan.token('date', function getDateToken(req, res, format) {
	  var date = new Date()

	  switch (format || 'web') {
	    case 'clf':
	      return clfdate(date)
	    case 'iso':
	      return date.toISOString()
	    case 'web':
	      return date.toUTCString()
	  }
	});

	/**
	 * response status code
	 */

	morgan.token('status', function getStatusToken(req, res) {
	  return res._header
	    ? String(res.statusCode)
	    : undefined
	})

	/**
	 * normalized referrer
	 */

	morgan.token('referrer', function getReferrerToken(req) {
	  return req.headers['referer'] || req.headers['referrer'];
	});

	/**
	 * remote address
	 */

	morgan.token('remote-addr', getip)

	/**
	 * remote user
	 */

	morgan.token('remote-user', function getRemoteUserToken(req) {
	  // parse basic credentials
	  var credentials = auth(req)

	  // return username
	  return credentials
	    ? credentials.name
	    : undefined
	})

	/**
	 * HTTP version
	 */

	morgan.token('http-version', function getHttpVersionToken(req) {
	  return req.httpVersionMajor + '.' + req.httpVersionMinor
	})

	/**
	 * UA string
	 */

	morgan.token('user-agent', function getUserAgentToken(req) {
	  return req.headers['user-agent'];
	});

	/**
	 * request header
	 */

	morgan.token('req', function getRequestToken(req, res, field) {
	  // get header
	  var header = req.headers[field.toLowerCase()]

	  return Array.isArray(header)
	    ? header.join(', ')
	    : header
	})

	/**
	 * response header
	 */

	morgan.token('res', function getResponseTime(req, res, field) {
	  if (!res._header) {
	    return undefined
	  }

	  // get header
	  var header = res.getHeader(field)

	  return Array.isArray(header)
	    ? header.join(', ')
	    : header
	})

	/**
	 * Format a Date in the common log format.
	 *
	 * @private
	 * @param {Date} dateTime
	 * @return {string}
	 */

	function clfdate(dateTime) {
	  var date = dateTime.getUTCDate()
	  var hour = dateTime.getUTCHours()
	  var mins = dateTime.getUTCMinutes()
	  var secs = dateTime.getUTCSeconds()
	  var year = dateTime.getUTCFullYear()

	  var month = clfmonth[dateTime.getUTCMonth()]

	  return pad2(date) + '/' + month + '/' + year
	    + ':' + pad2(hour) + ':' + pad2(mins) + ':' + pad2(secs)
	    + ' +0000'
	}

	/**
	 * Compile a format string into a function.
	 *
	 * @param {string} format
	 * @return {function}
	 * @public
	 */

	function compile(format) {
	  if (typeof format !== 'string') {
	    throw new TypeError('argument format must be a string')
	  }

	  var fmt = format.replace(/"/g, '\\"')
	  var js = '  return "' + fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function(_, name, arg) {
	    return '"\n    + (tokens["' + name + '"](req, res, ' + String(JSON.stringify(arg)) + ') || "-") + "'
	  }) + '";'

	  return new Function('tokens, req, res', js)
	}

	/**
	 * Create a basic buffering stream.
	 *
	 * @param {object} stream
	 * @param {number} interval
	 * @public
	 */

	function createBufferStream(stream, interval) {
	  var buf = []
	  var timer = null

	  // flush function
	  function flush() {
	    timer = null
	    stream.write(buf.join(''))
	    buf.length = 0
	  }

	  // write function
	  function write(str) {
	    if (timer === null) {
	      timer = setTimeout(flush, interval)
	    }

	    buf.push(str)
	  }

	  // return a minimal "stream"
	  return { write: write }
	}

	/**
	 * Define a format with the given name.
	 *
	 * @param {string} name
	 * @param {string|function} fmt
	 * @public
	 */

	function format(name, fmt) {
	  morgan[name] = fmt
	  return this
	}

	/**
	 * Lookup and compile a named format function.
	 *
	 * @param {string} name
	 * @return {function}
	 * @public
	 */

	function getFormatFunction(name) {
	  // lookup format
	  var fmt = morgan[name] || name || morgan.default

	  // return compiled format
	  return typeof fmt !== 'function'
	    ? compile(fmt)
	    : fmt
	}

	/**
	 * Get request IP address.
	 *
	 * @private
	 * @param {IncomingMessage} req
	 * @return {string}
	 */

	function getip(req) {
	  return req.ip
	    || req._remoteAddress
	    || (req.connection && req.connection.remoteAddress)
	    || undefined;
	}

	/**
	 * Pad number to two digits.
	 *
	 * @private
	 * @param {number} num
	 * @return {string}
	 */

	function pad2(num) {
	  var str = String(num)

	  return (str.length === 1 ? '0' : '')
	    + str
	}

	/**
	 * Record the start time.
	 * @private
	 */

	function recordStartTime() {
	  this._startAt = process.hrtime()
	  this._startTime = new Date()
	}

	/**
	 * Define a token function with the given name,
	 * and callback fn(req, res).
	 *
	 * @param {string} name
	 * @param {function} fn
	 * @public
	 */

	function token(name, fn) {
	  morgan[name] = fn
	  return this
	}


/***/ },
/* 504 */
/***/ function(module, exports) {

	/*!
	 * basic-auth
	 * Copyright(c) 2013 TJ Holowaychuk
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	'use strict'

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = auth

	/**
	 * RegExp for basic auth credentials
	 *
	 * credentials = auth-scheme 1*SP token68
	 * auth-scheme = "Basic" ; case insensitive
	 * token68     = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" ) *"="
	 * @private
	 */

	var credentialsRegExp = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9\-\._~\+\/]+=*) *$/

	/**
	 * RegExp for basic auth user/pass
	 *
	 * user-pass   = userid ":" password
	 * userid      = *<TEXT excluding ":">
	 * password    = *TEXT
	 * @private
	 */

	var userPassRegExp = /^([^:]*):(.*)$/

	/**
	 * Parse the Authorization header field of a request.
	 *
	 * @param {object} req
	 * @return {object} with .name and .pass
	 * @public
	 */

	function auth(req) {
	  if (!req) {
	    throw new TypeError('argument req is required')
	  }

	  // get header
	  var header = (req.req || req).headers.authorization

	  // parse header
	  var match = credentialsRegExp.exec(header || '')

	  if (!match) {
	    return
	  }

	  // decode user pass
	  var userPass = userPassRegExp.exec(decodeBase64(match[1]))

	  if (!userPass) {
	    return
	  }

	  // return credentials object
	  return new Credentials(userPass[1], userPass[2])
	}

	/**
	 * Decode base64 string.
	 * @private
	 */

	function decodeBase64(str) {
	  return new Buffer(str, 'base64').toString()
	}

	/**
	 * Object to represent user credentials.
	 * @private
	 */

	function Credentials(name, pass) {
	  this.name = name
	  this.pass = pass
	}


/***/ },
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _this8 = this;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	__webpack_require__(357);

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _yamljs = __webpack_require__(344);

	var YAML = _interopRequireWildcard(_yamljs);

	var _path = __webpack_require__(389);

	var path = _interopRequireWildcard(_path);

	var _util = __webpack_require__(325);

	var util = _interopRequireWildcard(_util);

	var _fs = __webpack_require__(350);

	var fs = _interopRequireWildcard(_fs);

	var _os = __webpack_require__(369);

	var os = _interopRequireWildcard(_os);

	var _httpStatus = __webpack_require__(331);

	var HTTPStatus = _interopRequireWildcard(_httpStatus);

	var _http = __webpack_require__(326);

	var http = _interopRequireWildcard(_http);

	var _url = __webpack_require__(324);

	var url = _interopRequireWildcard(_url);

	var _net = __webpack_require__(323);

	var net = _interopRequireWildcard(_net);

	var _crypto = __webpack_require__(400);

	var crypto = _interopRequireWildcard(_crypto);

	var _stream_dbg = __webpack_require__(337);

	var stream = _interopRequireWildcard(_stream_dbg);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _ra = __webpack_require__(420);

	var _ra2 = _interopRequireDefault(_ra);

	var _localUtils = __webpack_require__(332);

	var lu = _interopRequireWildcard(_localUtils);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _defun = __webpack_require__(333);

	var _defun2 = _interopRequireDefault(_defun);

	var _obj_diff = __webpack_require__(422);

	var Diff = _interopRequireWildcard(_obj_diff);

	var _leds = __webpack_require__(540);

	var leds = _interopRequireWildcard(_leds);

	var _dbc = __webpack_require__(541);

	var dbc = _interopRequireWildcard(_dbc);

	var _dbs = __webpack_require__(542);

	var dbs = _interopRequireWildcard(_dbs);

	var _connection = __webpack_require__(543);

	var _connection2 = _interopRequireDefault(_connection);

	var _log = __webpack_require__(498);

	var Log = _interopRequireWildcard(_log);

	var _localdns = __webpack_require__(545);

	var _localdns2 = _interopRequireDefault(_localdns);

	var _http_log = __webpack_require__(502);

	var _http_log2 = _interopRequireDefault(_http_log);

	var _compression = __webpack_require__(401);

	var _compression2 = _interopRequireDefault(_compression);

	var _socket = __webpack_require__(546);

	var _socket2 = _interopRequireDefault(_socket);

	var _dataStream = __webpack_require__(334);

	var _dataStream2 = _interopRequireDefault(_dataStream);

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	var _stringChunk = __webpack_require__(554);

	var _stringChunk2 = _interopRequireDefault(_stringChunk);

	var _http_common_server = __webpack_require__(396);

	var _http_common_server2 = _interopRequireDefault(_http_common_server);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	// TODO:

	// window.webkitRTCPeerConnection

	// https://letsencrypt.org/

	// bot for TELEGRAM.

	// TODO:
	// - паведамленьні на экране - пра памылкі розныя.
	// - абнаўленьне статусу прылады пасьля групавой аперацыі
	// - статус прылады "...усё добра..."
	// - статус прылады "...усё добра, у працэсе абнаўленьня..."
	// - статус прылады "...памылка, у працэсе абнаўленьня..."
	// - усе аперацыі праводзіць праз драйвер БД, якому перадаецца драйвер мадэма. Драйвер БД для аперацыі вяртае абнаўленьне да БД, якое прымяняецца на баку кліента для адлюстраваньня часовых зьменаў і на баку сервера для адлюстраваньня пастаянных зьменаў

	_bluebird2.default.promisifyAll(fs);
	// import legacyNetroConnection from "netro/connection"

	var log = Log.open("srv");

	leds.set(0, "green").catch(lodash.noop);

	var expand = function expand(str) {
	  return str && str.replace(/\$\(.*?\)/g, function (v) {
	    return process.env[v] || "";
	  });
	};
	process.env.root = "./";

	var configName = expand(process.argv[2] || "$(root)server.conf");
	var config = lu.catch(function () {
	  return YAML.load(configName);
	}, lu.returnNull);

	var updateInterfacesInterval = 2000;

	config = lodash.merge({
	  port: 80,
	  serviceport: 8088,
	  modem: "/tmp/netro.socket", // 2233,
	  modem_address: null,
	  modem_ping_interval: 60000,
	  localdns: null, // 53, // { port: 53, },
	  boss: "controller.sh.neroelectronics.by:8011",
	  auth: "./user.conf",
	  restoreConnectionInterval: 2000,
	  var: "./var",
	  firmware: {
	    version: "./manager/SHModem.json",
	    binary: "./manager/SHModem.bin"
	  }
	}, config);

	var _arr = ["auth", "var", "modemProxy"];
	for (var _i = 0; _i < _arr.length; _i++) {
	  var i = _arr[_i];
	  config[i] = config[i] && path.resolve(path.dirname(configName), expand(config[i]));
	}log.log("config", "config: ".red + " " + util.inspect(config));

	fs.mkdir(config.var, lodash.noop);

	if (process.env.DEVELOPMENT) {
	  console.log("setting reboot on file changes: \"" + process.env.DEVELOPMENT + "\"");
	  __webpack_require__(356)(configName)(config.auth)("./templates/")("./templates/locations/");
	} else console.log("Do not setting reboot on file changes.");

	(0, _localdns2.default)(config);

	var internalModemService = "/tmp/" + (0, _uid2.default)();
	var auth = lu.catch(function () {
	  return YAML.load(config.auth);
	}, lu.returnNull);

	auth = lodash.merge({
	  name: "nero"
	}, auth);

	if (auth && !auth.modem) throw new Error("modem name required in user configuration file");
	if (auth && !auth.name) throw new Error("name required in user configuration file");
	if (auth && !auth.userkey) throw new Error("userkey required in user configuration file");

	if (auth) {
	  var s = crypto.createHash("sha256");
	  s.update(JSON.stringify([String(auth.name || null), String(auth.userkey || null), String(auth.modemkey || null), String(auth.modem || null)]));
	  auth.hash = s.digest("hex");
	}

	var authMessage = "Smart Home";

	function interfaceToUrl(intf) {
	  var port = arguments.length <= 1 || arguments[1] === undefined ? intf.port : arguments[1];

	  var a = intf.address;
	  if (intf.family == "IPv6") a = "[" + a + "]";
	  return "http://" + a + ":" + port;
	}

	var service = (0, _ra2.default)({
	  interfacesTimer: true,
	  get updateInterfacesTimer() {
	    setInterval(function () {
	      return service.live.interfacesTimer.touch();
	    }, updateInterfacesInterval);
	  },
	  interfaces: _ra2.default.Getter(function () {
	    var _ref;

	    return service.interfacesTimer && (_ref = []).concat.apply(_ref, _toConsumableArray(lodash.map(os.networkInterfaces(), function (ni) {
	      return ni.filter(function (i) {
	        return !i.internal && !i.scopeid;
	      }).map(function (i) {
	        return {
	          url: interfaceToUrl(i, config.serviceport)
	        };
	      });
	    })));
	  }, lu.JSONEqual)
	});

	var modem = (0, _ra2.default)({
	  connection: null,
	  createConnection: function createConnection() {
	    var _this = this;

	    // return this.connection = legacyNetroConnection( log )
	    var socket = net.connect.apply(net, [config.modem].concat(_toConsumableArray([config.modem_address].filter(Boolean)), [function () {
	      return _this.connection = (0, _connection2.default)(socket);
	    }]));
	    socket.on("end", function () {
	      _this.connection = null;
	      setTimeout(_this.createConnection, 2000);
	      console.log("+++", new Date(), "modem socket ended.");
	    });
	  },


	  get _createConnection() {
	    this.createConnection();
	  },

	  get firmwareDiskVersion() {
	    return function _callee() {
	      return regeneratorRuntime.async(function _callee$(_context4) {
	        while (1) switch (_context4.prev = _context4.next) {
	          case 0:
	            _context4.t0 = JSON;
	            _context4.next = 3;
	            return regeneratorRuntime.awrap(fs.readFileAsync(config.firmware.version));

	          case 3:
	            _context4.t1 = _context4.sent;
	            _context4.t2 = String(_context4.t1);
	            return _context4.abrupt("return", _context4.t0.parse.call(_context4.t0, _context4.t2));

	          case 6:
	          case "end":
	            return _context4.stop();
	        }
	      }, null, this);
	    }();
	  },
	  get _showFirmwareDiskVersion() {
	    this.firmwareDiskVersion && console.log("file: ", this.firmwareDiskVersion);
	  },
	  get firmwareDiskBinary() {
	    return fs.readFileAsync(config.firmware.binary);
	  },

	  modemVersion: null,
	  get _checkModem() {
	    return regeneratorRuntime.mark(function _callee2() {
	      var v, updateFirmware;
	      return regeneratorRuntime.wrap(function _callee2$(_context5) {
	        while (1) switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.prev = 0;

	          case 1:
	            if (!this.connection) {
	              _context5.next = 33;
	              break;
	            }

	            v = void 0;
	            _context5.prev = 3;
	            _context5.next = 6;
	            return this.connection.GetVersion();

	          case 6:
	            v = _context5.sent;
	            _context5.next = 15;
	            break;

	          case 9:
	            _context5.prev = 9;
	            _context5.t0 = _context5["catch"](3);

	            this.modemVersion = null;
	            _context5.next = 14;
	            return _bluebird2.default.delay(2000);

	          case 14:
	            return _context5.abrupt("continue", 1);

	          case 15:
	            updateFirmware = false;

	            try {
	              updateFirmware = this.firmwareDiskVersion && this.firmwareDiskBinary && !lodash.isEqual(this.firmwareDiskVersion, v);
	            } catch (_) {
	              // noop
	            }

	            if (!updateFirmware) {
	              _context5.next = 24;
	              break;
	            }

	            this.modemVersion = null;
	            console.info(("Updating firmware from " + JSON.stringify(v).blue + " to " + JSON.stringify(this.firmwareDiskVersion)).red);
	            _context5.next = 22;
	            return this.connection.UpdateFirmware(this.firmwareDiskBinary);

	          case 22:
	            _context5.next = 31;
	            break;

	          case 24:
	            if (!lodash.isEqual(this.modemVersion, v)) {
	              _context5.next = 29;
	              break;
	            }

	            _context5.next = 27;
	            return _bluebird2.default.delay(config.modem_ping_interval);

	          case 27:
	            _context5.next = 31;
	            break;

	          case 29:
	            this.modemVersion = v;
	            console.info(v);

	          case 31:
	            _context5.next = 1;
	            break;

	          case 33:
	            _context5.prev = 33;

	            this.modemVersion = null;
	            return _context5.finish(33);

	          case 36:
	          case "end":
	            return _context5.stop();
	        }
	      }, _callee2, this, [[0,, 33, 36], [3, 9]]);
	    }).call(this);
	  },

	  // TODO: use ra.reducer
	  _firstPtr: _ra2.default.Opaque((0, _ra2.default)({
	    sourcePtr: null,
	    destPtr: null,
	    result: null
	  })),
	  get devices() {
	    return this._firstPtr.result;
	  },

	  _history: _ra2.default.Opaque(Object.create(null)),
	  _historySize: 0,

	  appendToHistory: function appendToHistory(result) {
	    if (result.uid == null || this._history[result.uid] != result) {
	      while (this._historySize >= 2000) {
	        for (var key in this._history) {
	          delete this._history[key];
	          --this._historySize;
	        }
	      }if (result.uid == null || this._history[result.uid] != null) result = Diff.apply(result, { uid: (0, _uid2.default)() });
	      this._history[result.uid] = result;
	      ++this._historySize;
	    }
	    return result;
	  },


	  file: config.var + "/database",

	  _saved: null,

	  get _initDevices() {
	    return regeneratorRuntime.mark(function _callee3() {
	      var json, text;
	      return regeneratorRuntime.wrap(function _callee3$(_context6) {
	        while (1) switch (_context6.prev = _context6.next) {
	          case 0:
	            json = void 0;
	            _context6.prev = 1;
	            _context6.next = 4;
	            return fs.readFileAsync(this.file);

	          case 4:
	            _context6.t0 = _context6.sent;
	            text = String(_context6.t0);

	            try {
	              json = YAML.parse(text);
	            } catch (_) {
	              json = JSON.parse(text);
	            }
	            _context6.next = 11;
	            break;

	          case 9:
	            _context6.prev = 9;
	            _context6.t1 = _context6["catch"](1);

	          case 11:
	            // noop

	            this._saved = this._firstPtr.result = this.appendToHistory(json || Object.create(null));

	          case 12:
	          case "end":
	            return _context6.stop();
	        }
	      }, _callee3, this, [[1, 9]]);
	    }).call(this);
	  },

	  get _saveDevices() {
	    return regeneratorRuntime.mark(function _callee4() {
	      return regeneratorRuntime.wrap(function _callee4$(_context7) {
	        while (1) switch (_context7.prev = _context7.next) {
	          case 0:
	            if (!(this._saved == this._firstPtr.result)) {
	              _context7.next = 2;
	              break;
	            }

	            return _context7.abrupt("return");

	          case 2:
	            _context7.next = 4;
	            return _bluebird2.default.delay(1000);

	          case 4:
	            _context7.next = 6;
	            return fs.writeFileAsync(this.file, JSON.stringify(this._firstPtr.result, null, "\t"));

	          case 6:
	            this._saved = this._firstPtr.result;

	          case 7:
	          case "end":
	            return _context7.stop();
	        }
	      }, _callee4, this);
	    }).call(this);
	  },

	  // TODO: move to CRON.
	  get _backupDevices() {
	    return regeneratorRuntime.mark(function _callee5() {
	      return regeneratorRuntime.wrap(function _callee5$(_context8) {
	        while (1) switch (_context8.prev = _context8.next) {
	          case 0:
	            _context8.next = 2;
	            return _bluebird2.default.delay(3600 * 1000);

	          case 2:
	            _context8.next = 4;
	            return fs.writeFileAsync(this.file + "." + this.devices.uid, JSON.stringify(this.devices, null, "\t"));

	          case 4:
	          case "end":
	            return _context8.stop();
	        }
	      }, _callee5, this);
	    }).call(this);
	  },

	  get _checkDevices() {
	    return regeneratorRuntime.mark(function _callee6() {
	      var _this2 = this,
	          _this3 = this;

	      var source, ret;
	      return regeneratorRuntime.wrap(function _callee6$(_context9) {
	        while (1) switch (_context9.prev = _context9.next) {
	          case 0:
	            _context9.next = 2;
	            return _bluebird2.default.delay(5000);

	          case 2:
	            // force correct indices after changes
	            source = this._firstPtr.result;
	            ret = dbs.cleanDatabase(source);

	            if (ret) {
	              console.log(JSON.stringify(source, null, "   ").red);
	              console.log(JSON.stringify(Diff.apply(source, ret), null, "   ").green);
	              console.log(JSON.stringify(ret, null, "   ").blue);
	            }
	            if (ret) process.nextTick(function () {
	              if (source != _this2._firstPtr.result) log.fatal("modem", "DEVICES CHANGED");else _this3._firstPtr.result = _this3.appendToHistory(Diff.apply(source, ret));
	            });

	          case 6:
	          case "end":
	            return _context9.stop();
	        }
	      }, _callee6, this);
	    }).call(this);
	  },

	  //TODO: ra.reducer
	  _commands: [],

	  _lastPtr: (0, _ra2.default)({
	    sourcePtr: null,
	    destPtr: null,
	    get result() {
	      return this.sourcePtr && this.sourcePtr.result;
	    }
	  }),

	  get _initPtrs() {
	    this._firstPtr.destPtr = this._lastPtr;
	    this._lastPtr.sourcePtr = this._firstPtr;
	  },

	  get cdevices() {
	    return this._lastPtr && this._lastPtr.result && this.appendToHistory(this._lastPtr.result);
	  },
	  getDevicesForClient: function getDevicesForClient(uid) {
	    return !this._history[uid] ? Object.assign({ __partial__: false }, this.cdevices) : Object.assign({ __partial__: true }, Diff.make(this._history[uid], this.cdevices));
	  },


	  _DB: _ra2.default.Opaque({
	    read: function read() {
	      return modem._firstPtr.result;
	    },
	    apply: function apply(diff) {
	      var ret = modem.appendToHistory(Diff.apply(modem._firstPtr.result, diff));
	      modem._firstPtr.result = modem._firstPtr.destPtr.result = ret;
	      return ret;
	    }
	  }),

	  get canAcceptCommands() {
	    return Boolean(!this.updatingFirmware && this.modemVersion && this.devices);
	  },

	  get _bootstrapIdleCommands() {
	    var _this4 = this;

	    if (this.canAcceptCommands) process.nextTick(function () {
	      return _this4.userCommand({ command: "", data: null });
	    });
	  },

	  userCommand: function userCommand(_ref2) {
	    var _this5 = this;

	    var command = _ref2.command;
	    var _ref2$data = _ref2.data;
	    var data = _ref2$data === undefined ? 0 : _ref2$data;
	    return regeneratorRuntime.async(function userCommand$(_context11) {
	      while (1) switch (_context11.prev = _context11.next) {
	        case 0:
	          _context11.next = 2;
	          return regeneratorRuntime.awrap(_ra2.default.wait(function () {
	            return _this5.canAcceptCommands;
	          }, 9000));

	        case 2:
	          _context11.next = 4;
	          return regeneratorRuntime.awrap(new _bluebird2.default(function (resolve, reject) {

	            var first = _this5._firstPtr;
	            var last = _this5._lastPtr;
	            var prev = last.sourcePtr;

	            var priority = dbc.priority[command];
	            if (!Number.isFinite(priority)) priority = 0;

	            var c = (0, _ra2.default)({
	              command: _ra2.default.Opaque(command),
	              priority: priority,
	              data: _ra2.default.Opaque(data),

	              sourcePtr: null,
	              destPtr: null,

	              get source() {
	                return this.sourcePtr && this.sourcePtr.result;
	              },
	              result: _ra2.default.Opaque(last.result),

	              srvCommand: null,
	              srvData: null,
	              running: false,

	              destroy: function destroy() {
	                var error = arguments.length <= 0 || arguments[0] === undefined ? "unknown modem error" : arguments[0];

	                this.destPtr.sourcePtr = this.sourcePtr;
	                this.sourcePtr.destPtr = this.destPtr;
	                reject(new Error(error));
	                _ra2.default.close.call(this);
	              },


	              get _preRun() {
	                var _this6 = this;

	                if (this.source && !this.running) {
	                  var _ref3 = function () {
	                    if (command) {
	                      var _context;

	                      if (!(_context = dbc.commands, Object.prototype.hasOwnProperty).call(_context, command)) throw new Error("unknown client command: " + command);
	                      return dbc.commands[command](_this6.source, data);
	                    } else return [_this6.source];
	                  }();

	                  var _ref4 = _slicedToArray(_ref3, 3);

	                  var result = _ref4[0];
	                  var srvCommand = _ref4[1];
	                  var srvData = _ref4[2];

	                  this.result = modem.appendToHistory(result);
	                  if (srvCommand) {
	                    this.srvCommand = srvCommand;
	                    this.srvData = srvData;
	                  } else {
	                    // TODO: assign highest priority to such a light command
	                    this.srvCommand = "";
	                  }
	                }
	              },

	              get _run() {
	                var _this7 = this;

	                if (this.sourcePtr != first || this.srvCommand == null) return;
	                this.running = true;
	                process.nextTick(function _callee7() {
	                  var errormsg, _context2;

	                  return regeneratorRuntime.async(function _callee7$(_context10) {
	                    while (1) switch (_context10.prev = _context10.next) {
	                      case 0:
	                        errormsg = [];
	                        _context10.prev = 1;

	                        // assign result to db and let dbs complete the job.
	                        first.result = _this7.result;

	                        if (!_this7.srvCommand) {
	                          _context10.next = 12;
	                          break;
	                        }

	                        if ((_context2 = dbs.commands, Object.prototype.hasOwnProperty).call(_context2, _this7.srvCommand)) {
	                          _context10.next = 6;
	                          break;
	                        }

	                        throw new Error("unknown internal command: " + _this7.srvCommand);

	                      case 6:
	                        _context10.next = 8;
	                        return regeneratorRuntime.awrap(dbs.commands[_this7.srvCommand](modem.connection, modem._DB, _this7.srvData));

	                      case 8:
	                        _context10.t0 = _context10.sent;
	                        resolve(_context10.t0);
	                        _context10.next = 13;
	                        break;

	                      case 12:
	                        resolve();

	                      case 13:
	                        _context10.next = 19;
	                        break;

	                      case 15:
	                        _context10.prev = 15;
	                        _context10.t1 = _context10["catch"](1);

	                        errormsg.push(_context10.t1.message);
	                        console.error(_context10.t1); // we are in the nextTick. do log errors.

	                      case 19:
	                        if (!(_this7.destPtr == last)) {
	                          _context10.next = 29;
	                          break;
	                        }

	                        _context10.prev = 20;
	                        _context10.next = 23;
	                        return regeneratorRuntime.awrap(dbs.checkNet(modem.connection, modem._DB, function () {
	                          return modem.canAcceptCommands && _this7.destPtr == last;
	                        }));

	                      case 23:
	                        _context10.next = 29;
	                        break;

	                      case 25:
	                        _context10.prev = 25;
	                        _context10.t2 = _context10["catch"](20);

	                        errormsg.push(_context10.t2.message);
	                        console.error(_context10.t2); // we are in the nextTick. do log errors.

	                      case 29:
	                        _this7.destroy.apply(_this7, errormsg);

	                      case 30:
	                      case "end":
	                        return _context10.stop();
	                    }
	                  }, null, _this7, [[1, 15], [20, 25]]);
	                });
	              }
	            });

	            {
	              // insert to the buffer
	              var p = last;
	              while (p.sourcePtr != first && p.sourcePtr != first.destPtr && p.sourcePtr.priority < priority) {
	                p = p.sourcePtr;
	              }c.sourcePtr = p.sourcePtr;
	              c.destPtr = p;
	              p.sourcePtr.destPtr = c;
	              p.sourcePtr = c;
	            }

	            {
	              // remove unnecessary commands from first to last to spawn only necessary calculations.
	              var _p = first.destPtr.destPtr; // start from second
	              while (_p && _p != last) {
	                var n = _p.destPtr;
	                if (_p != c) {
	                  var f = dbc.canBeRemoved[_p.command];
	                  if (f != null && f(_p.data, command, data)) _p.destroy("canceled because of another command");
	                }
	                _p = n;
	              }
	            }
	          }));

	        case 4:
	          return _context11.abrupt("return", _context11.sent);

	        case 5:
	        case "end":
	          return _context11.stop();
	      }
	    }, null, this);
	  }
	});

	var express = __webpack_require__(431);
	__webpack_require__(492);

	global.LOGGER = console;

	var cookieInfinite = { expires: new Date("Fri, 31-Dec-9999 23:59:59 GMT") };

	var base64 = {
	  to: function to(str) {
	    return new Buffer(str).toString("base64");
	  },
	  from: function from(str) {
	    return new Buffer(str, "base64").toString();
	  }
	};

	var cookieParser = __webpack_require__(397)();
	var parseCookies = function parseCookies(request) {
	  return cookieParser(request, null, lodash.noop);
	};

	var authLimit = lu.limitCalls(10, 200);

	var checkAuthorization = function checkAuthorization(request, response, next) {
	  var limit, secret, a, origin, socket;
	  return regeneratorRuntime.async(function checkAuthorization$(_context12) {
	    while (1) switch (_context12.prev = _context12.next) {
	      case 0:
	        parseCookies(request);

	        if (!(auth && request.cookies.auth != auth.hash)) {
	          _context12.next = 18;
	          break;
	        }

	        limit = authLimit(); /* calculate limits at the begin */

	        _context12.next = 5;
	        return regeneratorRuntime.awrap(_bluebird2.default.delay(200));

	      case 5:
	        secret = base64.to(auth.name + ":" + auth.userkey);
	        a = request.headers.authorization;

	        a && (a = a.match(/^Basic\s+(.*)$/));
	        a && (a = a[1]);

	        if (!(a == secret && limit /* and check limits at the end */)) {
	          _context12.next = 12;
	          break;
	        }

	        response && response.cookie("auth", auth.hash, cookieInfinite);
	        return _context12.abrupt("return", next());

	      case 12:
	        origin = request.headers.origin || "*";
	        socket = request.socket;

	        socket.write("HTTP/1.1 " + HTTPStatus.UNAUTHORIZED + " " + HTTPStatus[HTTPStatus.UNAUTHORIZED] + "\r\nAccess-Control-Allow-Origin: " + origin + "\r\nAccess-Control-Allow-Credentials: true\r\nWWW-Authenticate: Basic realm=" + JSON.stringify(authMessage) + "\r\n\r\nunauthorized");
	        socket.end();
	        response && response.status(HTTPStatus.UNAUTHORIZED).end(); // будзем ветлівымі, і ўсё пазакрываем, і логеру ўсё скажам
	        return _context12.abrupt("return");

	      case 18:
	        next();

	      case 19:
	      case "end":
	        return _context12.stop();
	    }
	  }, null, this);
	};

	var modemService = express().use(cookieParser).use(_http_log2.default).use(function (request, response, next) {
	  var origin = request.headers.origin || "*";
	  response.setHeader("Access-Control-Allow-Origin", origin);
	  response.setHeader("Access-Control-Allow-Credentials", true);
	  next();
	}).use((0, _compression2.default)({ threshold: 0 })).all("/version", function (request, response) {
	  response.json(modem.modemVersion);
	})

	// TODO: remove or place under authorization
	// CHECK IN RELEASE
	// DEBUGGER FEATURE !!!!!
	.post("/pierazahruzka", function (request, response) {
	  process.exit(1);
	}).all("/logout", function (request, response) {
	  // response.status( HTTPStatus.SEE_OTHER )
	  // response.setHeader( `Location`, `/` )
	  response.clearCookie("auth");
	  request.on("data", function (data) {
	    return response.write(data);
	  });
	  request.on("end", function () {
	    return response.end("\n\n...LOGOUT");
	  });
	}).use(checkAuthorization).all("/login", function (request, response) {
	  // response.status( HTTPStatus.SEE_OTHER )
	  // response.setHeader( `Location`, `/` )
	  // response.type( `.js` ).end( decodeURIComponent( request.url.slice( 7 ) ) )
	  response.end();
	}).post("/command", (0, _defun2.default)(function _callee8(defer, request, response) {
	  return regeneratorRuntime.async(function _callee8$(_context13) {
	    while (1) switch (_context13.prev = _context13.next) {
	      case 0:
	        defer(function () {
	          return response.end();
	        });
	        _context13.prev = 1;
	        _context13.next = 4;
	        return regeneratorRuntime.awrap(modem.userCommand({
	          command: request.query.cmd,
	          data: request.query.data
	        }));

	      case 4:
	        response.end();
	        _context13.next = 11;
	        break;

	      case 7:
	        _context13.prev = 7;
	        _context13.t0 = _context13["catch"](1);

	        console.error("command error", _context13.t0, _context13.t0.stack);
	        response.status(_context13.t0.code || HTTPStatus.INTERNAL_SERVER_ERROR).end(_context13.t0.message || "");

	      case 11:
	      case "end":
	        return _context13.stop();
	    }
	  }, null, _this8, [[1, 7]]);
	}));

	function nodewebsocketStream(ws) {
	  var ret = new stream.Duplex({
	    read: function read() {},
	    write: function write(chunk, _, cb) {
	      // convert to string if possible for debugging purpose
	      // TODO: do this under condition of debug version or debugging
	      chunk = (0, _stringChunk2.default)(chunk);
	      ws.send(chunk);
	      cb();
	    }
	  });
	  ws.on("message", function (message) {
	    return ret.push(message);
	  });
	  ws.on("close", function () {
	    return ret.end();
	  });
	  ws.on("error", function (error) {
	    return ret.emit("error", error);
	  });
	  return ret;
	}

	var onUpgrade = function onUpgrade(request, socket, head) {
	  log.log("ws", request.url.red);
	  if (request.url != "/") return socket.end("HTTP/1.1 " + HTTPStatus.NOT_FOUND + " " + HTTPStatus[HTTPStatus.NOT_FOUND] + "\r\n\r\n");
	  log.log("ws", "checking authorization".red);
	  checkAuthorization(request, null, function () {
	    var _context3;

	    log.log("ws", "authorized".red);
	    var connection = new _socket2.default(request, socket, head, {});

	    var s = (0, _dataStream2.default)(nodewebsocketStream(connection));

	    var initId = (0, _ra2.default)();

	    (_context3 = (_context3 = s.open("db_init"), collections.makeReceiver).call(_context3), collections.forEach).call(_context3, function (id) {
	      return initId.assign(id);
	    });

	    (_context3 = s.open("db_update"), collections.makeSender).call(_context3, function (update) {
	      var sentId = undefined;
	      (0, _ra2.default)(function () {
	        var devices = void 0;
	        if (!s || initId.valueOf() == null || !(devices = modem.cdevices) || sentId == devices.uid) return;
	        var clientId = sentId;
	        var serverId = devices.uid;
	        var toSend = modem.getDevicesForClient(clientId);
	        update.send({ data: toSend, previous: toSend.__partial__ === false ? undefined : clientId });
	        sentId = serverId;
	      });
	    });

	    (_context3 = s.open("command"), collections.attachAsyncFunction).call(_context3, function (_ref5) {
	      var _ref6 = _slicedToArray(_ref5, 2);

	      var command = _ref6[0];
	      var data = _ref6[1];
	      return modem.userCommand({ command: command, data: data }).then(function (ret) {
	        return ret != null ? ret : "OK";
	      });
	    });

	    (_context3 = s.open("server"), collections.makeSender).call(_context3, function (me) {
	      var sendUpdate = lodash.debounce(function () {
	        return me.send(["update_program"]);
	      }, 500);
	      // fs.watch( `./www/main.html`, sendUpdate )
	      fs.watch(process.env.DEVELOPMENT ? "./www/js/index_dbg.js" : "./www/js/index.js", sendUpdate);
	    });
	  });
	};

	var createModemServer = function createModemServer(Server) {
	  var _Server$createServer$;

	  for (var _len = arguments.length, connection = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    connection[_key - 1] = arguments[_key];
	  }

	  return (_Server$createServer$ = Server.createServer(modemService).on("upgrade", onUpgrade)).listen.apply(_Server$createServer$, connection);
	};

	createModemServer(http, config.serviceport);
	createModemServer(http, internalModemService).on("error", function () {
	  return createModemServer(http, 0, "localhost", function () {
	    internalModemService = this.address().port;
	  });
	});

	var commonService = (0, _http_common_server2.default)(function (app) {
	  return app.get("/modem_locations", function (request, response) {
	    var interfaces = service.interfaces;
	    var me = interfaceToUrl(request.socket.address(), config.serviceport);
	    if (interfaces.findIndex(function (i) {
	      return i.url == me;
	    }) < 0) interfaces.push({ url: me });
	    response.json(interfaces);
	  });
	});

	http.createServer(commonService).listen(config.port);

	var waitForSocket = function waitForSocket(socket) {
	  return new _bluebird2.default(function (resolve, reject) {
	    socket.once("error", reject);
	    socket.once("end", reject);
	    socket.once("connect", resolve);
	  });
	};

	var endOnError = function endOnError() {
	  this.end();
	};

	var tellToBoss = function tellToBoss() {
	  var u, b, socket, reconnect, s, _5, _4, _3, _2, _1, streamid, tomodem, toclient;

	  return regeneratorRuntime.async(function tellToBoss$(_context14) {
	    while (1) switch (_context14.prev = _context14.next) {
	      case 0:
	        u = config.boss;

	        if (!u.match(/\:\/\//)) u = "net://" + u;
	        b = url.parse(u);


	        log.log("boss", ("connecting to boss " + b.hostname + ":" + b.port).green);

	        socket = net.connect(b.port, b.hostname);
	        reconnect = lodash.once(function () {
	          log.log("boss", "sheduling reconnect in " + config.restoreConnectionInterval + " ms");
	          setTimeout(tellToBoss, config.restoreConnectionInterval);
	        });


	        socket.on("end", reconnect);

	        socket.on("error", function (error) {
	          log.log("boss", "boss error: " + util.inspect(error));
	          socket.end();
	          reconnect();
	        });

	        _context14.next = 10;
	        return regeneratorRuntime.awrap(waitForSocket(socket));

	      case 10:

	        socket.write(JSON.stringify({
	          client: auth.modem,
	          password: auth.modemkey,
	          version: 2,
	          modemLocations: service.interfaces
	        }));

	        s = (0, _dataStream2.default)(socket);
	        _5 = void 0, _4 = void 0, _3 = void 0, _2 = void 0, _1 = collections.makeReceiver(s.open("substream"))[Symbol.asyncIterator]();
	        _context14.prev = 13;

	      case 14:
	        _3 = false;
	        _context14.next = 17;
	        return regeneratorRuntime.awrap(_1.next());

	      case 17:
	        if ((_2 = _context14.sent).done) {
	          _context14.next = 44;
	          break;
	        }

	        _3 = true;
	        streamid = _2.value;
	        tomodem = void 0, toclient = void 0;
	        _context14.prev = 21;

	        tomodem = net.connect(internalModemService);
	        toclient = net.connect(b.port, b.hostname);

	        _context14.next = 26;
	        return regeneratorRuntime.awrap(_bluebird2.default.all([waitForSocket(tomodem), waitForSocket(toclient)]));

	      case 26:

	        toclient.setTimeout(0);
	        toclient.setNoDelay();
	        toclient.setKeepAlive(true, 30000);

	        toclient.write(JSON.stringify({
	          client: auth.modem,
	          password: auth.modemkey,
	          version: 2,
	          stream: streamid
	        }));

	        toclient.pipe(tomodem);
	        tomodem.pipe(toclient);

	        toclient.on("error", endOnError);
	        tomodem.on("error", endOnError);

	        tomodem = null;
	        toclient = null;
	        _context14.next = 42;
	        break;

	      case 38:
	        _context14.prev = 38;
	        _context14.t0 = _context14["catch"](21);

	        tomodem && tomodem.emit("error", _context14.t0);
	        toclient && toclient.emit("error", _context14.t0);

	      case 42:
	        _context14.next = 14;
	        break;

	      case 44:
	        _context14.next = 50;
	        break;

	      case 46:
	        _context14.prev = 46;
	        _context14.t1 = _context14["catch"](13);
	        _5 = true;
	        _4 = _context14.t1;

	      case 50:
	        _context14.prev = 50;
	        _context14.prev = 51;

	        if (!(_3 && _1.return)) {
	          _context14.next = 55;
	          break;
	        }

	        _context14.next = 55;
	        return regeneratorRuntime.awrap(_1.return());

	      case 55:
	        _context14.prev = 55;

	        if (!_5) {
	          _context14.next = 58;
	          break;
	        }

	        throw _4;

	      case 58:
	        return _context14.finish(55);

	      case 59:
	        return _context14.finish(50);

	      case 60:
	      case "end":
	        return _context14.stop();
	    }
	  }, null, _this8, [[13, 46, 50, 60], [21, 38], [51,, 55, 59]]);
	};
	tellToBoss();

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.set = undefined;

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _child_process = __webpack_require__(342);

	var child_process = _interopRequireWildcard(_child_process);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var set = exports.set = function set() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return new _bluebird2.default(function (resolve, reject) {
	    return child_process.execFile("led", args, function (error, data) {
	      return error ? reject(error) : resolve(data);
	    }).stdin.end();
	  });
	};

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getKeyAtPosition = exports.getSortedContent = exports.sortContent = exports.getContent = exports.compareIndices = exports.commands = exports.canBeLinked = exports.priority = exports.canBeRemoved = exports.DbError = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _marked = [executeCommands].map(regeneratorRuntime.mark);

	exports.canAcceptCommands = canAcceptCommands;
	exports.executeCommands = executeCommands;
	exports.devicesForGrouping = devicesForGrouping;
	exports.updateGroupStates = updateGroupStates;
	exports.isChildOf = isChildOf;
	exports.getNextIndex = getNextIndex;
	exports.getDevicesByGroup = getDevicesByGroup;
	exports.getDeviceParams = getDeviceParams;
	exports.stringToGroup = stringToGroup;
	exports.findFreeGroup = findFreeGroup;

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _obj_diff = __webpack_require__(422);

	var Diff = _interopRequireWildcard(_obj_diff);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // DB for client

	/*
	TODO:

	1. прывязка прылады.

	Зараз: аддаецца каманда на прывязку, група адразу запісваецца щ БЗ. Пасьля запытваем карыстальніка, і калі не прывязалася, даем каманду што не прывязалася. Добра: іншыя ўжо могуць адвязаць. Ці пасьля разрыву сувязі.
	Магчыма: аддаецца каманда на папярэднюю прывязку, пасьля запыт у карыстальніка і толькі тады запіс у БЗ. Па-мойму, практычней цяперашні варыянт.

	*/

	var DbError = exports.DbError = function (_Error) {
	  _inherits(DbError, _Error);

	  function DbError() {
	    _classCallCheck(this, DbError);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(DbError).apply(this, arguments));
	  }

	  return DbError;
	}(Error);

	var canBeRemoved = exports.canBeRemoved = Object.assign(Object.create(null), {
	  SetState: function SetState(_ref, command, data) {
	    var itemId = _ref.itemId;

	    return command == "SetState" && itemId == data.itemId;
	  }
	});

	var priority = exports.priority = {
	  CreateItem: 30,
	  InitializeDevice: 20,
	  DeviceHasNotBeenInitialized: 10,
	  DeinitializeDevice: 10,
	  DeleteItemFromProgram: 10
	};

	var canBeLinked = exports.canBeLinked = function canBeLinked(db, itemId, placeId, controlled) {
	  try {
	    commands.LinkItemToPlace(db, { itemId: itemId, placeId: placeId, controlled: controlled });
	  } catch (e) {
	    if (e instanceof DbError) return false;
	    throw e;
	  }
	  return true;
	};

	var commands = exports.commands = Object.assign(Object.create(null), {
	  SetDisplayPosition: function SetDisplayPosition(db, _ref2) {
	    var placeId = _ref2.placeId;
	    var itemId = _ref2.itemId;
	    var position = _ref2.position;

	    /*O(n*(3+log(n)))*/
	    var pairs = getSortedContent /*O(n)*/(db, placeId);
	    var newIndex = null;
	    var last = null;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	      for (var _iterator = pairs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var _step$value = _step.value;
	        var /*O(n)*/key = _step$value.key;
	        var index = _step$value.value.index;

	        if (position <= 0) {
	          if (key == itemId) return [db];
	          if (last == null) newIndex = index - 1;else newIndex = (last + index) / 2;
	          break;
	        }
	        if (key != itemId) {
	          --position;
	          last = index;
	        }
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }

	    if (newIndex == null) {
	      if (last == null) newIndex = 0;else newIndex = last + 1;
	    }
	    db = Diff.apply(db, { content: _defineProperty({}, placeId, {
	        __present__: true,
	        content: _defineProperty({}, itemId, {
	          __present__: true,
	          index: newIndex
	        })
	      }) });
	    return [db];
	  },
	  LinkItemToPlace: function LinkItemToPlace(db, _ref3) {
	    var itemId = _ref3.itemId;
	    var placeId = _ref3.placeId;
	    var controlled = _ref3.controlled;
	    var action = _ref3.action;

	    if (!lodash.get(db, ["content", placeId])) throw new DbError("unknown place: " + placeId);
	    if (!lodash.get(db, ["content", itemId])) throw new DbError("unknown item: " + itemId);
	    if (isChildOf(db, placeId, itemId)) throw new DbError("cannot link place to itself: " + placeId);
	    var place = db.content[placeId];
	    var item = db.content[itemId];
	    if (place.type == "place") controlled = Boolean(controlled) || null;else controlled = null;
	    switch (item.type) {
	      case "scenario":
	        if (!(place.type == "place")) throw new DbError("scenario can be added only to a place");
	        break;
	      case "place":
	        if (!(place.type == "place" || place.type == "group")) throw new DbError("destination must be a place or a group");
	        break;
	      case "group":
	      case "single":
	        if (!(place.type == "place" || place.type == "group" || place.type == "scenario")) throw new DbError("destination must be a place, a group or a scenario");
	        break;
	      default:
	        throw new DbError("do not know how to link '" + item.type + "'");
	    }
	    db = Diff.apply(db, { content: _defineProperty({}, placeId, {
	        __present__: true,
	        content: _defineProperty({}, itemId, {
	          index: place.content && place.content[itemId] ? undefined : getNextIndex(place.content),
	          controlled: controlled,
	          action: place.type != "scenario" ? null : action != null ? action : item.state || 0
	        })
	      }) });
	    db = Diff.apply(db, updateGroupStates(db));
	    return [db];
	  },
	  UnlinkItemFromPlace: function UnlinkItemFromPlace(db, _ref4) {
	    var placeId = _ref4.placeId;
	    var itemId = _ref4.itemId;

	    db = Diff.apply(db, { content: _defineProperty({}, placeId, { content: _defineProperty({}, itemId, null) }) });
	    db = Diff.apply(db, updateGroupStates(db));
	    return [db, "RemoveUnusedGroups"];
	  },
	  RequestState: function RequestState(db, _ref5) {
	    var itemId = _ref5.itemId;

	    return [db, "RequestState", { itemId: itemId }];
	  },
	  SetState: function SetState(db, _ref6, cache) {
	    var itemId = _ref6.itemId;
	    var state = _ref6.state;

	    state = state && roundTo(state, 0.01);
	    if (cache == null) cache = Object.create(null);
	    var DB = wrapDB(db);
	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	      for (var _iterator2 = executeCommands(DB, itemId, state, cache)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	        var _ = _step2.value;
	      }
	    } catch (err) {
	      _didIteratorError2 = true;
	      _iteratorError2 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	          _iterator2.return();
	        }
	      } finally {
	        if (_didIteratorError2) {
	          throw _iteratorError2;
	        }
	      }
	    }

	    return [DB.read(), "SetState", { itemId: itemId, state: state, cache: cache }, cache];
	  },
	  InitializeDevice: function InitializeDevice(db, _ref7) {
	    var itemId = _ref7.itemId;

	    db = Diff.apply(db, { content: _defineProperty({}, itemId, {
	        __present__: true,
	        pending: true,
	        group: findFreeGroup(db)
	      }) });
	    db = Diff.apply(db, updateGroupStates(db));
	    return [db, "InitializeDevice", { itemId: itemId }];
	  },
	  DeviceHasNotBeenInitialized: function DeviceHasNotBeenInitialized(db, _ref8) {
	    var itemId = _ref8.itemId;

	    db = Diff.apply(db, { content: _defineProperty({}, itemId, {
	        __present__: true,
	        pending: true
	      }) });
	    db = Diff.apply(db, updateGroupStates(db));
	    return [db, "DeviceHasNotBeenInitialized", { itemId: itemId }];
	  },
	  DeinitializeDevice: function DeinitializeDevice(db, _ref9) {
	    var itemId = _ref9.itemId;

	    db = Diff.apply(db, { content: _defineProperty({}, itemId, {
	        __present__: true,
	        pending: true
	      }) });
	    db = Diff.apply(db, updateGroupStates(db));
	    return [db, "DeinitializeDevice", { itemId: itemId }];
	  },
	  DeleteItemFromProgram: function DeleteItemFromProgram(db, _ref10) {
	    var itemId = _ref10.itemId;

	    var item = db.content[itemId];
	    db = Diff.apply(db, { content: _defineProperty({}, itemId, null) });
	    var _iteratorNormalCompletion3 = true;
	    var _didIteratorError3 = false;
	    var _iteratorError3 = undefined;

	    try {
	      for (var _iterator3 = lodash.toPairs(db.content)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	        var _step3$value = _slicedToArray(_step3.value, 2);

	        var index = _step3$value[0];
	        var rec = _step3$value[1];

	        db = Diff.apply(db, { content: _defineProperty({}, index, { content: _defineProperty({}, itemId, null) }) });
	      }
	    } catch (err) {
	      _didIteratorError3 = true;
	      _iteratorError3 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	          _iterator3.return();
	        }
	      } finally {
	        if (_didIteratorError3) {
	          throw _iteratorError3;
	        }
	      }
	    }

	    db = Diff.apply(db, updateGroupStates(db));
	    if (item.type != "single") return [db, "RemoveUnusedGroups"];else if (item.group != null) return [db, "DeinitializeDevice", { itemId: itemId, group: item.group }];
	    return [db];
	  },
	  CreateItem: function CreateItem(db, _ref11) {
	    var type = _ref11.type;
	    var itemId = _ref11.itemId;
	    var placeId = _ref11.placeId;
	    var caption = _ref11.caption;
	    var icon = _ref11.icon;
	    var controlled = _ref11.controlled;

	    switch (type) {
	      case "single":case "place":case 'group':case "scenario":
	        break;
	      default:
	        throw new DbError("unknown item type");
	    }
	    if (!itemId) throw new DbError("itemId is not specified");else if (lodash.get(db, ["content", itemId])) throw new DbError("item already exists");
	    db = Diff.apply(db, { content: _defineProperty({}, itemId, { type: type, caption: caption, icon: icon }) });
	    if (placeId) return commands.LinkItemToPlace(db, { placeId: placeId, itemId: itemId, controlled: controlled });else return [db];
	  },
	  UpdateItem: function UpdateItem(db, _ref12) {
	    var itemId = _ref12.itemId;
	    var caption = _ref12.caption;
	    var icon = _ref12.icon;
	    var dimmering = _ref12.dimmering;
	    var acknowledgement = _ref12.acknowledgement;

	    db = Diff.apply(db, { content: _defineProperty({}, itemId, {
	        __present__: true,
	        caption: caption, icon: icon, dimmering: dimmering, acknowledgement: acknowledgement
	      }) });
	    return [db];
	  },
	  RenameItem: function RenameItem(db, _ref13) {
	    var itemId = _ref13.itemId;
	    var caption = _ref13.caption;

	    return commands.UpdateItem(db, { itemId: itemId, caption: caption });
	  },
	  ChangePicture: function ChangePicture(db, _ref14) {
	    var itemId = _ref14.itemId;
	    var icon = _ref14.icon;

	    return commands.UpdateItem(db, { itemId: itemId, icon: icon });
	  }
	});

	function canAcceptCommands(item) {
	  return item.group != null || item.address != null;
	}

	function wrapDB(db) {
	  return {
	    read: function read() {
	      return db;
	    },
	    apply: function apply(diff) {
	      return db = Diff.apply(db, diff);
	    }
	  };
	}

	function executeCommands(DB, itemId, parentAction, cache) {
	  return regeneratorRuntime.wrap(function executeCommands$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:

	        // TODO: check that there is only one real device to control and redirect action to it to be able to send commands with ACK

	        // scenarioes:
	        //     state == 1 -- run
	        //     state == 0 -- turn off all items
	        //     otherwise  -- do nothing

	        if (cache.switched == null) cache.switched = new Map();

	        return _context2.delegateYield(regeneratorRuntime.mark(function run(DB, itemId, parentAction, parentGroup, checked) {
	          var db, item, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, id, action, i, ids, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _i;

	          return regeneratorRuntime.wrap(function run$(_context) {
	            while (1) switch (_context.prev = _context.next) {
	              case 0:
	                if (!checked.has(itemId)) {
	                  _context.next = 2;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 2:
	                checked = new Set([].concat(_toConsumableArray(checked || []), [itemId]));
	                db = DB.read();
	                item = db.content[itemId];

	                if (!(item == null)) {
	                  _context.next = 7;
	                  break;
	                }

	                return _context.abrupt("return");

	              case 7:

	                DB.apply({ content: _defineProperty({}, itemId, { pending: true, errorneous: null }) });

	                if (!(item.type == "single")) {
	                  _context.next = 19;
	                  break;
	                }

	                if (!canAcceptCommands(item)) {
	                  _context.next = 17;
	                  break;
	                }

	                DB.apply({ content: _defineProperty({}, itemId, { state: parentAction }) });

	                if (!(parentGroup == null || !(item.groups && item.groups[parentGroup] && item.groups[parentGroup].linked))) {
	                  _context.next = 16;
	                  break;
	                }

	                _context.next = 14;
	                return function (commands) {
	                  return commands.SendState(itemId, parentAction);
	                };

	              case 14:
	                _context.next = 17;
	                break;

	              case 16:
	                DB.apply({ content: _defineProperty({}, itemId, { unconfirmed: true }) });

	              case 17:
	                _context.next = 100;
	                break;

	              case 19:
	                if (!(item.type == "scenario")) {
	                  _context.next = 67;
	                  break;
	                }

	                if (!(parentAction == 0 || parentAction == 1)) {
	                  _context.next = 65;
	                  break;
	                }

	                if (!(item.group != null)) {
	                  _context.next = 29;
	                  break;
	                }

	                if (!parentAction) {
	                  _context.next = 27;
	                  break;
	                }

	                _context.next = 25;
	                return function (commands) {
	                  return commands.Scenario(itemId);
	                };

	              case 25:
	                _context.next = 29;
	                break;

	              case 27:
	                _context.next = 29;
	                return function (commands) {
	                  return commands.SendState(itemId, 0);
	                };

	              case 29:
	                DB.apply({ content: _defineProperty({}, itemId, { state: parentAction }) });
	                _iteratorNormalCompletion4 = true;
	                _didIteratorError4 = false;
	                _iteratorError4 = undefined;
	                _context.prev = 33;
	                _iterator4 = lodash.toPairs(item.content)[Symbol.iterator]();

	              case 35:
	                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
	                  _context.next = 51;
	                  break;
	                }

	                _step4$value = _slicedToArray(_step4.value, 2);
	                id = _step4$value[0];
	                action = _step4$value[1].action;
	                i = db.content[id];

	                if (!(i == null)) {
	                  _context.next = 42;
	                  break;
	                }

	                return _context.abrupt("continue", 48);

	              case 42:
	                if (!(action == "switch")) {
	                  _context.next = 47;
	                  break;
	                }

	                if (!cache.switched.has(id)) cache.switched.set(id, i.state ? 0 : 1);
	                return _context.delegateYield(run(DB, id, cache.switched.get(id), null, checked), "t0", 45);

	              case 45:
	                _context.next = 48;
	                break;

	              case 47:
	                return _context.delegateYield(run(DB, id, action, item.group, checked), "t1", 48);

	              case 48:
	                _iteratorNormalCompletion4 = true;
	                _context.next = 35;
	                break;

	              case 51:
	                _context.next = 57;
	                break;

	              case 53:
	                _context.prev = 53;
	                _context.t2 = _context["catch"](33);
	                _didIteratorError4 = true;
	                _iteratorError4 = _context.t2;

	              case 57:
	                _context.prev = 57;
	                _context.prev = 58;

	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                  _iterator4.return();
	                }

	              case 60:
	                _context.prev = 60;

	                if (!_didIteratorError4) {
	                  _context.next = 63;
	                  break;
	                }

	                throw _iteratorError4;

	              case 63:
	                return _context.finish(60);

	              case 64:
	                return _context.finish(57);

	              case 65:
	                _context.next = 100;
	                break;

	              case 67:
	                ids = getIdsForState(item);

	                if (!ids) {
	                  _context.next = 100;
	                  break;
	                }

	                if (!(parentGroup == null && item.group != null)) {
	                  _context.next = 72;
	                  break;
	                }

	                _context.next = 72;
	                return function (commands) {
	                  return commands.SendState(itemId, parentAction);
	                };

	              case 72:
	                _iteratorNormalCompletion5 = true;
	                _didIteratorError5 = false;
	                _iteratorError5 = undefined;
	                _context.prev = 75;
	                _iterator5 = ids[Symbol.iterator]();

	              case 77:
	                if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
	                  _context.next = 86;
	                  break;
	                }

	                id = _step5.value;
	                _i = db.content[id];

	                if (!(_i == null)) {
	                  _context.next = 82;
	                  break;
	                }

	                return _context.abrupt("continue", 83);

	              case 82:
	                return _context.delegateYield(run(DB, id, parentAction, parentGroup, checked), "t3", 83);

	              case 83:
	                _iteratorNormalCompletion5 = true;
	                _context.next = 77;
	                break;

	              case 86:
	                _context.next = 92;
	                break;

	              case 88:
	                _context.prev = 88;
	                _context.t4 = _context["catch"](75);
	                _didIteratorError5 = true;
	                _iteratorError5 = _context.t4;

	              case 92:
	                _context.prev = 92;
	                _context.prev = 93;

	                if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                  _iterator5.return();
	                }

	              case 95:
	                _context.prev = 95;

	                if (!_didIteratorError5) {
	                  _context.next = 98;
	                  break;
	                }

	                throw _iteratorError5;

	              case 98:
	                return _context.finish(95);

	              case 99:
	                return _context.finish(92);

	              case 100:
	                _context.next = 102;
	                return function (_, DB) {
	                  DB.apply({ content: _defineProperty({}, itemId, { pending: null }) });
	                };

	              case 102:
	              case "end":
	                return _context.stop();
	            }
	          }, run, this, [[33, 53, 57, 65], [58,, 60, 64], [75, 88, 92, 100], [93,, 95, 99]]);
	        })(DB, itemId, parentAction, null, new Set()), "t0", 2);

	      case 2:

	        DB.apply(updateGroupStates(DB.read()));

	      case 3:
	      case "end":
	        return _context2.stop();
	    }
	  }, _marked[0], this);
	}

	function devicesForGrouping(db, placeId) {
	  var action = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var checked = new Set([placeId]);
	  return regeneratorRuntime.mark(function get(placeId, placeAction) {
	    var place, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, itemId, _step6$value$, controlled, _action, item;

	    return regeneratorRuntime.wrap(function get$(_context3) {
	      while (1) switch (_context3.prev = _context3.next) {
	        case 0:
	          place = db.content[placeId];
	          _iteratorNormalCompletion6 = true;
	          _didIteratorError6 = false;
	          _iteratorError6 = undefined;
	          _context3.prev = 4;
	          _iterator6 = lodash.toPairs(place.content)[Symbol.iterator]();

	        case 6:
	          if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
	            _context3.next = 33;
	            break;
	          }

	          _step6$value = _slicedToArray(_step6.value, 2);
	          itemId = _step6$value[0];
	          _step6$value$ = _step6$value[1];
	          controlled = _step6$value$.controlled;
	          _action = _step6$value$.action;

	          if (!checked.has(itemId)) {
	            _context3.next = 14;
	            break;
	          }

	          return _context3.abrupt("continue", 30);

	        case 14:
	          checked.add(itemId);

	          if (!(place.type == "scenario" && _action == "switch")) {
	            _context3.next = 17;
	            break;
	          }

	          return _context3.abrupt("continue", 30);

	        case 17:
	          if (!(place.type == "place" && !controlled)) {
	            _context3.next = 19;
	            break;
	          }

	          return _context3.abrupt("continue", 30);

	        case 19:
	          item = db.content[itemId];

	          if (item) {
	            _context3.next = 22;
	            break;
	          }

	          return _context3.abrupt("continue", 30);

	        case 22:
	          if (!(item.type == "single")) {
	            _context3.next = 28;
	            break;
	          }

	          if (!(item.group != null)) {
	            _context3.next = 26;
	            break;
	          }

	          _context3.next = 26;
	          return [itemId, _action];

	        case 26:
	          _context3.next = 30;
	          break;

	        case 28:
	          if (!(item.type != "scenario")) {
	            _context3.next = 30;
	            break;
	          }

	          return _context3.delegateYield(get(itemId, place.type == "scenario" ? _action : placeAction), "t0", 30);

	        case 30:
	          _iteratorNormalCompletion6 = true;
	          _context3.next = 6;
	          break;

	        case 33:
	          _context3.next = 39;
	          break;

	        case 35:
	          _context3.prev = 35;
	          _context3.t1 = _context3["catch"](4);
	          _didIteratorError6 = true;
	          _iteratorError6 = _context3.t1;

	        case 39:
	          _context3.prev = 39;
	          _context3.prev = 40;

	          if (!_iteratorNormalCompletion6 && _iterator6.return) {
	            _iterator6.return();
	          }

	        case 42:
	          _context3.prev = 42;

	          if (!_didIteratorError6) {
	            _context3.next = 45;
	            break;
	          }

	          throw _iteratorError6;

	        case 45:
	          return _context3.finish(42);

	        case 46:
	          return _context3.finish(39);

	        case 47:
	        case "end":
	          return _context3.stop();
	      }
	    }, get, this, [[4, 35, 39, 47], [40,, 42, 46]]);
	  })(placeId, action);
	}

	function getIdsForState(item) {
	  if (item.type == "group") return lodash.keys(item.content);else if (item.type == "place") return lodash.toPairs(item.content).filter(function (_ref15) {
	    var _ref16 = _slicedToArray(_ref15, 2);

	    var controlled = _ref16[1].controlled;
	    return controlled;
	  }).map(function (_ref17) {
	    var _ref18 = _slicedToArray(_ref17, 1);

	    var id = _ref18[0];
	    return id;
	  });else return null;
	}

	function updateGroupStates(db) {

	  function calcState(ids) {
	    var infos = ids.map(getState).filter(Boolean);
	    var states = infos.map(function (i) {
	      return i.state;
	    }).filter(function (state) {
	      return state != null;
	    });
	    return {
	      state: states.length == 0 ? null : states.reduce(function (a, b) {
	        return a + b;
	      }) / states.length,
	      unconfirmed: infos.some(function (i) {
	        return i.unconfirmed;
	      }) || null,
	      errorneous: infos.some(function (i) {
	        return i.errorneous;
	      }) || null,
	      pending: infos.some(function (i) {
	        return i.pending;
	      }) || null
	    };
	  }

	  var cache = new Map();

	  function getState(id) {
	    if (!cache.has(id)) {
	      var item = db.content[id];
	      if (item == null) return null;
	      var ids = getIdsForState(item);
	      cache.set(id, { state: ids == null ? item.state : null, unconfirmed: item.unconfirmed, errorneous: item.errorneous, pending: item.pending });
	      if (ids != null) cache.set(id, calcState(ids));
	    }
	    return cache.get(id);
	  }

	  var ret = { content: {} };

	  var _iteratorNormalCompletion7 = true;
	  var _didIteratorError7 = false;
	  var _iteratorError7 = undefined;

	  try {
	    for (var _iterator7 = lodash.keys(db.content).map(function (id) {
	      return [id, getState(id)];
	    })[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	      var _step7$value = _slicedToArray(_step7.value, 2);

	      var id = _step7$value[0];
	      var state = _step7$value[1];
	      var _iteratorNormalCompletion8 = true;
	      var _didIteratorError8 = false;
	      var _iteratorError8 = undefined;

	      try {
	        for (var _iterator8 = lodash.keys(state)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	          var n = _step8.value;

	          if (state[n] != db.content[id][n]) {
	            if (!ret.content[id]) ret.content[id] = { __present__: true };
	            ret.content[id][n] = state[n];
	          }
	        }
	      } catch (err) {
	        _didIteratorError8 = true;
	        _iteratorError8 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion8 && _iterator8.return) {
	            _iterator8.return();
	          }
	        } finally {
	          if (_didIteratorError8) {
	            throw _iteratorError8;
	          }
	        }
	      }
	    }
	  } catch (err) {
	    _didIteratorError7 = true;
	    _iteratorError7 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion7 && _iterator7.return) {
	        _iterator7.return();
	      }
	    } finally {
	      if (_didIteratorError7) {
	        throw _iteratorError7;
	      }
	    }
	  }

	  return ret;
	}

	function isChildOf(db, childId, parentId) {
	  if (!db || !db.content || !db.content[childId] || !db.content[parentId]) return false;
	  var checked = new Set();
	  return function walk(itemId) {
	    if (checked.has(itemId)) return false;
	    checked.add(itemId);
	    if (itemId == childId) return true;
	    var item = db.content[itemId];
	    return item != null && lodash.keys(item.content).some(walk);
	  }(parentId);
	}

	function getNextIndex(content) {
	  return 1 + Math.max.apply(Math, [-1].concat(_toConsumableArray(lodash.values(content).map(function (_ref19) {
	    var index = _ref19.index;
	    return index;
	  }))));
	}

	function getDevicesByGroup(db, group) {
	  var ret = new Set();
	  var _iteratorNormalCompletion9 = true;
	  var _didIteratorError9 = false;
	  var _iteratorError9 = undefined;

	  try {
	    for (var _iterator9 = lodash.toPairs(db && db.content)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	      var _step9$value = _slicedToArray(_step9.value, 2);

	      var itemId = _step9$value[0];
	      var item = _step9$value[1];

	      if (item && (item.group == group || item.groups && item.groups[group])) ret.add(itemId);
	    }
	  } catch (err) {
	    _didIteratorError9 = true;
	    _iteratorError9 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion9 && _iterator9.return) {
	        _iterator9.return();
	      }
	    } finally {
	      if (_didIteratorError9) {
	        throw _iteratorError9;
	      }
	    }
	  }

	  return ret;
	}

	function getDeviceParams(item) {
	  return {
	    group: item.group,
	    model: item.model,
	    single: item.type == "single",
	    acknowledgement: Boolean(item.type == "single" && item.acknowledgement !== false)
	  };
	}

	function stringToGroup(value) {
	  var ret = Number(value);
	  if (Number.isFinite(ret) && String(ret) == value) return ret;
	  return value;
	}

	function findFreeGroup(db) {
	  var groups = new Set();
	  for (var i = 1; i <= 1022; ++i) {
	    groups.add(i);
	  }var _iteratorNormalCompletion10 = true;
	  var _didIteratorError10 = false;
	  var _iteratorError10 = undefined;

	  try {
	    for (var _iterator10 = lodash.values(db.content)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	      var device = _step10.value;

	      groups.delete(stringToGroup(device.group));
	      var _iteratorNormalCompletion11 = true;
	      var _didIteratorError11 = false;
	      var _iteratorError11 = undefined;

	      try {
	        for (var _iterator11 = lodash.keys(device.groups)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	          var group = _step11.value;

	          groups.delete(stringToGroup(group));
	        }
	      } catch (err) {
	        _didIteratorError11 = true;
	        _iteratorError11 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion11 && _iterator11.return) {
	            _iterator11.return();
	          }
	        } finally {
	          if (_didIteratorError11) {
	            throw _iteratorError11;
	          }
	        }
	      }
	    }
	  } catch (err) {
	    _didIteratorError10 = true;
	    _iteratorError10 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion10 && _iterator10.return) {
	        _iterator10.return();
	      }
	    } finally {
	      if (_didIteratorError10) {
	        throw _iteratorError10;
	      }
	    }
	  }

	  return groups.size == 0 ? null : [].concat(_toConsumableArray(groups))[Math.floor(Math.random() * groups.size) % groups.size];
	}

	var compareIndices = exports.compareIndices = function compareIndices(_ref20, _ref21) {
	  var index1 = _ref20.value.index;
	  var index2 = _ref21.value.index;
	  return index1 - index2;
	};

	var getContent = exports.getContent = function getContent(db, placeId) {
	  return lodash.get(db, ["content", placeId, "content"]);
	};

	var sortContent = exports.sortContent = function sortContent(content) {
	  var pairs = lodash.toPairs /*O(n)*/(content).map /*O(n)*/(function (_ref22) {
	    var _ref23 = _slicedToArray(_ref22, 2);

	    var key = _ref23[0];
	    var value = _ref23[1];
	    return { key: key, value: value };
	  });
	  return pairs.sort /*O(n*log(n))*/(compareIndices);
	};

	var getSortedContent = exports.getSortedContent = function getSortedContent(db, placeId) {
	  return sortContent(getContent(db, placeId));
	};

	var getKeyAtPosition = exports.getKeyAtPosition = function getKeyAtPosition(content, position) {
	  if (position < 0) return null;
	  var pairs = sortContent(content);
	  if (position >= pairs.length) return null;
	  return pairs[position].key;
	};

	var roundTo = function roundTo(value, prec) {
	  return Math.round(value / prec) * prec;
	};

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.commands = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // DB for server

	// first do modem command, than modify db accordingly. for each single modem command.

	var _marked = [updateStates, reserveGroups, addIntoGroups, removeUnusedGroups, updateNet].map(regeneratorRuntime.mark);

	exports.checkNet = checkNet;
	exports.cleanDatabase = cleanDatabase;

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _dbc = __webpack_require__(541);

	var dbc = _interopRequireWildcard(_dbc);

	var _obj_diff = __webpack_require__(422);

	var Diff = _interopRequireWildcard(_obj_diff);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function updateStates(DB) {
	  var _this = this;

	  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret;

	  return regeneratorRuntime.wrap(function updateStates$(_context2) {
	    while (1) switch (_context2.prev = _context2.next) {
	      case 0:
	        _iteratorNormalCompletion = true;
	        _didIteratorError = false;
	        _iteratorError = undefined;
	        _context2.prev = 3;
	        _loop = regeneratorRuntime.mark(function _loop() {
	          var _step$value, itemId, item;

	          return regeneratorRuntime.wrap(function _loop$(_context) {
	            while (1) switch (_context.prev = _context.next) {
	              case 0:
	                _step$value = _slicedToArray(_step.value, 2);
	                itemId = _step$value[0];
	                item = _step$value[1];

	                if (!(item.type != "single" || item.pending || !item.unconfirmed)) {
	                  _context.next = 5;
	                  break;
	                }

	                return _context.abrupt("return", "continue");

	              case 5:
	                if (!dbc.getDeviceParams(item).acknowledgement) {
	                  _context.next = 10;
	                  break;
	                }

	                _context.next = 8;
	                return function (modem) {
	                  return commands.RequestState(modem, DB, { itemId: itemId });
	                };

	              case 8:
	                _context.next = 11;
	                break;

	              case 10:
	                DB.apply({ content: _defineProperty({}, itemId, { unconfirmed: null }) });

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }, _loop, _this);
	        });
	        _iterator = lodash.toPairs(DB.read().content)[Symbol.iterator]();

	      case 6:
	        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	          _context2.next = 14;
	          break;
	        }

	        return _context2.delegateYield(_loop(), "t0", 8);

	      case 8:
	        _ret = _context2.t0;

	        if (!(_ret === "continue")) {
	          _context2.next = 11;
	          break;
	        }

	        return _context2.abrupt("continue", 11);

	      case 11:
	        _iteratorNormalCompletion = true;
	        _context2.next = 6;
	        break;

	      case 14:
	        _context2.next = 20;
	        break;

	      case 16:
	        _context2.prev = 16;
	        _context2.t1 = _context2["catch"](3);
	        _didIteratorError = true;
	        _iteratorError = _context2.t1;

	      case 20:
	        _context2.prev = 20;
	        _context2.prev = 21;

	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }

	      case 23:
	        _context2.prev = 23;

	        if (!_didIteratorError) {
	          _context2.next = 26;
	          break;
	        }

	        throw _iteratorError;

	      case 26:
	        return _context2.finish(23);

	      case 27:
	        return _context2.finish(20);

	      case 28:
	      case "end":
	        return _context2.stop();
	    }
	  }, _marked[0], this, [[3, 16, 20, 28], [21,, 23, 27]]);
	}

	function reserveGroups(DB) {
	  var _this2 = this;

	  var db, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop2, _iterator2, _step2;

	  return regeneratorRuntime.wrap(function reserveGroups$(_context4) {
	    while (1) switch (_context4.prev = _context4.next) {
	      case 0:
	        db = DB.read();
	        _iteratorNormalCompletion2 = true;
	        _didIteratorError2 = false;
	        _iteratorError2 = undefined;
	        _context4.prev = 4;
	        _loop2 = regeneratorRuntime.mark(function _loop2() {
	          var _step2$value, itemId, item, _dbc$devicesForGroupi, _dbc$devicesForGroupi2, aDevice;

	          return regeneratorRuntime.wrap(function _loop2$(_context3) {
	            while (1) switch (_context3.prev = _context3.next) {
	              case 0:
	                _step2$value = _slicedToArray(_step2.value, 2);
	                itemId = _step2$value[0];
	                item = _step2$value[1];

	                if (!(item.type != "single")) {
	                  _context3.next = 14;
	                  break;
	                }

	                // TODO: OPTIMIZE IT!!!! dbc.devicesForGrouping can be called for each group only once, but now it is called as many times as it is included in another groups.
	                _dbc$devicesForGroupi = dbc.devicesForGrouping(db, itemId);
	                _dbc$devicesForGroupi2 = _slicedToArray(_dbc$devicesForGroupi, 1);
	                aDevice = _dbc$devicesForGroupi2[0];

	                if (!(aDevice != null)) {
	                  _context3.next = 13;
	                  break;
	                }

	                if (!(item.group == null)) {
	                  _context3.next = 11;
	                  break;
	                }

	                _context3.next = 11;
	                return function (modem) {
	                  return commands.EnsureGroup(modem, DB, { itemId: itemId });
	                };

	              case 11:
	                _context3.next = 14;
	                break;

	              case 13:
	                if (item.group != null) DB.apply({ content: _defineProperty({}, itemId, { group: null }) });

	              case 14:
	              case "end":
	                return _context3.stop();
	            }
	          }, _loop2, _this2);
	        });
	        _iterator2 = lodash.toPairs(db.content)[Symbol.iterator]();

	      case 7:
	        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	          _context4.next = 12;
	          break;
	        }

	        return _context4.delegateYield(_loop2(), "t0", 9);

	      case 9:
	        _iteratorNormalCompletion2 = true;
	        _context4.next = 7;
	        break;

	      case 12:
	        _context4.next = 18;
	        break;

	      case 14:
	        _context4.prev = 14;
	        _context4.t1 = _context4["catch"](4);
	        _didIteratorError2 = true;
	        _iteratorError2 = _context4.t1;

	      case 18:
	        _context4.prev = 18;
	        _context4.prev = 19;

	        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	          _iterator2.return();
	        }

	      case 21:
	        _context4.prev = 21;

	        if (!_didIteratorError2) {
	          _context4.next = 24;
	          break;
	        }

	        throw _iteratorError2;

	      case 24:
	        return _context4.finish(21);

	      case 25:
	        return _context4.finish(18);

	      case 26:
	      case "end":
	        return _context4.stop();
	    }
	  }, _marked[1], this, [[4, 14, 18, 26], [19,, 21, 25]]);
	}

	function addIntoGroups(DB) {
	  var _this3 = this;

	  var db, info, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _loop3, _iterator3, _step3;

	  return regeneratorRuntime.wrap(function addIntoGroups$(_context8) {
	    while (1) switch (_context8.prev = _context8.next) {
	      case 0:
	        // TODO !!!!!!!!!!!! TODO !!!!!!!!!!!! TODO !!!!!!!!!!!! TODO !!!!!!!!!!!! TODO !!!!!!!!!!!!
	        // прызначана для апрацоўкі толькі мадыфікацый групаў, а не дабаўленьня/выдаленьня прыладаў у/з праграмы.

	        db = DB.read();
	        info = Object.create(null);
	        _iteratorNormalCompletion3 = true;
	        _didIteratorError3 = false;
	        _iteratorError3 = undefined;
	        _context8.prev = 5;
	        _loop3 = regeneratorRuntime.mark(function _loop3() {
	          var _step3$value, placeId, _step3$value$, type, group, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop4, _iterator4, _step4;

	          return regeneratorRuntime.wrap(function _loop3$(_context7) {
	            while (1) switch (_context7.prev = _context7.next) {
	              case 0:
	                _step3$value = _slicedToArray(_step3.value, 2);
	                placeId = _step3$value[0];
	                _step3$value$ = _step3$value[1];
	                type = _step3$value$.type;
	                group = _step3$value$.group;

	                if (!(type != "single" && group != null)) {
	                  _context7.next = 31;
	                  break;
	                }

	                _iteratorNormalCompletion4 = true;
	                _didIteratorError4 = false;
	                _iteratorError4 = undefined;
	                _context7.prev = 9;
	                _loop4 = regeneratorRuntime.mark(function _loop4() {
	                  var _step4$value, itemId, action, item, g;

	                  return regeneratorRuntime.wrap(function _loop4$(_context6) {
	                    while (1) switch (_context6.prev = _context6.next) {
	                      case 0:
	                        _step4$value = _slicedToArray(_step4.value, 2);
	                        itemId = _step4$value[0];
	                        action = _step4$value[1];
	                        item = db.content[itemId];
	                        g = item.groups && item.groups[group];

	                        if (!(g == null || g.linked == null || g.action != action)) {
	                          _context6.next = 8;
	                          break;
	                        }

	                        _context6.next = 8;
	                        return function _callee(modem) {
	                          var ok;
	                          return regeneratorRuntime.async(function _callee$(_context5) {
	                            while (1) switch (_context5.prev = _context5.next) {
	                              case 0:
	                                ok = false;
	                                _context5.prev = 1;
	                                _context5.next = 4;
	                                return regeneratorRuntime.awrap(modem.AddGroup(_extends({}, dbc.getDeviceParams(item), {
	                                  groupId: group,
	                                  action: action
	                                })));

	                              case 4:
	                                ok = true;
	                                _context5.next = 10;
	                                break;

	                              case 7:
	                                _context5.prev = 7;
	                                _context5.t0 = _context5["catch"](1);

	                                console.error(_context5.t0);

	                              case 10:
	                                DB.apply({ content: _defineProperty({}, itemId, { __present__: true, groups: _defineProperty({}, group, { linked: ok, action: action }) }) });

	                              case 11:
	                              case "end":
	                                return _context5.stop();
	                            }
	                          }, null, _this3, [[1, 7]]);
	                        };

	                      case 8:
	                      case "end":
	                        return _context6.stop();
	                    }
	                  }, _loop4, _this3);
	                });
	                _iterator4 = dbc.devicesForGrouping(db, placeId)[Symbol.iterator]();

	              case 12:
	                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
	                  _context7.next = 17;
	                  break;
	                }

	                return _context7.delegateYield(_loop4(), "t0", 14);

	              case 14:
	                _iteratorNormalCompletion4 = true;
	                _context7.next = 12;
	                break;

	              case 17:
	                _context7.next = 23;
	                break;

	              case 19:
	                _context7.prev = 19;
	                _context7.t1 = _context7["catch"](9);
	                _didIteratorError4 = true;
	                _iteratorError4 = _context7.t1;

	              case 23:
	                _context7.prev = 23;
	                _context7.prev = 24;

	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                  _iterator4.return();
	                }

	              case 26:
	                _context7.prev = 26;

	                if (!_didIteratorError4) {
	                  _context7.next = 29;
	                  break;
	                }

	                throw _iteratorError4;

	              case 29:
	                return _context7.finish(26);

	              case 30:
	                return _context7.finish(23);

	              case 31:
	              case "end":
	                return _context7.stop();
	            }
	          }, _loop3, _this3, [[9, 19, 23, 31], [24,, 26, 30]]);
	        });
	        _iterator3 = lodash.toPairs(db.content)[Symbol.iterator]();

	      case 8:
	        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
	          _context8.next = 13;
	          break;
	        }

	        return _context8.delegateYield(_loop3(), "t0", 10);

	      case 10:
	        _iteratorNormalCompletion3 = true;
	        _context8.next = 8;
	        break;

	      case 13:
	        _context8.next = 19;
	        break;

	      case 15:
	        _context8.prev = 15;
	        _context8.t1 = _context8["catch"](5);
	        _didIteratorError3 = true;
	        _iteratorError3 = _context8.t1;

	      case 19:
	        _context8.prev = 19;
	        _context8.prev = 20;

	        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	          _iterator3.return();
	        }

	      case 22:
	        _context8.prev = 22;

	        if (!_didIteratorError3) {
	          _context8.next = 25;
	          break;
	        }

	        throw _iteratorError3;

	      case 25:
	        return _context8.finish(22);

	      case 26:
	        return _context8.finish(19);

	      case 27:
	      case "end":
	        return _context8.stop();
	    }
	  }, _marked[2], this, [[5, 15, 19, 27], [20,, 22, 26]]);
	}

	function removeUnusedGroups(DB) {
	  var _this4 = this;

	  var groupsToRemove, db, info, dbContent, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, _itemId, _step5$value$, type, _group, groups, g, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, _placeId, _step6$value$, _group2, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _step8$value, _itemId2, _g, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _loop5, _iterator7, _step7;

	  return regeneratorRuntime.wrap(function removeUnusedGroups$(_context12) {
	    while (1) switch (_context12.prev = _context12.next) {
	      case 0:
	        // прызначана толькі для ачысткі лішніх групаў з прыладаў
	        // фішка - каб не кіраваць лішнімі прыладамі

	        groupsToRemove = new Map();
	        db = DB.read();
	        info = Object.create(null);
	        dbContent = lodash.toPairs(db.content);
	        _iteratorNormalCompletion5 = true;
	        _didIteratorError5 = false;
	        _iteratorError5 = undefined;
	        _context12.prev = 7;


	        for (_iterator5 = dbContent[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          _step5$value = _slicedToArray(_step5.value, 2);
	          _itemId = _step5$value[0];
	          _step5$value$ = _step5$value[1];
	          type = _step5$value$.type;
	          _group = _step5$value$.group;
	          groups = _step5$value$.groups;
	          if (type == "single" && _group != null && groups != null) {
	            g = new Set(lodash.keys(groups).map(dbc.stringToGroup));

	            g.delete(_group);
	            if (g.size) groupsToRemove.set(_itemId, g);
	          }
	        }_context12.next = 15;
	        break;

	      case 11:
	        _context12.prev = 11;
	        _context12.t0 = _context12["catch"](7);
	        _didIteratorError5 = true;
	        _iteratorError5 = _context12.t0;

	      case 15:
	        _context12.prev = 15;
	        _context12.prev = 16;

	        if (!_iteratorNormalCompletion5 && _iterator5.return) {
	          _iterator5.return();
	        }

	      case 18:
	        _context12.prev = 18;

	        if (!_didIteratorError5) {
	          _context12.next = 21;
	          break;
	        }

	        throw _iteratorError5;

	      case 21:
	        return _context12.finish(18);

	      case 22:
	        return _context12.finish(15);

	      case 23:
	        _iteratorNormalCompletion6 = true;
	        _didIteratorError6 = false;
	        _iteratorError6 = undefined;
	        _context12.prev = 26;
	        _iterator6 = dbContent[Symbol.iterator]();

	      case 28:
	        if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
	          _context12.next = 57;
	          break;
	        }

	        _step6$value = _slicedToArray(_step6.value, 2);
	        _placeId = _step6$value[0];
	        _step6$value$ = _step6$value[1];
	        type = _step6$value$.type;
	        _group2 = _step6$value$.group;

	        if (!(type != "single" && _group2 != null)) {
	          _context12.next = 54;
	          break;
	        }

	        _iteratorNormalCompletion8 = true;
	        _didIteratorError8 = false;
	        _iteratorError8 = undefined;
	        _context12.prev = 38;

	        for (_iterator8 = dbc.devicesForGrouping(db, _placeId)[Symbol.iterator](); !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	          _step8$value = _slicedToArray(_step8.value, 1);
	          _itemId2 = _step8$value[0];
	          _g = groupsToRemove.get(_itemId2);

	          if (_g != null) _g.delete(_group2);
	        }
	        _context12.next = 46;
	        break;

	      case 42:
	        _context12.prev = 42;
	        _context12.t1 = _context12["catch"](38);
	        _didIteratorError8 = true;
	        _iteratorError8 = _context12.t1;

	      case 46:
	        _context12.prev = 46;
	        _context12.prev = 47;

	        if (!_iteratorNormalCompletion8 && _iterator8.return) {
	          _iterator8.return();
	        }

	      case 49:
	        _context12.prev = 49;

	        if (!_didIteratorError8) {
	          _context12.next = 52;
	          break;
	        }

	        throw _iteratorError8;

	      case 52:
	        return _context12.finish(49);

	      case 53:
	        return _context12.finish(46);

	      case 54:
	        _iteratorNormalCompletion6 = true;
	        _context12.next = 28;
	        break;

	      case 57:
	        _context12.next = 63;
	        break;

	      case 59:
	        _context12.prev = 59;
	        _context12.t2 = _context12["catch"](26);
	        _didIteratorError6 = true;
	        _iteratorError6 = _context12.t2;

	      case 63:
	        _context12.prev = 63;
	        _context12.prev = 64;

	        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	          _iterator6.return();
	        }

	      case 66:
	        _context12.prev = 66;

	        if (!_didIteratorError6) {
	          _context12.next = 69;
	          break;
	        }

	        throw _iteratorError6;

	      case 69:
	        return _context12.finish(66);

	      case 70:
	        return _context12.finish(63);

	      case 71:
	        _iteratorNormalCompletion7 = true;
	        _didIteratorError7 = false;
	        _iteratorError7 = undefined;
	        _context12.prev = 74;
	        _loop5 = regeneratorRuntime.mark(function _loop5() {
	          var _step7$value, itemId, g, item, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _loop6, _iterator9, _step9;

	          return regeneratorRuntime.wrap(function _loop5$(_context11) {
	            while (1) switch (_context11.prev = _context11.next) {
	              case 0:
	                _step7$value = _slicedToArray(_step7.value, 2);
	                itemId = _step7$value[0];
	                g = _step7$value[1];
	                item = dbc.getDeviceParams(db.content[itemId]);
	                _iteratorNormalCompletion9 = true;
	                _didIteratorError9 = false;
	                _iteratorError9 = undefined;
	                _context11.prev = 7;
	                _loop6 = regeneratorRuntime.mark(function _loop6() {
	                  var group;
	                  return regeneratorRuntime.wrap(function _loop6$(_context10) {
	                    while (1) switch (_context10.prev = _context10.next) {
	                      case 0:
	                        group = _step9.value;
	                        _context10.next = 3;
	                        return function _callee2(modem) {
	                          return regeneratorRuntime.async(function _callee2$(_context9) {
	                            while (1) switch (_context9.prev = _context9.next) {
	                              case 0:
	                                _context9.next = 2;
	                                return regeneratorRuntime.awrap(modem.RemoveGroup(_extends({}, item, { groupId: group })));

	                              case 2:
	                                DB.apply({ content: _defineProperty({}, itemId, { groups: _defineProperty({}, group, null) }) });

	                              case 3:
	                              case "end":
	                                return _context9.stop();
	                            }
	                          }, null, _this4);
	                        };

	                      case 3:
	                      case "end":
	                        return _context10.stop();
	                    }
	                  }, _loop6, _this4);
	                });
	                _iterator9 = g[Symbol.iterator]();

	              case 10:
	                if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
	                  _context11.next = 15;
	                  break;
	                }

	                return _context11.delegateYield(_loop6(), "t0", 12);

	              case 12:
	                _iteratorNormalCompletion9 = true;
	                _context11.next = 10;
	                break;

	              case 15:
	                _context11.next = 21;
	                break;

	              case 17:
	                _context11.prev = 17;
	                _context11.t1 = _context11["catch"](7);
	                _didIteratorError9 = true;
	                _iteratorError9 = _context11.t1;

	              case 21:
	                _context11.prev = 21;
	                _context11.prev = 22;

	                if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                  _iterator9.return();
	                }

	              case 24:
	                _context11.prev = 24;

	                if (!_didIteratorError9) {
	                  _context11.next = 27;
	                  break;
	                }

	                throw _iteratorError9;

	              case 27:
	                return _context11.finish(24);

	              case 28:
	                return _context11.finish(21);

	              case 29:
	              case "end":
	                return _context11.stop();
	            }
	          }, _loop5, _this4, [[7, 17, 21, 29], [22,, 24, 28]]);
	        });
	        _iterator7 = groupsToRemove[Symbol.iterator]();

	      case 77:
	        if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
	          _context12.next = 82;
	          break;
	        }

	        return _context12.delegateYield(_loop5(), "t3", 79);

	      case 79:
	        _iteratorNormalCompletion7 = true;
	        _context12.next = 77;
	        break;

	      case 82:
	        _context12.next = 88;
	        break;

	      case 84:
	        _context12.prev = 84;
	        _context12.t4 = _context12["catch"](74);
	        _didIteratorError7 = true;
	        _iteratorError7 = _context12.t4;

	      case 88:
	        _context12.prev = 88;
	        _context12.prev = 89;

	        if (!_iteratorNormalCompletion7 && _iterator7.return) {
	          _iterator7.return();
	        }

	      case 91:
	        _context12.prev = 91;

	        if (!_didIteratorError7) {
	          _context12.next = 94;
	          break;
	        }

	        throw _iteratorError7;

	      case 94:
	        return _context12.finish(91);

	      case 95:
	        return _context12.finish(88);

	      case 96:
	      case "end":
	        return _context12.stop();
	    }
	  }, _marked[3], this, [[7, 11, 15, 23], [16,, 18, 22], [26, 59, 63, 71], [38, 42, 46, 54], [47,, 49, 53], [64,, 66, 70], [74, 84, 88, 96], [89,, 91, 95]]);
	}

	function updateNet(DB) {
	  return regeneratorRuntime.wrap(function updateNet$(_context13) {
	    while (1) switch (_context13.prev = _context13.next) {
	      case 0:
	        return _context13.delegateYield(removeUnusedGroups(DB), "t0", 1);

	      case 1:
	        return _context13.delegateYield(updateStates(DB), "t1", 2);

	      case 2:
	        return _context13.delegateYield(reserveGroups(DB), "t2", 3);

	      case 3:
	        return _context13.delegateYield(addIntoGroups(DB), "t3", 4);

	      case 4:
	      case "end":
	        return _context13.stop();
	    }
	  }, _marked[4], this);
	}

	function checkNet(modem, DB, canContinueFunc) {
	  var updateActions = arguments.length <= 3 || arguments[3] === undefined ? updateNet : arguments[3];

	  var _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, proc;

	  return regeneratorRuntime.async(function checkNet$(_context14) {
	    while (1) switch (_context14.prev = _context14.next) {
	      case 0:
	        _iteratorNormalCompletion10 = true;
	        _didIteratorError10 = false;
	        _iteratorError10 = undefined;
	        _context14.prev = 3;
	        _iterator10 = updateActions(DB)[Symbol.iterator]();

	      case 5:
	        if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {
	          _context14.next = 20;
	          break;
	        }

	        proc = _step10.value;
	        _context14.prev = 7;
	        _context14.next = 10;
	        return regeneratorRuntime.awrap(proc(modem));

	      case 10:
	        _context14.next = 15;
	        break;

	      case 12:
	        _context14.prev = 12;
	        _context14.t0 = _context14["catch"](7);

	        console.error(_context14.t0);
	        // catch excetion and allow further processing

	      case 15:
	        if (canContinueFunc()) {
	          _context14.next = 17;
	          break;
	        }

	        return _context14.abrupt("break", 20);

	      case 17:
	        _iteratorNormalCompletion10 = true;
	        _context14.next = 5;
	        break;

	      case 20:
	        _context14.next = 26;
	        break;

	      case 22:
	        _context14.prev = 22;
	        _context14.t1 = _context14["catch"](3);
	        _didIteratorError10 = true;
	        _iteratorError10 = _context14.t1;

	      case 26:
	        _context14.prev = 26;
	        _context14.prev = 27;

	        if (!_iteratorNormalCompletion10 && _iterator10.return) {
	          _iterator10.return();
	        }

	      case 29:
	        _context14.prev = 29;

	        if (!_didIteratorError10) {
	          _context14.next = 32;
	          break;
	        }

	        throw _iteratorError10;

	      case 32:
	        return _context14.finish(29);

	      case 33:
	        return _context14.finish(26);

	      case 34:
	        DB.apply(dbc.updateGroupStates(DB.read()));

	      case 35:
	      case "end":
	        return _context14.stop();
	    }
	  }, null, this, [[3, 22, 26, 34], [7, 12], [27,, 29, 33]]);
	}

	var returnTRUE = function returnTRUE() {
	  return true;
	};

	var commands = exports.commands = Object.assign(Object.create(null), {
	  RemoveUnusedGroups: function RemoveUnusedGroups(modem, DB) {
	    return regeneratorRuntime.async(function RemoveUnusedGroups$(_context15) {
	      while (1) switch (_context15.prev = _context15.next) {
	        case 0:
	          _context15.next = 2;
	          return regeneratorRuntime.awrap(checkNet(modem, DB, returnTRUE, removeUnusedGroups));

	        case 2:
	        case "end":
	          return _context15.stop();
	      }
	    }, null, this);
	  },
	  EnsureGroup: function EnsureGroup(modem, DB, _ref) {
	    var itemId = _ref.itemId;
	    return regeneratorRuntime.async(function EnsureGroup$(_context16) {
	      while (1) switch (_context16.prev = _context16.next) {
	        case 0:
	          if (!(DB.read().content[itemId].group == null)) {
	            _context16.next = 3;
	            break;
	          }

	          _context16.next = 3;
	          return regeneratorRuntime.awrap(withAllocatedGroup(DB, itemId, function (params) {
	            return modem.ClearAbandonedGroup(params);
	          }));

	        case 3:
	        case "end":
	          return _context16.stop();
	      }
	    }, null, this);
	  },
	  RequestState: function RequestState(modem, DB, _ref2) {
	    var itemId = _ref2.itemId;
	    var group, modemGetStateOk, state;
	    return regeneratorRuntime.async(function RequestState$(_context17) {
	      while (1) switch (_context17.prev = _context17.next) {
	        case 0:
	          group = getIdGroup(DB.read(), itemId);

	          if (!(group == null)) {
	            _context17.next = 3;
	            break;
	          }

	          return _context17.abrupt("return");

	        case 3:
	          modemGetStateOk = false;
	          _context17.prev = 4;

	          DB.apply({ content: _defineProperty({}, itemId, {
	              __present__: true,
	              errorneous: null,
	              pending: true,
	              unconfirmed: null
	            }) });
	          _context17.next = 8;
	          return regeneratorRuntime.awrap(modem.GetState({ group: group }));

	        case 8:
	          state = _context17.sent;

	          modemGetStateOk = true;
	          DB.apply({ content: _defineProperty({}, itemId, {
	              __present__: true,
	              state: state,
	              errorneous: null,
	              pending: null,
	              unconfirmed: null
	            }) });
	          return _context17.abrupt("return", state);

	        case 12:
	          _context17.prev = 12;

	          if (!modemGetStateOk) DB.apply({ content: _defineProperty({}, itemId, {
	              __present__: true,
	              errorneous: true,
	              pending: null,
	              unconfirmed: null
	            }) });
	          return _context17.finish(12);

	        case 15:
	        case "end":
	          return _context17.stop();
	      }
	    }, null, this, [[4,, 12, 15]]);
	  },
	  SetState: function SetState(modem, DB, _ref3) {
	    var itemId = _ref3.itemId;
	    var state = _ref3.state;
	    var cache = _ref3.cache;

	    var db, c, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, proc;

	    return regeneratorRuntime.async(function SetState$(_context20) {
	      while (1) switch (_context20.prev = _context20.next) {
	        case 0:
	          db = DB.read();
	          c = {
	            SendState: function SendState(itemId, state) {
	              var item, ok, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _step11$value, id, _step11$value$, type, groups;

	              return regeneratorRuntime.async(function SendState$(_context18) {
	                while (1) switch (_context18.prev = _context18.next) {
	                  case 0:
	                    item = db.content[itemId];
	                    ok = false;
	                    _context18.prev = 2;
	                    _context18.next = 5;
	                    return regeneratorRuntime.awrap(modem.SetState(_extends({}, dbc.getDeviceParams(item), { state: state })));

	                  case 5:
	                    ok = true;

	                  case 6:
	                    _context18.prev = 6;

	                    if (ok) {
	                      _context18.next = 33;
	                      break;
	                    }

	                    if (!(item.type == "single")) {
	                      _context18.next = 12;
	                      break;
	                    }

	                    DB.apply({ content: _defineProperty({}, itemId, { errorneous: true, unconfirmed: true }) });
	                    _context18.next = 33;
	                    break;

	                  case 12:
	                    if (item.type == "scenario") DB.apply({ content: _defineProperty({}, itemId, { errorneous: true }) });

	                    if (!(item.group != null)) {
	                      _context18.next = 33;
	                      break;
	                    }

	                    _iteratorNormalCompletion11 = true;
	                    _didIteratorError11 = false;
	                    _iteratorError11 = undefined;
	                    _context18.prev = 17;

	                    for (_iterator11 = lodash.toPairs(db.content)[Symbol.iterator](); !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	                      _step11$value = _slicedToArray(_step11.value, 2);
	                      id = _step11$value[0];
	                      _step11$value$ = _step11$value[1];
	                      type = _step11$value$.type;
	                      groups = _step11$value$.groups;

	                      if (type == "single" && groups && groups[item.group]) DB.apply({ content: _defineProperty({}, id, { errorneous: true, unconfirmed: true }) });
	                    }_context18.next = 25;
	                    break;

	                  case 21:
	                    _context18.prev = 21;
	                    _context18.t0 = _context18["catch"](17);
	                    _didIteratorError11 = true;
	                    _iteratorError11 = _context18.t0;

	                  case 25:
	                    _context18.prev = 25;
	                    _context18.prev = 26;

	                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
	                      _iterator11.return();
	                    }

	                  case 28:
	                    _context18.prev = 28;

	                    if (!_didIteratorError11) {
	                      _context18.next = 31;
	                      break;
	                    }

	                    throw _iteratorError11;

	                  case 31:
	                    return _context18.finish(28);

	                  case 32:
	                    return _context18.finish(25);

	                  case 33:
	                    return _context18.finish(6);

	                  case 34:
	                  case "end":
	                    return _context18.stop();
	                }
	              }, null, this, [[2,, 6, 34], [17, 21, 25, 33], [26,, 28, 32]]);
	            },
	            Scenario: function Scenario(itemId) {
	              return regeneratorRuntime.async(function Scenario$(_context19) {
	                while (1) switch (_context19.prev = _context19.next) {
	                  case 0:
	                    _context19.next = 2;
	                    return regeneratorRuntime.awrap(modem.Scenario(dbc.getDeviceParams(db.content[itemId])));

	                  case 2:
	                  case "end":
	                    return _context19.stop();
	                }
	              }, null, this);
	            }
	          };
	          _iteratorNormalCompletion12 = true;
	          _didIteratorError12 = false;
	          _iteratorError12 = undefined;
	          _context20.prev = 5;
	          _iterator12 = dbc.executeCommands(DB, itemId, state, cache)[Symbol.iterator]();

	        case 7:
	          if (_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done) {
	            _context20.next = 20;
	            break;
	          }

	          proc = _step12.value;
	          _context20.prev = 9;
	          _context20.next = 12;
	          return regeneratorRuntime.awrap(proc(c, DB));

	        case 12:
	          _context20.next = 17;
	          break;

	        case 14:
	          _context20.prev = 14;
	          _context20.t0 = _context20["catch"](9);
	          console.error(_context20.t0);

	        case 17:
	          _iteratorNormalCompletion12 = true;
	          _context20.next = 7;
	          break;

	        case 20:
	          _context20.next = 26;
	          break;

	        case 22:
	          _context20.prev = 22;
	          _context20.t1 = _context20["catch"](5);
	          _didIteratorError12 = true;
	          _iteratorError12 = _context20.t1;

	        case 26:
	          _context20.prev = 26;
	          _context20.prev = 27;

	          if (!_iteratorNormalCompletion12 && _iterator12.return) {
	            _iterator12.return();
	          }

	        case 29:
	          _context20.prev = 29;

	          if (!_didIteratorError12) {
	            _context20.next = 32;
	            break;
	          }

	          throw _iteratorError12;

	        case 32:
	          return _context20.finish(29);

	        case 33:
	          return _context20.finish(26);

	        case 34:
	        case "end":
	          return _context20.stop();
	      }
	    }, null, this, [[5, 22, 26, 34], [9, 14], [27,, 29, 33]]);
	  },
	  InitializeDevice: function InitializeDevice(modem, DB, _ref4) {
	    var itemId = _ref4.itemId;
	    var deviceInitialized, state;
	    return regeneratorRuntime.async(function InitializeDevice$(_context21) {
	      while (1) switch (_context21.prev = _context21.next) {
	        case 0:
	          deviceInitialized = false;
	          _context21.prev = 1;
	          _context21.next = 4;
	          return regeneratorRuntime.awrap(withAllocatedGroup(DB, itemId, function (params) {
	            return modem.InitializeDevice(params);
	          }));

	        case 4:
	          state = _context21.sent;

	          deviceInitialized = true;
	          DB.apply({ content: _defineProperty({}, itemId, {
	              __present__: true,
	              unconfirmed: null,
	              pending: null,
	              state: state || 0
	            }) });
	          return _context21.abrupt("return", state);

	        case 8:
	          _context21.prev = 8;

	          if (!deviceInitialized) DB.apply({ content: _defineProperty({}, itemId, {
	              __present__: true,
	              group: null,
	              groups: null,
	              pending: null
	            }) });
	          return _context21.finish(8);

	        case 11:
	        case "end":
	          return _context21.stop();
	      }
	    }, null, this, [[1,, 8, 11]]);
	  },
	  DeinitializeDevice: function DeinitializeDevice(modem, DB, _ref5) {
	    var group = _ref5.group;
	    var itemId = _ref5.itemId;
	    return regeneratorRuntime.async(function DeinitializeDevice$(_context22) {
	      while (1) switch (_context22.prev = _context22.next) {
	        case 0:
	          if (!(group != null)) {
	            _context22.next = 3;
	            break;
	          }

	          _context22.next = 3;
	          return regeneratorRuntime.awrap(modem.DeinitializeDevice({ group: group }));

	        case 3:
	          DB.apply({ content: _defineProperty({}, itemId, clearParams) });

	        case 4:
	        case "end":
	          return _context22.stop();
	      }
	    }, null, this);
	  },
	  DeviceHasNotBeenInitialized: function DeviceHasNotBeenInitialized(modem, DB, _ref6) {
	    var itemId = _ref6.itemId;
	    var group;
	    return regeneratorRuntime.async(function DeviceHasNotBeenInitialized$(_context23) {
	      while (1) switch (_context23.prev = _context23.next) {
	        case 0:
	          group = DB.read().content[itemId].group;

	          if (!(group != null)) {
	            _context23.next = 4;
	            break;
	          }

	          _context23.next = 4;
	          return regeneratorRuntime.awrap(modem.ClearAbandonedGroup({ group: group }));

	        case 4:
	          DB.apply({ content: _defineProperty({}, itemId, clearParams) });

	        case 5:
	        case "end":
	          return _context23.stop();
	      }
	    }, null, this);
	  }
	});

	var clearParams = {
	  __present__: true,
	  group: null,
	  groups: null,
	  state: null,
	  unconfirmed: null,
	  pending: null
	};

	function withAllocatedGroup(DB, itemId, proc) {
	  var db, item, group, reserveGroupOK, ret;
	  return regeneratorRuntime.async(function withAllocatedGroup$(_context24) {
	    while (1) switch (_context24.prev = _context24.next) {
	      case 0:
	        db = DB.read();
	        item = db.content[itemId];
	        group = db.group;

	        if (!(group == null)) {
	          _context24.next = 7;
	          break;
	        }

	        group = dbc.findFreeGroup(db);

	        if (!(group == null)) {
	          _context24.next = 7;
	          break;
	        }

	        throw new Error("No more group numbers for devices");

	      case 7:
	        DB.apply({ content: _defineProperty({}, itemId, { group: group }) });
	        reserveGroupOK = false;
	        _context24.prev = 9;
	        _context24.next = 12;
	        return regeneratorRuntime.awrap(proc(dbc.getDeviceParams(DB.read().content[itemId])));

	      case 12:
	        ret = _context24.sent;

	        reserveGroupOK = true;
	        return _context24.abrupt("return", ret);

	      case 15:
	        _context24.prev = 15;

	        if (!reserveGroupOK) {
	          // delete group regardles of when it was allocated - now or earlier
	          DB.apply({ content: _defineProperty({}, itemId, { group: null }) });
	        }
	        return _context24.finish(15);

	      case 18:
	      case "end":
	        return _context24.stop();
	    }
	  }, null, this, [[9,, 15, 18]]);
	}

	function arrayToKey(array) {
	  return array.sort().map(JSON.stringify).join(",");
	}

	function getDevicesGroups(db, deviceIds) {
	  if (typeof deviceIds == "string") return [db.content[deviceIds].group];
	  deviceIds = [].concat(_toConsumableArray(deviceIds));
	  if (deviceIds.length == 0) return [];
	  if (deviceIds.length == 1) return [db.content[deviceIds[0]].group];
	  var key = arrayToKey(deviceIds);
	  var _iteratorNormalCompletion13 = true;
	  var _didIteratorError13 = false;
	  var _iteratorError13 = undefined;

	  try {
	    for (var _iterator13 = lodash.values(db.content)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	      var _step13$value = _step13.value;
	      var type = _step13$value.type;
	      var _group3 = _step13$value.group;
	      var content = _step13$value.content;

	      if (type == "group" && _group3 != null && key == arrayToKey(lodash.keys(content))) return [_group3];
	    }
	  } catch (err) {
	    _didIteratorError13 = true;
	    _iteratorError13 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion13 && _iterator13.return) {
	        _iterator13.return();
	      }
	    } finally {
	      if (_didIteratorError13) {
	        throw _iteratorError13;
	      }
	    }
	  }

	  return deviceIds.map(function (id) {
	    return db.content[id].group;
	  });
	}

	function getIndividualGroups(db) {
	  var ret = new Set();
	  var _iteratorNormalCompletion14 = true;
	  var _didIteratorError14 = false;
	  var _iteratorError14 = undefined;

	  try {
	    for (var _iterator14 = lodash.values(db.content)[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
	      var _step14$value = _step14.value;
	      var type = _step14$value.type;
	      var _group4 = _step14$value.group;

	      if (_group4 != null && type == "single") ret.add(_group4);
	    }
	  } catch (err) {
	    _didIteratorError14 = true;
	    _iteratorError14 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion14 && _iterator14.return) {
	        _iterator14.return();
	      }
	    } finally {
	      if (_didIteratorError14) {
	        throw _iteratorError14;
	      }
	    }
	  }

	  return ret;
	}

	function setMinus(a, b) {
	  var c = new Set();
	  var _iteratorNormalCompletion15 = true;
	  var _didIteratorError15 = false;
	  var _iteratorError15 = undefined;

	  try {
	    for (var _iterator15 = a[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
	      var x = _step15.value;

	      if (!b.has(x)) c.add(x);
	    }
	  } catch (err) {
	    _didIteratorError15 = true;
	    _iteratorError15 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion15 && _iterator15.return) {
	        _iterator15.return();
	      }
	    } finally {
	      if (_didIteratorError15) {
	        throw _iteratorError15;
	      }
	    }
	  }

	  return c;
	}

	function setPlus(a, b) {
	  var c = new Set(a);
	  var _iteratorNormalCompletion16 = true;
	  var _didIteratorError16 = false;
	  var _iteratorError16 = undefined;

	  try {
	    for (var _iterator16 = b[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
	      var x = _step16.value;

	      c.add(x);
	    }
	  } catch (err) {
	    _didIteratorError16 = true;
	    _iteratorError16 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion16 && _iterator16.return) {
	        _iterator16.return();
	      }
	    } finally {
	      if (_didIteratorError16) {
	        throw _iteratorError16;
	      }
	    }
	  }

	  return c;
	}

	function getPhysicalGroups(db, id) {
	  var ret = new Set();
	  if (!db || !db.content) return ret;
	  var records = lodash.toPairs(db.content);
	  var queue = [id];
	  var visited = new Set(queue);
	  while (queue.length > 0) {
	    var _id = queue.shift();
	    var rec = db.content[_id];
	    if (!rec) continue;
	    if (rec.group != null) ret.add(rec.group);
	    var _iteratorNormalCompletion17 = true;
	    var _didIteratorError17 = false;
	    var _iteratorError17 = undefined;

	    try {
	      for (var _iterator17 = records[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
	        var _step17$value = _slicedToArray(_step17.value, 2);

	        var key = _step17$value[0];
	        var content = _step17$value[1].content;

	        if (content && content[_id] && content[_id].controlled && !visited.has(key)) {
	          visited.add(key);
	          queue.push(key);
	        }
	      }
	    } catch (err) {
	      _didIteratorError17 = true;
	      _iteratorError17 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion17 && _iterator17.return) {
	          _iterator17.return();
	        }
	      } finally {
	        if (_didIteratorError17) {
	          throw _iteratorError17;
	        }
	      }
	    }
	  }
	  return ret;
	}

	function getIdGroup(db, itemId) {
	  if (db && db.content && db.content[itemId] && db.content[itemId].group != null) return db.content[itemId].group;else return null;
	}

	function cleanDatabase(db) {
	  var ret = db || {};
	  function _save(diff) {
	    ret = Diff.apply(ret, diff);
	  }
	  function _change(path, value) {
	    _save(path.reduceRight(function (ret, key) {
	      return _defineProperty({}, key, ret);
	    }, value));
	  }
	  function assign() {
	    for (var _len = arguments.length, path = Array(_len), _key = 0; _key < _len; _key++) {
	      path[_key] = arguments[_key];
	    }

	    _change(path, path.pop());
	  }
	  function remove() {
	    for (var _len2 = arguments.length, path = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      path[_key2] = arguments[_key2];
	    }

	    _change(path, null);
	  }

	  // move root items to content
	  if (!ret.content) lodash.forEach(ret, function (place, placeId) {
	    if (place != null && typeof place != "object") return;
	    remove(placeId);
	    assign("content", placeId, place);
	  });else // TODO delete later
	    lodash.forEach(ret, function (place, placeId) {
	      if (place != null && typeof place != "object") return;
	      if (placeId == "content") return;
	      remove(placeId);
	    });

	  // remove items with wrong type
	  lodash.forEach(ret.content, function (place, placeId) {
	    if (place == null || typeof place != "object" || placeId.match(/_default$/)) return remove("content", placeId);
	    if (place.type == "device") // TODO: remove later
	      assign("content", placeId, "type", "single");
	    if (!(place.type || "").match(/^(place|group|single|scenario)$/)) return remove("content", placeId);
	    if (place.device == placeId) remove("content", placeId, "device");
	    if (place.group != null && !Number.isFinite(place.group)) remove("content", placeId, "group");
	    if (place.ru || place.en) {
	      assign("content", placeId, "caption", place.caption || place.ru || place.en);
	      remove("content", placeId, "ru");
	      remove("content", placeId, "en");
	    }
	    if (place.newstate || place.newstate_timestamp || place.state_timestamp) {
	      remove("content", placeId, "newstate");
	      remove("content", placeId, "newstate_timestamp");
	      remove("content", placeId, "state_timestamp");
	    }
	  });

	  // create main
	  if (ret && (typeof ret.main != "string" || !ret.content || !ret.content[ret.main] || !ret.content[ret.main].type)) {
	    (function () {
	      var main = "main" + Math.ceil(Math.random() * 1000000000);
	      var i = 0;
	      lodash.forEach(ret.content, function (place, key) {
	        assign("content", main, "content", key, ++i);
	      });
	      if (ret.content && ret.content[main]) {
	        assign("content", main, "type", "place");
	        assign("main", main);
	      }
	    })();
	  }

	  // remove items with duplicate group
	  var reachable = void 0;
	  function groupIndex(key) {
	    if (!reachable) {
	      (function () {
	        var push = function push(key) {
	          if (!(key in reachable) && ret.content.hasOwnProperty(key)) {
	            reachable[key] = true;
	            reachableKeys.push(key);
	          }
	          return key;
	        };

	        reachable = Object.create(null);
	        var reachableKeys = [];

	        push(ret.main);
	        for (var _i = 0; _i < reachableKeys.length; ++_i) {
	          var place = ret.content[reachableKeys[_i]];
	          if (place && place.content) Object.keys(place.content).forEach(push);
	        }
	      })();
	    }
	    var i = 0;
	    if (ret.content[key].type == "group") i += 2;
	    if (key in reachable) i += 1;
	  }

	  var groups = Object.create(null);
	  lodash.forEach(ret.content, function (place, key) {
	    if (!place || place.group == null) return;
	    if (!groups[place.group]) groups[place.group] = key;else {
	      if (groupIndex(groups[place.group]) < groupIndex(key)) {
	        remove("content", groups[place.group]);
	        groups[place.group] = key;
	      } else remove("content", key);
	    }
	  });

	  // check content
	  lodash.forEach(ret.content, function (place, key) {
	    if (!place || place.content == null) return;
	    if (typeof place.content != "object") return remove("content", key, "content");
	    lodash.forEach(place.content, function (_, ckey) {
	      if (!ret.content[ckey] || typeof ret.content[ckey] != "object") remove("content", key, "content", ckey);
	    });
	    place = ret.content[key]; // reassign place cause it could change in previous forEach

	    lodash.keys(place.content).sort(function (a, b) {
	      return (place.content[a].index || 0) - (place.content[b].index || 0);
	    }).forEach(function (ckey, index) {
	      if (place.content[ckey].index != index) assign("content", key, "content", ckey, "index", index);
	      if (place.type != "place") remove("content", key, "content", ckey, "controlled");
	      if (place.type != "scenario") remove("content", key, "content", ckey, "action");
	      remove("content", key, "content", ckey, "state");
	    });
	  });

	  // check groups
	  lodash.forEach(ret.content, function (place, key) {
	    if (!place) return;
	    if (place.type != "single") return remove("content", key, "groups");
	    lodash.forEach(place.groups, function (v, ckey) {
	      if (typeof v != "object") assign("content", key, "groups", ckey, { linked: true });
	    });
	  });

	  return Diff.make(db, ret);
	}

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = function (socket) {

	  var manager = managerStream(socket);
	  var messages = manager.open("");

	  collections.forEach.call(messages, function () {
	    // TODO: implement
	  });

	  var command = (0, _command2.default)(manager);

	  return {
	    isActive: function isActive() {
	      return true;
	    },
	    GetState: function GetState(_ref4) {
	      var group = _ref4.group;
	      return regeneratorRuntime.async(function GetState$(_context) {
	        while (1) switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "getDevicePosition",
	              group: group,
	              destinationPosition: true
	            }).result);

	          case 2:
	            return _context.abrupt("return", _context.sent.destinationPosition.value);

	          case 3:
	          case "end":
	            return _context.stop();
	        }
	      }, null, this);
	    },
	    SetState: function SetState(_ref5) {
	      var group = _ref5.group;
	      var state = _ref5.state;
	      var single = _ref5.single;
	      var acknowledgement = _ref5.acknowledgement;
	      var model = _ref5.model;
	      return regeneratorRuntime.async(function SetState$(_context2) {
	        while (1) switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "controlDevice",
	              group: group,
	              ack: Boolean(acknowledgement),
	              action: "pos",
	              position: state
	            }).result);

	          case 2:
	          case "end":
	            return _context2.stop();
	        }
	      }, null, this);
	    },
	    Scenario: function Scenario(_ref6) {
	      var group = _ref6.group;
	      var single = _ref6.single;
	      var acknowledgement = _ref6.acknowledgement;
	      var model = _ref6.model;
	      return regeneratorRuntime.async(function Scenario$(_context3) {
	        while (1) switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "controlDevice",
	              group: group,
	              ack: Boolean(acknowledgement),
	              action: "script"
	            }).result);

	          case 2:
	          case "end":
	            return _context3.stop();
	        }
	      }, null, this);
	    },
	    AddGroup: function AddGroup(_ref7) {
	      var group = _ref7.group;
	      var groupId = _ref7.groupId;
	      var single = _ref7.single;
	      var acknowledgement = _ref7.acknowledgement;
	      var action = _ref7.action;
	      return regeneratorRuntime.async(function AddGroup$(_context4) {
	        while (1) switch (_context4.prev = _context4.next) {
	          case 0:
	            _context4.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "writeDeviceGroup",
	              group: group,
	              ack: Boolean(acknowledgement),
	              writeGroup: groupId,
	              action: action == null ? undefined : action
	            }).result);

	          case 2:
	          case "end":
	            return _context4.stop();
	        }
	      }, null, this);
	    },
	    RemoveGroup: function RemoveGroup(_ref8) {
	      var group = _ref8.group;
	      var groupId = _ref8.groupId;
	      var single = _ref8.single;
	      var acknowledgement = _ref8.acknowledgement;
	      return regeneratorRuntime.async(function RemoveGroup$(_context5) {
	        while (1) switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "deleteDeviceGroup",
	              group: group,
	              ack: Boolean(acknowledgement),
	              deleteGroup: groupId
	            }).result);

	          case 2:
	          case "end":
	            return _context5.stop();
	        }
	      }, null, this);
	    },
	    ClearAbandonedGroup: function ClearAbandonedGroup(_ref9) {
	      var group = _ref9.group;
	      return regeneratorRuntime.async(function ClearAbandonedGroup$(_context6) {
	        while (1) switch (_context6.prev = _context6.next) {
	          case 0:
	            _context6.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "deleteDeviceGroup",
	              group: group,
	              ack: false,
	              deleteGroup: group
	            }).result);

	          case 2:
	          case "end":
	            return _context6.stop();
	        }
	      }, null, this);
	    },
	    InitializeDevice: function InitializeDevice(_ref10) {
	      var group = _ref10.group;
	      var acknowledgement = _ref10.acknowledgement;
	      var data;
	      return regeneratorRuntime.async(function InitializeDevice$(_context7) {
	        while (1) switch (_context7.prev = _context7.next) {
	          case 0:
	            _context7.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "initDeviceGroup",
	              group: group,
	              // TODO: што такое action???
	              ack: Boolean(acknowledgement)
	            }).result);

	          case 2:
	            data = _context7.sent;

	            if (!(data && data.destinationPosition)) {
	              _context7.next = 7;
	              break;
	            }

	            return _context7.abrupt("return", data.destinationPosition.value);

	          case 7:
	            return _context7.abrupt("return", null);

	          case 8:
	          case "end":
	            return _context7.stop();
	        }
	      }, null, this);
	    },
	    DeinitializeDevice: function DeinitializeDevice(_ref11) {
	      var group = _ref11.group;
	      return regeneratorRuntime.async(function DeinitializeDevice$(_context8) {
	        while (1) switch (_context8.prev = _context8.next) {
	          case 0:
	            _context8.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "deleteDeviceGroup",
	              group: group,
	              ack: false,
	              deleteGroup: 0
	            }).result);

	          case 2:
	          case "end":
	            return _context8.stop();
	        }
	      }, null, this);
	    },
	    UpdateFirmware: function UpdateFirmware(firmware) {
	      return regeneratorRuntime.async(function UpdateFirmware$(_context9) {
	        while (1) switch (_context9.prev = _context9.next) {
	          case 0:
	            if (!Buffer.isBuffer(firmware)) firmware = new Buffer(firmware);
	            _context9.next = 3;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "updateFirmware",
	              type: "modem",
	              firmware: firmware.toString("base64"),
	              size: firmware.length
	            }).result);

	          case 3:
	          case "end":
	            return _context9.stop();
	        }
	      }, null, this);
	    },
	    GetVersion: function GetVersion() {
	      return regeneratorRuntime.async(function GetVersion$(_context10) {
	        while (1) switch (_context10.prev = _context10.next) {
	          case 0:
	            _context10.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "netro",
	              command: "getModemParams",
	              modemVersion: true
	            }).result);

	          case 2:
	            return _context10.abrupt("return", _context10.sent.modemVersion);

	          case 3:
	          case "end":
	            return _context10.stop();
	        }
	      }, null, this);
	    },
	    DeviceProgrammingMode: function DeviceProgrammingMode(value) {
	      return regeneratorRuntime.async(function DeviceProgrammingMode$(_context11) {
	        while (1) switch (_context11.prev = _context11.next) {
	          case 0:
	            _context11.next = 2;
	            return regeneratorRuntime.awrap(command({
	              class: "service",
	              command: "setDeniedCommand",
	              switchToProgram: value
	            }).result);

	          case 2:
	            return _context11.abrupt("return", _context11.sent);

	          case 3:
	          case "end":
	            return _context11.stop();
	        }
	      }, null, this);
	    }
	  };
	};

	__webpack_require__(357);

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _JSONTransform = __webpack_require__(341);

	var _JSONTransform2 = _interopRequireDefault(_JSONTransform);

	var _command = __webpack_require__(544);

	var _command2 = _interopRequireDefault(_command);

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var timeout = 2000;

	var labeling = collections.transformer(collections.map(function (_ref) {
	  var _ref2 = _slicedToArray(_ref, 2);

	  var label = _ref2[0];
	  var data = _ref2[1];
	  return _extends({}, data, { label: label });
	}), collections.map(function (_ref3) {
	  var label = _ref3.label;

	  var data = _objectWithoutProperties(_ref3, ["label"]);

	  return [label || "", data];
	}));

	var managerStream = collections.connect(collections.mixer(function (data, value) {
	  return console.error("unexpected data from manager", data, value);
	}), labeling, _JSONTransform2.default, collections.transformer(collections.filter(function (d) {
	  return console.log("<<<".green, new Date(), String(d)) || true;
	}), collections.filter(function (d) {
	  return console.log(">>>".red, new Date(), String(d)) || true;
	})), collections.duplex);

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _lodash = __webpack_require__(329);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _uid = __webpack_require__(328);

	var _uid2 = _interopRequireDefault(_uid);

	var _defun = __webpack_require__(333);

	var _defun2 = _interopRequireDefault(_defun);

	var _collections = __webpack_require__(336);

	var collections = _interopRequireWildcard(_collections);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var timeout = 7000;

	var read = function read(value) {
	  if (value.command != "answer") throw new Error("unknown class");
	  if (value.status == "error") throw new Error(value.error);
	  if (value.status == "cancelled") throw new Error("cancelled");
	  return value;
	};

	exports.default = function (manager) {
	  return function (command, onprogress) {
	    var id = (0, _uid2.default)();
	    var acceptedResolve = void 0,
	        accepted = new _bluebird2.default(function (r) {
	      return acceptedResolve = r;
	    });
	    var startedResolve = void 0,
	        started = new _bluebird2.default(function (r) {
	      return startedResolve = r;
	    });
	    var cancelCommandResolve = void 0,
	        cancelCommand = new _bluebird2.default(function (r) {
	      return cancelCommandResolve = r;
	    });

	    var close = function close(error) {
	      console.log("+++".blue, new Date(), "Command closed.", error);
	      cancelCommandResolve([]);
	      accepted.isPending() && acceptedResolve(_bluebird2.default.reject(error));
	      started.isPending() && startedResolve(_bluebird2.default.reject(error));
	      manager.close(id);
	    };
	    var timer = setTimeout(close, timeout, new Error("timeout"));
	    var cindex = null;

	    var control = collections.concat([command], cancelCommand);
	    var input = collections.concat(manager.open(id)(control), regeneratorRuntime.mark(function _callee() {
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) switch (_context.prev = _context.next) {
	          case 0:
	            throw new Error("unexpected end");

	          case 1:
	          case "end":
	            return _context.stop();
	        }
	      }, _callee, this);
	    })());

	    var result = collections.for(input, regeneratorRuntime.mark(function _callee2() {
	      var value;
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            value = void 0;
	            _context2.next = 4;
	            return;

	          case 4:
	            _context2.t0 = _context2.sent;
	            value = read(_context2.t0);

	            if (!(value.status != "accepted")) {
	              _context2.next = 8;
	              break;
	            }

	            throw new Error("command not accepted");

	          case 8:
	            cindex = value.index;
	            acceptedResolve(true);
	            clearTimeout(timer);

	            _context2.next = 13;
	            return;

	          case 13:
	            _context2.t1 = _context2.sent;
	            value = read(_context2.t1);

	            startedResolve(true);

	          case 16:
	            if (!(value.status != "completed")) {
	              _context2.next = 29;
	              break;
	            }

	            if (!(value.status == "progress")) {
	              _context2.next = 21;
	              break;
	            }

	            onprogress && onprogress(value.progress);
	            _context2.next = 23;
	            break;

	          case 21:
	            if (!(value.status != "started")) {
	              _context2.next = 23;
	              break;
	            }

	            throw new Error("unknown status");

	          case 23:
	            _context2.next = 25;
	            return;

	          case 25:
	            _context2.t2 = _context2.sent;
	            value = read(_context2.t2);
	            _context2.next = 16;
	            break;

	          case 29:
	            return _context2.abrupt("return", value);

	          case 32:
	            _context2.prev = 32;
	            _context2.t3 = _context2["catch"](0);

	            close(_context2.t3);
	            throw _context2.t3;

	          case 36:
	            _context2.prev = 36;

	            close();
	            return _context2.finish(36);

	          case 39:
	          case "end":
	            return _context2.stop();
	        }
	      }, _callee2, this, [[0, 32, 36, 39]]);
	    }));

	    return {
	      started: started,
	      result: result,
	      cancel: function cancel() {
	        return regeneratorRuntime.async(function cancel$(_context3) {
	          while (1) switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return regeneratorRuntime.awrap(accepted);

	            case 2:
	              if (cindex != null) cancelCommandResolve([{
	                class: "service",
	                command: "cancelCommand",
	                index: cindex
	              }]);else close();

	            case 3:
	            case "end":
	              return _context3.stop();
	          }
	        }, null, this);
	      }
	    };
	  };
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _this = this;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _bluebird = __webpack_require__(286);

	var _bluebird2 = _interopRequireDefault(_bluebird);

	var _os = __webpack_require__(369);

	var os = _interopRequireWildcard(_os);

	var _fs = __webpack_require__(350);

	var fs = _interopRequireWildcard(_fs);

	var _lodash = __webpack_require__(329);

	var lodash = _interopRequireWildcard(_lodash);

	var _dnsme = __webpack_require__(371);

	var _dnsme2 = _interopRequireDefault(_dnsme);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_bluebird2.default.promisifyAll(fs);

	exports.default = function (serverConfig) {
	  return (0, _dnsme2.default)(serverConfig.localdns, function _callee(_name, address) {
	    var ret, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, value, a;

	    return regeneratorRuntime.async(function _callee$(_context) {
	      while (1) switch (_context.prev = _context.next) {
	        case 0:
	          ret = {};

	          if (!serverConfig.localdns) {
	            _context.next = 33;
	            break;
	          }

	          _iteratorNormalCompletion = true;
	          _didIteratorError = false;
	          _iteratorError = undefined;
	          _context.prev = 5;
	          _iterator = lodash.toPairs(serverConfig.localdns.answer)[Symbol.iterator]();

	        case 7:
	          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	            _context.next = 19;
	            break;
	          }

	          _step$value = _slicedToArray(_step.value, 2);
	          value = _step$value[0];
	          a = _step$value[1];

	          if (!/\//.test(value)) {
	            _context.next = 15;
	            break;
	          }

	          _context.next = 14;
	          return regeneratorRuntime.awrap(fs.readFileAsync(value));

	        case 14:
	          value = _context.sent;

	        case 15:
	          ret[a] = [String(value)];

	        case 16:
	          _iteratorNormalCompletion = true;
	          _context.next = 7;
	          break;

	        case 19:
	          _context.next = 25;
	          break;

	        case 21:
	          _context.prev = 21;
	          _context.t0 = _context["catch"](5);
	          _didIteratorError = true;
	          _iteratorError = _context.t0;

	        case 25:
	          _context.prev = 25;
	          _context.prev = 26;

	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }

	        case 28:
	          _context.prev = 28;

	          if (!_didIteratorError) {
	            _context.next = 31;
	            break;
	          }

	          throw _iteratorError;

	        case 31:
	          return _context.finish(28);

	        case 32:
	          return _context.finish(25);

	        case 33:
	          if (!Object.keys(ret).length) {
	            _context.next = 35;
	            break;
	          }

	          return _context.abrupt("return", ret);

	        case 35:
	          ret = _dnsme2.default.getInterfaces(lodash.fromPairs(lodash.toPairs(os.networkInterfaces()).filter(function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 1);

	            var name = _ref2[0];
	            return (/^wl/.test(name)
	            );
	          })));

	          if (!Object.keys(ret).length) {
	            _context.next = 38;
	            break;
	          }

	          return _context.abrupt("return", ret);

	        case 38:
	          return _context.abrupt("return", true);

	        case 39:
	        case "end":
	          return _context.stop();
	      }
	    }, null, _this, [[5, 21, 25, 33], [26,, 28, 32]]);
	  });
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var util = __webpack_require__(325), events = __webpack_require__(374), crypto = __webpack_require__(400);
	var fs = __webpack_require__(350), URL = __webpack_require__(324), path = __webpack_require__(389);

	var STATE = {
	  CONNECTING: 0,
	  OPEN: 1,
	  CLOSING: 2,
	  CLOSED: 3
	};

	module.exports = exports = WebSocket;

	var EVTS = ['close', '_closing', 'connect', 'error', 'message'], length = EVTS.length;

	function WebSocket() {
	  var self = this;
	  events.EventEmitter.call(self);

	  self.readyState = STATE.CONNECTING;

	  self.on('error', function(err) {
	    self.close(err && err.message);
	    if('function' === typeof self.onerror)
	      self.onerror(err);
	  });

	  self.on('close', function() {
	    self.readyState = STATE.CLOSED;
	    if('function' === typeof self.onclose)
	      self.onclose();
	  });

	  self.on('open', function() {
	    self.readyState = STATE.OPEN;
	    if('function' === typeof self.onopen)
	      self.onopen();
	  });

	  self.on('message', function() {
	    if('function' === typeof self.onmessage)
	      self.onmessage();
	  });

	  self.on('_closing', function(reason) {
	    self.readyState = STATE.CLOSING;
	    process.nextTick(function() {
	      close.call(self, reason);
	    });
	  });

	  self.on('connect', function() {
	    self.emit('open');
	  });

	  var args = arguments;
	  process.nextTick(function() {
	    handShake.apply(self, args);
	  });
	}
	util.inherits(WebSocket, events.EventEmitter);

	function handShake() {
	  var self = this;
	  var arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2], arg3 = arguments[3];

	  var Protocol = __webpack_require__(547)("./" + _getProtocol.apply(null, arguments));
	  var protocol = self.protocol = new Protocol(arg0, arg1, arg2, arg3);

	  var i = length, evts = EVTS;
	  for(; i--;)
	    _bubbling(evts[i], protocol, self);

	  self.on('connect', function(socket) {
	    self.secure = !!socket.encrypted;
	    var _socket = socket['socket'] || socket;
	    _socket.setTimeout(0);
	    _socket.setNoDelay(true);
	    _socket.setKeepAlive(true, 0);
	  });
	  protocol.handShake.apply(protocol, arguments);

	};

	function close(reason) {
	  var self = this, protocol = self.protocol;
	  self.send = function() {
	  };
	  protocol.close(reason);
	}

	WebSocket.prototype.send = function() {
	  var protocol = this.protocol;
	  protocol.write.apply(protocol, arguments);
	};

	WebSocket.prototype.close = function(reason) {
	  this.emit('_closing');
	};

	WebSocket.prototype.addEventListener = WebSocket.prototype.addListener;

	function _bubbling(evt, from, to) {
	  from.on(evt, function() {
	    var args = Array.prototype.slice.call(arguments);
	    args.unshift(evt);
	    to.emit.apply(to, args);
	  });
	}

	function _getProtocol(arg0) {
	  // for client
	  if('string' === typeof arg0)
	    return 'rfc6455';

	  var header = arg0['headers'];
	  var version = header['sec-websocket-version'];

	  if('8' === version)
	    return 'draft-10';

	  if(header['sec-websocket-key1'] && header['sec-websocket-key2'])
	    return 'draft-00';
	  // default: rfc6455
	  return 'rfc6455';
	}


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./draft-00": 548,
		"./draft-00.js": 548,
		"./draft-10": 549,
		"./draft-10.js": 549,
		"./rfc6455": 551,
		"./rfc6455.js": 551,
		"./server": 552,
		"./server.js": 552,
		"./socket": 546,
		"./socket.js": 546,
		"./websockets": 553,
		"./websockets.js": 553
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 547;


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var util = __webpack_require__(325), events = __webpack_require__(374), crypto = __webpack_require__(400);
	var URL = __webpack_require__(324);

	var HANDSHAKE_RESPONSE = 'HTTP/1.1 101 WebSocket Protocol Handshake\r\nUpgrade: WebSocket\r\nConnection: Upgrade\r\n';

	module.exports = exports = Draft00;

	function Draft00(arg0, arg1) {
	  var self = this;
	  events.EventEmitter.call(self);

	  var isClient = 'string' === typeof arg0;

	  var Core = isClient ? Client: Server;
	  self.core = new Core(self);

	  var opts = self._options = (isClient ? arguments[1]: arguments[3]) || {};
	  if('string' === typeof opts)
	    opts = self._options = {
	      protocols: [opts]
	    };
	  else if('array' === typeof opts)
	    opts = self._options = {
	      protocols: opts
	    };
	}
	util.inherits(Draft00, events.EventEmitter);

	function _option(key) {
	  return this._options[key];
	}

	function Server(parent) {
	  this.parent = parent;
	}
	function Client(parent) {
	  this.parent = parent;
	}

	// ---------------------------------------------------
	// close
	// ---------------------------------------------------
	Server.prototype.close = function(reason) {
	  close.call(this, reason);
	};
	Draft00.prototype.close = function(reason) {
	  this.core.close(reason);
	};
	function close(reason, maskbit) {
	  var socket = this.parent.socket;
	  socket.writable && socket.end();
	  socket.destroy();
	}

	//---------------------------------------------------
	//ping
	//---------------------------------------------------
	Server.prototype.ping = function(mess) {
	  this.parent.emit('pong', mess);
	};
	Client.prototype.ping = function() {
	};
	Draft00.prototype.ping = function(mess) {
	  this.core.ping(mess);
	};

	// ---------------------------------------------------
	// write
	// ---------------------------------------------------
	Server.prototype.write = function(massage) {
	  write.call(this, massage);
	};
	Draft00.prototype.write = function(massage) {
	  this.core.write(massage);
	};
	function write(message, maskbit) {
	  var socket = this.parent.socket;

	  var length = Buffer.byteLength(message);
	  var mess = new Buffer(length + 2);

	  mess[0] = 0;
	  mess.write(message, 1);
	  mess[length + 1] = 0xFF;

	  socket.write(mess);

	}

	// ---------------------------------------------------
	// parse
	// ---------------------------------------------------
	Server.prototype.parse = function(data) {
	  parse.call(this, data);
	};
	Draft00.prototype.parse = function(data) {
	  this.core.parse(data);
	};
	function parse(data) {
	  var self = this, parent = self.parent;
	  self.buffer = self.buffer || [];

	  var i = 0, l = data.length;
	  
	  try {
	    frame();
	  } catch(err) {
	    parent.close();
	  }

	  function frame() {
	    var type = self.type == null ? self.type = data[i++]: self.type;
	    var sb = type >>> 7;
	    if(sb) {
	      if(0xFF !== type)
	        throw new Error();// abort
	      var length = 0, b;
	      for(; i < l && b !== 0; i++)
	        b = _length(data[i]);

	    } else {
	      if(0 !== type)
	        throw new Error();// abort
	      for(; i < l;) {
	        var b = data[i++];
	        0xFF === b ? _flush(): _data(b);
	      }
	    }

	    function _data(d) {
	      self.buffer.push(d);
	    }
	    function _length(d) {
	      // TODO
	    }
	    function _flush() {
	      var mess = self.buffer;
	      parent.emit('message', Buffer(mess).toString());
	      self.buffer = [], self.type = null;
	      if(i < l)
	        frame();
	    }
	  }
	}

	// ---------------------------------------------------
	// hand shake
	// ---------------------------------------------------
	Draft00.prototype.handShake = function() {
	  var core = this.core;
	  core.handShake.apply(core, arguments);
	};
	Server.prototype.handShake = function(req, socket, upgradeHead) {
	  var parent = this.parent, head = req['headers'];
	  parent.socket = socket;

	  if('WebSocket' !== head['upgrade'] || 'Upgrade' !== head['connection'])
	    return socket.write(ERR_400);

	  var host = head['host'], _origin = head['origin'];
	  var _key1 = head['sec-websocket-key1'], _key2 = head['sec-websocket-key2'];
	  var _key3 = upgradeHead;
	  var _secure = !!req.socket.encrypted;
	  var protocol = _secure ? 'wss://': 'ws://';

	  var url = URL.parse(protocol + host);
	  var _host = url.hostname, _port = url.port, _resource = url.pathname;

	  var _location = protocol + _host;
	  if(_port && +_port !== (_secure ? 443: 80))
	    _location += ':' + _port;
	  _location += req.url;

	  function makeKey(key) {
	    var i, len, num = '', cnt = 0;
	    for(i = 0, len = key.length; i < len; i++)
	      if(key[i].match(/\d/))
	        num += key[i];
	      else if('\u0020' === key[i])
	        cnt++;
	    var part = ~~(+num / cnt);
	    return Buffer([part >>> 24 & 0xFF, part >>> 16 & 0xFF, part >>> 8 & 0xFF,
	        part & 0xFF]);
	  }

	  var open = true, close = function() {
	    if(open)
	      open = false, parent.emit('close');
	  };

	  socket.on('close', close);

	  socket.on('end', close);

	  socket.on('data', function(data) {
	    parent.parse(data);
	  });

	  var _part1 = makeKey(_key1), _part2 = makeKey(_key2);

	  var hash = crypto.createHash('md5');
	  hash.update(_part1);
	  hash.update(_part2);
	  hash.update(_key3);

	  var head = HANDSHAKE_RESPONSE;
	  head += 'Sec-WebSocket-Origin: ' + _origin + '\r\n';
	  head += 'Sec-WebSocket-Location: ' + _location + '\r\n\r\n';
	  socket.write(head + hash.digest(), 'binary');
	  parent.emit('connect', socket);

	  function _isAllowed() {
	    var validate = parent._options['validateOrigin'];
	    return 'function' === typeof validate ? validate(head): true;
	  }
	};


/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var util = __webpack_require__(325), events = __webpack_require__(374), crypto = __webpack_require__(400);
	var URL = __webpack_require__(324), http = __webpack_require__(326), https = __webpack_require__(550);

	var GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
	var HANDSHAKE_RESPONSE = 'HTTP/1.1 101 Switching Protocols\r\nSec-WebSocket-Protocol: *\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: ';
	var ERR_400 = 'HTTP/1.1 400 Bad Request\r\n\r\n400 Bad Request';
	var ERR_403 = 'HTTP/1.1 403 Forbidden\r\n\r\n403 Forbidden';
	var ERR_426 = 'HTTP/1.1 426 Upgrade Required\r\n\r\n426 Upgrade Required';

	module.exports = exports = Draft10;

	function Draft10(arg0, arg1) {
	  var self = this;
	  events.EventEmitter.call(self);

	  var isClient = 'string' === typeof arg0;

	  var Core = isClient ? Client: Server;
	  self.core = new Core(self);

	  var opts = self._options = (isClient ? arguments[1]: arguments[3]) || {};
	  if('string' === typeof opts)
	    opts = self._options = {
	      protocols: [opts]
	    };
	  else if('array' === typeof opts)
	    opts = self._options = {
	      protocols: opts
	    };

	  var bufSize = opts['bufferSize'];
	  if(!bufSize || bufSize <= 0)
	    opts['bufferSize'] = BUFFER_SIZE;

	  self.on('_data', function(data, fin, opcode) {
	    if(0 !== opcode)
	      self.opcode = opcode, self.buffer = [];
	//    Array.prototype.push.apply(self.buffer, data);
	    self.buffer = self.buffer.concat(data);
	    self.emit('data', new Buffer(data), fin, self.opcode);
	    if(fin) {
	      var buf = new Buffer(self.buffer);
	      var message = 1 === self.opcode ? buf.toString(): buf;
	      self.emit('message', message);
	    }
	  });
	}
	util.inherits(Draft10, events.EventEmitter);

	function _option(key) {
	  return this._options[key];
	}

	function Server(parent) {
	  this.parent = parent;
	}
	function Client(parent) {
	  this.parent = parent;
	}

	// ---------------------------------------------------
	// close
	// ---------------------------------------------------
	Server.prototype.close = function(reason) {
	  close.call(this, reason, 0);
	};
	Client.prototype.close = function(reason) {
	  close.call(this, reason, 1);
	};
	Draft10.prototype.close = function(reason) {
	  this.core.close(reason);
	};
	function close(reason, maskbit) {
	  var self = this, parent = self.parent;
	  var message = ERR_CODE[reason] || (reason + '');
	  _ctrl.call(self, OPCODE['close'], maskbit, message);

	  parent.close = function() {
	    var socket = parent.socket;
	    socket.writable && socket.end();
	    socket.destroy();
	  };
	}

	// ---------------------------------------------------
	// Control Frames
	// ---------------------------------------------------
	function _ctrl(opcode, maskbit, data) {
	  var parent = this.parent, buf = new Buffer(data);
	  if(125 < buf.length)
	    buf = buf.slice(0, 124);

	  var fin = 1;
	  var ext = [0x00, 0x00, 0x00];

	  parent.socket.write(frame(fin, ext, opcode, maskbit, buf));

	}

	// ---------------------------------------------------
	// write
	// ---------------------------------------------------
	Server.prototype.write = function(massage) {
	  write.call(this, massage, 0);
	};
	Client.prototype.write = function(massage) {
	  write.call(this, massage, 1);
	};
	Draft10.prototype.write = function(massage) {
	  this.core.write(massage);
	};
	function write(message, maskbit) {
	  var parent = this.parent, socket = parent.socket;

	  var buf = new Buffer(message), len = buf.length;

	  var i, data = [], size = parent._options['bufferSize'];
	  for(i = 0; i < len; i += size)
	    data.push(buf.slice(i, Math.min(buf.length, i + size)));

	  var fin = 0;
	  var ext = [0, 0, 0];
	  var opcode = OPCODE[typeof message] || OPCODE['binary'];
	  var mask = maskbit;

	  i = 0, len = data.length;

	  for(; i < len - 1; i++, opcode = 0)
	    socket.write(frame(fin, ext, opcode, mask, data[i]));

	  fin = 1;
	  socket.write(frame(fin, ext, opcode, mask, data[i]));

	}

	// ---------------------------------------------------
	// pong
	// ---------------------------------------------------
	Draft10.prototype.pong = Draft10.prototype.write;

	// ---------------------------------------------------
	// parse
	// ---------------------------------------------------
	Server.prototype.parse = function(data) {
	  parse.call(this, data, 1);
	};
	Client.prototype.parse = function(data) {
	  parse.call(this, data, 0);
	};
	Draft10.prototype.parse = function(data) {
	  this.core.parse(data);
	};
	function parse(data, maskbit) {
	  var self = this, parent = self.parent, i = 0;

	  var OP_FUNC = {
	    _def: function(payload, fin, opcode) {
	      parent.emit('_data', payload, fin, opcode);
	    },
	    0x00: function(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 0);
	    },
	    0x01: function string(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 1);
	    },
	    0x02: function binary(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 2);
	    },
	    0x08: function close() {
	      parent.emit('_closing', 1000);
	    },
	    0x09: function ping(payload) {
	      self.pong(payload);
	    },
	    0x0A: function pong(payload) {
	      // TODO
	    }
	  };

	  if('undefined' === typeof self.buffer)
	    _parseHead();

	  _parsePayload();

	  function _parseHead() {

	    var byte = data[i++];
	    var fin = byte >>> 7;
	    var ope = (byte & 0x0F);

	    byte = data[i++];
	    var mask = byte >>> 7;
	    if(maskbit !== mask)
	      return parent.emit('error', 1002);
	    var len = byte & 0x7F;

	    if(127 === len)
	      len = ((data[i++] << 24) + (data[i++] << 16) + (data[i++] << 8) + data[i++]) * Math
	          .pow(2, 32) + (data[i++] << 24) + (data[i++] << 16) + (data[i++] << 8) + data[i++];
	    else if(126 === len)
	      len = (data[i++] << 8) + data[i++];

	    var maskkey = maskbit ? [data[i++], data[i++], data[i++], data[i++]]: null;

	    self.buffer = {
	      fin: fin,
	      ope: ope,
	      length: len,
	      mask: maskkey,
	      payload: []
	    };
	  };

	  function _parsePayload() {
	    var buf = self.buffer, len = data.length;
	    var payload = buf.payload, maskkey = buf.mask, ope = buf.ope, fin = buf.fin;
	    var j = payload.length % 4;
	    for(; buf.length && i < len; j++, buf.length--)
	      payload.push(maskkey ? data[i++] ^ maskkey[j % 4]: data[i++]);

	    if('function' !== typeof OP_FUNC[ope])
	      return parent.emit('error', 1002);

	    if(0 === buf.length) {
	      OP_FUNC[ope](payload, !!fin);
	      delete self.buffer;
	    }

	    // TODO test
	    if(i < len)
	      parse.call(self, data.slice(i), maskbit);

	  }
	}

	// ---------------------------------------------------
	// hand shake
	// ---------------------------------------------------
	Draft10.prototype.handShake = function() {
	  var core = this.core;
	  core.handShake.apply(core, arguments);
	};
	Server.prototype.handShake = function(req, socket, upgradeHead) {
	  var parent = this.parent, head = req['headers'];
	  parent.socket = socket;

	  var i, keys = ['host', 'sec-websocket-key'];
	  for(i = keys.length; i--;)
	    if(!(keys[i] in head))
	      return socket.write(ERR_400);
	  if('websocket' !== head['upgrade'])
	    return socket.write(ERR_400);
	  if('8' !== head['sec-websocket-version'])
	    return socket.write(ERR_426);
	  if(true !== _isAllowed())
	    return socket.write(ERR_403);

	  // TODO
	  head['sec-websocket-protocol'], head['cookie'];

	  var open = true, close = function() {
	    if(open)
	      open = false, parent.emit('close');
	  };

	  var newkey = _hashAndEncode(head['sec-websocket-key']);
	  socket.write(HANDSHAKE_RESPONSE);
	  socket.write(newkey + '\r\n\r\n');
	  process.nextTick(function() {
	    socket.on('close', close);
	    socket.on('end', close);
	    socket.on('data', function(data) {
	      parent.parse(data);
	    });
	    parent.emit('connect', socket);
	  });

	  function _isAllowed() {
	    var validate = parent._options['validateOrigin'];
	    return 'function' === typeof validate ? validate(head): true;
	  }
	};
	Client.prototype.handShake = function(uri) {
	  var parent = this.parent, url = URL.parse(uri);
	  parent.URL = uri;

	  var secure = parent.secure = 'wss:' === url['protocol'];

	  var URI = url['protocol'];
	  URI += '//';
	  URI += url['host'];
	  URI += url['pathname'] || '/';
	  URI += (url['search'] || '').replace(/#/, '%23');

	  var key = _createKey();

	  var opts = {
	    port: url['port'] || (secure ? 443: 80),
	    host: url['hostname'],
	    headers: {
	      Connection: 'Upgrade',
	      Upgrade: 'websocket',
	      'Sec-Websocket-Key': key,
	      'Sec-Websocket-Origin': 'node-websockets',
	      'Sec-Websocket-Version': 8
	    }
	  };

	  if(secure) {
	    opts['key'] = parent._options['key'];
	    opts['cert'] = parent._options['cert'];
	    opts['ca'] = parent._options['ca'];
	  }

	  var prtcl = secure ? https: http, agent;
	  if(prtcl.getAgent) {
	    agent = prtcl.getAgent(opts['host'], opts['port']);
	    opts['agent'] = agent;
	  }
	  var req = prtcl.request(opts);
	  req.end();
	  agent = agent || req;

	  var newkey = _hashAndEncode(key);

	  agent.on('upgrade', function(res, socket, upgradeHead) {

	    socket.on('close', function(had_error) {
	      parent.emit('close', had_error);
	    });

	    socket.on('data', function(data) {
	      parent.parse(data);
	    });

	    // TODO
	    var status = res['statusCode'];
	    if(101 !== status)
	      return parent.emit('_closing', status);

	    var head = res['headers'];
	    if('websocket' !== head['upgrade'] || 'Upgrade' !== head['connection'])
	      return parent.emit('error', new Error('Invalid Response Header'));

	    if(head['sec-websocket-accept'] !== newkey)
	      return parent.emit('error', new Error('Invalid Server Response'));

	    parent.socket = socket;

	    parent.emit('connect', socket);
	  });
	  req.on('error', function(err) {
	    parent.emit('error', err);
	  });

	  function _createKey() {
	    var i, arr = [];
	    for(i = 16; i--;)
	      arr.push(~~(Math.random() * 256));
	    return (new Buffer(arr)).toString('base64');
	  }
	};

	var OPCODE = {
	  string: 0x01,
	  binary: 0x02,
	  close: 0x08,
	  ping: 0x09,
	  pong: 0x0A
	};
	var ERR_CODE = {
	  1000: 'Normal Closure',
	  1001: 'Going Away',
	  1002: 'Protocol error',
	  1003: 'Unsupported Data',
	  1004: 'Frame Too Large',
	  1005: 'No Status Rcvd', // MUST NOT be set in Close control
	  1006: 'Abnormal Closure', // MUST NOT be set in Close control
	  1007: 'Invalid UTF-8'
	};

	var BUFFER_SIZE = 2000000;

	function _hashAndEncode(key) {
	  var newkey = (key + GUID).trim();
	  var shasum = crypto.createHash('sha1');
	  shasum.update(newkey);
	  return shasum.digest('base64');
	}

	function frame(fin, ext, opcode, mask, payload) {
	  var arr = [];
	  var push = Array.prototype.push;
	  push.apply(arr, _1st(fin, ext, opcode));
	  push.apply(arr, _length(mask, payload));
	  arr = arr.concat(_payload(mask, payload));

	  return new Buffer(arr);
	}

	function _1st(fin, ext, opcode) {
	  return [(fin << 7) | (ext[0] << 6) | (ext[1] << 5) | (ext[2] << 4) | opcode];
	}

	function _length(mask, payload) {
	  var length = payload.length, len = length, extlen = [];
	  if(length <= 125)
	    ;
	  else if(length <= 0xFFFF) {
	    len = 126;
	    extlen.push(length >>> 8);
	    extlen.push(length & 0xFF);
	  } else {
	    len = 127;
	    // var zerofill =
	    // '0000000000000000000000000000000000000000000000000000000000000000';
	    var zerofill = '000000000000000000000000000000000000000000000000';
	    var bin = (zerofill + length.toString(2)).slice(-64);
	    extlen.push(parseInt(bin.substr(0, 8), 2));
	    extlen.push(parseInt(bin.substr(8, 8), 2));
	    extlen.push(parseInt(bin.substr(16, 8), 2));
	    extlen.push(parseInt(bin.substr(24, 8), 2));
	    extlen.push(parseInt(bin.substr(32, 8), 2));
	    extlen.push(parseInt(bin.substr(40, 8), 2));
	    extlen.push(parseInt(bin.substr(48, 8), 2));
	    extlen.push(parseInt(bin.substr(56, 8), 2));
	  }
	  extlen.unshift((mask << 7) | len);
	  return extlen;
	}

	function _payload(maskbit, payload) {
	  var i, mask, ret, length;
	  if(maskbit) {
	    mask = makeMask(), ret = mask.slice(-4), length = payload.length;
	    for(i = 0; i < length; i++)
	      ret.push(payload[i] ^ mask[i % 4]);
	  } else
	    ret = Array.prototype.slice.call(payload);

	  return ret;

	  function makeMask() {
	    var i, ret = [];
	    for(i = 4; i--;)
	      ret.push(~~(Math.random() * 256));
	    return ret;
	  }
	}


/***/ },
/* 550 */
/***/ function(module, exports) {

	module.exports = require("https");

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var util = __webpack_require__(325), events = __webpack_require__(374), crypto = __webpack_require__(400);
	var URL = __webpack_require__(324), http = __webpack_require__(326), https = __webpack_require__(550);

	var GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
	var HANDSHAKE_RESPONSE = 'HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: ';
	var ERR_400 = 'HTTP/1.1 400 Bad Request\r\n\r\n400 Bad Request';
	var ERR_403 = 'HTTP/1.1 403 Forbidden\r\n\r\n403 Forbidden';
	var ERR_426 = 'HTTP/1.1 426 Upgrade Required\r\n\r\n426 Upgrade Required';

	module.exports = exports = Rfc6455;

	function Rfc6455(arg0, arg1) {
	  var self = this;
	  events.EventEmitter.call(self);

	  var isClient = 'string' === typeof arg0;

	  var Core = isClient ? Client: Server;
	  self.core = new Core(self);

	  var opts = self._options = (isClient ? arguments[1]: arguments[3]) || {};
	  if('string' === typeof opts)
	    opts = self._options = {
	      protocols: [opts]
	    };
	  else if('array' === typeof opts)
	    opts = self._options = {
	      protocols: opts
	    };

	  var bufSize = opts['bufferSize'];
	  if(!bufSize || bufSize <= 0)
	    opts['bufferSize'] = BUFFER_SIZE;

	  self.on('_data', function(data, fin, opcode) {
	    if(0 !== opcode)
	      self.opcode = opcode, self.buffer = [];
	//    Array.prototype.push.apply(self.buffer, data);
	    self.buffer = self.buffer.concat(data);
	    self.emit('data', new Buffer(data), fin, self.opcode);
	    if(fin) {
	      var buf = new Buffer(self.buffer);
	      var message = 1 === self.opcode ? buf.toString(): buf;
	      self.emit('message', message);
	    }
	  });
	}
	util.inherits(Rfc6455, events.EventEmitter);

	function _option(key) {
	  return this._options[key];
	}

	function Server(parent) {
	  this.parent = parent;
	}
	function Client(parent) {
	  this.parent = parent;
	}

	// ---------------------------------------------------
	// close
	// ---------------------------------------------------
	Server.prototype.close = function(reason) {
	  close.call(this, reason, 0);
	};
	Client.prototype.close = function(reason) {
	  close.call(this, reason, 1);
	};
	Rfc6455.prototype.close = function(reason) {
	  this.core.close(reason);
	};
	function close(reason, maskbit) {
	  var self = this, parent = self.parent;
	  if(!parent.socket) return;
	  var message = ERR_CODE[reason] || (reason + '');
	  _ctrl.call(self, OPCODE['close'], maskbit, message);

	  parent.close = function() {
	    var socket = parent.socket;
	    socket.writable && socket.end();
	    socket.destroy();
	  };
	}

	//---------------------------------------------------
	//ping
	//---------------------------------------------------
	Server.prototype.ping = function(mess) {
	  ping.call(this, mess, 0);
	};
	Client.prototype.ping = function(mess) {
	  ping.call(this, mess, 1);
	};
	Rfc6455.prototype.ping = function(mess) {
	  this.core.ping(mess);
	};
	function ping(mess, maskbit) {
	  var self = this, parent = self.parent;
	  _ctrl.call(self, OPCODE['ping'], maskbit, mess);
	}


	// ---------------------------------------------------
	// Control Frames
	// ---------------------------------------------------
	function _ctrl(opcode, maskbit, data) {
	  var parent = this.parent, buf = new Buffer(data);
	  if(125 < buf.length)
	    buf = buf.slice(0, 124);

	  var fin = 1;
	  var ext = [0x00, 0x00, 0x00];

	  parent.socket.write(frame(fin, ext, opcode, maskbit, buf));

	}

	// ---------------------------------------------------
	// write
	// ---------------------------------------------------
	Server.prototype.write = function(massage) {
	  write.call(this, massage, 0);
	};
	Client.prototype.write = function(massage) {
	  write.call(this, massage, 1);
	};
	Rfc6455.prototype.write = function(massage) {
	  this.core.write(massage);
	};
	function write(message, maskbit) {
	  var parent = this.parent, socket = parent.socket;

	  var buf = new Buffer(message), len = buf.length;

	  var i, data = [], size = parent._options['bufferSize'];
	  for(i = 0; i < len; i += size)
	    data.push(buf.slice(i, Math.min(buf.length, i + size)));

	  var fin = 0;
	  var ext = [0, 0, 0];
	  var opcode = OPCODE[typeof message] || OPCODE['binary'];
	  var mask = maskbit;

	  i = 0, len = data.length;

	  for(; i < len - 1; i++, opcode = 0)
	    socket.write(frame(fin, ext, opcode, mask, data[i]));

	  fin = 1;
	  socket.write(frame(fin, ext, opcode, mask, data[i]));

	}

	// ---------------------------------------------------
	// pong
	// ---------------------------------------------------
	Rfc6455.prototype.pong = Rfc6455.prototype.write;

	// ---------------------------------------------------
	// parse
	// ---------------------------------------------------
	Server.prototype.parse = function(data) {
	  parse.call(this, data, 1);
	};
	Client.prototype.parse = function(data) {
	  parse.call(this, data, 0);
	};
	Rfc6455.prototype.parse = function(data) {
	  this.core.parse(data);
	};
	function parse(data, maskbit) {
	  var self = this, parent = self.parent, i = 0;

	  var OP_FUNC = {
	    _def: function(payload, fin, opcode) {
	      parent.emit('_data', payload, fin, opcode);
	    },
	    0x00: function(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 0);
	    },
	    0x01: function string(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 1);
	    },
	    0x02: function binary(payload, fin) {
	      OP_FUNC['_def'](payload, fin, 2);
	    },
	    0x08: function close() {
	      parent.emit('_closing', 1000);
	    },
	    0x09: function ping(payload) {
	      parent.pong(payload); // TODO
	    },
	    0x0A: function pong(payload) {
	      parent.emit('pong', Buffer(payload).toString());
	    }
	  };
	  if(self.buffer instanceof Buffer) {
	    var _data = Buffer(self.buffer.length + data.length);
	    self.buffer.copy(_data);
	    data.copy(_data, self.buffer.length);
	    data = _data;
	    delete self.buffer;
	  }

	  if('undefined' === typeof self.buffer)
	    self.buffer = _parseHead();

	  if(!(self.buffer instanceof Buffer))
	    _parsePayload();

	  function _parseHead() {
	    var length = data.length;
	    if(length < 2)
	      return data;
	    var _byte = data[i++];
	    var fin = _byte >>> 7;
	    var ope = (_byte & 0x0F);

	    _byte = data[i++];
	    var mask = _byte >>> 7;
	    if(maskbit !== mask)
	      return parent.emit('error', 1002);
	    var len = _byte & 0x7F;

	    if(length < 2 + ({"126": 2, "127": 8} || 0)[len] + (maskbit ? 4: 0))
	      return data;
	    
	    if(127 === len)
	      len = ((data[i++] << 24) + (data[i++] << 16) + (data[i++] << 8) + data[i++]) * Math
	          .pow(2, 32) + (data[i++] << 24) + (data[i++] << 16) + (data[i++] << 8) + data[i++];
	    else if(126 === len)
	      len = (data[i++] << 8) + data[i++];

	    var maskkey = maskbit ? [data[i++], data[i++], data[i++], data[i++]]: null;

	    return {
	      fin: fin,
	      ope: ope,
	      length: len,
	      mask: maskkey,
	      payload: []
	    };
	  }

	  function _parsePayload() {
	    var buf = self.buffer, len = data.length;
	    var payload = buf.payload, maskkey = buf.mask, ope = buf.ope, fin = buf.fin;
	    var j = payload.length % 4;
	    for(; buf.length && i < len; j++, buf.length--)
	      payload.push(maskkey ? data[i++] ^ maskkey[j % 4]: data[i++]);

	    if('function' !== typeof OP_FUNC[ope])
	      return parent.emit('error', 1002);

	    try {
	      if(0 === buf.length) {
	        OP_FUNC[ope](payload, !!fin);
	        delete self.buffer;
	      }

	      // TODO test
	      if(i < len)
	        parse.call(self, data.slice(i), maskbit);
	    } catch(e) {
	      /* for debug parse error
	      console.log(Date());
	      console.log(data);
	      console.log('E:length:' + data.length);
	      console.log('E:i:' + i);
	      console.log('E:mask:' + maskbit);
	      */
	      console.error(e);
	      throw e;
	    }

	  }
	}

	// ---------------------------------------------------
	// hand shake
	// ---------------------------------------------------
	Rfc6455.prototype.handShake = function() {
	  var core = this.core;
	  core.handShake.apply(core, arguments);
	};
	Server.prototype.handShake = function(req, socket, upgradeHead) {
	  var parent = this.parent, head = req['headers'];
	  parent.socket = socket;

	  var i, keys = ['host', 'sec-websocket-key', 'upgrade'];
	  for(i = keys.length; i--;)
	    if(!(keys[i] in head))
	      return socket.write(ERR_400);
	  if('websocket' !== head['upgrade'].toLowerCase())
	    return socket.write(ERR_400);
	  if('13' !== head['sec-websocket-version'])
	    return socket.write(ERR_426);
	  if(true !== _isAllowed())
	    return socket.write(ERR_403);

	  // TODO
	  head['sec-websocket-protocol'], head['cookie'];

	  var open = true, close = function() {
	    if(open)
	      open = false, parent.emit('close');
	  };

	  var newkey = _hashAndEncode(head['sec-websocket-key']);
	  socket.write(new Buffer(HANDSHAKE_RESPONSE + newkey + '\r\n\r\n'));
	  process.nextTick(function() {
	    socket.on('close', close);
	    socket.on('end', close);
	    socket.on('data', function(data) {
	      parent.parse(data);
	    });
	    parent.emit('connect', socket);
	  });

	  function _isAllowed() {
	    var validate = parent._options['validateOrigin'];
	    return 'function' === typeof validate ? validate(head): true;
	  }
	};
	Client.prototype.handShake = function(uri) {
	  var parent = this.parent, url = URL.parse(uri);
	  parent.URL = uri;

	  var secure = parent.secure = 'wss:' === url['protocol'];

	  var path = url['pathname'] || '/';
	  path += (url['search'] || '').replace(/#/, '%23');
	  path += (url['hash'] || '');

	  var key = _createKey();

	  var opts = {
	    port: url['port'] || (secure ? 443: 80),
	    host: url['hostname'],
	    path: path,
	    headers: {
	      Connection: 'Upgrade',
	      Upgrade: 'websocket',
	      'Sec-Websocket-Key': key,
	      'Sec-Websocket-Origin': 'node-websockets',
	      'Sec-Websocket-Version': 13
	    }
	  };

	  if(secure) {
	    opts['key'] = parent._options['key'];
	    opts['cert'] = parent._options['cert'];
	    opts['ca'] = parent._options['ca'];
	    opts['rejectUnauthorized'] = parent._options['rejectUnauthorized'];
	  }

	  var prtcl = secure ? https: http, agent;
	  if(prtcl.getAgent) {
	    agent = prtcl.getAgent(opts['host'], opts['port']);
	    opts['agent'] = agent;
	  }
	  var req = prtcl.request(opts);
	  req.end();
	  agent = agent || req;

	  var newkey = _hashAndEncode(key);

	  agent.on('upgrade', function(res, socket, upgradeHead) {
	    parent.socket = socket;

	    socket.on('close', function(had_error) {
	      parent.emit('close', had_error);
	    });

	    socket.on('data', function(data) {
	      parent.parse(data);
	    });

	    // TODO
	    var status = res['statusCode'];
	    if(101 !== status)
	      return parent.emit('_closing', status);

	    var head = res['headers'];
	    if('websocket' !== head['upgrade'] || 'Upgrade' !== head['connection'])
	      return parent.emit('error', new Error('Invalid Response Header'));

	    if(head['sec-websocket-accept'] !== newkey)
	      return parent.emit('error', new Error('Invalid Server Response'));

	    parent.emit('connect', socket);
	  });
	  req.on('error', function(err) {
	    parent.emit('error', err);
	  });

	  function _createKey() {
	    var i, arr = [];
	    for(i = 16; i--;)
	      arr.push(~~(Math.random() * 256));
	    return (new Buffer(arr)).toString('base64');
	  }
	};

	var OPCODE = {
	  string: 0x01,
	  binary: 0x02,
	  close: 0x08,
	  ping: 0x09,
	  pong: 0x0A
	};
	var ERR_CODE = {
	  1000: 'Normal Closure',
	  1001: 'Going Away',
	  1002: 'Protocol error',
	  1003: 'Unsupported Data',
	  1004: 'Frame Too Large',
	  1005: 'No Status Rcvd', // MUST NOT be set in Close control
	  1006: 'Abnormal Closure', // MUST NOT be set in Close control
	  1007: 'Invalid UTF-8'
	};

	var BUFFER_SIZE = 2000000;

	function _hashAndEncode(key) {
	  var newkey = (key + GUID).trim();
	  var shasum = crypto.createHash('sha1');
	  shasum.update(newkey);
	  return shasum.digest('base64');
	}

	function frame(fin, ext, opcode, mask, payload) {
	  var arr = [];
	  var push = Array.prototype.push;
	  push.apply(arr, _1st(fin, ext, opcode));
	  push.apply(arr, _length(mask, payload));
	  arr = arr.concat(_payload(mask, payload));

	  return new Buffer(arr);
	}

	function _1st(fin, ext, opcode) {
	  return [(fin << 7) | (ext[0] << 6) | (ext[1] << 5) | (ext[2] << 4) | opcode];
	}

	function _length(mask, payload) {
	  var length = payload.length, len = length, extlen = [];
	  if(length <= 125)
	    ;
	  else if(length <= 0xFFFF) {
	    len = 126;
	    extlen.push(length >>> 8);
	    extlen.push(length & 0xFF);
	  } else {
	    len = 127;
	    // var zerofill =
	    // '0000000000000000000000000000000000000000000000000000000000000000';
	    var zerofill = '000000000000000000000000000000000000000000000000';
	    var bin = (zerofill + length.toString(2)).slice(-64);
	    extlen.push(parseInt(bin.substr(0, 8), 2));
	    extlen.push(parseInt(bin.substr(8, 8), 2));
	    extlen.push(parseInt(bin.substr(16, 8), 2));
	    extlen.push(parseInt(bin.substr(24, 8), 2));
	    extlen.push(parseInt(bin.substr(32, 8), 2));
	    extlen.push(parseInt(bin.substr(40, 8), 2));
	    extlen.push(parseInt(bin.substr(48, 8), 2));
	    extlen.push(parseInt(bin.substr(56, 8), 2));
	  }
	  extlen.unshift((mask << 7) | len);
	  return extlen;
	}

	function _payload(maskbit, payload) {
	  var i, mask, ret, length;
	  if(maskbit) {
	    mask = makeMask(), ret = mask.slice(-4), length = payload.length;
	    for(i = 0; i < length; i++)
	      ret.push(payload[i] ^ mask[i % 4]);
	  } else
	    ret = Array.prototype.slice.call(payload);

	  return ret;

	  function makeMask() {
	    var i, ret = [];
	    for(i = 4; i--;)
	      ret.push(~~(Math.random() * 256));
	    return ret;
	  }
	}


/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var http = __webpack_require__(326), https = __webpack_require__(550);
	var events = __webpack_require__(374), util = __webpack_require__(325);

	var Socket = __webpack_require__(546);

	module.exports = WebSocketServer;

	var evts = ['request', 'connection', 'close', 'checkContinue', 'upgrade',
	    'clientError'];
	var fncs = ['listen', 'close'];

	function WebSocketServer(options) {
	  var self = this;
	  events.EventEmitter.call(self);

	  var server, opts = 'object' === typeof options ? options: {};

	  if('server' in opts)
	    server = opts['server'], delete opts['server'];

	  else {
	    var prtcl = 'key' in opts && 'cert' in opts ? https: http;
	    server = prtcl.createServer.apply(prtcl, arguments);
	  }

	  evts.forEach(function(evt) {
	    _bubble(evt, server, self);
	  });

	  fncs.forEach(function(fnc) {
	    _wrap(fnc, server, self);
	  });

	  var connections = {};

	  self.on('upgrade', function(req, socket, upgradeHead) {
	    var conn = new Socket(req, socket, upgradeHead, opts);
	    var _socket = conn._socket = socket.soket || socket;
	    var site = _socket.remoteAddress;
	    var port = _socket.remotePort;

	    conn._req = req;
	    
	    conn.on('open', function() {
	      var internal = connections[site] = connections[site] || [];
	      // conn['_id'] = port;
	      internal.push(conn);
	      self.emit('connect', conn);
	      self.emit('handShake', conn);

	    });

	    conn.on('close', function() {
	      var internal = connections[site] || [];
	      var index = internal.indexOf(conn);
	      0 <= index && internal.splice(index, 1);

	      self.emit('release');
	    });

	  });
	}
	util.inherits(WebSocketServer, events.EventEmitter);

	WebSocketServer.prototype.broadcast = function() {
	};

	function _bubble(evt, from, to) {
	  from.on(evt, function() {
	    var args = Array.prototype.slice.call(arguments);
	    args.unshift(evt);
	    events.EventEmitter.prototype.emit.apply(to, args);
	  });
	}

	function _wrap(fnc, from, to) {
	  to[fnc] = function() {
	    return from[fnc].apply(from, arguments);
	  };
	}


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	/***/
	var Server = __webpack_require__(552);
	var Socket = __webpack_require__(546);

	exports.Server = Server;
	exports.WebSocket = Socket;

	exports.createServer = (function() {
	  function S(args) {
	    return Server.apply(this, args);
	  }
	  S.prototype = Server.prototype;
	  
	  return function() {
	    var args = arguments;
	    return new S(args);
	  };
	})();


/***/ },
/* 554 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	// turns chunk to a string if possible

	exports.default = function (chunk) {
	  if (typeof chunk != "string") {
	    var buf = new Buffer([].concat(_toConsumableArray(chunk)));
	    var str = String(buf);
	    if (Buffer.compare(buf, new Buffer(str)) == 0) return str;
	  }
	  return chunk;
	};

	{
	  if (exports.default != null && (_typeof(exports.default) === "object" || typeof exports.default === "function") && !("default" in exports.default)) Object.defineProperties(exports.default, {
	    __esModule: {
	      value: true
	    },
	    default: {
	      value: exports.default
	    }
	  });
	  module.exports = exports.default;
	}

/***/ }
/******/ ]);